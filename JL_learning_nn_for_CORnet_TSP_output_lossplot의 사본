{"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":20888,"status":"ok","timestamp":1686585907409,"user":{"displayName":"Jaehyuk Lim","userId":"09050886684299321629"},"user_tz":240},"id":"K4RlNFe54dHr","outputId":"ff139bd8-1500-4208-a639-c7b6d9f48188"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["import os\n","import torch\n","import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import matplotlib\n","\n","import torch\n","import torch.nn as nn\n","import torch.nn.functional as F\n","import torch.optim as optim\n","from torch.utils.data import DataLoader, TensorDataset, Dataset\n","\n","from google.colab.data_table import DataTable\n","DataTable.max_columns = 200\n","\n","from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","execution_count":2,"metadata":{"id":"DHwPywx_5hzy","executionInfo":{"status":"ok","timestamp":1686325269191,"user_tz":240,"elapsed":234,"user":{"displayName":"Jaehyuk Lim","userId":"09050886684299321629"}}},"outputs":[],"source":["## TSP\n","## torch.sparse \n","\n","class TSP(nn.Module):\n","  def __init__(self, input_size, hidden_size, output_size, sparsity):\n","      super(TSP, self).__init__()\n","      \n","      self.sc1 = nn.Linear(input_size, hidden_size)  # first sparse hidden layer with 100 neurons\n","      self.sc2 = nn.Linear(hidden_size, output_size)  # second (output) sparse layer with 1 neuron for binary classification\n","\n","      #normally distribute the weights at init\n","      torch.nn.init.normal_(self.sc1.weight, mean=0, std=0.001)\n","      torch.nn.init.normal_(self.sc2.weight, mean=0, std=0.001)\n","\n","      #initial weight for reference and debugging\n","      self.init_weight1 = self.sc1.weight.clone().detach()\n","      self.init_weight2 = self.sc2.weight.clone().detach()\n","\n","\n","      # create a mask with the same shape as the weight matrix\n","      self.mask1 = (torch.rand(input_size, hidden_size) > sparsity).float()\n","      self.mask2 = (torch.rand(hidden_size, output_size) > sparsity).float()\n","\n","      # apply the mask to the weights\n","      # print(\"sc1 weight dimension\", self.sc1.weight.data.size())\n","      # print(\"sc2 weight dimension\", self.sc2.weight.data.size())\n","      # print(\"mask1 dimension\", self.mask1.T.size())\n","      # print(\"mask2 dimension\", self.mask2.T.size())\n","\n","      self.sc1.weight.data.mul_(self.mask1.T) #transpose to match dimensions\n","      self.sc2.weight.data.mul_(self.mask2.T)\n","\n","      # self.sc1.weight = self.sc1.weight.T\n","      # self.sc2.weight = self.sc2.weight.T\n","\n","      print(\"sc1 weights: \", self.sc1.weight.size())\n","      print(\"sc2 weights: \", self.sc2.weight.size())\n","\n","      #for reference\n","      self.pruned_w1 = self.sc1.weight.clone().detach()  \n","      self.pruned_w2 = self.sc2.weight.clone().detach()\n","\n","      self.hist_pruned_w1 = self.pruned_w1.cpu().detach().numpy()\n","      self.hist_pruned_w2 = self.pruned_w2.cpu().detach().numpy()\n","\n","\n","      # plt.hist(self.hist_pruned_w1, bins=4)\n","      # plt.show()\n","\n","      #plt.hist(hist_w2, bins= 10)\n","      #plt.show()\n","\n","  def forward(self, x):\n","      x = F.relu(self.sc1(x))\n","      x = self.sc2(x)\n","      return x\n","\n","  def predict_hidden(self, x):\n","      # print(f\"Input shape: {x.shape}\")\n","      # print(f\"Weight shape: {self.sc1.weight.shape}\")\n","      x = torch.relu(self.sc1(x))\n","      return x\n","\n","class MyDataset(Dataset):\n","    def __init__(self, npy_path, labels, exp_num):\n","        #convert npy to pandas dataframe\n","        data_array = np.load(npy_path, allow_pickle= False)\n","        df = pd.DataFrame(data_array)\n","        \n","        #concatenate rows \n","        df = pd.concat([df, df], ignore_index = True)\n","        # print(\"double: \", df.shape)\n","\n","        if(exp_num == 1) or (exp_num == 2):\n","          size = 16\n","          df_rmv_proto =  df[~(df.index % 5 == 0)]\n","        else:\n","          size = 64\n","          df_rmv_proto = df #keep the prototype for probe\n","\n","        # display(\"shape after prototype removal: \", df_rmv_proto.shape)\n","        #print(\"df after prototype removal: \", df_rmv_proto)\n","\n","        #add screen context\n","        screen_context = []\n","        for i in range(100):\n","            if i < 50:\n","                screen_context.append(np.concatenate((np.ones(size), np.zeros(size))))\n","            else:\n","                screen_context.append(np.concatenate((np.zeros(size), np.ones(size))))\n","                \n","        screen_context_df = pd.DataFrame(data=np.transpose(screen_context))\n","\n","        df_with_screen_context = pd.concat([df_rmv_proto.reset_index(drop=True), screen_context_df], axis=1, ignore_index=True)\n","        # display(df_with_screen_context)\n","\n","        self.data = torch.tensor(df_with_screen_context.values)\n","        self.labels = torch.tensor(labels)\n","        display(f\"Data shape: {self.data.shape}, Labels shape: {self.labels.shape}\")\n","\n","    def __len__(self):\n","        return len(self.data)\n","\n","    def __getitem__(self, idx):\n","        return self.data[idx], self.labels[idx]\n","\n","# class SparseLinear(nn.Module):\n","#   def __init__(self, in_features, out_features, sparse_indices):\n","#     super(SparseLinear, self).__init__()\n","#     self.weight = nn.Parameter(data=torch.sparse.FloatTensor(sparse_indices, torch.randn(sparse_indices.shape[1]), [in_features, out_features]), requires_grad=True)\n","#     self.bias = nn.Parameter(data=torch.randn(out_features), requires_grad=True)"]},{"cell_type":"code","source":["#Sanity Check weight 1\n","\n","#bfr/ aft histogram of weight 1 #2 standard deviations = 95%\n","snc_model = TSP(612, 100, 1, sparsity = 0.5)\n","\n","#count number of 0's before and after pruning\n","\n","num_zeros_bfr = torch.sum(snc_model.init_weight1.eq(0)).item()\n","num_zeros_aft = torch.sum(snc_model.pruned_w1.eq(0)).item()\n","\n","total_zeros = snc_model.init_weight1.size()[0] * snc_model.init_weight1.size()[1]\n","\n","print(\"total number of zeros\", total_zeros)\n","print(\"number of zeros before pruning\", num_zeros_bfr)\n","print(\"number of zeros after pruning\",num_zeros_aft)\n","print(\"percentage of zeros as a result of pruning: \", (num_zeros_aft) / total_zeros)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"haqZHOdOTPT8","executionInfo":{"status":"ok","timestamp":1686247278221,"user_tz":240,"elapsed":154,"user":{"displayName":"Jaehyuk Lim","userId":"09050886684299321629"}},"outputId":"10c6eacd-fc4c-48f3-89e2-10a78c944ed4"},"execution_count":21,"outputs":[{"output_type":"stream","name":"stdout","text":["sc1 weights:  torch.Size([100, 612])\n","sc2 weights:  torch.Size([1, 100])\n","total number of zeros 61200\n","number of zeros before pruning 0\n","number of zeros after pruning 30787\n","percentage of zeros as a result of pruning:  0.5030555555555556\n"]}]},{"cell_type":"code","source":["#Sanity Check weight 2\n","\n","#bfr/ aft histogram of weight 1 #2 standard deviations = 95%\n","#count number of 0's before and after pruning\n","#bfr/ aft histogram of weight 1 #2 standard deviations = 95%\n","\n","snc_model = TSP(612, 100, 1, sparsity = 0.5)\n","\n","#count number of 0's before and after pruning\n","\n","num_zeros_bfr = torch.sum(snc_model.init_weight2.eq(0)).item()\n","num_zeros_aft = torch.sum(snc_model.pruned_w2.eq(0)).item()\n","\n","total_zeros = snc_model.init_weight2.size()[0] * snc_model.init_weight2.size()[1]\n","\n","print(\"total number of zeros\", total_zeros)\n","print(num_zeros_bfr)\n","print(num_zeros_aft)\n","print(\"percentage of zeros as a result of pruning: \", (num_zeros_aft) / total_zeros)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RjchmRNs3zXA","executionInfo":{"status":"ok","timestamp":1686250787145,"user_tz":240,"elapsed":134,"user":{"displayName":"Jaehyuk Lim","userId":"09050886684299321629"}},"outputId":"3efacf96-c189-49fa-cf76-fd2f6fc88de5"},"execution_count":41,"outputs":[{"output_type":"stream","name":"stdout","text":["sc1 weights:  torch.Size([100, 612])\n","sc2 weights:  torch.Size([1, 100])\n","total number of zeros 100\n","0\n","49\n","percentage of zeros as a result of pruning:  0.49\n"]}]},{"cell_type":"code","execution_count":45,"metadata":{"id":"yYO3GiQe7CT6","executionInfo":{"status":"ok","timestamp":1686331467538,"user_tz":240,"elapsed":136,"user":{"displayName":"Jaehyuk Lim","userId":"09050886684299321629"}}},"outputs":[],"source":["## Setting Parameters\n","\n","# Model\n","learning_rate = 0.01 #0.01\n","num_epochs = 1000\n","num_runs = 10\n","\n","# Stats\n","exp1_n = 32\n","exp2_n = 32\n","exp3_n = 128\n","\n","# Training/testing sets\n","phy = '2'\n","\n","if phy == '2':\n","  exp1_dir = '/content/drive/MyDrive/rhesus_category_learning_model/Embeddings/embeddings_CORnet/Phy2_CORnet-S_rotation-15.npy'\n","  exp2_dir = '/content/drive/MyDrive/rhesus_category_learning_model/Embeddings/embeddings_CORnet/Phy2_CORnet-S_rotation45.npy'\n","  exp3_dir = '/content/drive/MyDrive/rhesus_category_learning_model/Embeddings/embeddings_CORnet/Phy2_CORnet-S_probe.npy'\n","elif phy == '3':\n","  exp1_dir = '/content/drive/MyDrive/rhesus_category_learning_model/Embeddings/embeddings_CORnet/Phy3_CORnet-S_rotation-15.npy'\n","  exp2_dir = '/content/drive/MyDrive/rhesus_category_learning_model/Embeddings/embeddings_CORnet/Phy3_CORnet-S_rotation45.npy'\n","  exp3_dir = '/content/drive/MyDrive/rhesus_category_learning_model/Embeddings/embeddings_CORnet/Phy3_CORnet-S_probe.npy'\n","\n","# Output tags\n","dirtag = \"/content/drive/MyDrive/rhesus_category_learning_model/Learning NN/output_plots/cornet_tsp_lr\" + str(learning_rate) + '_phy' + phy + \"/\""]},{"cell_type":"code","execution_count":23,"metadata":{"id":"5aiLoMXbYUK7","colab":{"base_uri":"https://localhost:8080/","height":73},"executionInfo":{"status":"ok","timestamp":1686328241045,"user_tz":240,"elapsed":143,"user":{"displayName":"Jaehyuk Lim","userId":"09050886684299321629"}},"outputId":"61def44e-a018-41f0-bd4d-8385e02b8d78"},"outputs":[{"output_type":"display_data","data":{"text/plain":["'Data shape: torch.Size([32, 612]), Labels shape: torch.Size([32, 1])'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["'Data shape: torch.Size([32, 612]), Labels shape: torch.Size([32, 1])'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["'Data shape: torch.Size([128, 612]), Labels shape: torch.Size([128, 1])'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{}}],"source":["## Setting up dataloaders\n","#16 per context, 2 context; 4 exemplars; \n","labels = np.concatenate([np.repeat(1,4), np.repeat(0,16), np.repeat(1,4), np.repeat(0,8)]).reshape(32,1)\n","#labels = np.repeat(labels, 4196, axis=1)\n","rewarded_labels = np.zeros(32)\n","rewarded_labels[2::4] = 1\n","rewarded_labels = np.concatenate([rewarded_labels, np.zeros(64), rewarded_labels]).reshape(128,1)\n","\n","# create dataset and dataloader\n","dataset = MyDataset(exp1_dir, labels, exp_num=1)\n","dataloader = DataLoader(dataset, batch_size=32, shuffle=False)\n","\n","# create test dataset and dataloader\n","test_dataset = MyDataset(exp2_dir, labels, 2)\n","test_dataloader = DataLoader(test_dataset, batch_size=32, shuffle=False)\n","\n","# create probe dataset and dataloader\n","probe_labels = np.zeros(32)\n","probe_labels[2::4] = 1\n","# print(probe_labels)\n","probe_labels = np.concatenate([probe_labels, np.zeros(64), probe_labels]).reshape(128,1)\n","probe_dataset = MyDataset(exp3_dir, probe_labels, 3)\n","probe_dataloader = DataLoader(probe_dataset, batch_size=128)\n","\n","## Performance masks\n","#for probe, 64 for context \n","#4contexts \n","#all four in 1 context correspond to same creature\n","#methods: prototype vs. exemplar\n","\n","probe_loss_labels = np.tile(np.arange(4), 8) # NE = 0; SOE = 1; SP = 2; Distractor = 3\n","probe_loss_labels = np.concatenate([probe_loss_labels, np.zeros(64),probe_loss_labels]).reshape(128,1)\n","\n","#probe_loss_labels = np.repeat(probe_loss_labels, 4196, axis=1)\n","#print(\"probe_loss_labels\", probe_loss_labels)"]},{"cell_type":"code","execution_count":46,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"9I7G9WznYUSL","executionInfo":{"status":"ok","timestamp":1686332238373,"user_tz":240,"elapsed":703628,"user":{"displayName":"Jaehyuk Lim","userId":"09050886684299321629"}},"outputId":"ab260e9f-8c64-4b8d-9b43-a7f8619915c0"},"outputs":[{"output_type":"stream","name":"stdout","text":["sc1 weights:  torch.Size([100, 612])\n","sc2 weights:  torch.Size([1, 100])\n","first ten digits of weight at init tensor([-0.0003,  0.0022,  0.0003,  0.0005,  0.0000,  0.0009, -0.0020,  0.0000,\n","         0.0009, -0.0007], grad_fn=<SliceBackward0>)\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n"]},{"output_type":"display_data","data":{"text/plain":["'10.0% done'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{}},{"output_type":"stream","name":"stdout","text":["sc1 weights:  torch.Size([100, 612])\n","sc2 weights:  torch.Size([1, 100])\n","first ten digits of weight at init tensor([ 0.0000,  0.0009,  0.0002, -0.0007, -0.0004,  0.0004, -0.0000,  0.0007,\n","        -0.0000, -0.0000], grad_fn=<SliceBackward0>)\n","gradient values before mask reapp. tensor([2.2164e-04, 5.1291e-05, 3.6775e-04, 1.1034e-04, 3.3181e-04, 6.5765e-05,\n","        1.0945e-04, 2.1943e-04, 4.1931e-05, 6.9250e-04])\n","gradient values before mask reapp. tensor([2.1349e-04, 4.9714e-05, 3.5497e-04, 1.0719e-04, 3.1987e-04, 6.3753e-05,\n","        1.0606e-04, 2.1178e-04, 4.0399e-05, 6.6995e-04])\n","gradient values before mask reapp. tensor([2.0468e-04, 4.7927e-05, 3.3956e-04, 1.0280e-04, 3.0406e-04, 6.1827e-05,\n","        1.0280e-04, 2.0113e-04, 3.7330e-05, 6.4416e-04])\n","gradient values before mask reapp. tensor([1.9684e-04, 4.6354e-05, 3.2581e-04, 9.8904e-05, 2.8983e-04, 6.0158e-05,\n","        9.9965e-05, 1.9154e-04, 3.4511e-05, 6.2134e-04])\n","gradient values before mask reapp. tensor([1.8984e-04, 4.4969e-05, 3.1349e-04, 9.5428e-05, 2.7695e-04, 5.8718e-05,\n","        9.7516e-05, 1.8284e-04, 3.1898e-05, 6.0110e-04])\n","gradient values before mask reapp. tensor([1.8358e-04, 4.3749e-05, 3.0239e-04, 9.2320e-05, 2.6522e-04, 5.7483e-05,\n","        9.5409e-05, 1.7492e-04, 2.9453e-05, 5.8314e-04])\n","gradient values before mask reapp. tensor([4.0795e-05, 2.7053e-05, 1.2327e-04, 4.0413e-05, 7.6144e-05, 2.2980e-05,\n","        5.8024e-05, 8.0462e-05, 7.8290e-06, 2.4059e-04])\n","gradient values before mask reapp. tensor([3.6900e-05, 2.6228e-05, 1.1556e-04, 3.8308e-05, 6.7736e-05, 2.2374e-05,\n","        5.6775e-05, 7.4443e-05, 5.7841e-06, 2.2905e-04])\n","gradient values before mask reapp. tensor([3.3055e-05, 2.5427e-05, 1.0799e-04, 3.6244e-05, 5.9431e-05, 2.1788e-05,\n","        5.5575e-05, 6.8516e-05, 3.7570e-06, 2.1775e-04])\n","gradient values before mask reapp. tensor([2.9237e-05, 2.4645e-05, 1.0050e-04, 3.4208e-05, 5.1179e-05, 2.1218e-05,\n","        5.4415e-05, 6.2646e-05, 1.7358e-06, 2.0661e-04])\n","gradient values before mask reapp. tensor([2.9627e-05, 2.4403e-05, 9.9052e-05, 3.3772e-05, 5.1577e-05, 2.0759e-05,\n","        5.3530e-05, 6.2383e-05, 1.6747e-06, 2.0417e-04])\n","gradient values before mask reapp. tensor([ 2.6065e-05,  2.3678e-05,  9.1982e-05,  3.1858e-05,  4.3843e-05,\n","         2.0215e-05,  5.2442e-05,  5.6879e-05, -2.4218e-07,  1.9371e-04])\n","gradient values before mask reapp. tensor([ 2.2471e-05,  2.2958e-05,  8.4872e-05,  2.9938e-05,  3.6033e-05,\n","         1.9676e-05,  5.1373e-05,  5.1338e-05, -2.1837e-06,  1.8323e-04])\n","gradient values before mask reapp. tensor([ 2.2741e-05,  2.2879e-05,  8.5146e-05,  3.0103e-05,  3.8069e-05,\n","         1.9327e-05,  5.0636e-05,  5.2614e-05, -1.6834e-06,  1.8266e-04])\n","gradient values before mask reapp. tensor([ 1.9252e-05,  2.2193e-05,  7.8277e-05,  2.8264e-05,  3.0567e-05,\n","         1.8798e-05,  4.9601e-05,  4.7311e-05, -3.5586e-06,  1.7255e-04])\n","gradient values before mask reapp. tensor([ 2.1344e-05,  2.2694e-05,  8.1756e-05,  2.7914e-05,  3.1808e-05,\n","         2.0279e-05,  4.9491e-05,  4.7118e-05, -4.6970e-06,  1.7649e-04])\n","gradient values before mask reapp. tensor([ 1.8004e-05,  2.2063e-05,  7.5187e-05,  2.6091e-05,  2.4441e-05,\n","         1.9855e-05,  4.8504e-05,  4.1875e-05, -6.6303e-06,  1.6680e-04])\n","gradient values before mask reapp. tensor([ 1.4568e-05,  2.1423e-05,  6.8452e-05,  2.4226e-05,  1.6863e-05,\n","         1.9427e-05,  4.7509e-05,  3.6494e-05, -8.6239e-06,  1.5690e-04])\n","gradient values before mask reapp. tensor([ 1.1028e-05,  2.0772e-05,  6.1530e-05,  2.2313e-05,  9.0537e-06,\n","         1.8993e-05,  4.6503e-05,  3.0959e-05, -1.0683e-05,  1.4675e-04])\n","gradient values before mask reapp. tensor([ 7.3741e-06,  2.0109e-05,  5.4403e-05,  2.0347e-05,  9.9462e-07,\n","         1.8552e-05,  4.5482e-05,  2.5257e-05, -1.2812e-05,  1.3633e-04])\n","gradient values before mask reapp. tensor([ 3.6028e-06,  1.9431e-05,  4.7064e-05,  1.8325e-05, -7.3221e-06,\n","         1.8104e-05,  4.4444e-05,  1.9382e-05, -1.5012e-05,  1.2561e-04])\n","gradient values before mask reapp. tensor([-2.8715e-07,  1.8740e-05,  3.9510e-05,  1.6247e-05, -1.5899e-05,\n","         1.7647e-05,  4.3389e-05,  1.3332e-05, -1.7284e-05,  1.1460e-04])\n","gradient values before mask reapp. tensor([-4.2920e-06,  1.8034e-05,  3.1747e-05,  1.4116e-05, -2.4725e-05,\n","         1.7182e-05,  4.2318e-05,  7.1133e-06, -1.9625e-05,  1.0330e-04])\n","gradient values before mask reapp. tensor([-8.4051e-06,  1.7317e-05,  2.3789e-05,  1.1934e-05, -3.3787e-05,\n","         1.6709e-05,  4.1231e-05,  7.3679e-07, -2.2031e-05,  9.1738e-05])\n","gradient values before mask reapp. tensor([-1.2614e-05,  1.6589e-05,  1.5660e-05,  9.7089e-06, -4.3057e-05,\n","         1.6231e-05,  4.0134e-05, -5.7780e-06, -2.4494e-05,  7.9947e-05])\n","gradient values before mask reapp. tensor([-1.6902e-05,  1.5855e-05,  7.3937e-06,  7.4500e-06, -5.2497e-05,\n","         1.5750e-05,  3.9030e-05, -1.2404e-05, -2.7005e-05,  6.7976e-05])\n","gradient values before mask reapp. tensor([-2.1250e-05,  1.5118e-05, -9.7175e-07,  5.1680e-06, -6.2065e-05,\n","         1.5267e-05,  3.7927e-05, -1.9112e-05, -2.9553e-05,  5.5882e-05])\n","gradient values before mask reapp. tensor([-2.5634e-05,  1.4383e-05, -9.3897e-06,  2.8760e-06, -7.1709e-05,\n","         1.4787e-05,  3.6831e-05, -2.5863e-05, -3.2125e-05,  4.3736e-05])\n","gradient values before mask reapp. tensor([-3.0029e-05,  1.3655e-05, -1.7809e-05,  5.8822e-07, -8.1372e-05,\n","         1.4313e-05,  3.5752e-05, -3.2617e-05, -3.4705e-05,  3.1612e-05])\n","gradient values before mask reapp. tensor([-3.4409e-05,  1.2939e-05, -2.6178e-05, -1.6805e-06, -9.0998e-05,\n","         1.3848e-05,  3.4697e-05, -3.9333e-05, -3.7279e-05,  1.9591e-05])\n","gradient values before mask reapp. tensor([-3.8747e-05,  1.2242e-05, -3.4442e-05, -3.9153e-06, -1.0053e-04,\n","         1.3397e-05,  3.3676e-05, -4.5969e-05, -3.9832e-05,  7.7507e-06])\n","gradient values before mask reapp. tensor([-4.3017e-05,  1.1567e-05, -4.2551e-05, -6.1019e-06, -1.0991e-04,\n","         1.2963e-05,  3.2698e-05, -5.2485e-05, -4.2350e-05, -3.8314e-06])\n","gradient values before mask reapp. tensor([-5.6820e-05,  9.3475e-06, -6.8793e-05, -1.3389e-05, -1.4356e-04,\n","         1.2085e-05,  3.0978e-05, -7.5755e-05, -5.0902e-05, -3.9651e-05])\n","gradient values before mask reapp. tensor([-7.4651e-05,  5.8525e-06, -1.0196e-04, -1.9226e-05, -1.7447e-04,\n","         6.9020e-06,  2.7885e-05, -9.4881e-05, -5.5382e-05, -8.5099e-05])\n","gradient values before mask reapp. tensor([-9.2658e-05,  3.4627e-06, -1.2978e-04, -2.6497e-05, -2.1198e-04,\n","         6.0355e-06,  2.6211e-05, -1.1947e-04, -6.4199e-05, -1.2465e-04])\n","gradient values before mask reapp. tensor([-9.7683e-05,  2.7223e-06, -1.3897e-04, -2.8837e-05, -2.2276e-04,\n","         5.5083e-06,  2.5351e-05, -1.2676e-04, -6.6942e-05, -1.3746e-04])\n","gradient values before mask reapp. tensor([-1.0258e-04,  2.0262e-06, -1.4786e-04, -3.1088e-05, -2.3327e-04,\n","         5.0144e-06,  2.4572e-05, -1.3383e-04, -6.9622e-05, -1.4978e-04])\n","gradient values before mask reapp. tensor([-1.0734e-04,  1.3746e-06, -1.5646e-04, -3.3249e-05, -2.4350e-04,\n","         4.5544e-06,  2.3874e-05, -1.4067e-04, -7.2243e-05, -1.6161e-04])\n","gradient values before mask reapp. tensor([-1.1199e-04,  7.6714e-07, -1.6478e-04, -3.5326e-05, -2.5348e-04,\n","         4.1281e-06,  2.3259e-05, -1.4731e-04, -7.4809e-05, -1.7297e-04])\n","gradient values before mask reapp. tensor([-3.5732e-05,  2.2516e-06, -8.9673e-05, -2.5949e-05, -1.7759e-04,\n","         1.9872e-05,  3.7381e-05, -1.1233e-04, -7.2448e-05, -4.5362e-05])\n","gradient values before mask reapp. tensor([-3.9428e-05,  1.7458e-06, -9.6721e-05, -2.7761e-05, -1.8631e-04,\n","         1.9655e-05,  3.7054e-05, -1.1820e-04, -7.4869e-05, -5.4577e-05])\n","gradient values before mask reapp. tensor([ 3.5163e-06,  1.3921e-05, -2.9251e-05,  5.1991e-06, -1.1434e-04,\n","         3.4477e-05,  5.5340e-05, -8.4086e-05, -6.4008e-05,  1.0270e-04])\n","gradient values before mask reapp. tensor([ 7.2316e-07,  1.3634e-05, -3.4793e-05,  3.9515e-06, -1.2147e-04,\n","         3.4509e-05,  5.5374e-05, -8.9022e-05, -6.6148e-05,  9.6437e-05])\n","gradient values before mask reapp. tensor([-1.8548e-06,  1.3390e-05, -3.9956e-05,  2.8144e-06, -1.2821e-04,\n","         3.4587e-05,  5.5488e-05, -9.3690e-05, -6.8207e-05,  9.0806e-05])\n","gradient values before mask reapp. tensor([-4.2333e-06,  1.3188e-05, -4.4770e-05,  1.7804e-06, -1.3459e-04,\n","         3.4707e-05,  5.5677e-05, -9.8108e-05, -7.0192e-05,  8.5763e-05])\n","gradient values before mask reapp. tensor([-6.4290e-06,  1.3025e-05, -4.9264e-05,  8.4129e-07, -1.4062e-04,\n","         3.4868e-05,  5.5935e-05, -1.0230e-04, -7.2109e-05,  8.1261e-05])\n","gradient values before mask reapp. tensor([-8.4568e-06,  1.2897e-05, -5.3464e-05, -1.0114e-08, -1.4635e-04,\n","         3.5065e-05,  5.6258e-05, -1.0628e-04, -7.3965e-05,  7.7260e-05])\n","gradient values before mask reapp. tensor([-1.0332e-05,  1.2802e-05, -5.7399e-05, -7.8124e-07, -1.5180e-04,\n","         3.5297e-05,  5.6642e-05, -1.1008e-04, -7.5766e-05,  7.3716e-05])\n","gradient values before mask reapp. tensor([-1.2074e-05,  1.2737e-05, -6.1102e-05, -1.4814e-06, -1.5700e-04,\n","         3.5560e-05,  5.7080e-05, -1.1371e-04, -7.7521e-05,  7.0576e-05])\n","gradient values before mask reapp. tensor([-1.3691e-05,  1.2699e-05, -6.4589e-05, -2.1147e-06, -1.6199e-04,\n","         3.5852e-05,  5.7570e-05, -1.1720e-04, -7.9232e-05,  6.7814e-05])\n","gradient values before mask reapp. tensor([-2.5910e-05,  1.0462e-05, -9.8469e-05, -1.0421e-05, -2.0452e-04,\n","         3.5632e-05,  5.6765e-05, -1.3734e-04, -9.0274e-05,  2.1410e-05])\n","gradient values before mask reapp. tensor([-3.8302e-05,  7.1754e-06, -1.2637e-04, -2.4997e-05, -2.4131e-04,\n","         3.4100e-05,  5.4408e-05, -1.7529e-04, -1.0505e-04, -1.7498e-05])\n","gradient values before mask reapp. tensor([-5.0726e-05,  4.0933e-06, -1.5711e-04, -3.0448e-05, -2.8817e-04,\n","         3.4210e-05,  5.0169e-05, -1.9871e-04, -1.2136e-04, -6.0324e-05])\n","gradient values before mask reapp. tensor([-5.2562e-05,  3.9964e-06, -1.6146e-04, -3.1342e-05, -2.9456e-04,\n","         3.4566e-05,  5.0691e-05, -2.0306e-04, -1.2364e-04, -6.4056e-05])\n","gradient values before mask reapp. tensor([-5.4352e-05,  3.9181e-06, -1.6577e-04, -3.2209e-05, -3.0095e-04,\n","         3.4955e-05,  5.1268e-05, -2.0741e-04, -1.2595e-04, -6.7598e-05])\n","gradient values before mask reapp. tensor([-5.6107e-05,  3.8571e-06, -1.7005e-04, -3.3053e-05, -3.0736e-04,\n","         3.5375e-05,  5.1897e-05, -2.1177e-04, -1.2829e-04, -7.0975e-05])\n","gradient values before mask reapp. tensor([-9.0380e-05,  1.2236e-06, -2.3690e-04, -6.4104e-05, -3.9205e-04,\n","         3.3939e-05,  4.0563e-05, -2.6037e-04, -1.5065e-04, -1.8667e-04])\n","gradient values before mask reapp. tensor([-9.2708e-05,  1.1444e-06, -2.4236e-04, -6.5482e-05, -4.0004e-04,\n","         3.4382e-05,  4.1064e-05, -2.6565e-04, -1.5345e-04, -1.9191e-04])\n","gradient values before mask reapp. tensor([ 2.7912e-06,  2.1789e-05, -2.2066e-05, -2.1703e-05, -2.3111e-04,\n","         6.2611e-05,  9.3611e-05, -1.2840e-04, -1.2564e-04,  1.5789e-04])\n","gradient values before mask reapp. tensor([-2.1219e-05,  1.8454e-05, -6.8113e-05, -3.2764e-05, -2.7159e-04,\n","         5.6342e-05,  8.1989e-05, -1.6196e-04, -1.3581e-04,  8.3005e-05])\n","gradient values before mask reapp. tensor([-2.2291e-05,  1.8714e-05, -7.0558e-05, -3.3561e-05, -2.7750e-04,\n","         5.7228e-05,  8.3296e-05, -1.6553e-04, -1.3841e-04,  8.2751e-05])\n","gradient values before mask reapp. tensor([-2.3332e-05,  1.8990e-05, -7.2945e-05, -3.4338e-05, -2.8339e-04,\n","         5.8135e-05,  8.4641e-05, -1.6909e-04, -1.4103e-04,  8.2650e-05])\n","gradient values before mask reapp. tensor([-2.4349e-05,  1.9280e-05, -7.5290e-05, -3.5099e-05, -2.8927e-04,\n","         5.9063e-05,  8.6023e-05, -1.7263e-04, -1.4366e-04,  8.2678e-05])\n","gradient values before mask reapp. tensor([-3.9439e-05,  6.9363e-06, -1.2652e-04, -5.4072e-05, -3.3678e-04,\n","         5.4318e-05,  6.8915e-05, -2.1181e-04, -1.5256e-04, -5.2707e-06])\n","gradient values before mask reapp. tensor([ 6.5880e-05,  1.4273e-05,  2.0246e-05, -4.1143e-05, -2.5568e-04,\n","         6.8315e-05,  7.9702e-05, -1.4586e-04, -1.5293e-04,  1.7563e-04])\n","gradient values before mask reapp. tensor([ 6.6492e-05,  1.4452e-05,  1.9569e-05, -4.2015e-05, -2.6093e-04,\n","         6.9410e-05,  8.0954e-05, -1.4892e-04, -1.5570e-04,  1.7729e-04])\n","gradient values before mask reapp. tensor([ 6.7151e-05,  1.4641e-05,  1.8966e-05, -4.2867e-05, -2.6613e-04,\n","         7.0523e-05,  8.2233e-05, -1.5194e-04, -1.5847e-04,  1.7910e-04])\n","gradient values before mask reapp. tensor([ 6.7838e-05,  1.4838e-05,  1.8397e-05, -4.3710e-05, -2.7133e-04,\n","         7.1649e-05,  8.3532e-05, -1.5495e-04, -1.6125e-04,  1.8100e-04])\n","gradient values before mask reapp. tensor([ 6.8559e-05,  1.5043e-05,  1.7874e-05, -4.4538e-05, -2.7650e-04,\n","         7.2789e-05,  8.4852e-05, -1.5794e-04, -1.6403e-04,  1.8301e-04])\n","gradient values before mask reapp. tensor([ 6.9325e-05,  1.5260e-05,  1.7423e-05, -4.5344e-05, -2.8161e-04,\n","         7.3944e-05,  8.6198e-05, -1.6088e-04, -1.6681e-04,  1.8516e-04])\n","gradient values before mask reapp. tensor([ 7.0113e-05,  1.5482e-05,  1.6998e-05, -4.6140e-05, -2.8671e-04,\n","         7.5111e-05,  8.7562e-05, -1.6380e-04, -1.6959e-04,  1.8738e-04])\n","gradient values before mask reapp. tensor([ 7.0936e-05,  1.5714e-05,  1.6623e-05, -4.6920e-05, -2.9178e-04,\n","         7.6290e-05,  8.8946e-05, -1.6670e-04, -1.7237e-04,  1.8972e-04])\n","gradient values before mask reapp. tensor([ 7.1796e-05,  1.5955e-05,  1.6306e-05, -4.7679e-05, -2.9679e-04,\n","         7.7482e-05,  9.0353e-05, -1.6955e-04, -1.7515e-04,  1.9218e-04])\n","gradient values before mask reapp. tensor([ 7.2687e-05,  1.6205e-05,  1.6035e-05, -4.8420e-05, -3.0177e-04,\n","         7.8686e-05,  9.1779e-05, -1.7237e-04, -1.7792e-04,  1.9474e-04])\n","gradient values before mask reapp. tensor([ 7.3607e-05,  1.6462e-05,  1.5804e-05, -4.9145e-05, -3.0670e-04,\n","         7.9900e-05,  9.3222e-05, -1.7516e-04, -1.8069e-04,  1.9739e-04])\n","gradient values before mask reapp. tensor([ 7.4569e-05,  1.6731e-05,  1.5644e-05, -4.9844e-05, -3.1157e-04,\n","         8.1126e-05,  9.4689e-05, -1.7790e-04, -1.8344e-04,  2.0019e-04])\n","gradient values before mask reapp. tensor([ 7.5558e-05,  1.7007e-05,  1.5524e-05, -5.0523e-05, -3.1639e-04,\n","         8.2361e-05,  9.6172e-05, -1.8059e-04, -1.8618e-04,  2.0308e-04])\n","gradient values before mask reapp. tensor([ 7.6572e-05,  1.7291e-05,  1.5442e-05, -5.1185e-05, -3.2116e-04,\n","         8.3605e-05,  9.7671e-05, -1.8325e-04, -1.8891e-04,  2.0606e-04])\n","gradient values before mask reapp. tensor([ 1.7269e-04,  3.7596e-05,  1.9145e-04, -2.6277e-05, -1.7619e-04,\n","         1.1867e-04,  1.1473e-04, -9.8241e-05, -1.7845e-04,  4.4799e-04])\n","gradient values before mask reapp. tensor([ 7.8715e-05,  1.7889e-05,  1.5471e-05, -5.2423e-05, -3.3047e-04,\n","         8.6119e-05,  1.0073e-04, -1.8839e-04, -1.9432e-04,  2.1239e-04])\n","gradient values before mask reapp. tensor([ 7.9835e-05,  1.8203e-05,  1.5573e-05, -5.3000e-05, -3.3499e-04,\n","         8.7385e-05,  1.0228e-04, -1.9087e-04, -1.9698e-04,  2.1573e-04])\n","gradient values before mask reapp. tensor([ 1.8099e-04,  3.9574e-05,  2.0089e-04, -2.6681e-05, -1.8199e-04,\n","         1.2422e-04,  1.2019e-04, -1.0112e-04, -1.8575e-04,  4.7041e-04])\n","gradient values before mask reapp. tensor([ 8.2184e-05,  1.8859e-05,  1.5973e-05, -5.4057e-05, -3.4374e-04,\n","         8.9935e-05,  1.0542e-04, -1.9560e-04, -2.0221e-04,  2.2279e-04])\n","gradient values before mask reapp. tensor([ 1.8675e-04,  4.0954e-05,  2.0761e-04, -2.6777e-05, -1.8527e-04,\n","         1.2797e-04,  1.2391e-04, -1.0263e-04, -1.9046e-04,  4.8610e-04])\n","gradient values before mask reapp. tensor([ 8.4673e-05,  1.9556e-05,  1.6637e-05, -5.4980e-05, -3.5206e-04,\n","         9.2503e-05,  1.0863e-04, -2.0003e-04, -2.0731e-04,  2.3033e-04])\n","gradient values before mask reapp. tensor([ 8.5975e-05,  1.9920e-05,  1.7083e-05, -5.5382e-05, -3.5603e-04,\n","         9.3792e-05,  1.1025e-04, -2.0210e-04, -2.0979e-04,  2.3431e-04])\n","gradient values before mask reapp. tensor([ 1.9578e-04,  4.3126e-05,  2.1843e-04, -2.6614e-05, -1.8912e-04,\n","         1.3366e-04,  1.2961e-04, -1.0414e-04, -1.9720e-04,  5.1089e-04])\n","gradient values before mask reapp. tensor([ 8.8672e-05,  2.0677e-05,  1.8158e-05, -5.6079e-05, -3.6360e-04,\n","         9.6373e-05,  1.1353e-04, -2.0600e-04, -2.1462e-04,  2.4260e-04])\n","gradient values before mask reapp. tensor([ 2.0205e-04,  4.4641e-05,  2.2614e-04, -2.6281e-05, -1.9089e-04,\n","         1.3748e-04,  1.3349e-04, -1.0461e-04, -2.0145e-04,  5.2823e-04])\n","gradient values before mask reapp. tensor([ 9.1519e-05,  2.1478e-05,  1.9544e-05, -5.6603e-05, -3.7060e-04,\n","         9.8956e-05,  1.1685e-04, -2.0949e-04, -2.1925e-04,  2.5142e-04])\n","gradient values before mask reapp. tensor([ 9.3021e-05,  2.1899e-05,  2.0399e-05, -5.6784e-05, -3.7381e-04,\n","         1.0025e-04,  1.1854e-04, -2.1104e-04, -2.2147e-04,  2.5611e-04])\n","gradient values before mask reapp. tensor([ 2.1182e-04,  4.7014e-05,  2.3846e-04, -2.5417e-05, -1.9225e-04,\n","         1.4324e-04,  1.3940e-04, -1.0441e-04, -2.0737e-04,  5.5551e-04])\n","gradient values before mask reapp. tensor([-6.9671e-05,  1.1423e-05, -2.1112e-04, -7.8875e-05, -5.1646e-04,\n","         8.2369e-05,  1.0678e-04, -3.2306e-04, -2.2949e-04, -1.8073e-05])\n","gradient values before mask reapp. tensor([ 2.1862e-04,  4.8671e-05,  2.4727e-04, -2.4550e-05, -1.9208e-04,\n","         1.4709e-04,  1.4340e-04, -1.0355e-04, -2.1095e-04,  5.7464e-04])\n","gradient values before mask reapp. tensor([ 5.1802e-05,  3.7856e-05,  1.2037e-05, -4.6504e-05, -3.3213e-04,\n","         1.2799e-04,  1.2984e-04, -2.1515e-04, -2.1652e-04,  2.9278e-04])\n","gradient values before mask reapp. tensor([ 2.2551e-04,  5.0362e-05,  2.5633e-04, -2.3501e-05, -1.9126e-04,\n","         1.5090e-04,  1.4740e-04, -1.0225e-04, -2.1426e-04,  5.9415e-04])\n","gradient values before mask reapp. tensor([-7.1880e-05,  1.2699e-05, -2.1867e-04, -7.9828e-05, -5.3325e-04,\n","         8.6352e-05,  1.1282e-04, -3.3280e-04, -2.3725e-04, -1.2072e-05])\n","gradient values before mask reapp. tensor([ 2.3260e-04,  5.2108e-05,  2.6584e-04, -2.2198e-05, -1.8948e-04,\n","         1.5469e-04,  1.5142e-04, -1.0031e-04, -2.1721e-04,  6.1435e-04])\n","gradient values before mask reapp. tensor([ 5.7156e-05,  4.0743e-05,  1.8647e-05, -4.5062e-05, -3.3585e-04,\n","         1.3448e-04,  1.3708e-04, -2.1707e-04, -2.2262e-04,  3.1809e-04])\n","gradient values before mask reapp. tensor([ 5.8625e-05,  4.1498e-05,  2.0596e-05, -4.4540e-05, -3.3617e-04,\n","         1.3608e-04,  1.3889e-04, -2.1714e-04, -2.2391e-04,  3.2485e-04])\n","gradient values before mask reapp. tensor([ 2.4346e-04,  5.4804e-05,  2.8074e-04, -1.9807e-05, -1.8518e-04,\n","         1.6028e-04,  1.5744e-04, -9.6296e-05, -2.2096e-04,  6.4559e-04])\n","gradient values before mask reapp. tensor([ 6.1596e-05,  4.3020e-05,  2.4610e-05, -4.3364e-05, -3.3629e-04,\n","         1.3923e-04,  1.4249e-04, -2.1693e-04, -2.2626e-04,  3.3849e-04])\n","gradient values before mask reapp. tensor([ 6.3172e-05,  4.3802e-05,  2.6826e-05, -4.2664e-05, -3.3591e-04,\n","         1.4078e-04,  1.4429e-04, -2.1653e-04, -2.2726e-04,  3.4560e-04])\n","gradient values before mask reapp. tensor([ 6.4868e-05,  4.4609e-05,  2.9298e-05, -4.1856e-05, -3.3511e-04,\n","         1.4233e-04,  1.4610e-04, -2.1584e-04, -2.2812e-04,  3.5308e-04])\n","gradient values before mask reapp. tensor([ 6.6505e-05,  4.5405e-05,  3.1675e-05, -4.1036e-05, -3.3426e-04,\n","         1.4385e-04,  1.4788e-04, -2.1512e-04, -2.2892e-04,  3.6039e-04])\n","gradient values before mask reapp. tensor([ 6.8213e-05,  4.6217e-05,  3.4212e-05, -4.0134e-05, -3.3309e-04,\n","         1.4535e-04,  1.4965e-04, -2.1419e-04, -2.2959e-04,  3.6792e-04])\n","gradient values before mask reapp. tensor([ 6.9950e-05,  4.7036e-05,  3.6832e-05, -3.9170e-05, -3.3167e-04,\n","         1.4683e-04,  1.5141e-04, -2.1308e-04, -2.3016e-04,  3.7554e-04])\n","gradient values before mask reapp. tensor([ 7.1647e-05,  4.7848e-05,  3.9398e-05, -3.8179e-05, -3.3014e-04,\n","         1.4827e-04,  1.5313e-04, -2.1191e-04, -2.3065e-04,  3.8305e-04])\n","gradient values before mask reapp. tensor([ 7.3524e-05,  4.8696e-05,  4.2344e-05, -3.7041e-05, -3.2804e-04,\n","         1.4971e-04,  1.5489e-04, -2.1034e-04, -2.3094e-04,  3.9111e-04])\n","gradient values before mask reapp. tensor([ 7.5302e-05,  4.9526e-05,  4.5122e-05, -3.5909e-05, -3.2594e-04,\n","         1.5111e-04,  1.5659e-04, -2.0878e-04, -2.3119e-04,  3.9887e-04])\n","gradient values before mask reapp. tensor([ 7.7221e-05,  5.0383e-05,  4.8201e-05, -3.4651e-05, -3.2335e-04,\n","         1.5249e-04,  1.5830e-04, -2.0688e-04, -2.3126e-04,  4.0706e-04])\n","gradient values before mask reapp. tensor([ 7.9096e-05,  5.1232e-05,  5.1221e-05, -3.3367e-05, -3.2064e-04,\n","         1.5384e-04,  1.5997e-04, -2.0491e-04, -2.3125e-04,  4.1511e-04])\n","gradient values before mask reapp. tensor([ 8.1185e-05,  5.2123e-05,  5.4689e-05, -3.1914e-05, -3.1726e-04,\n","         1.5519e-04,  1.6168e-04, -2.0249e-04, -2.3102e-04,  4.2381e-04])\n","gradient values before mask reapp. tensor([ 8.3149e-05,  5.2988e-05,  5.7941e-05, -3.0481e-05, -3.1393e-04,\n","         1.5648e-04,  1.6331e-04, -2.0011e-04, -2.3075e-04,  4.3213e-04])\n","gradient values before mask reapp. tensor([ 8.5026e-05,  5.3836e-05,  6.1051e-05, -2.9043e-05, -3.1058e-04,\n","         1.5772e-04,  1.6489e-04, -1.9771e-04, -2.3040e-04,  4.4018e-04])\n","gradient values before mask reapp. tensor([ 8.7109e-05,  5.4724e-05,  6.4596e-05, -2.7439e-05, -3.0655e-04,\n","         1.5896e-04,  1.6650e-04, -1.9486e-04, -2.2984e-04,  4.4885e-04])\n","gradient values before mask reapp. tensor([ 8.9029e-05,  5.5577e-05,  6.7850e-05, -2.5875e-05, -3.0266e-04,\n","         1.6013e-04,  1.6802e-04, -1.9210e-04, -2.2925e-04,  4.5702e-04])\n","gradient values before mask reapp. tensor([ 9.1053e-05,  5.6450e-05,  7.1336e-05, -2.4202e-05, -2.9832e-04,\n","         1.6128e-04,  1.6955e-04, -1.8905e-04, -2.2849e-04,  4.6549e-04])\n","gradient values before mask reapp. tensor([ 9.3117e-05,  5.7329e-05,  7.4929e-05, -2.2456e-05, -2.9367e-04,\n","         1.6240e-04,  1.7105e-04, -1.8579e-04, -2.2759e-04,  4.7407e-04])\n","gradient values before mask reapp. tensor([ 9.5251e-05,  5.8222e-05,  7.8694e-05, -2.0616e-05, -2.8864e-04,\n","         1.6349e-04,  1.7254e-04, -1.8227e-04, -2.2654e-04,  4.8286e-04])\n","gradient values before mask reapp. tensor([ 9.7266e-05,  5.9087e-05,  8.2254e-05, -1.8794e-05, -2.8364e-04,\n","         1.6453e-04,  1.7395e-04, -1.7878e-04, -2.2544e-04,  4.9128e-04])\n","gradient values before mask reapp. tensor([ 9.9313e-05,  5.9955e-05,  8.5904e-05, -1.6910e-05, -2.7836e-04,\n","         1.6552e-04,  1.7534e-04, -1.7512e-04, -2.2421e-04,  4.9977e-04])\n","gradient values before mask reapp. tensor([ 1.0087e-04,  6.0726e-05,  8.8631e-05, -1.5248e-05, -2.7390e-04,\n","         1.6640e-04,  1.7654e-04, -1.7203e-04, -2.2312e-04,  5.0680e-04])\n","gradient values before mask reapp. tensor([ 1.0233e-04,  6.1474e-05,  9.1198e-05, -1.3590e-05, -2.6944e-04,\n","         1.6723e-04,  1.7767e-04, -1.6895e-04, -2.2196e-04,  5.1352e-04])\n","gradient values before mask reapp. tensor([ 1.0392e-04,  6.2244e-05,  9.4041e-05, -1.1823e-05, -2.6450e-04,\n","         1.6803e-04,  1.7881e-04, -1.6555e-04, -2.2065e-04,  5.2061e-04])\n","gradient values before mask reapp. tensor([ 1.0496e-04,  6.2907e-05,  9.5861e-05, -1.0306e-05, -2.6050e-04,\n","         1.6871e-04,  1.7974e-04, -1.6280e-04, -2.1949e-04,  5.2606e-04])\n","gradient values before mask reapp. tensor([ 1.0631e-04,  6.3621e-05,  9.8282e-05, -8.6096e-06, -2.5570e-04,\n","         1.6941e-04,  1.8074e-04, -1.5955e-04, -2.1810e-04,  5.3239e-04])\n","gradient values before mask reapp. tensor([ 1.0605e-04,  6.4018e-05,  9.7591e-05, -7.7438e-06, -2.5411e-04,\n","         1.6980e-04,  1.8119e-04, -1.5847e-04, -2.1741e-04,  5.3385e-04])\n","gradient values before mask reapp. tensor([ 1.0713e-04,  6.4675e-05,  9.9539e-05, -6.1151e-06, -2.4953e-04,\n","         1.7039e-04,  1.8205e-04, -1.5541e-04, -2.1599e-04,  5.3938e-04])\n","gradient values before mask reapp. tensor([ 1.0676e-04,  6.5042e-05,  9.8665e-05, -5.2501e-06, -2.4787e-04,\n","         1.7070e-04,  1.8241e-04, -1.5432e-04, -2.1521e-04,  5.4048e-04])\n","gradient values before mask reapp. tensor([ 1.0599e-04,  6.5330e-05,  9.7047e-05, -4.5707e-06, -2.4690e-04,\n","         1.7091e-04,  1.8262e-04, -1.5371e-04, -2.1455e-04,  5.4040e-04])\n","gradient values before mask reapp. tensor([ 1.0597e-04,  6.5754e-05,  9.6889e-05, -3.5167e-06, -2.4427e-04,\n","         1.7123e-04,  1.8306e-04, -1.5212e-04, -2.1351e-04,  5.4258e-04])\n","gradient values before mask reapp. tensor([ 1.0346e-04,  6.5685e-05,  9.1889e-05, -3.8044e-06, -2.4681e-04,\n","         1.7111e-04,  1.8267e-04, -1.5404e-04, -2.1366e-04,  5.3723e-04])\n","gradient values before mask reapp. tensor([ 1.0052e-04,  6.5526e-05,  8.6036e-05, -4.3548e-06, -2.5026e-04,\n","         1.7090e-04,  1.8215e-04, -1.5665e-04, -2.1403e-04,  5.3058e-04])\n","gradient values before mask reapp. tensor([ 9.4660e-05,  6.4795e-05,  7.4515e-05, -6.4986e-06, -2.5978e-04,\n","         1.7018e-04,  1.8067e-04, -1.6340e-04, -2.1580e-04,  5.1512e-04])\n","gradient values before mask reapp. tensor([ 9.0898e-05,  6.4467e-05,  6.7057e-05, -7.5523e-06, -2.6497e-04,\n","         1.6983e-04,  1.7989e-04, -1.6733e-04, -2.1661e-04,  5.0602e-04])\n","gradient values before mask reapp. tensor([ 8.6534e-05,  6.4018e-05,  5.8433e-05, -8.9298e-06, -2.7146e-04,\n","         1.6939e-04,  1.7893e-04, -1.7219e-04, -2.1775e-04,  4.9518e-04])\n","gradient values before mask reapp. tensor([ 8.1750e-05,  6.3496e-05,  4.9019e-05, -1.0504e-05, -2.7877e-04,\n","         1.6888e-04,  1.7785e-04, -1.7758e-04, -2.1906e-04,  4.8313e-04])\n","gradient values before mask reapp. tensor([ 7.4183e-05,  6.2438e-05,  3.4211e-05, -1.3517e-05, -2.9184e-04,\n","         1.6788e-04,  1.7584e-04, -1.8674e-04, -2.2166e-04,  4.6270e-04])\n","gradient values before mask reapp. tensor([ 7.0228e-05,  6.2085e-05,  2.6447e-05, -1.4627e-05, -2.9750e-04,\n","         1.6755e-04,  1.7509e-04, -1.9108e-04, -2.2263e-04,  4.5337e-04])\n","gradient values before mask reapp. tensor([ 6.3568e-05,  6.1210e-05,  1.3426e-05, -1.7140e-05, -3.0872e-04,\n","         1.6673e-04,  1.7341e-04, -1.9903e-04, -2.2483e-04,  4.3581e-04])\n","gradient values before mask reapp. tensor([ 5.7237e-05,  6.0401e-05,  1.0485e-06, -1.9490e-05, -3.1936e-04,\n","         1.6601e-04,  1.7189e-04, -2.0664e-04, -2.2694e-04,  4.1935e-04])\n","gradient values before mask reapp. tensor([ 5.2564e-05,  5.9917e-05, -8.0501e-06, -2.0980e-05, -3.2666e-04,\n","         1.6561e-04,  1.7099e-04, -2.1217e-04, -2.2838e-04,  4.0816e-04])\n","gradient values before mask reapp. tensor([ 4.4777e-05,  5.8834e-05, -2.3242e-05, -2.4107e-05, -3.4033e-04,\n","         1.6464e-04,  1.6900e-04, -2.2179e-04, -2.3118e-04,  3.8733e-04])\n","gradient values before mask reapp. tensor([ 3.8341e-05,  5.8009e-05, -3.5840e-05, -2.6566e-05, -3.5138e-04,\n","         1.6394e-04,  1.6750e-04, -2.2977e-04, -2.3346e-04,  3.7068e-04])\n","gradient values before mask reapp. tensor([ 3.3417e-05,  5.7481e-05, -4.5464e-05, -2.8233e-05, -3.5940e-04,\n","         1.6355e-04,  1.6657e-04, -2.3581e-04, -2.3511e-04,  3.5878e-04])\n","gradient values before mask reapp. tensor([ 2.9275e-05,  5.7109e-05, -5.3537e-05, -2.9483e-05, -3.6585e-04,\n","         1.6332e-04,  1.6594e-04, -2.4087e-04, -2.3645e-04,  3.4940e-04])\n","gradient values before mask reapp. tensor([ 2.3612e-05,  5.6446e-05, -6.4597e-05, -3.1525e-05, -3.7538e-04,\n","         1.6280e-04,  1.6476e-04, -2.4789e-04, -2.3843e-04,  3.3527e-04])\n","gradient values before mask reapp. tensor([ 2.0137e-05,  5.6219e-05, -7.1286e-05, -3.2392e-05, -3.8054e-04,\n","         1.6274e-04,  1.6443e-04, -2.5212e-04, -2.3952e-04,  3.2820e-04])\n","gradient values before mask reapp. tensor([ 1.3730e-05,  5.5415e-05, -8.3822e-05, -3.4828e-05, -3.9162e-04,\n","         1.6210e-04,  1.6300e-04, -2.6012e-04, -2.4184e-04,  3.1178e-04])\n","gradient values before mask reapp. tensor([ 1.0499e-05,  5.5242e-05, -9.0025e-05, -3.5568e-05, -3.9634e-04,\n","         1.6211e-04,  1.6279e-04, -2.6409e-04, -2.4287e-04,  3.0555e-04])\n","gradient values before mask reapp. tensor([ 5.7473e-06,  5.4770e-05, -9.9276e-05, -3.7123e-05, -4.0415e-04,\n","         1.6182e-04,  1.6201e-04, -2.7000e-04, -2.4454e-04,  2.9445e-04])\n","gradient values before mask reapp. tensor([ 2.3245e-06,  5.4564e-05, -1.0587e-04, -3.7962e-05, -4.0932e-04,\n","         1.6182e-04,  1.6175e-04, -2.7424e-04, -2.4567e-04,  2.8765e-04])\n","gradient values before mask reapp. tensor([-2.2019e-06,  5.4143e-05, -1.1467e-04, -3.9387e-05, -4.1672e-04,\n","         1.6160e-04,  1.6107e-04, -2.7988e-04, -2.4726e-04,  2.7732e-04])\n","gradient values before mask reapp. tensor([ 2.4798e-04,  7.1340e-05,  2.3602e-04, -6.6677e-06, -2.1255e-04,\n","         1.9294e-04,  1.8409e-04, -1.1688e-04, -2.4255e-04,  7.0530e-04])\n","gradient values before mask reapp. tensor([-8.3914e-06,  5.3885e-05, -1.2646e-04, -4.0689e-05, -4.2586e-04,\n","         1.6180e-04,  1.6089e-04, -2.8760e-04, -2.4932e-04,  2.6613e-04])\n","gradient values before mask reapp. tensor([-1.0239e-05,  5.4007e-05, -1.2983e-04, -4.0664e-05, -4.2792e-04,\n","         1.6217e-04,  1.6130e-04, -2.8988e-04, -2.4983e-04,  2.6460e-04])\n","gradient values before mask reapp. tensor([ 2.4600e-04,  7.1902e-05,  2.3070e-04, -6.2675e-06, -2.1621e-04,\n","         1.9444e-04,  1.8553e-04, -1.2159e-04, -2.4416e-04,  7.0628e-04])\n","gradient values before mask reapp. tensor([-1.1137e-05,  5.4810e-05, -1.3095e-04, -3.9081e-05, -4.2635e-04,\n","         1.6347e-04,  1.6321e-04, -2.9084e-04, -2.4968e-04,  2.7063e-04])\n","gradient values before mask reapp. tensor([ 2.4941e-04,  7.3165e-05,  2.3644e-04, -3.5708e-06, -2.0946e-04,\n","         1.9637e-04,  1.8820e-04, -1.1886e-04, -2.4335e-04,  7.2164e-04])\n","gradient values before mask reapp. tensor([-1.0259e-05,  5.5961e-05, -1.2845e-04, -3.6497e-05, -4.2098e-04,\n","         1.6511e-04,  1.6577e-04, -2.8942e-04, -2.4868e-04,  2.8241e-04])\n","gradient values before mask reapp. tensor([-9.3324e-06,  5.6631e-05, -1.2621e-04, -3.4922e-05, -4.1722e-04,\n","         1.6601e-04,  1.6723e-04, -2.8805e-04, -2.4794e-04,  2.8989e-04])\n","gradient values before mask reapp. tensor([ 2.5677e-04,  7.5477e-05,  2.4955e-04,  1.7154e-06, -1.9454e-04,\n","         1.9964e-04,  1.9297e-04, -1.1179e-04, -2.4105e-04,  7.5178e-04])\n","gradient values before mask reapp. tensor([-7.1347e-06,  5.8033e-05, -1.2100e-04, -3.1547e-05, -4.0884e-04,\n","         1.6785e-04,  1.7026e-04, -2.8479e-04, -2.4622e-04,  3.0600e-04])\n","gradient values before mask reapp. tensor([ 2.6220e-04,  7.7109e-05,  2.5940e-04,  5.5874e-06, -1.8322e-04,\n","         2.0186e-04,  1.9631e-04, -1.0627e-04, -2.3915e-04,  7.7359e-04])\n","gradient values before mask reapp. tensor([-4.6756e-06,  5.9478e-05, -1.1521e-04, -2.7978e-05, -3.9966e-04,\n","         1.6971e-04,  1.7336e-04, -2.8108e-04, -2.4426e-04,  3.2298e-04])\n","gradient values before mask reapp. tensor([-3.3474e-06,  6.0215e-05, -1.1210e-04, -2.6121e-05, -3.9476e-04,\n","         1.7063e-04,  1.7492e-04, -2.7904e-04, -2.4319e-04,  3.3178e-04])\n","gradient values before mask reapp. tensor([-1.9007e-06,  6.0973e-05, -1.0874e-04, -2.4189e-05, -3.8957e-04,\n","         1.7157e-04,  1.7652e-04, -2.7683e-04, -2.4204e-04,  3.4096e-04])\n","gradient values before mask reapp. tensor([ 2.7397e-04,  8.0528e-05,  2.8110e-04,  1.3990e-05, -1.5792e-04,\n","         2.0637e-04,  2.0322e-04, -9.3685e-05, -2.3457e-04,  8.2025e-04])\n","gradient values before mask reapp. tensor([ 9.6315e-07,  6.2474e-05, -1.0206e-04, -2.0310e-05, -3.7906e-04,\n","         1.7341e-04,  1.7968e-04, -2.7236e-04, -2.3966e-04,  3.5923e-04])\n","gradient values before mask reapp. tensor([ 2.4968e-06,  6.3240e-05, -9.8506e-05, -1.8298e-05, -3.7351e-04,\n","         1.7433e-04,  1.8128e-04, -2.6995e-04, -2.3838e-04,  3.6869e-04])\n","gradient values before mask reapp. tensor([ 2.8295e-04,  8.3100e-05,  2.9783e-04,  2.0519e-05, -1.3788e-04,\n","         2.0965e-04,  2.0837e-04, -8.3700e-05, -2.3072e-04,  8.5584e-04])\n","gradient values before mask reapp. tensor([ 5.4763e-06,  6.4743e-05, -9.1542e-05, -1.4297e-05, -3.6241e-04,\n","         1.7611e-04,  1.8442e-04, -2.6518e-04, -2.3578e-04,  3.8731e-04])\n","gradient values before mask reapp. tensor([ 7.0241e-06,  6.5501e-05, -8.7931e-05, -1.2254e-05, -3.5666e-04,\n","         1.7700e-04,  1.8599e-04, -2.6268e-04, -2.3442e-04,  3.9680e-04])\n","gradient values before mask reapp. tensor([ 8.6360e-06,  6.6268e-05, -8.4192e-05, -1.0166e-05, -3.5073e-04,\n","         1.7788e-04,  1.8757e-04, -2.6007e-04, -2.3299e-04,  4.0647e-04])\n","gradient values before mask reapp. tensor([ 1.0057e-05,  6.6994e-05, -8.0822e-05, -8.1743e-06, -3.4512e-04,\n","         1.7872e-04,  1.8907e-04, -2.5768e-04, -2.3162e-04,  4.1552e-04])\n","gradient values before mask reapp. tensor([ 2.9829e-04,  8.7407e-05,  3.2667e-04,  3.1825e-05, -1.0248e-04,\n","         2.1497e-04,  2.1689e-04, -6.6005e-05, -2.2353e-04,  9.1638e-04])\n","gradient values before mask reapp. tensor([ 1.3257e-05,  6.8505e-05, -7.3352e-05, -3.9806e-06, -3.3306e-04,\n","         1.8043e-04,  1.9217e-04, -2.5239e-04, -2.2866e-04,  4.3476e-04])\n","gradient values before mask reapp. tensor([ 1.4959e-05,  6.9276e-05, -6.9410e-05, -1.8171e-06, -3.2674e-04,\n","         1.8129e-04,  1.9374e-04, -2.4957e-04, -2.2709e-04,  4.4467e-04])\n","gradient values before mask reapp. tensor([ 1.6656e-05,  7.0042e-05, -6.5466e-05,  3.4784e-07, -3.2038e-04,\n","         1.8214e-04,  1.9529e-04, -2.4674e-04, -2.2550e-04,  4.5456e-04])\n","gradient values before mask reapp. tensor([ 1.8267e-05,  7.0786e-05, -6.1698e-05,  2.4730e-06, -3.1416e-04,\n","         1.8296e-04,  1.9680e-04, -2.4399e-04, -2.2393e-04,  4.6415e-04])\n","gradient values before mask reapp. tensor([ 1.9854e-05,  7.1522e-05, -5.7975e-05,  4.5898e-06, -3.0792e-04,\n","         1.8376e-04,  1.9828e-04, -2.4124e-04, -2.2233e-04,  4.7364e-04])\n","gradient values before mask reapp. tensor([ 2.1693e-05,  7.2304e-05, -5.3750e-05,  6.8447e-06, -3.0116e-04,\n","         1.8460e-04,  1.9985e-04, -2.3817e-04, -2.2061e-04,  4.8392e-04])\n","gradient values before mask reapp. tensor([ 3.1993e-04,  9.3351e-05,  3.6775e-04,  4.8130e-05, -5.0140e-05,\n","         2.2199e-04,  2.2845e-04, -3.9850e-05, -2.1218e-04,  1.0015e-03])\n","gradient values before mask reapp. tensor([ 2.4733e-05,  7.3728e-05, -4.6571e-05,  1.1019e-05, -2.8879e-04,\n","         1.8612e-04,  2.0271e-04, -2.3278e-04, -2.1738e-04,  5.0237e-04])\n","gradient values before mask reapp. tensor([ 2.5805e-05,  7.4344e-05, -4.3893e-05,  1.2866e-05, -2.8345e-04,\n","         1.8677e-04,  2.0394e-04, -2.3062e-04, -2.1592e-04,  5.1007e-04])\n","gradient values before mask reapp. tensor([ 2.7095e-05,  7.4999e-05, -4.0784e-05,  1.4833e-05, -2.7764e-04,\n","         1.8745e-04,  2.0523e-04, -2.2816e-04, -2.1434e-04,  5.1845e-04])\n","gradient values before mask reapp. tensor([ 2.8689e-05,  7.5712e-05, -3.7065e-05,  1.6966e-05, -2.7119e-04,\n","         1.8819e-04,  2.0664e-04, -2.2528e-04, -2.1262e-04,  5.2778e-04])\n","gradient values before mask reapp. tensor([ 2.9889e-05,  7.6339e-05, -3.4153e-05,  1.8880e-05, -2.6551e-04,\n","         1.8883e-04,  2.0786e-04, -2.2291e-04, -2.1105e-04,  5.3579e-04])\n","gradient values before mask reapp. tensor([ 3.1509e-05,  7.7050e-05, -3.0404e-05,  2.1034e-05, -2.5889e-04,\n","         1.8954e-04,  2.0923e-04, -2.1991e-04, -2.0925e-04,  5.4509e-04])\n","gradient values before mask reapp. tensor([ 3.3408e-05,  7.7810e-05, -2.6107e-05,  2.3320e-05, -2.5180e-04,\n","         1.9032e-04,  2.1072e-04, -2.1662e-04, -2.0737e-04,  5.5529e-04])\n","gradient values before mask reapp. tensor([ 3.3344e-05,  7.8174e-05, -2.5750e-05,  2.4558e-05, -2.4853e-04,\n","         1.9067e-04,  2.1140e-04, -2.1576e-04, -2.0625e-04,  5.5909e-04])\n","gradient values before mask reapp. tensor([ 3.4569e-05,  7.8790e-05, -2.2809e-05,  2.6477e-05, -2.4271e-04,\n","         1.9128e-04,  2.1258e-04, -2.1329e-04, -2.0460e-04,  5.6703e-04])\n","gradient values before mask reapp. tensor([ 3.6696e-05,  7.9581e-05, -1.8098e-05,  2.8872e-05, -2.3512e-04,\n","         1.9208e-04,  2.1411e-04, -2.0969e-04, -2.0260e-04,  5.7782e-04])\n","gradient values before mask reapp. tensor([ 3.6864e-05,  7.9976e-05, -1.7326e-05,  3.0215e-05, -2.3138e-04,\n","         1.9245e-04,  2.1484e-04, -2.0852e-04, -2.0136e-04,  5.8221e-04])\n","gradient values before mask reapp. tensor([ 3.9461e-05,  8.0856e-05, -1.1716e-05,  3.2867e-05, -2.2279e-04,\n","         1.9332e-04,  2.1651e-04, -2.0420e-04, -1.9910e-04,  5.9437e-04])\n","gradient values before mask reapp. tensor([ 3.9540e-05,  8.1224e-05, -1.1167e-05,  3.4147e-05, -2.1924e-04,\n","         1.9366e-04,  2.1719e-04, -2.0314e-04, -1.9789e-04,  5.9836e-04])\n","gradient values before mask reapp. tensor([ 3.8939e-05,  8.1452e-05, -1.1993e-05,  3.5055e-05, -2.1702e-04,\n","         1.9385e-04,  2.1757e-04, -2.0291e-04, -1.9694e-04,  6.0010e-04])\n","gradient values before mask reapp. tensor([ 3.9546e-05,  8.1919e-05, -1.0417e-05,  3.6604e-05, -2.1240e-04,\n","         1.9428e-04,  2.1840e-04, -2.0113e-04, -1.9548e-04,  6.0567e-04])\n","gradient values before mask reapp. tensor([ 4.0354e-05,  8.2422e-05, -8.4923e-06,  3.8250e-05, -2.0737e-04,\n","         1.9475e-04,  2.1930e-04, -1.9905e-04, -1.9393e-04,  6.1176e-04])\n","gradient values before mask reapp. tensor([ 4.1729e-05,  8.3034e-05, -5.4504e-06,  4.0187e-05, -2.0133e-04,\n","         1.9534e-04,  2.2043e-04, -1.9632e-04, -1.9219e-04,  6.1968e-04])\n","gradient values before mask reapp. tensor([ 4.1474e-05,  8.3315e-05, -5.6687e-06,  4.1246e-05, -1.9845e-04,\n","         1.9558e-04,  2.2089e-04, -1.9562e-04, -1.9108e-04,  6.2229e-04])\n","gradient values before mask reapp. tensor([ 4.4195e-05,  8.4189e-05, -1.5479e-08,  4.3873e-05, -1.8982e-04,\n","         1.9645e-04,  2.2254e-04, -1.9117e-04, -1.8881e-04,  6.3438e-04])\n","gradient values before mask reapp. tensor([ 4.4136e-05,  8.4503e-05,  1.0900e-07,  4.5035e-05, -1.8649e-04,\n","         1.9670e-04,  2.2303e-04, -1.9012e-04, -1.8757e-04,  6.3746e-04])\n","gradient values before mask reapp. tensor([ 4.3423e-05,  8.4680e-05, -1.1108e-06,  4.5813e-05, -1.8456e-04,\n","         1.9682e-04,  2.2326e-04, -1.8998e-04, -1.8663e-04,  6.3836e-04])\n","gradient values before mask reapp. tensor([ 4.6861e-05,  8.5683e-05,  5.8945e-06,  4.8794e-05, -1.7457e-04,\n","         1.9783e-04,  2.2516e-04, -1.8462e-04, -1.8408e-04,  6.5258e-04])\n","gradient values before mask reapp. tensor([ 4.7880e-05,  8.6196e-05,  8.0575e-06,  5.0475e-05, -1.6932e-04,\n","         1.9832e-04,  2.2607e-04, -1.8231e-04, -1.8248e-04,  6.5893e-04])\n","gradient values before mask reapp. tensor([ 4.7832e-05,  8.6494e-05,  8.0727e-06,  5.1591e-05, -1.6606e-04,\n","         1.9855e-04,  2.2650e-04, -1.8122e-04, -1.8123e-04,  6.6173e-04])\n","gradient values before mask reapp. tensor([ 5.1064e-05,  8.7442e-05,  1.4544e-05,  5.4420e-05, -1.5660e-04,\n","         1.9951e-04,  2.2829e-04, -1.7613e-04, -1.7878e-04,  6.7503e-04])\n","gradient values before mask reapp. tensor([ 4.9605e-05,  8.7447e-05,  1.1728e-05,  5.4755e-05, -1.5616e-04,\n","         1.9944e-04,  2.2814e-04, -1.7689e-04, -1.7812e-04,  6.7322e-04])\n","gradient values before mask reapp. tensor([ 5.0854e-05,  8.7988e-05,  1.4221e-05,  5.6516e-05, -1.5046e-04,\n","         1.9994e-04,  2.2904e-04, -1.7419e-04, -1.7638e-04,  6.7995e-04])\n","gradient values before mask reapp. tensor([ 5.2470e-05,  8.8600e-05,  1.7441e-05,  5.8460e-05, -1.4411e-04,\n","         2.0052e-04,  2.3011e-04, -1.7108e-04, -1.7453e-04,  6.8787e-04])\n","gradient values before mask reapp. tensor([ 5.2710e-05,  8.8931e-05,  1.7902e-05,  5.9653e-05, -1.4046e-04,\n","         2.0081e-04,  2.3060e-04, -1.6971e-04, -1.7322e-04,  6.9129e-04])\n","gradient values before mask reapp. tensor([ 5.4963e-05,  8.9657e-05,  2.2303e-05,  6.1893e-05, -1.3299e-04,\n","         2.0153e-04,  2.3190e-04, -1.6585e-04, -1.7116e-04,  7.0109e-04])\n","gradient values before mask reapp. tensor([ 5.6247e-05,  9.0192e-05,  2.4801e-05,  6.3646e-05, -1.2718e-04,\n","         2.0200e-04,  2.3275e-04, -1.6303e-04, -1.6937e-04,  7.0769e-04])\n","gradient values before mask reapp. tensor([ 5.7130e-05,  9.0638e-05,  2.6477e-05,  6.5149e-05, -1.2231e-04,\n","         2.0240e-04,  2.3345e-04, -1.6085e-04, -1.6781e-04,  7.1300e-04])\n","gradient values before mask reapp. tensor([ 5.8527e-05,  9.1181e-05,  2.9142e-05,  6.6906e-05, -1.1648e-04,\n","         2.0291e-04,  2.3435e-04, -1.5803e-04, -1.6606e-04,  7.1988e-04])\n","gradient values before mask reapp. tensor([ 6.1008e-05,  9.1942e-05,  3.3934e-05,  6.9257e-05, -1.0840e-04,\n","         2.0363e-04,  2.3564e-04, -1.5371e-04, -1.6380e-04,  7.3012e-04])\n","gradient values before mask reapp. tensor([ 0.0002,  0.0002,  0.0004,  0.0002,  0.0002,  0.0003,  0.0004,  0.0001,\n","        -0.0001,  0.0015])\n","gradient values before mask reapp. tensor([ 0.0002,  0.0002,  0.0005,  0.0002,  0.0003,  0.0003,  0.0004,  0.0002,\n","        -0.0001,  0.0015])\n","gradient values before mask reapp. tensor([-0.0001,  0.0001, -0.0001,  0.0001, -0.0002,  0.0001,  0.0003, -0.0001,\n","        -0.0001,  0.0007])\n","gradient values before mask reapp. tensor([-0.0001,  0.0001, -0.0001,  0.0001, -0.0002,  0.0001,  0.0003, -0.0001,\n","        -0.0001,  0.0007])\n","gradient values before mask reapp. tensor([-0.0001,  0.0001, -0.0001,  0.0001, -0.0002,  0.0001,  0.0003, -0.0001,\n","        -0.0001,  0.0007])\n","gradient values before mask reapp. tensor([-0.0001,  0.0001, -0.0001,  0.0002, -0.0002,  0.0001,  0.0003, -0.0001,\n","        -0.0001,  0.0007])\n","gradient values before mask reapp. tensor([-0.0001,  0.0001, -0.0001,  0.0002, -0.0002,  0.0001,  0.0004, -0.0001,\n","        -0.0001,  0.0007])\n","gradient values before mask reapp. tensor([-0.0001,  0.0001, -0.0001,  0.0002, -0.0002,  0.0001,  0.0004, -0.0001,\n","        -0.0001,  0.0007])\n","gradient values before mask reapp. tensor([-0.0001,  0.0001, -0.0001,  0.0002, -0.0002,  0.0001,  0.0004, -0.0001,\n","        -0.0001,  0.0008])\n","gradient values before mask reapp. tensor([-0.0001,  0.0001, -0.0001,  0.0002, -0.0002,  0.0001,  0.0004, -0.0001,\n","        -0.0001,  0.0008])\n","gradient values before mask reapp. tensor([-1.2370e-04,  1.4190e-04, -1.0341e-04,  1.6656e-04, -1.8147e-04,\n","         1.4214e-04,  3.5984e-04, -9.9969e-05, -1.3043e-04,  7.7860e-04])\n","gradient values before mask reapp. tensor([-1.2194e-04,  1.4301e-04, -9.8872e-05,  1.6946e-04, -1.7364e-04,\n","         1.4260e-04,  3.6187e-04, -9.5122e-05, -1.2806e-04,  7.8963e-04])\n","gradient values before mask reapp. tensor([-1.1898e-04,  1.4434e-04, -9.2031e-05,  1.7299e-04, -1.6341e-04,\n","         1.4329e-04,  3.6433e-04, -8.8688e-05, -1.2516e-04,  8.0433e-04])\n","gradient values before mask reapp. tensor([-1.1705e-04,  1.4547e-04, -8.7183e-05,  1.7595e-04, -1.5526e-04,\n","         1.4378e-04,  3.6641e-04, -8.3638e-05, -1.2273e-04,  8.1583e-04])\n","gradient values before mask reapp. tensor([-1.1488e-04,  1.4665e-04, -8.1875e-05,  1.7907e-04, -1.4650e-04,\n","         1.4430e-04,  3.6855e-04, -7.8169e-05, -1.2013e-04,  8.2802e-04])\n","gradient values before mask reapp. tensor([-1.1287e-04,  1.4779e-04, -7.6890e-05,  1.8207e-04, -1.3820e-04,\n","         1.4479e-04,  3.7065e-04, -7.3018e-05, -1.1766e-04,  8.3971e-04])\n","gradient values before mask reapp. tensor([-1.1031e-04,  1.4903e-04, -7.0858e-05,  1.8537e-04, -1.2874e-04,\n","         1.4539e-04,  3.7292e-04, -6.7095e-05, -1.1492e-04,  8.5306e-04])\n","gradient values before mask reapp. tensor([ 1.3323e-04,  1.8794e-04,  3.9322e-04,  2.9636e-04,  2.4369e-04,\n","         2.2110e-04,  5.1093e-04,  2.5380e-04, -3.2617e-05,  1.6501e-03])\n","gradient values before mask reapp. tensor([ 1.3681e-04,  1.8933e-04,  4.0118e-04,  3.0008e-04,  2.5453e-04,\n","         2.2205e-04,  5.1384e-04,  2.6105e-04, -2.9572e-05,  1.6668e-03])\n","gradient values before mask reapp. tensor([-6.0833e-04,  9.8587e-05, -5.2990e-04,  1.8823e-05, -7.2698e-04,\n","         3.7013e-05,  3.1649e-04, -2.1737e-04, -1.3830e-04, -1.5078e-04])\n","gradient values before mask reapp. tensor([ 1.4394e-04,  1.9211e-04,  4.1701e-04,  3.0750e-04,  2.7614e-04,\n","         2.2394e-04,  5.1965e-04,  2.7553e-04, -2.3490e-05,  1.7000e-03])\n","gradient values before mask reapp. tensor([-6.0785e-04,  1.0056e-04, -5.2245e-04,  2.3729e-05, -7.1423e-04,\n","         3.7267e-05,  3.2053e-04, -2.0725e-04, -1.3323e-04, -1.3376e-04])\n","gradient values before mask reapp. tensor([ 1.5186e-04,  1.9503e-04,  4.3432e-04,  3.1532e-04,  2.9919e-04,\n","         2.2599e-04,  5.2577e-04,  2.9092e-04, -1.7134e-05,  1.7358e-03])\n","gradient values before mask reapp. tensor([-8.7678e-04,  4.3303e-05, -1.2034e-03, -1.5206e-04, -1.2063e-03,\n","        -8.1551e-05,  1.3769e-04, -6.7339e-04, -2.5358e-04, -1.2277e-03])\n","gradient values before mask reapp. tensor([ 1.5942e-04,  1.9789e-04,  4.5092e-04,  3.2294e-04,  3.2164e-04,\n","         2.2796e-04,  5.3171e-04,  3.0595e-04, -1.0868e-05,  1.7702e-03])\n","gradient values before mask reapp. tensor([ 1.6259e-04,  1.9919e-04,  4.5798e-04,  3.2638e-04,  3.3147e-04,\n","         2.2883e-04,  5.3445e-04,  3.1252e-04, -8.0803e-06,  1.7855e-03])\n","gradient values before mask reapp. tensor([-4.1243e-04,  5.7403e-05, -7.2001e-04, -8.1154e-05, -6.9813e-04,\n","         1.0483e-05,  2.2600e-04, -4.2459e-04, -2.1915e-04, -4.1549e-04])\n","gradient values before mask reapp. tensor([ 1.7082e-04,  2.0216e-04,  4.7587e-04,  3.3436e-04,  3.5532e-04,\n","         2.3090e-04,  5.4061e-04,  3.2846e-04, -1.4877e-06,  1.8220e-03])\n","gradient values before mask reapp. tensor([-4.0980e-04,  5.9018e-05, -7.1367e-04, -7.7096e-05, -6.8462e-04,\n","         1.0540e-05,  2.2922e-04, -4.1606e-04, -2.1475e-04, -4.0016e-04])\n","gradient values before mask reapp. tensor([1.7772e-04, 2.0487e-04, 4.9111e-04, 3.4157e-04, 3.7639e-04, 2.3272e-04,\n","        5.4625e-04, 3.4258e-04, 4.4780e-06, 1.8542e-03])\n","gradient values before mask reapp. tensor([-4.0718e-04,  6.0637e-05, -7.0735e-04, -7.3025e-05, -6.7099e-04,\n","         1.0571e-05,  2.3238e-04, -4.0739e-04, -2.1027e-04, -3.8497e-04])\n","gradient values before mask reapp. tensor([1.8569e-04, 2.0777e-04, 5.0835e-04, 3.4932e-04, 3.9948e-04, 2.3474e-04,\n","        5.5228e-04, 3.5800e-04, 1.0860e-05, 1.8896e-03])\n","gradient values before mask reapp. tensor([-4.0445e-04,  6.2251e-05, -7.0090e-04, -6.8966e-05, -6.5741e-04,\n","         1.0643e-05,  2.3561e-04, -3.9883e-04, -2.0588e-04, -3.6949e-04])\n","gradient values before mask reapp. tensor([1.9402e-04, 2.1073e-04, 5.2631e-04, 3.5728e-04, 4.2344e-04, 2.3681e-04,\n","        5.5840e-04, 3.7400e-04, 1.7474e-05, 1.9262e-03])\n","gradient values before mask reapp. tensor([-4.0188e-04,  6.3833e-05, -6.9479e-04, -6.5000e-05, -6.4413e-04,\n","         1.0676e-05,  2.3875e-04, -3.9045e-04, -2.0153e-04, -3.5460e-04])\n","gradient values before mask reapp. tensor([-8.3353e-05,  1.5093e-04, -1.8491e-04,  1.7378e-04, -8.8369e-05,\n","         1.1302e-04,  3.6682e-04, -1.1445e-04, -1.0893e-04,  7.8589e-04])\n","gradient values before mask reapp. tensor([-8.0671e-05,  1.5209e-04, -1.7960e-04,  1.7678e-04, -7.9270e-05,\n","         1.1347e-04,  3.6894e-04, -1.0900e-04, -1.0633e-04,  7.9824e-04])\n","gradient values before mask reapp. tensor([-3.9768e-04,  6.6259e-05, -6.8500e-04, -5.8899e-05, -6.2348e-04,\n","         1.0764e-05,  2.4352e-04, -3.7738e-04, -1.9483e-04, -3.3138e-04])\n","gradient values before mask reapp. tensor([2.1324e-04, 2.1781e-04, 5.6788e-04, 3.7617e-04, 4.7973e-04, 2.4168e-04,\n","        5.7307e-04, 4.1161e-04, 3.3140e-05, 2.0121e-03])\n","gradient values before mask reapp. tensor([-3.9495e-04,  6.7866e-05, -6.7860e-04, -5.4861e-05, -6.0974e-04,\n","         1.0793e-05,  2.4663e-04, -3.6866e-04, -1.9033e-04, -3.1620e-04])\n","gradient values before mask reapp. tensor([2.2074e-04, 2.2060e-04, 5.8411e-04, 3.8360e-04, 5.0193e-04, 2.4357e-04,\n","        5.7879e-04, 4.2646e-04, 3.9367e-05, 2.0456e-03])\n","gradient values before mask reapp. tensor([-3.9254e-04,  6.9387e-05, -6.7296e-04, -5.1081e-05, -5.9703e-04,\n","         1.0798e-05,  2.4967e-04, -3.6068e-04, -1.8616e-04, -3.0209e-04])\n","gradient values before mask reapp. tensor([-6.4576e-05,  1.5899e-04, -1.4791e-04,  1.9458e-04, -2.4954e-05,\n","         1.1612e-04,  3.8148e-04, -7.6507e-05, -9.0853e-05,  8.7175e-04])\n","gradient values before mask reapp. tensor([-6.1818e-05,  1.6015e-04, -1.4249e-04,  1.9760e-04, -1.5666e-05,\n","         1.1656e-04,  3.8357e-04, -7.0921e-05, -8.8194e-05,  8.8419e-04])\n","gradient values before mask reapp. tensor([-3.8740e-04,  7.1951e-05, -6.6149e-04, -4.4574e-05, -5.7453e-04,\n","         1.1011e-05,  2.5466e-04, -3.4639e-04, -1.7903e-04, -2.7640e-04])\n","gradient values before mask reapp. tensor([2.4090e-04, 2.2778e-04, 6.2721e-04, 4.0280e-04, 5.5985e-04, 2.4856e-04,\n","        5.9363e-04, 4.6509e-04, 5.5370e-05, 2.1337e-03])\n","gradient values before mask reapp. tensor([-3.8565e-04,  7.3343e-05, -6.5717e-04, -4.1181e-05, -5.6322e-04,\n","         1.0903e-05,  2.5743e-04, -3.3932e-04, -1.7517e-04, -2.6444e-04])\n","gradient values before mask reapp. tensor([-5.1057e-05,  1.6471e-04, -1.2151e-04,  2.0935e-04,  2.0354e-05,\n","         1.1832e-04,  3.9185e-04, -4.9398e-05, -7.7951e-05,  9.3284e-04])\n","gradient values before mask reapp. tensor([-4.8490e-05,  1.6583e-04, -1.1650e-04,  2.1222e-04,  2.9120e-05,\n","         1.1874e-04,  3.9388e-04, -4.4163e-05, -7.5439e-05,  9.4462e-04])\n","gradient values before mask reapp. tensor([-3.8007e-04,  7.5955e-05, -6.4497e-04, -3.4536e-05, -5.4001e-04,\n","         1.1185e-05,  2.6254e-04, -3.2461e-04, -1.6792e-04, -2.3765e-04])\n","gradient values before mask reapp. tensor([2.6038e-04, 2.3480e-04, 6.6879e-04, 4.2148e-04, 6.1612e-04, 2.5342e-04,\n","        6.0813e-04, 5.0262e-04, 7.0965e-05, 2.2193e-03])\n","gradient values before mask reapp. tensor([-3.7776e-04,  7.7446e-05, -6.3959e-04, -3.0859e-05, -5.2746e-04,\n","         1.1144e-05,  2.6544e-04, -3.1669e-04, -1.6374e-04, -2.2415e-04])\n","gradient values before mask reapp. tensor([-3.8685e-05,  1.7019e-04, -9.7498e-05,  2.2333e-04,  6.2973e-05,\n","         1.2033e-04,  4.0176e-04, -2.4038e-05, -6.5708e-05,  9.9000e-04])\n","gradient values before mask reapp. tensor([-3.7509e-04,  7.8967e-05, -6.3366e-04, -2.7103e-05, -5.1456e-04,\n","         1.1190e-05,  2.6848e-04, -3.0861e-04, -1.5958e-04, -2.0970e-04])\n","gradient values before mask reapp. tensor([-3.2165e-05,  1.7266e-04, -8.4951e-05,  2.2974e-04,  8.3144e-05,\n","         1.2139e-04,  4.0625e-04, -1.1900e-05, -6.0131e-05,  1.0176e-03])\n","gradient values before mask reapp. tensor([-2.9468e-05,  1.7379e-04, -7.9753e-05,  2.3265e-04,  9.2099e-05,\n","         1.2183e-04,  4.0829e-04, -6.5528e-06, -5.7588e-05,  1.0296e-03])\n","gradient values before mask reapp. tensor([-3.7040e-04,  8.1390e-05, -6.2337e-04, -2.1052e-05, -4.9351e-04,\n","         1.1338e-05,  2.7324e-04, -2.9532e-04, -1.5288e-04, -1.8596e-04])\n","gradient values before mask reapp. tensor([2.8725e-04, 2.4447e-04, 7.2579e-04, 4.4716e-04, 6.9349e-04, 2.6013e-04,\n","        6.2814e-04, 5.5420e-04, 9.2390e-05, 2.3369e-03])\n","gradient values before mask reapp. tensor([-3.6778e-04,  8.2911e-05, -6.1752e-04, -1.7308e-05, -4.8059e-04,\n","         1.1361e-05,  2.7624e-04, -2.8720e-04, -1.4868e-04, -1.7169e-04])\n","gradient values before mask reapp. tensor([-3.6598e-04,  8.3751e-05, -6.1366e-04, -1.5181e-05, -4.7308e-04,\n","         1.1436e-05,  2.7787e-04, -2.8244e-04, -1.4632e-04, -1.6317e-04])\n","gradient values before mask reapp. tensor([-1.5674e-05,  1.7947e-04, -5.3320e-05,  2.4721e-04,  1.3722e-04,\n","         1.2407e-04,  4.1859e-04,  2.0395e-05, -4.4852e-05,  1.0905e-03])\n","gradient values before mask reapp. tensor([-1.3864e-05,  1.8041e-04, -4.9942e-05,  2.4954e-04,  1.4400e-04,\n","         1.2439e-04,  4.2035e-04,  2.4276e-05, -4.2883e-05,  1.0998e-03])\n","gradient values before mask reapp. tensor([-3.6185e-04,  8.6048e-05, -6.0462e-04, -9.5363e-06, -4.5348e-04,\n","         1.1504e-05,  2.8241e-04, -2.7011e-04, -1.4000e-04, -1.4140e-04])\n","gradient values before mask reapp. tensor([-8.3186e-06,  1.8268e-04, -3.9415e-05,  2.5532e-04,  1.6193e-04,\n","         1.2530e-04,  4.2447e-04,  3.4956e-05, -3.7853e-05,  1.1241e-03])\n","gradient values before mask reapp. tensor([-5.1617e-06,  1.8389e-04, -3.3337e-05,  2.5847e-04,  1.7192e-04,\n","         1.2579e-04,  4.2664e-04,  4.0995e-05, -3.5049e-05,  1.1375e-03])\n","gradient values before mask reapp. tensor([-3.5756e-04,  8.8357e-05, -5.9534e-04, -3.8568e-06, -4.3370e-04,\n","         1.1603e-05,  2.8701e-04, -2.5771e-04, -1.3368e-04, -1.1921e-04])\n","gradient values before mask reapp. tensor([-1.1251e-07,  1.8606e-04, -2.3788e-05,  2.6396e-04,  1.8878e-04,\n","         1.2662e-04,  4.3058e-04,  5.0997e-05, -3.0265e-05,  1.1602e-03])\n","gradient values before mask reapp. tensor([-3.5510e-04,  8.9825e-05, -5.8995e-04, -2.8844e-07, -4.2129e-04,\n","         1.1593e-05,  2.8990e-04, -2.4991e-04, -1.2961e-04, -1.0575e-04])\n","gradient values before mask reapp. tensor([0.0008, 0.0004, 0.0016, 0.0006, 0.0015, 0.0004, 0.0007, 0.0010, 0.0002,\n","        0.0036])\n","gradient values before mask reapp. tensor([-3.5277e-04,  9.1257e-05, -5.8485e-04,  3.1433e-06, -4.0951e-04,\n","         1.1614e-05,  2.9285e-04, -2.4262e-04, -1.2581e-04, -9.2545e-05])\n","gradient values before mask reapp. tensor([-3.5136e-04,  9.2008e-05, -5.8186e-04,  4.9777e-06, -4.0308e-04,\n","         1.1647e-05,  2.9434e-04, -2.3859e-04, -1.2375e-04, -8.5367e-05])\n","gradient values before mask reapp. tensor([-3.4939e-04,  9.2857e-05, -5.7780e-04,  7.1078e-06, -3.9548e-04,\n","         1.1763e-05,  2.9602e-04, -2.3379e-04, -1.2143e-04, -7.6510e-05])\n","gradient values before mask reapp. tensor([-3.4817e-04,  9.3585e-05, -5.7516e-04,  8.8754e-06, -3.8928e-04,\n","         1.1747e-05,  2.9743e-04, -2.2989e-04, -1.1939e-04, -6.9901e-05])\n","gradient values before mask reapp. tensor([ 1.8628e-05,  1.9379e-04,  1.1356e-05,  2.8352e-04,  2.4918e-04,\n","         1.2976e-04,  4.4476e-04,  8.6719e-05, -1.3410e-05,  1.2427e-03])\n","gradient values before mask reapp. tensor([ 2.1069e-05,  1.9485e-04,  1.5907e-05,  2.8619e-04,  2.5732e-04,\n","         1.3017e-04,  4.4670e-04,  9.1499e-05, -1.1113e-05,  1.2538e-03])\n","gradient values before mask reapp. tensor([-3.4471e-04,  9.5710e-05, -5.6773e-04,  1.3934e-05, -3.7180e-04,\n","         1.1758e-05,  3.0178e-04, -2.1905e-04, -1.1373e-04, -5.0516e-05])\n","gradient values before mask reapp. tensor([ 2.6213e-05,  1.9701e-04,  2.5459e-05,  2.9162e-04,  2.7399e-04,\n","         1.3104e-04,  4.5070e-04,  1.0131e-04, -6.4663e-06,  1.2766e-03])\n","gradient values before mask reapp. tensor([-3.4235e-04,  9.7133e-05, -5.6271e-04,  1.7321e-05, -3.6006e-04,\n","         1.1771e-05,  3.0467e-04, -2.1175e-04, -1.0993e-04, -3.7517e-05])\n","gradient values before mask reapp. tensor([ 3.1517e-05,  1.9920e-04,  3.5264e-05,  2.9712e-04,  2.9086e-04,\n","         1.3196e-04,  4.5476e-04,  1.1123e-04, -1.8052e-06,  1.2999e-03])\n","gradient values before mask reapp. tensor([-3.3943e-04,  9.8652e-05, -5.5663e-04,  2.0995e-05, -3.4716e-04,\n","         1.1869e-05,  3.0775e-04, -2.0371e-04, -1.0587e-04, -2.2853e-05])\n","gradient values before mask reapp. tensor([3.6429e-05, 2.0132e-04, 4.4298e-05, 3.0238e-04, 3.0687e-04, 1.3282e-04,\n","        4.5870e-04, 1.2058e-04, 2.6442e-06, 1.3221e-03])\n","gradient values before mask reapp. tensor([-3.3646e-04,  1.0019e-04, -5.5043e-04,  2.4705e-05, -3.3406e-04,\n","         1.1968e-05,  3.1084e-04, -1.9550e-04, -1.0174e-04, -8.0435e-06])\n","gradient values before mask reapp. tensor([4.0716e-05, 2.0332e-04, 5.2108e-05, 3.0731e-04, 3.2164e-04, 1.3356e-04,\n","        4.6240e-04, 1.2914e-04, 6.8320e-06, 1.3422e-03])\n","gradient values before mask reapp. tensor([-3.3366e-04,  1.0168e-04, -5.4464e-04,  2.8263e-05, -3.2162e-04,\n","         1.2068e-05,  3.1392e-04, -1.8778e-04, -9.7843e-05,  6.2421e-06])\n","gradient values before mask reapp. tensor([4.6383e-05, 2.0558e-04, 6.2603e-05, 3.1301e-04, 3.3936e-04, 1.3452e-04,\n","        4.6657e-04, 1.3963e-04, 1.1706e-05, 1.3666e-03])\n","gradient values before mask reapp. tensor([-3.3188e-04,  1.0299e-04, -5.4084e-04,  3.1289e-05, -3.1126e-04,\n","         1.2002e-05,  3.1664e-04, -1.8142e-04, -9.4405e-05,  1.7428e-05])\n","gradient values before mask reapp. tensor([-3.3073e-04,  1.0369e-04, -5.3848e-04,  3.2908e-05, -3.0563e-04,\n","         1.2020e-05,  3.1809e-04, -1.7793e-04, -9.2601e-05,  2.3726e-05])\n","gradient values before mask reapp. tensor([5.2223e-04, 3.0735e-04, 9.4343e-04, 4.4677e-04, 1.1008e-03, 3.0239e-04,\n","        5.4912e-04, 5.8528e-04, 8.3263e-05, 2.5767e-03])\n","gradient values before mask reapp. tensor([-3.2910e-04,  1.0497e-04, -5.3502e-04,  3.5802e-05, -2.9583e-04,\n","         1.1961e-05,  3.2082e-04, -1.7198e-04, -8.9362e-05,  3.4482e-05])\n","gradient values before mask reapp. tensor([-3.2667e-04,  1.0590e-04, -5.3013e-04,  3.8153e-05, -2.8726e-04,\n","         1.2145e-05,  3.2265e-04, -1.6654e-04, -8.6816e-05,  4.4644e-05])\n","gradient values before mask reapp. tensor([-3.2668e-04,  1.0637e-04, -5.3014e-04,  3.9063e-05, -2.8450e-04,\n","         1.2020e-05,  3.2376e-04, -1.6500e-04, -8.5780e-05,  4.7390e-05])\n","gradient values before mask reapp. tensor([5.3978e-04, 3.1318e-04, 9.7560e-04, 4.5946e-04, 1.1449e-03, 3.0676e-04,\n","        5.5843e-04, 6.1107e-04, 9.3271e-05, 2.6406e-03])\n","gradient values before mask reapp. tensor([-3.2462e-04,  1.0774e-04, -5.2578e-04,  4.2241e-05, -2.7350e-04,\n","         1.2005e-05,  3.2661e-04, -1.5822e-04, -8.2202e-05,  5.9499e-05])\n","gradient values before mask reapp. tensor([-3.2315e-04,  1.0849e-04, -5.2285e-04,  4.4005e-05, -2.6731e-04,\n","         1.2077e-05,  3.2818e-04, -1.5440e-04, -8.0298e-05,  6.6743e-05])\n","gradient values before mask reapp. tensor([-3.2221e-04,  1.0915e-04, -5.2096e-04,  4.5486e-05, -2.6220e-04,\n","         1.2063e-05,  3.2956e-04, -1.5125e-04, -7.8628e-05,  7.2331e-05])\n","gradient values before mask reapp. tensor([-3.1953e-04,  1.1013e-04, -5.1560e-04,  4.7945e-05, -2.5323e-04,\n","         1.2304e-05,  3.3152e-04, -1.4558e-04, -7.6035e-05,  8.3307e-05])\n","gradient values before mask reapp. tensor([0.0006, 0.0003, 0.0010, 0.0005, 0.0012, 0.0003, 0.0006, 0.0006, 0.0001,\n","        0.0027])\n","gradient values before mask reapp. tensor([-3.1876e-04,  1.1125e-04, -5.1394e-04,  5.0306e-05, -2.4554e-04,\n","         1.2146e-05,  3.3403e-04, -1.4105e-04, -7.3363e-05,  9.1437e-05])\n","gradient values before mask reapp. tensor([-3.1749e-04,  1.1196e-04, -5.1141e-04,  5.1951e-05, -2.3981e-04,\n","         1.2193e-05,  3.3555e-04, -1.3754e-04, -7.1582e-05,  9.8086e-05])\n","gradient values before mask reapp. tensor([-3.1611e-04,  1.1269e-04, -5.0869e-04,  5.3651e-05, -2.3390e-04,\n","         1.2264e-05,  3.3712e-04, -1.3392e-04, -6.9771e-05,  1.0507e-04])\n","gradient values before mask reapp. tensor([-3.1448e-04,  1.1349e-04, -5.0539e-04,  5.5548e-05, -2.2712e-04,\n","         1.2343e-05,  3.3872e-04, -1.2964e-04, -6.7670e-05,  1.1283e-04])\n","gradient values before mask reapp. tensor([8.7583e-05, 2.2342e-04, 1.3658e-04, 3.5675e-04, 4.7114e-04, 1.4208e-04,\n","        5.0031e-04, 2.1579e-04, 4.7728e-05, 1.5522e-03])\n","gradient values before mask reapp. tensor([-3.1346e-04,  1.1465e-04, -5.0332e-04,  5.8018e-05, -2.1893e-04,\n","         1.2217e-05,  3.4131e-04, -1.2478e-04, -6.4889e-05,  1.2162e-04])\n","gradient values before mask reapp. tensor([9.2576e-05, 2.2557e-04, 1.4548e-04, 3.6198e-04, 4.8688e-04, 1.4301e-04,\n","        5.0437e-04, 2.2489e-04, 5.1991e-05, 1.5745e-03])\n","gradient values before mask reapp. tensor([-3.1138e-04,  1.1600e-04, -4.9921e-04,  6.1045e-05, -2.0858e-04,\n","         1.2269e-05,  3.4428e-04, -1.1852e-04, -6.1634e-05,  1.3364e-04])\n","gradient values before mask reapp. tensor([-3.1014e-04,  1.1673e-04, -4.9671e-04,  6.2706e-05, -2.0278e-04,\n","         1.2307e-05,  3.4580e-04, -1.1492e-04, -5.9809e-05,  1.4026e-04])\n","gradient values before mask reapp. tensor([1.0063e-04, 2.2889e-04, 1.5981e-04, 3.7008e-04, 5.1136e-04, 1.4455e-04,\n","        5.1074e-04, 2.3901e-04, 5.8495e-05, 1.6098e-03])\n","gradient values before mask reapp. tensor([-3.0841e-04,  1.1802e-04, -4.9333e-04,  6.5526e-05, -1.9328e-04,\n","         1.2316e-05,  3.4869e-04, -1.0924e-04, -5.6777e-05,  1.5122e-04])\n","gradient values before mask reapp. tensor([-3.0765e-04,  1.1864e-04, -4.9185e-04,  6.6874e-05, -1.8875e-04,\n","         1.2307e-05,  3.5009e-04, -1.0653e-04, -5.5315e-05,  1.5637e-04])\n","gradient values before mask reapp. tensor([1.0793e-04, 2.3208e-04, 1.7265e-04, 3.7777e-04, 5.3424e-04, 1.4598e-04,\n","        5.1688e-04, 2.5209e-04, 6.4616e-05, 1.6428e-03])\n","gradient values before mask reapp. tensor([-3.0699e-04,  1.1975e-04, -4.9056e-04,  6.9121e-05, -1.8147e-04,\n","         1.2150e-05,  3.5263e-04, -1.0228e-04, -5.2791e-05,  1.6410e-04])\n","gradient values before mask reapp. tensor([-3.0436e-04,  1.2072e-04, -4.8543e-04,  7.1483e-05, -1.7296e-04,\n","         1.2427e-05,  3.5467e-04, -9.6961e-05, -5.0402e-05,  1.7495e-04])\n","gradient values before mask reapp. tensor([1.1404e-04, 2.3503e-04, 1.8298e-04, 3.8471e-04, 5.5404e-04, 1.4727e-04,\n","        5.2272e-04, 2.6307e-04, 6.9888e-05, 1.6722e-03])\n","gradient values before mask reapp. tensor([-3.0405e-04,  1.2177e-04, -4.8481e-04,  7.3572e-05, -1.6632e-04,\n","         1.2211e-05,  3.5710e-04, -9.3120e-05, -4.8011e-05,  1.8166e-04])\n","gradient values before mask reapp. tensor([-3.0189e-04,  1.2267e-04, -4.8057e-04,  7.5715e-05, -1.5865e-04,\n","         1.2399e-05,  3.5896e-04, -8.8319e-05, -4.5783e-05,  1.9109e-04])\n","gradient values before mask reapp. tensor([-3.0207e-04,  1.2313e-04, -4.8096e-04,  7.6542e-05, -1.5618e-04,\n","         1.2257e-05,  3.6009e-04, -8.6947e-05, -4.4814e-05,  1.9339e-04])\n","gradient values before mask reapp. tensor([1.2308e-04, 2.3918e-04, 1.9856e-04, 3.9458e-04, 5.8282e-04, 1.4911e-04,\n","        5.3080e-04, 2.7933e-04, 7.7567e-05, 1.7142e-03])\n","gradient values before mask reapp. tensor([-3.0024e-04,  1.2448e-04, -4.7738e-04,  7.9463e-05, -1.4628e-04,\n","         1.2277e-05,  3.6306e-04, -8.0964e-05, -4.1666e-05,  2.0479e-04])\n","gradient values before mask reapp. tensor([-2.9878e-04,  1.2522e-04, -4.7465e-04,  8.1126e-05, -1.4058e-04,\n","         1.2409e-05,  3.6477e-04, -7.7554e-05, -4.0022e-05,  2.1207e-04])\n","gradient values before mask reapp. tensor([1.2820e-04, 2.4201e-04, 2.0698e-04, 4.0106e-04, 6.0084e-04, 1.5025e-04,\n","        5.3634e-04, 2.8919e-04, 8.2476e-05, 1.7407e-03])\n","gradient values before mask reapp. tensor([-2.9815e-04,  1.2633e-04, -4.7354e-04,  8.3295e-05, -1.3368e-04,\n","         1.2297e-05,  3.6742e-04, -7.3604e-05, -3.7693e-05,  2.1979e-04])\n","gradient values before mask reapp. tensor([-2.9709e-04,  1.2704e-04, -4.7145e-04,  8.4863e-05, -1.2829e-04,\n","         1.2318e-05,  3.6895e-04, -7.0281e-05, -3.5984e-05,  2.2593e-04])\n","gradient values before mask reapp. tensor([-2.9594e-04,  1.2774e-04, -4.6934e-04,  8.6372e-05, -1.2318e-04,\n","         1.2396e-05,  3.7056e-04, -6.7234e-05, -3.4454e-05,  2.3226e-04])\n","gradient values before mask reapp. tensor([1.3812e-04, 2.4635e-04, 2.2397e-04, 4.1134e-04, 6.3080e-04, 1.5235e-04,\n","        5.4494e-04, 3.0604e-04, 9.0220e-05, 1.7857e-03])\n","gradient values before mask reapp. tensor([-2.9517e-04,  1.2887e-04, -4.6804e-04,  8.8594e-05, -1.1620e-04,\n","         1.2332e-05,  3.7334e-04, -6.3295e-05, -3.2171e-05,  2.4049e-04])\n","gradient values before mask reapp. tensor([-2.9399e-04,  1.2961e-04, -4.6570e-04,  9.0242e-05, -1.1049e-04,\n","         1.2369e-05,  3.7492e-04, -5.9755e-05, -3.0378e-05,  2.4705e-04])\n","gradient values before mask reapp. tensor([-2.9301e-04,  1.3028e-04, -4.6395e-04,  9.1660e-05, -1.0578e-04,\n","         1.2426e-05,  3.7649e-04, -5.6971e-05, -2.8953e-05,  2.5287e-04])\n","gradient values before mask reapp. tensor([0.0007, 0.0003, 0.0011, 0.0005, 0.0011, 0.0002, 0.0006, 0.0007, 0.0001,\n","        0.0028])\n","gradient values before mask reapp. tensor([-2.9238e-04,  1.3144e-04, -4.6276e-04,  9.3927e-05, -9.8672e-05,\n","         1.2323e-05,  3.7926e-04, -5.2889e-05, -2.6566e-05,  2.6097e-04])\n","gradient values before mask reapp. tensor([-2.9323e-04,  1.3181e-04, -4.6449e-04,  9.4393e-05, -9.7602e-05,\n","         1.2088e-05,  3.8021e-04, -5.2435e-05, -2.5934e-05,  2.6130e-04])\n","gradient values before mask reapp. tensor([-2.9084e-04,  1.3271e-04, -4.6005e-04,  9.6553e-05, -9.0110e-05,\n","         1.2379e-05,  3.8230e-04, -4.7855e-05, -2.3923e-05,  2.7142e-04])\n","gradient values before mask reapp. tensor([-2.9008e-04,  1.3339e-04, -4.5855e-04,  9.7980e-05, -8.5227e-05,\n","         1.2347e-05,  3.8376e-04, -4.4884e-05, -2.2312e-05,  2.7672e-04])\n","gradient values before mask reapp. tensor([-2.9162e-04,  1.3361e-04, -4.6178e-04,  9.7976e-05, -8.6130e-05,\n","         1.2056e-05,  3.8457e-04, -4.5831e-05, -2.2271e-05,  2.7496e-04])\n","gradient values before mask reapp. tensor([-2.8863e-04,  1.3466e-04, -4.5607e-04,  1.0054e-04, -7.6989e-05,\n","         1.2410e-05,  3.8683e-04, -4.0082e-05, -1.9789e-05,  2.8696e-04])\n","gradient values before mask reapp. tensor([0.0008, 0.0003, 0.0011, 0.0005, 0.0012, 0.0002, 0.0006, 0.0007, 0.0001,\n","        0.0029])\n","gradient values before mask reapp. tensor([-2.8942e-04,  1.3559e-04, -4.5769e-04,  1.0207e-04, -7.2756e-05,\n","         1.2082e-05,  3.8918e-04, -3.7878e-05, -1.8047e-05,  2.9084e-04])\n","gradient values before mask reapp. tensor([-2.8968e-04,  1.3606e-04, -4.5832e-04,  1.0287e-04, -7.0513e-05,\n","         1.1943e-05,  3.9037e-04, -3.6688e-05, -1.7174e-05,  2.9302e-04])\n","gradient values before mask reapp. tensor([-2.8853e-04,  1.3678e-04, -4.5628e-04,  1.0436e-04, -6.5560e-05,\n","         1.2056e-05,  3.9208e-04, -3.3749e-05, -1.5741e-05,  2.9947e-04])\n","gradient values before mask reapp. tensor([-2.8639e-04,  1.3769e-04, -4.5223e-04,  1.0647e-04, -5.8234e-05,\n","         1.2287e-05,  3.9410e-04, -2.9207e-05, -1.3693e-05,  3.0896e-04])\n","gradient values before mask reapp. tensor([-2.8859e-04,  1.3784e-04, -4.5656e-04,  1.0630e-04, -5.9683e-05,\n","         1.1810e-05,  3.9460e-04, -3.0377e-05, -1.3576e-05,  3.0532e-04])\n","gradient values before mask reapp. tensor([-2.8702e-04,  1.3864e-04, -4.5373e-04,  1.0804e-04, -5.3825e-05,\n","         1.1979e-05,  3.9646e-04, -2.6826e-05, -1.1929e-05,  3.1302e-04])\n","gradient values before mask reapp. tensor([-2.8612e-04,  1.3935e-04, -4.5205e-04,  1.0952e-04, -4.8908e-05,\n","         1.2006e-05,  3.9806e-04, -2.3840e-05, -1.0393e-05,  3.1883e-04])\n","gradient values before mask reapp. tensor([0.0008, 0.0003, 0.0012, 0.0005, 0.0013, 0.0002, 0.0006, 0.0008, 0.0001,\n","        0.0030])\n","gradient values before mask reapp. tensor([-2.8758e-04,  1.4015e-04, -4.5517e-04,  1.1061e-04, -4.6728e-05,\n","         1.1661e-05,  4.0037e-04, -2.3056e-05, -9.3175e-06,  3.2080e-04])\n","gradient values before mask reapp. tensor([-2.8538e-04,  1.4108e-04, -4.5104e-04,  1.1275e-04, -3.9237e-05,\n","         1.1902e-05,  4.0242e-04, -1.8398e-05, -7.2270e-06,  3.3048e-04])\n","gradient values before mask reapp. tensor([-2.8722e-04,  1.4126e-04, -4.5493e-04,  1.1262e-04, -4.0763e-05,\n","         1.1563e-05,  4.0318e-04, -1.9737e-05, -7.3390e-06,  3.2786e-04])\n","gradient values before mask reapp. tensor([-2.8437e-04,  1.4230e-04, -4.4956e-04,  1.1510e-04, -3.2073e-05,\n","         1.1929e-05,  4.0550e-04, -1.4294e-05, -5.0233e-06,  3.3957e-04])\n","gradient values before mask reapp. tensor([-2.8472e-04,  1.4278e-04, -4.5043e-04,  1.1586e-04, -3.0099e-05,\n","         1.1796e-05,  4.0675e-04, -1.3300e-05, -4.2523e-06,  3.4161e-04])\n","gradient values before mask reapp. tensor([-2.8285e-04,  1.4366e-04, -4.4695e-04,  1.1784e-04, -2.3303e-05,\n","         1.1991e-05,  4.0872e-04, -9.0956e-06, -2.3261e-06,  3.5035e-04])\n","gradient values before mask reapp. tensor([-2.8265e-04,  1.4423e-04, -4.4675e-04,  1.1891e-04, -2.0141e-05,\n","         1.1941e-05,  4.1017e-04, -7.3058e-06, -1.2751e-06,  3.5408e-04])\n","gradient values before mask reapp. tensor([-2.8251e-04,  1.4479e-04, -4.4672e-04,  1.1991e-04, -1.7269e-05,\n","         1.1900e-05,  4.1163e-04, -5.7416e-06, -3.3327e-07,  3.5761e-04])\n","gradient values before mask reapp. tensor([0.0008, 0.0003, 0.0012, 0.0006, 0.0013, 0.0002, 0.0007, 0.0008, 0.0002,\n","        0.0032])\n","gradient values before mask reapp. tensor([-2.8270e-04,  1.4587e-04, -4.4738e-04,  1.2175e-04, -1.2318e-05,\n","         1.1767e-05,  4.1449e-04, -3.1302e-06,  1.3716e-06,  3.6370e-04])\n","gradient values before mask reapp. tensor([-2.8260e-04,  1.4642e-04, -4.4746e-04,  1.2273e-04, -9.5815e-06,\n","         1.1725e-05,  4.1595e-04, -1.6626e-06,  2.2668e-06,  3.6712e-04])\n","gradient values before mask reapp. tensor([-2.8037e-04,  1.4737e-04, -4.4331e-04,  1.2490e-04, -2.1396e-06,\n","         1.1996e-05,  4.1812e-04,  2.9421e-06,  4.2954e-06,  3.7707e-04])\n","gradient values before mask reapp. tensor([-2.8068e-04,  1.4787e-04, -4.4409e-04,  1.2573e-04,  5.6065e-09,\n","         1.1871e-05,  4.1944e-04,  4.0491e-06,  5.1114e-06,  3.7937e-04])\n","gradient values before mask reapp. tensor([-2.8037e-04,  1.4846e-04, -4.4381e-04,  1.2678e-04,  2.9988e-06,\n","         1.1891e-05,  4.2102e-04,  5.6856e-06,  6.0167e-06,  3.8343e-04])\n","gradient values before mask reapp. tensor([-2.7913e-04,  1.4926e-04, -4.4154e-04,  1.2848e-04,  8.5764e-06,\n","         1.1990e-05,  4.2285e-04,  9.0818e-06,  7.6621e-06,  3.9047e-04])\n","gradient values before mask reapp. tensor([-2.7886e-04,  1.4986e-04, -4.4127e-04,  1.2959e-04,  1.1777e-05,\n","         1.1974e-05,  4.2440e-04,  1.0874e-05,  8.6784e-06,  3.9451e-04])\n","gradient values before mask reapp. tensor([-2.7916e-04,  1.5035e-04, -4.4213e-04,  1.3038e-04,  1.3704e-05,\n","         1.1876e-05,  4.2579e-04,  1.1813e-05,  9.3798e-06,  3.9685e-04])\n","gradient values before mask reapp. tensor([-2.7776e-04,  1.5118e-04, -4.3959e-04,  1.3215e-04,  1.9575e-05,\n","         1.2009e-05,  4.2769e-04,  1.5410e-05,  1.1086e-05,  4.0433e-04])\n","gradient values before mask reapp. tensor([3.9597e-04, 1.9784e-04, 5.0872e-04, 2.2188e-04, 5.7736e-04, 9.5090e-05,\n","        4.9071e-04, 4.6058e-04, 2.7162e-05, 1.5611e-03])\n","gradient values before mask reapp. tensor([-2.7887e-04,  1.5210e-04, -4.4227e-04,  1.3349e-04,  2.2265e-05,\n","         1.1772e-05,  4.3039e-04,  1.6513e-05,  1.2168e-05,  4.0770e-04])\n","gradient values before mask reapp. tensor([-2.7767e-04,  1.5291e-04, -4.4008e-04,  1.3517e-04,  2.7669e-05,\n","         1.1897e-05,  4.3228e-04,  1.9807e-05,  1.3728e-05,  4.1475e-04])\n","gradient values before mask reapp. tensor([-2.7822e-04,  1.5336e-04, -4.4152e-04,  1.3582e-04,  2.9013e-05,\n","         1.1759e-05,  4.3359e-04,  2.0379e-05,  1.4292e-05,  4.1623e-04])\n","gradient values before mask reapp. tensor([-2.7782e-04,  1.5400e-04, -4.4105e-04,  1.3701e-04,  3.2360e-05,\n","         1.1785e-05,  4.3526e-04,  2.2263e-05,  1.5292e-05,  4.2076e-04])\n","gradient values before mask reapp. tensor([-2.7738e-04,  1.5463e-04, -4.4057e-04,  1.3818e-04,  3.5642e-05,\n","         1.1831e-05,  4.3693e-04,  2.4102e-05,  1.6242e-05,  4.2530e-04])\n","gradient values before mask reapp. tensor([0.0009, 0.0003, 0.0013, 0.0006, 0.0015, 0.0003, 0.0007, 0.0009, 0.0002,\n","        0.0034])\n","gradient values before mask reapp. tensor([-2.8037e-04,  1.5523e-04, -4.4705e-04,  1.3843e-04,  3.3933e-05,\n","         1.1389e-05,  4.3917e-04,  2.2222e-05,  1.6151e-05,  4.2314e-04])\n","gradient values before mask reapp. tensor([-2.8013e-04,  1.5583e-04, -4.4696e-04,  1.3947e-04,  3.6732e-05,\n","         1.1424e-05,  4.4082e-04,  2.3726e-05,  1.6958e-05,  4.2716e-04])\n","gradient values before mask reapp. tensor([-2.7952e-04,  1.5649e-04, -4.4623e-04,  1.4070e-04,  4.0148e-05,\n","         1.1519e-05,  4.4259e-04,  2.5638e-05,  1.7874e-05,  4.3221e-04])\n","gradient values before mask reapp. tensor([-2.8056e-04,  1.5684e-04, -4.4883e-04,  1.4089e-04,  3.9677e-05,\n","         1.1410e-05,  4.4386e-04,  2.4916e-05,  1.7769e-05,  4.3217e-04])\n","gradient values before mask reapp. tensor([-2.8100e-04,  1.5730e-04, -4.5024e-04,  1.4144e-04,  4.0496e-05,\n","         1.1394e-05,  4.4534e-04,  2.5047e-05,  1.7958e-05,  4.3403e-04])\n","gradient values before mask reapp. tensor([-2.8142e-04,  1.5776e-04, -4.5171e-04,  1.4195e-04,  4.1160e-05,\n","         1.1396e-05,  4.4682e-04,  2.5091e-05,  1.8073e-05,  4.3581e-04])\n","gradient values before mask reapp. tensor([-2.8277e-04,  1.5807e-04, -4.5487e-04,  1.4202e-04,  4.0076e-05,\n","         1.1260e-05,  4.4804e-04,  2.4014e-05,  1.7843e-05,  4.3498e-04])\n","gradient values before mask reapp. tensor([-2.8158e-04,  1.5882e-04, -4.5313e-04,  1.4342e-04,  4.4010e-05,\n","         1.1569e-05,  4.5017e-04,  2.6293e-05,  1.8689e-05,  4.4191e-04])\n","gradient values before mask reapp. tensor([-2.8058e-04,  1.5959e-04, -4.5156e-04,  1.4504e-04,  4.8803e-05,\n","         1.1665e-05,  4.5209e-04,  2.9168e-05,  2.0059e-05,  4.4835e-04])\n","gradient values before mask reapp. tensor([-2.7970e-04,  1.6034e-04, -4.5024e-04,  1.4649e-04,  5.3020e-05,\n","         1.1806e-05,  4.5404e-04,  3.1633e-05,  2.1202e-05,  4.5447e-04])\n","gradient values before mask reapp. tensor([-2.7845e-04,  1.6116e-04, -4.4816e-04,  1.4824e-04,  5.8402e-05,\n","         1.1941e-05,  4.5606e-04,  3.4892e-05,  2.2718e-05,  4.6172e-04])\n","gradient values before mask reapp. tensor([-2.7779e-04,  1.6188e-04, -4.4724e-04,  1.4966e-04,  6.2455e-05,\n","         1.2003e-05,  4.5791e-04,  3.7253e-05,  2.3899e-05,  4.6724e-04])\n","gradient values before mask reapp. tensor([0.0010, 0.0004, 0.0014, 0.0006, 0.0016, 0.0003, 0.0007, 0.0010, 0.0002,\n","        0.0036])\n","gradient values before mask reapp. tensor([-2.7977e-04,  1.6277e-04, -4.5160e-04,  1.5080e-04,  6.3714e-05,\n","         1.1666e-05,  4.6069e-04,  3.7409e-05,  2.4644e-05,  4.6886e-04])\n","gradient values before mask reapp. tensor([-2.7884e-04,  1.6354e-04, -4.5020e-04,  1.5232e-04,  6.8047e-05,\n","         1.1814e-05,  4.6272e-04,  3.9928e-05,  2.5796e-05,  4.7529e-04])\n","gradient values before mask reapp. tensor([-2.7751e-04,  1.6437e-04, -4.4803e-04,  1.5410e-04,  7.3443e-05,\n","         1.1981e-05,  4.6482e-04,  4.3177e-05,  2.7269e-05,  4.8282e-04])\n","gradient values before mask reapp. tensor([-2.7765e-04,  1.6499e-04, -4.4859e-04,  1.5513e-04,  7.6065e-05,\n","         1.1914e-05,  4.6644e-04,  4.4602e-05,  2.8168e-05,  4.8606e-04])\n","gradient values before mask reapp. tensor([-2.7865e-04,  1.6539e-04, -4.5106e-04,  1.5548e-04,  7.5800e-05,\n","         1.1852e-05,  4.6791e-04,  4.4089e-05,  2.8129e-05,  4.8662e-04])\n","gradient values before mask reapp. tensor([-2.7728e-04,  1.6623e-04, -4.4887e-04,  1.5728e-04,  8.1118e-05,\n","         1.2052e-05,  4.7007e-04,  4.7285e-05,  2.9536e-05,  4.9431e-04])\n","gradient values before mask reapp. tensor([-2.7653e-04,  1.6700e-04, -4.4774e-04,  1.5881e-04,  8.5508e-05,\n","         1.2127e-05,  4.7203e-04,  4.9870e-05,  3.0803e-05,  5.0031e-04])\n","gradient values before mask reapp. tensor([-2.7657e-04,  1.6762e-04, -4.4818e-04,  1.5991e-04,  8.8239e-05,\n","         1.2079e-05,  4.7372e-04,  5.1360e-05,  3.1699e-05,  5.0386e-04])\n","gradient values before mask reapp. tensor([-2.7650e-04,  1.6827e-04, -4.4839e-04,  1.6110e-04,  9.1196e-05,\n","         1.2050e-05,  4.7547e-04,  5.2995e-05,  3.2632e-05,  5.0785e-04])\n","gradient values before mask reapp. tensor([-2.7550e-04,  1.6908e-04, -4.4685e-04,  1.6271e-04,  9.5870e-05,\n","         1.2202e-05,  4.7756e-04,  5.5764e-05,  3.3900e-05,  5.1459e-04])\n","gradient values before mask reapp. tensor([-2.7587e-04,  1.6965e-04, -4.4792e-04,  1.6370e-04,  9.8115e-05,\n","         1.2074e-05,  4.7914e-04,  5.6942e-05,  3.4732e-05,  5.1722e-04])\n","gradient values before mask reapp. tensor([-2.7546e-04,  1.7036e-04, -4.4756e-04,  1.6501e-04,  1.0145e-04,\n","         1.2148e-05,  4.8108e-04,  5.8801e-05,  3.5655e-05,  5.2224e-04])\n","gradient values before mask reapp. tensor([-2.7485e-04,  1.7111e-04, -4.4675e-04,  1.6649e-04,  1.0557e-04,\n","         1.2203e-05,  4.8303e-04,  6.1216e-05,  3.6867e-05,  5.2785e-04])\n","gradient values before mask reapp. tensor([-2.7472e-04,  1.7178e-04, -4.4689e-04,  1.6770e-04,  1.0856e-04,\n","         1.2205e-05,  4.8487e-04,  6.2853e-05,  3.7768e-05,  5.3210e-04])\n","gradient values before mask reapp. tensor([5.0592e-04, 2.2595e-04, 6.5239e-04, 2.7215e-04, 7.5611e-04, 1.0852e-04,\n","        5.5817e-04, 5.7943e-04, 5.6829e-05, 1.8738e-03])\n","gradient values before mask reapp. tensor([-2.6003e-04,  1.7491e-04, -4.2100e-04,  1.9011e-04,  1.5473e-04,\n","         1.2706e-05,  4.9311e-04,  8.4204e-05,  5.2723e-05,  5.9500e-04])\n","gradient values before mask reapp. tensor([-2.5865e-04,  1.7580e-04, -4.1879e-04,  1.9190e-04,  1.6008e-04,\n","         1.2928e-05,  4.9539e-04,  8.7477e-05,  5.4098e-05,  6.0290e-04])\n","gradient values before mask reapp. tensor([-2.5840e-04,  1.7651e-04, -4.1867e-04,  1.9319e-04,  1.6347e-04,\n","         1.2941e-05,  4.9728e-04,  8.9431e-05,  5.5116e-05,  6.0755e-04])\n","gradient values before mask reapp. tensor([-2.5893e-04,  1.7708e-04, -4.2010e-04,  1.9403e-04,  1.6498e-04,\n","         1.2870e-05,  4.9898e-04,  9.0083e-05,  5.5635e-05,  6.0994e-04])\n","gradient values before mask reapp. tensor([-2.5854e-04,  1.7781e-04, -4.1978e-04,  1.9538e-04,  1.6869e-04,\n","         1.2886e-05,  5.0090e-04,  9.2246e-05,  5.6752e-05,  6.1489e-04])\n","gradient values before mask reapp. tensor([-2.5815e-04,  1.7854e-04, -4.1944e-04,  1.9669e-04,  1.7203e-04,\n","         1.2970e-05,  5.0293e-04,  9.4144e-05,  5.7658e-05,  6.2004e-04])\n","gradient values before mask reapp. tensor([-2.5777e-04,  1.7926e-04, -4.1920e-04,  1.9803e-04,  1.7544e-04,\n","         1.3022e-05,  5.0492e-04,  9.6107e-05,  5.8616e-05,  6.2505e-04])\n","gradient values before mask reapp. tensor([-2.5845e-04,  1.7981e-04, -4.2097e-04,  1.9878e-04,  1.7653e-04,\n","         1.2950e-05,  5.0662e-04,  9.6477e-05,  5.9010e-05,  6.2701e-04])\n","gradient values before mask reapp. tensor([-2.5958e-04,  1.8024e-04, -4.2374e-04,  1.9919e-04,  1.7620e-04,\n","         1.2873e-05,  5.0822e-04,  9.5905e-05,  5.8958e-05,  6.2758e-04])\n","gradient values before mask reapp. tensor([-2.5854e-04,  1.8108e-04, -4.2229e-04,  2.0082e-04,  1.8072e-04,\n","         1.3064e-05,  5.1048e-04,  9.8616e-05,  6.0100e-05,  6.3456e-04])\n","gradient values before mask reapp. tensor([-2.5908e-04,  1.8166e-04, -4.2377e-04,  2.0173e-04,  1.8242e-04,\n","         1.2966e-05,  5.1221e-04,  9.9400e-05,  6.0705e-05,  6.3701e-04])\n","gradient values before mask reapp. tensor([-2.5818e-04,  1.8250e-04, -4.2249e-04,  2.0336e-04,  1.8696e-04,\n","         1.3113e-05,  5.1443e-04,  1.0211e-04,  6.1909e-05,  6.4373e-04])\n","gradient values before mask reapp. tensor([-2.5870e-04,  1.8309e-04, -4.2395e-04,  2.0424e-04,  1.8855e-04,\n","         1.3049e-05,  5.1622e-04,  1.0281e-04,  6.2446e-05,  6.4626e-04])\n","gradient values before mask reapp. tensor([5.7042e-04, 2.4058e-04, 7.4331e-04, 3.1498e-04, 8.7548e-04, 1.1537e-04,\n","        5.9407e-04, 6.5099e-04, 8.2314e-05, 2.0709e-03])\n","gradient values before mask reapp. tensor([-2.5979e-04,  1.8428e-04, -4.2696e-04,  2.0607e-04,  1.9155e-04,\n","         1.2933e-05,  5.1988e-04,  1.0410e-04,  6.3418e-05,  6.5150e-04])\n","gradient values before mask reapp. tensor([-2.5921e-04,  1.8506e-04, -4.2633e-04,  2.0756e-04,  1.9540e-04,\n","         1.3028e-05,  5.2206e-04,  1.0634e-04,  6.4447e-05,  6.5737e-04])\n","gradient values before mask reapp. tensor([-2.5882e-04,  1.8583e-04, -4.2606e-04,  2.0888e-04,  1.9878e-04,\n","         1.3133e-05,  5.2421e-04,  1.0823e-04,  6.5350e-05,  6.6269e-04])\n","gradient values before mask reapp. tensor([-2.5958e-04,  1.8638e-04, -4.2807e-04,  2.0969e-04,  1.9991e-04,\n","         1.3011e-05,  5.2594e-04,  1.0861e-04,  6.5785e-05,  6.6454e-04])\n","gradient values before mask reapp. tensor([-2.5906e-04,  1.8718e-04, -4.2750e-04,  2.1121e-04,  2.0391e-04,\n","         1.3081e-05,  5.2811e-04,  1.1095e-04,  6.6910e-05,  6.7034e-04])\n","gradient values before mask reapp. tensor([-2.5881e-04,  1.8793e-04, -4.2749e-04,  2.1255e-04,  2.0728e-04,\n","         1.3123e-05,  5.3019e-04,  1.1285e-04,  6.7884e-05,  6.7529e-04])\n","gradient values before mask reapp. tensor([-2.5860e-04,  1.8867e-04, -4.2760e-04,  2.1387e-04,  2.1042e-04,\n","         1.3166e-05,  5.3230e-04,  1.1459e-04,  6.8755e-05,  6.8015e-04])\n","gradient values before mask reapp. tensor([-2.5931e-04,  1.8925e-04, -4.2951e-04,  2.1468e-04,  2.1149e-04,\n","         1.3104e-05,  5.3415e-04,  1.1491e-04,  6.9114e-05,  6.8232e-04])\n","gradient values before mask reapp. tensor([-1.4337e-04,  1.9451e-04, -1.9770e-04,  2.8825e-04,  4.6286e-04,\n","         2.1135e-05,  5.8433e-04,  2.8237e-04,  1.1665e-04,  1.0653e-03])\n","gradient values before mask reapp. tensor([-1.4536e-04,  1.9484e-04, -2.0192e-04,  2.8853e-04,  4.6170e-04,\n","         2.0807e-05,  5.8585e-04,  2.8115e-04,  1.1654e-04,  1.0641e-03])\n","gradient values before mask reapp. tensor([-7.8397e-04,  6.5082e-05, -1.5335e-03,  1.1668e-04, -6.5444e-04,\n","        -6.8293e-05,  3.4285e-04, -4.6869e-04,  5.1125e-06, -9.6137e-04])\n","gradient values before mask reapp. tensor([0.0012, 0.0004, 0.0018, 0.0008, 0.0020, 0.0003, 0.0009, 0.0012, 0.0003,\n","        0.0044])\n","gradient values before mask reapp. tensor([-7.9098e-04,  6.5064e-05, -1.5487e-03,  1.1685e-04, -6.6177e-04,\n","        -6.9311e-05,  3.4465e-04, -4.7446e-04,  4.7598e-06, -9.7388e-04])\n","gradient values before mask reapp. tensor([-1.4319e-04,  1.9791e-04, -1.9986e-04,  2.9464e-04,  4.7692e-04,\n","         2.1147e-05,  5.9504e-04,  2.8984e-04,  1.2045e-04,  1.0881e-03])\n","gradient values before mask reapp. tensor([-7.9323e-04,  6.5900e-05, -1.5549e-03,  1.1945e-04, -6.5908e-04,\n","        -6.9625e-05,  3.4778e-04, -4.7338e-04,  6.8340e-06, -9.7298e-04])\n","gradient values before mask reapp. tensor([0.0014, 0.0004, 0.0021, 0.0009, 0.0023, 0.0003, 0.0009, 0.0014, 0.0003,\n","        0.0049])\n","gradient values before mask reapp. tensor([-0.0012, -0.0003, -0.0029, -0.0004, -0.0018, -0.0002, -0.0002, -0.0015,\n","        -0.0002, -0.0035])\n","gradient values before mask reapp. tensor([0.0014, 0.0004, 0.0021, 0.0009, 0.0023, 0.0003, 0.0009, 0.0014, 0.0003,\n","        0.0049])\n","gradient values before mask reapp. tensor([-0.0012, -0.0003, -0.0030, -0.0004, -0.0018, -0.0002, -0.0002, -0.0015,\n","        -0.0002, -0.0035])\n","gradient values before mask reapp. tensor([0.0014, 0.0004, 0.0021, 0.0009, 0.0024, 0.0003, 0.0009, 0.0014, 0.0003,\n","        0.0050])\n","gradient values before mask reapp. tensor([-0.0012, -0.0003, -0.0030, -0.0004, -0.0019, -0.0002, -0.0002, -0.0015,\n","        -0.0002, -0.0035])\n","gradient values before mask reapp. tensor([0.0014, 0.0004, 0.0021, 0.0009, 0.0024, 0.0003, 0.0010, 0.0015, 0.0003,\n","        0.0050])\n","gradient values before mask reapp. tensor([-0.0012, -0.0003, -0.0030, -0.0004, -0.0019, -0.0002, -0.0002, -0.0015,\n","        -0.0002, -0.0035])\n","gradient values before mask reapp. tensor([0.0014, 0.0004, 0.0021, 0.0009, 0.0024, 0.0003, 0.0010, 0.0015, 0.0003,\n","        0.0050])\n","gradient values before mask reapp. tensor([-0.0012, -0.0003, -0.0030, -0.0004, -0.0019, -0.0002, -0.0002, -0.0015,\n","        -0.0002, -0.0036])\n","gradient values before mask reapp. tensor([0.0014, 0.0004, 0.0022, 0.0009, 0.0024, 0.0003, 0.0010, 0.0015, 0.0003,\n","        0.0051])\n","gradient values before mask reapp. tensor([-0.0012, -0.0003, -0.0031, -0.0004, -0.0019, -0.0002, -0.0002, -0.0015,\n","        -0.0002, -0.0036])\n","gradient values before mask reapp. tensor([0.0015, 0.0005, 0.0022, 0.0009, 0.0024, 0.0004, 0.0010, 0.0015, 0.0003,\n","        0.0051])\n","gradient values before mask reapp. tensor([-0.0012, -0.0003, -0.0031, -0.0004, -0.0019, -0.0002, -0.0002, -0.0015,\n","        -0.0002, -0.0036])\n","gradient values before mask reapp. tensor([0.0015, 0.0005, 0.0022, 0.0009, 0.0025, 0.0004, 0.0010, 0.0015, 0.0003,\n","        0.0052])\n","gradient values before mask reapp. tensor([-0.0013, -0.0003, -0.0031, -0.0004, -0.0019, -0.0002, -0.0002, -0.0016,\n","        -0.0002, -0.0036])\n","gradient values before mask reapp. tensor([0.0015, 0.0005, 0.0022, 0.0009, 0.0025, 0.0004, 0.0010, 0.0015, 0.0003,\n","        0.0052])\n","gradient values before mask reapp. tensor([-0.0013, -0.0003, -0.0031, -0.0004, -0.0019, -0.0002, -0.0002, -0.0016,\n","        -0.0002, -0.0037])\n","gradient values before mask reapp. tensor([0.0015, 0.0005, 0.0022, 0.0010, 0.0025, 0.0004, 0.0010, 0.0015, 0.0004,\n","        0.0052])\n","gradient values before mask reapp. tensor([-0.0013, -0.0003, -0.0031, -0.0004, -0.0019, -0.0002, -0.0002, -0.0016,\n","        -0.0002, -0.0037])\n","gradient values before mask reapp. tensor([0.0015, 0.0005, 0.0022, 0.0010, 0.0025, 0.0004, 0.0010, 0.0015, 0.0004,\n","        0.0053])\n","gradient values before mask reapp. tensor([-0.0013, -0.0003, -0.0032, -0.0004, -0.0020, -0.0002, -0.0002, -0.0016,\n","        -0.0002, -0.0037])\n","gradient values before mask reapp. tensor([0.0015, 0.0005, 0.0023, 0.0010, 0.0025, 0.0004, 0.0010, 0.0016, 0.0004,\n","        0.0053])\n","gradient values before mask reapp. tensor([-0.0013, -0.0003, -0.0032, -0.0004, -0.0020, -0.0003, -0.0002, -0.0016,\n","        -0.0002, -0.0037])\n","gradient values before mask reapp. tensor([0.0015, 0.0005, 0.0023, 0.0010, 0.0026, 0.0004, 0.0010, 0.0016, 0.0004,\n","        0.0054])\n","gradient values before mask reapp. tensor([-0.0013, -0.0003, -0.0032, -0.0004, -0.0020, -0.0003, -0.0002, -0.0016,\n","        -0.0002, -0.0038])\n","gradient values before mask reapp. tensor([0.0016, 0.0005, 0.0023, 0.0010, 0.0026, 0.0004, 0.0010, 0.0016, 0.0004,\n","        0.0054])\n","gradient values before mask reapp. tensor([-0.0013, -0.0003, -0.0032, -0.0004, -0.0020, -0.0003, -0.0002, -0.0016,\n","        -0.0002, -0.0038])\n","gradient values before mask reapp. tensor([0.0016, 0.0005, 0.0023, 0.0010, 0.0026, 0.0004, 0.0010, 0.0016, 0.0004,\n","        0.0055])\n","gradient values before mask reapp. tensor([-0.0013, -0.0003, -0.0033, -0.0004, -0.0020, -0.0003, -0.0002, -0.0016,\n","        -0.0002, -0.0038])\n","gradient values before mask reapp. tensor([0.0016, 0.0005, 0.0024, 0.0010, 0.0026, 0.0004, 0.0010, 0.0016, 0.0004,\n","        0.0055])\n","gradient values before mask reapp. tensor([-0.0013, -0.0003, -0.0033, -0.0004, -0.0020, -0.0003, -0.0002, -0.0016,\n","        -0.0002, -0.0039])\n","gradient values before mask reapp. tensor([0.0016, 0.0005, 0.0024, 0.0010, 0.0027, 0.0004, 0.0011, 0.0016, 0.0004,\n","        0.0056])\n","gradient values before mask reapp. tensor([-0.0013, -0.0003, -0.0033, -0.0004, -0.0020, -0.0003, -0.0002, -0.0017,\n","        -0.0002, -0.0039])\n","gradient values before mask reapp. tensor([0.0016, 0.0005, 0.0024, 0.0010, 0.0027, 0.0004, 0.0011, 0.0016, 0.0004,\n","        0.0056])\n","gradient values before mask reapp. tensor([-0.0013, -0.0003, -0.0033, -0.0004, -0.0021, -0.0003, -0.0002, -0.0017,\n","        -0.0002, -0.0039])\n","gradient values before mask reapp. tensor([0.0016, 0.0005, 0.0024, 0.0010, 0.0027, 0.0004, 0.0011, 0.0017, 0.0004,\n","        0.0057])\n","gradient values before mask reapp. tensor([-0.0014, -0.0003, -0.0034, -0.0004, -0.0021, -0.0003, -0.0002, -0.0017,\n","        -0.0002, -0.0039])\n","gradient values before mask reapp. tensor([0.0016, 0.0005, 0.0024, 0.0010, 0.0027, 0.0004, 0.0011, 0.0017, 0.0004,\n","        0.0057])\n","gradient values before mask reapp. tensor([-0.0014, -0.0003, -0.0034, -0.0004, -0.0021, -0.0003, -0.0002, -0.0017,\n","        -0.0002, -0.0040])\n","gradient values before mask reapp. tensor([-1.6460e-04,  2.7425e-04, -6.3054e-04,  6.9635e-04,  5.4562e-04,\n","         1.5331e-04,  6.9756e-04,  8.9510e-05,  2.2881e-04,  1.5146e-03])\n","gradient values before mask reapp. tensor([0.0017, 0.0005, 0.0025, 0.0010, 0.0028, 0.0004, 0.0011, 0.0017, 0.0004,\n","        0.0058])\n","gradient values before mask reapp. tensor([-0.0014, -0.0003, -0.0034, -0.0005, -0.0021, -0.0003, -0.0002, -0.0017,\n","        -0.0002, -0.0040])\n","gradient values before mask reapp. tensor([0.0009, 0.0004, 0.0009, 0.0008, 0.0014, 0.0003, 0.0008, 0.0008, 0.0003,\n","        0.0034])\n","gradient values before mask reapp. tensor([-9.1686e-04,  7.3901e-05, -1.8420e-03,  1.4737e-04, -7.4498e-04,\n","        -8.6635e-05,  4.0870e-04, -5.5383e-04,  1.8404e-05, -1.1438e-03])\n","gradient values before mask reapp. tensor([0.0017, 0.0005, 0.0025, 0.0011, 0.0028, 0.0004, 0.0011, 0.0017, 0.0004,\n","        0.0059])\n","gradient values before mask reapp. tensor([-0.0014, -0.0003, -0.0035, -0.0005, -0.0021, -0.0003, -0.0002, -0.0017,\n","        -0.0002, -0.0041])\n","gradient values before mask reapp. tensor([0.0017, 0.0005, 0.0025, 0.0011, 0.0028, 0.0004, 0.0011, 0.0017, 0.0004,\n","        0.0059])\n","gradient values before mask reapp. tensor([-0.0014, -0.0003, -0.0035, -0.0005, -0.0022, -0.0003, -0.0002, -0.0018,\n","        -0.0002, -0.0041])\n","gradient values before mask reapp. tensor([0.0009, 0.0004, 0.0009, 0.0009, 0.0015, 0.0003, 0.0008, 0.0008, 0.0003,\n","        0.0035])\n","gradient values before mask reapp. tensor([-9.3544e-04,  7.5100e-05, -1.8853e-03,  1.5163e-04, -7.5822e-04,\n","        -8.9144e-05,  4.1797e-04, -5.6597e-04,  2.0036e-05, -1.1695e-03])\n","gradient values before mask reapp. tensor([0.0017, 0.0005, 0.0026, 0.0011, 0.0029, 0.0004, 0.0011, 0.0018, 0.0004,\n","        0.0060])\n","gradient values before mask reapp. tensor([-0.0014, -0.0004, -0.0036, -0.0005, -0.0022, -0.0003, -0.0002, -0.0018,\n","        -0.0002, -0.0042])\n","gradient values before mask reapp. tensor([0.0018, 0.0005, 0.0026, 0.0011, 0.0029, 0.0004, 0.0011, 0.0018, 0.0004,\n","        0.0061])\n","gradient values before mask reapp. tensor([-0.0014, -0.0004, -0.0036, -0.0005, -0.0022, -0.0003, -0.0002, -0.0018,\n","        -0.0002, -0.0042])\n","gradient values before mask reapp. tensor([ 1.8843e-04,  1.5470e-04, -3.1502e-04,  3.0743e-04,  1.7680e-04,\n","         4.9500e-05,  5.3103e-04,  1.7853e-04,  4.9804e-05,  7.6619e-04])\n","gradient values before mask reapp. tensor([0.0018, 0.0005, 0.0026, 0.0011, 0.0030, 0.0004, 0.0012, 0.0018, 0.0004,\n","        0.0062])\n","gradient values before mask reapp. tensor([-0.0015, -0.0004, -0.0036, -0.0005, -0.0022, -0.0003, -0.0002, -0.0018,\n","        -0.0002, -0.0043])\n","gradient values before mask reapp. tensor([0.0010, 0.0004, 0.0009, 0.0009, 0.0016, 0.0003, 0.0009, 0.0009, 0.0003,\n","        0.0036])\n","gradient values before mask reapp. tensor([-9.6523e-04,  7.6803e-05, -1.9545e-03,  1.5793e-04, -7.8014e-04,\n","        -9.3285e-05,  4.3200e-04, -5.8580e-04,  2.2404e-05, -1.2121e-03])\n","gradient values before mask reapp. tensor([0.0010, 0.0003, 0.0014, 0.0005, 0.0016, 0.0002, 0.0009, 0.0012, 0.0002,\n","        0.0034])\n","gradient values before mask reapp. tensor([-0.0015, -0.0004, -0.0037, -0.0005, -0.0023, -0.0003, -0.0002, -0.0018,\n","        -0.0002, -0.0043])\n","gradient values before mask reapp. tensor([0.0018, 0.0005, 0.0027, 0.0011, 0.0031, 0.0004, 0.0012, 0.0019, 0.0004,\n","        0.0063])\n","gradient values before mask reapp. tensor([-0.0015, -0.0004, -0.0037, -0.0005, -0.0023, -0.0003, -0.0002, -0.0019,\n","        -0.0002, -0.0044])\n","gradient values before mask reapp. tensor([0.0019, 0.0006, 0.0027, 0.0012, 0.0031, 0.0004, 0.0012, 0.0019, 0.0004,\n","        0.0064])\n","gradient values before mask reapp. tensor([-0.0015, -0.0004, -0.0038, -0.0005, -0.0023, -0.0003, -0.0002, -0.0019,\n","        -0.0002, -0.0044])\n","gradient values before mask reapp. tensor([0.0019, 0.0006, 0.0028, 0.0012, 0.0031, 0.0004, 0.0012, 0.0019, 0.0004,\n","        0.0064])\n","gradient values before mask reapp. tensor([-0.0015, -0.0004, -0.0038, -0.0005, -0.0023, -0.0003, -0.0002, -0.0019,\n","        -0.0002, -0.0044])\n","gradient values before mask reapp. tensor([0.0019, 0.0006, 0.0028, 0.0012, 0.0031, 0.0004, 0.0012, 0.0019, 0.0004,\n","        0.0065])\n","gradient values before mask reapp. tensor([-0.0015, -0.0004, -0.0038, -0.0005, -0.0023, -0.0003, -0.0002, -0.0019,\n","        -0.0002, -0.0045])\n","gradient values before mask reapp. tensor([0.0019, 0.0006, 0.0028, 0.0012, 0.0032, 0.0004, 0.0012, 0.0019, 0.0004,\n","        0.0065])\n","gradient values before mask reapp. tensor([-0.0015, -0.0004, -0.0038, -0.0005, -0.0023, -0.0003, -0.0002, -0.0019,\n","        -0.0002, -0.0045])\n","gradient values before mask reapp. tensor([0.0019, 0.0006, 0.0028, 0.0012, 0.0032, 0.0004, 0.0012, 0.0019, 0.0004,\n","        0.0066])\n","gradient values before mask reapp. tensor([-0.0015, -0.0004, -0.0039, -0.0005, -0.0024, -0.0003, -0.0002, -0.0019,\n","        -0.0002, -0.0045])\n","gradient values before mask reapp. tensor([0.0019, 0.0006, 0.0029, 0.0012, 0.0032, 0.0004, 0.0012, 0.0020, 0.0005,\n","        0.0067])\n","gradient values before mask reapp. tensor([-0.0015, -0.0004, -0.0039, -0.0005, -0.0024, -0.0003, -0.0002, -0.0020,\n","        -0.0002, -0.0046])\n","gradient values before mask reapp. tensor([0.0020, 0.0006, 0.0029, 0.0012, 0.0032, 0.0005, 0.0013, 0.0020, 0.0005,\n","        0.0067])\n","gradient values before mask reapp. tensor([-0.0016, -0.0004, -0.0039, -0.0005, -0.0024, -0.0003, -0.0002, -0.0020,\n","        -0.0002, -0.0046])\n","gradient values before mask reapp. tensor([0.0020, 0.0006, 0.0029, 0.0012, 0.0033, 0.0005, 0.0013, 0.0020, 0.0005,\n","        0.0068])\n","gradient values before mask reapp. tensor([-0.0016, -0.0004, -0.0040, -0.0005, -0.0024, -0.0003, -0.0002, -0.0020,\n","        -0.0002, -0.0047])\n","gradient values before mask reapp. tensor([0.0011, 0.0004, 0.0011, 0.0010, 0.0017, 0.0003, 0.0009, 0.0010, 0.0003,\n","        0.0040])\n","gradient values before mask reapp. tensor([-1.0364e-03,  8.2375e-05, -2.1232e-03,  1.7761e-04, -8.2398e-04,\n","        -1.0315e-04,  4.7066e-04, -6.2866e-04,  3.1641e-05, -1.3051e-03])\n","gradient values before mask reapp. tensor([0.0020, 0.0006, 0.0029, 0.0012, 0.0033, 0.0005, 0.0013, 0.0020, 0.0005,\n","        0.0069])\n","gradient values before mask reapp. tensor([-0.0016, -0.0004, -0.0041, -0.0005, -0.0025, -0.0003, -0.0002, -0.0020,\n","        -0.0002, -0.0048])\n","gradient values before mask reapp. tensor([0.0020, 0.0006, 0.0030, 0.0013, 0.0034, 0.0005, 0.0013, 0.0021, 0.0005,\n","        0.0070])\n","gradient values before mask reapp. tensor([-0.0016, -0.0004, -0.0041, -0.0005, -0.0025, -0.0003, -0.0002, -0.0021,\n","        -0.0002, -0.0048])\n","gradient values before mask reapp. tensor([0.0011, 0.0004, 0.0011, 0.0010, 0.0018, 0.0003, 0.0010, 0.0010, 0.0003,\n","        0.0041])\n","gradient values before mask reapp. tensor([-1.0593e-03,  8.3576e-05, -2.1767e-03,  1.8210e-04, -8.4175e-04,\n","        -1.0633e-04,  4.8132e-04, -6.4451e-04,  3.3062e-05, -1.3387e-03])\n","gradient values before mask reapp. tensor([0.0021, 0.0006, 0.0030, 0.0013, 0.0034, 0.0005, 0.0013, 0.0021, 0.0005,\n","        0.0071])\n","gradient values before mask reapp. tensor([-0.0016, -0.0004, -0.0042, -0.0005, -0.0025, -0.0003, -0.0002, -0.0021,\n","        -0.0002, -0.0049])\n","gradient values before mask reapp. tensor([0.0012, 0.0004, 0.0011, 0.0010, 0.0018, 0.0003, 0.0010, 0.0010, 0.0003,\n","        0.0042])\n","gradient values before mask reapp. tensor([-0.0017, -0.0004, -0.0042, -0.0005, -0.0025, -0.0003, -0.0002, -0.0021,\n","        -0.0002, -0.0049])\n","gradient values before mask reapp. tensor([0.0021, 0.0006, 0.0031, 0.0013, 0.0035, 0.0005, 0.0013, 0.0021, 0.0005,\n","        0.0072])\n","gradient values before mask reapp. tensor([-0.0017, -0.0004, -0.0042, -0.0005, -0.0026, -0.0003, -0.0002, -0.0021,\n","        -0.0002, -0.0049])\n","gradient values before mask reapp. tensor([0.0021, 0.0006, 0.0031, 0.0013, 0.0035, 0.0005, 0.0014, 0.0022, 0.0005,\n","        0.0073])\n","gradient values before mask reapp. tensor([-0.0017, -0.0004, -0.0043, -0.0006, -0.0026, -0.0003, -0.0003, -0.0021,\n","        -0.0002, -0.0050])\n","gradient values before mask reapp. tensor([0.0022, 0.0006, 0.0032, 0.0013, 0.0036, 0.0005, 0.0014, 0.0022, 0.0005,\n","        0.0073])\n","gradient values before mask reapp. tensor([-0.0017, -0.0004, -0.0043, -0.0006, -0.0026, -0.0003, -0.0003, -0.0021,\n","        -0.0002, -0.0050])\n","gradient values before mask reapp. tensor([0.0022, 0.0006, 0.0032, 0.0013, 0.0036, 0.0005, 0.0014, 0.0022, 0.0005,\n","        0.0074])\n","gradient values before mask reapp. tensor([-0.0017, -0.0004, -0.0043, -0.0006, -0.0026, -0.0003, -0.0003, -0.0022,\n","        -0.0002, -0.0050])\n","gradient values before mask reapp. tensor([0.0022, 0.0006, 0.0032, 0.0013, 0.0036, 0.0005, 0.0014, 0.0022, 0.0005,\n","        0.0074])\n","gradient values before mask reapp. tensor([-0.0017, -0.0004, -0.0044, -0.0006, -0.0026, -0.0003, -0.0003, -0.0022,\n","        -0.0002, -0.0051])\n","gradient values before mask reapp. tensor([0.0022, 0.0006, 0.0032, 0.0014, 0.0036, 0.0005, 0.0014, 0.0022, 0.0005,\n","        0.0075])\n","gradient values before mask reapp. tensor([-0.0017, -0.0004, -0.0044, -0.0006, -0.0027, -0.0004, -0.0003, -0.0022,\n","        -0.0002, -0.0051])\n","gradient values before mask reapp. tensor([0.0022, 0.0006, 0.0032, 0.0014, 0.0037, 0.0005, 0.0014, 0.0022, 0.0005,\n","        0.0076])\n","gradient values before mask reapp. tensor([-0.0017, -0.0004, -0.0044, -0.0006, -0.0027, -0.0004, -0.0003, -0.0022,\n","        -0.0002, -0.0052])\n","gradient values before mask reapp. tensor([0.0022, 0.0007, 0.0033, 0.0014, 0.0037, 0.0005, 0.0014, 0.0022, 0.0005,\n","        0.0076])\n","gradient values before mask reapp. tensor([-0.0018, -0.0004, -0.0045, -0.0006, -0.0027, -0.0004, -0.0003, -0.0022,\n","        -0.0002, -0.0052])\n","gradient values before mask reapp. tensor([0.0023, 0.0007, 0.0033, 0.0014, 0.0037, 0.0005, 0.0014, 0.0022, 0.0005,\n","        0.0077])\n","gradient values before mask reapp. tensor([-0.0018, -0.0005, -0.0045, -0.0006, -0.0027, -0.0004, -0.0003, -0.0023,\n","        -0.0002, -0.0053])\n","gradient values before mask reapp. tensor([0.0013, 0.0005, 0.0012, 0.0011, 0.0020, 0.0004, 0.0011, 0.0011, 0.0003,\n","        0.0045])\n","gradient values before mask reapp. tensor([-1.1672e-03,  8.7451e-05, -2.4183e-03,  1.9706e-04, -9.4129e-04,\n","        -1.1912e-04,  5.2780e-04, -7.2765e-04,  3.3285e-05, -1.4996e-03])\n","gradient values before mask reapp. tensor([0.0023, 0.0007, 0.0033, 0.0014, 0.0038, 0.0005, 0.0015, 0.0023, 0.0005,\n","        0.0078])\n","gradient values before mask reapp. tensor([-0.0018, -0.0005, -0.0046, -0.0006, -0.0028, -0.0004, -0.0003, -0.0023,\n","        -0.0002, -0.0053])\n","gradient values before mask reapp. tensor([0.0013, 0.0005, 0.0012, 0.0011, 0.0020, 0.0004, 0.0011, 0.0011, 0.0004,\n","        0.0046])\n","gradient values before mask reapp. tensor([-0.0018, -0.0005, -0.0046, -0.0006, -0.0028, -0.0004, -0.0003, -0.0023,\n","        -0.0002, -0.0054])\n","gradient values before mask reapp. tensor([0.0024, 0.0007, 0.0034, 0.0014, 0.0039, 0.0005, 0.0015, 0.0023, 0.0005,\n","        0.0079])\n","gradient values before mask reapp. tensor([-0.0018, -0.0005, -0.0046, -0.0006, -0.0028, -0.0004, -0.0003, -0.0023,\n","        -0.0002, -0.0054])\n","gradient values before mask reapp. tensor([0.0024, 0.0007, 0.0034, 0.0014, 0.0039, 0.0005, 0.0015, 0.0024, 0.0005,\n","        0.0080])\n","gradient values before mask reapp. tensor([-0.0018, -0.0005, -0.0047, -0.0006, -0.0028, -0.0004, -0.0003, -0.0023,\n","        -0.0002, -0.0055])\n","gradient values before mask reapp. tensor([0.0024, 0.0007, 0.0035, 0.0015, 0.0039, 0.0005, 0.0015, 0.0024, 0.0006,\n","        0.0081])\n","gradient values before mask reapp. tensor([-0.0018, -0.0005, -0.0047, -0.0006, -0.0028, -0.0004, -0.0003, -0.0024,\n","        -0.0002, -0.0055])\n","gradient values before mask reapp. tensor([0.0024, 0.0007, 0.0035, 0.0015, 0.0040, 0.0005, 0.0015, 0.0024, 0.0006,\n","        0.0081])\n","gradient values before mask reapp. tensor([-0.0019, -0.0005, -0.0048, -0.0006, -0.0029, -0.0004, -0.0003, -0.0024,\n","        -0.0002, -0.0056])\n","gradient values before mask reapp. tensor([0.0024, 0.0007, 0.0035, 0.0015, 0.0040, 0.0006, 0.0015, 0.0024, 0.0006,\n","        0.0082])\n","gradient values before mask reapp. tensor([-0.0019, -0.0005, -0.0048, -0.0006, -0.0029, -0.0004, -0.0003, -0.0024,\n","        -0.0003, -0.0056])\n","gradient values before mask reapp. tensor([0.0025, 0.0007, 0.0036, 0.0015, 0.0040, 0.0006, 0.0015, 0.0024, 0.0006,\n","        0.0083])\n","gradient values before mask reapp. tensor([-0.0019, -0.0005, -0.0048, -0.0006, -0.0029, -0.0004, -0.0003, -0.0024,\n","        -0.0003, -0.0057])\n","gradient values before mask reapp. tensor([0.0025, 0.0007, 0.0036, 0.0015, 0.0040, 0.0006, 0.0015, 0.0024, 0.0006,\n","        0.0083])\n","gradient values before mask reapp. tensor([-0.0019, -0.0005, -0.0049, -0.0006, -0.0029, -0.0004, -0.0003, -0.0024,\n","        -0.0003, -0.0057])\n","gradient values before mask reapp. tensor([0.0025, 0.0007, 0.0036, 0.0015, 0.0041, 0.0006, 0.0016, 0.0025, 0.0006,\n","        0.0084])\n","gradient values before mask reapp. tensor([-0.0019, -0.0005, -0.0049, -0.0006, -0.0030, -0.0004, -0.0003, -0.0025,\n","        -0.0003, -0.0057])\n","gradient values before mask reapp. tensor([0.0025, 0.0007, 0.0037, 0.0015, 0.0041, 0.0006, 0.0016, 0.0025, 0.0006,\n","        0.0085])\n","gradient values before mask reapp. tensor([-0.0019, -0.0005, -0.0050, -0.0006, -0.0030, -0.0004, -0.0003, -0.0025,\n","        -0.0003, -0.0058])\n","gradient values before mask reapp. tensor([0.0014, 0.0005, 0.0014, 0.0012, 0.0022, 0.0004, 0.0012, 0.0012, 0.0004,\n","        0.0050])\n","gradient values before mask reapp. tensor([-1.2746e-03,  9.3194e-05, -2.6693e-03,  2.1717e-04, -1.0249e-03,\n","        -1.3357e-04,  5.7944e-04, -8.0333e-04,  3.9553e-05, -1.6550e-03])\n","gradient values before mask reapp. tensor([0.0026, 0.0007, 0.0037, 0.0016, 0.0042, 0.0006, 0.0016, 0.0025, 0.0006,\n","        0.0086])\n","gradient values before mask reapp. tensor([-0.0020, -0.0005, -0.0051, -0.0007, -0.0031, -0.0004, -0.0003, -0.0025,\n","        -0.0003, -0.0059])\n","gradient values before mask reapp. tensor([0.0015, 0.0005, 0.0014, 0.0013, 0.0023, 0.0004, 0.0012, 0.0012, 0.0004,\n","        0.0051])\n","gradient values before mask reapp. tensor([-0.0020, -0.0005, -0.0051, -0.0007, -0.0030, -0.0004, -0.0003, -0.0025,\n","        -0.0003, -0.0059])\n","gradient values before mask reapp. tensor([0.0026, 0.0007, 0.0038, 0.0016, 0.0043, 0.0006, 0.0016, 0.0026, 0.0006,\n","        0.0088])\n","gradient values before mask reapp. tensor([-0.0020, -0.0005, -0.0051, -0.0007, -0.0031, -0.0004, -0.0003, -0.0026,\n","        -0.0003, -0.0060])\n","gradient values before mask reapp. tensor([0.0027, 0.0008, 0.0038, 0.0016, 0.0043, 0.0006, 0.0016, 0.0026, 0.0006,\n","        0.0089])\n","gradient values before mask reapp. tensor([-0.0020, -0.0005, -0.0052, -0.0007, -0.0031, -0.0004, -0.0003, -0.0026,\n","        -0.0003, -0.0061])\n","gradient values before mask reapp. tensor([0.0027, 0.0008, 0.0039, 0.0016, 0.0044, 0.0006, 0.0017, 0.0026, 0.0006,\n","        0.0090])\n","gradient values before mask reapp. tensor([-0.0020, -0.0005, -0.0052, -0.0007, -0.0032, -0.0004, -0.0003, -0.0026,\n","        -0.0003, -0.0061])\n","gradient values before mask reapp. tensor([0.0027, 0.0008, 0.0039, 0.0016, 0.0044, 0.0006, 0.0017, 0.0027, 0.0006,\n","        0.0090])\n","gradient values before mask reapp. tensor([-0.0021, -0.0005, -0.0053, -0.0007, -0.0032, -0.0004, -0.0003, -0.0026,\n","        -0.0003, -0.0062])\n","gradient values before mask reapp. tensor([0.0027, 0.0008, 0.0039, 0.0016, 0.0044, 0.0006, 0.0017, 0.0027, 0.0006,\n","        0.0091])\n","gradient values before mask reapp. tensor([-0.0021, -0.0005, -0.0053, -0.0007, -0.0032, -0.0004, -0.0003, -0.0027,\n","        -0.0003, -0.0062])\n","gradient values before mask reapp. tensor([0.0028, 0.0008, 0.0040, 0.0017, 0.0045, 0.0006, 0.0017, 0.0027, 0.0006,\n","        0.0092])\n","gradient values before mask reapp. tensor([-0.0021, -0.0005, -0.0054, -0.0007, -0.0033, -0.0004, -0.0003, -0.0027,\n","        -0.0003, -0.0063])\n","gradient values before mask reapp. tensor([0.0028, 0.0008, 0.0040, 0.0017, 0.0045, 0.0006, 0.0017, 0.0027, 0.0006,\n","        0.0093])\n","gradient values before mask reapp. tensor([-0.0021, -0.0005, -0.0054, -0.0007, -0.0033, -0.0004, -0.0003, -0.0027,\n","        -0.0003, -0.0063])\n","gradient values before mask reapp. tensor([0.0028, 0.0008, 0.0040, 0.0017, 0.0045, 0.0006, 0.0017, 0.0027, 0.0006,\n","        0.0093])\n","gradient values before mask reapp. tensor([-0.0021, -0.0006, -0.0055, -0.0007, -0.0033, -0.0004, -0.0003, -0.0027,\n","        -0.0003, -0.0064])\n","gradient values before mask reapp. tensor([0.0016, 0.0005, 0.0015, 0.0014, 0.0025, 0.0005, 0.0013, 0.0013, 0.0004,\n","        0.0056])\n","gradient values before mask reapp. tensor([-1.3995e-03,  9.5983e-05, -2.9554e-03,  2.2729e-04, -1.1528e-03,\n","        -1.4915e-04,  6.2988e-04, -9.0925e-04,  3.4333e-05, -1.8571e-03])\n","gradient values before mask reapp. tensor([0.0029, 0.0008, 0.0041, 0.0017, 0.0046, 0.0006, 0.0018, 0.0028, 0.0007,\n","        0.0095])\n","gradient values before mask reapp. tensor([-0.0022, -0.0006, -0.0056, -0.0007, -0.0034, -0.0004, -0.0003, -0.0028,\n","        -0.0003, -0.0065])\n","gradient values before mask reapp. tensor([0.0016, 0.0006, 0.0015, 0.0014, 0.0025, 0.0005, 0.0013, 0.0013, 0.0004,\n","        0.0056])\n","gradient values before mask reapp. tensor([-0.0022, -0.0006, -0.0056, -0.0007, -0.0034, -0.0005, -0.0003, -0.0028,\n","        -0.0003, -0.0065])\n","gradient values before mask reapp. tensor([0.0029, 0.0008, 0.0042, 0.0018, 0.0048, 0.0006, 0.0018, 0.0029, 0.0007,\n","        0.0097])\n","gradient values before mask reapp. tensor([-0.0022, -0.0006, -0.0056, -0.0007, -0.0034, -0.0005, -0.0003, -0.0028,\n","        -0.0003, -0.0066])\n","gradient values before mask reapp. tensor([0.0030, 0.0008, 0.0042, 0.0018, 0.0048, 0.0007, 0.0018, 0.0029, 0.0007,\n","        0.0098])\n","gradient values before mask reapp. tensor([-0.0022, -0.0006, -0.0057, -0.0007, -0.0034, -0.0005, -0.0003, -0.0029,\n","        -0.0003, -0.0066])\n","gradient values before mask reapp. tensor([0.0030, 0.0008, 0.0043, 0.0018, 0.0048, 0.0007, 0.0018, 0.0029, 0.0007,\n","        0.0099])\n","gradient values before mask reapp. tensor([-0.0022, -0.0006, -0.0057, -0.0007, -0.0034, -0.0005, -0.0003, -0.0029,\n","        -0.0003, -0.0067])\n","gradient values before mask reapp. tensor([0.0030, 0.0008, 0.0043, 0.0018, 0.0048, 0.0007, 0.0018, 0.0029, 0.0007,\n","        0.0099])\n","gradient values before mask reapp. tensor([-0.0022, -0.0006, -0.0058, -0.0008, -0.0035, -0.0005, -0.0003, -0.0029,\n","        -0.0003, -0.0068])\n","gradient values before mask reapp. tensor([0.0030, 0.0008, 0.0043, 0.0018, 0.0048, 0.0007, 0.0018, 0.0029, 0.0007,\n","        0.0100])\n","gradient values before mask reapp. tensor([-0.0023, -0.0006, -0.0058, -0.0008, -0.0035, -0.0005, -0.0004, -0.0029,\n","        -0.0003, -0.0068])\n","gradient values before mask reapp. tensor([0.0030, 0.0008, 0.0043, 0.0018, 0.0049, 0.0007, 0.0019, 0.0029, 0.0007,\n","        0.0101])\n","gradient values before mask reapp. tensor([-0.0023, -0.0006, -0.0059, -0.0008, -0.0035, -0.0005, -0.0004, -0.0030,\n","        -0.0003, -0.0069])\n","gradient values before mask reapp. tensor([0.0031, 0.0009, 0.0044, 0.0018, 0.0050, 0.0007, 0.0019, 0.0030, 0.0007,\n","        0.0102])\n","gradient values before mask reapp. tensor([-0.0023, -0.0006, -0.0059, -0.0008, -0.0036, -0.0005, -0.0004, -0.0030,\n","        -0.0003, -0.0069])\n","gradient values before mask reapp. tensor([0.0031, 0.0009, 0.0044, 0.0018, 0.0050, 0.0007, 0.0019, 0.0030, 0.0007,\n","        0.0102])\n","gradient values before mask reapp. tensor([-0.0023, -0.0006, -0.0060, -0.0008, -0.0036, -0.0005, -0.0004, -0.0030,\n","        -0.0003, -0.0070])\n","gradient values before mask reapp. tensor([0.0018, 0.0006, 0.0017, 0.0015, 0.0027, 0.0005, 0.0014, 0.0015, 0.0005,\n","        0.0061])\n","gradient values before mask reapp. tensor([-1.5189e-03,  1.0128e-04, -3.2381e-03,  2.4552e-04, -1.2533e-03,\n","        -1.6518e-04,  6.8683e-04, -9.9823e-04,  3.8163e-05, -2.0380e-03])\n","gradient values before mask reapp. tensor([0.0018, 0.0006, 0.0017, 0.0015, 0.0027, 0.0005, 0.0014, 0.0015, 0.0005,\n","        0.0061])\n","gradient values before mask reapp. tensor([-0.0023, -0.0006, -0.0060, -0.0008, -0.0036, -0.0005, -0.0004, -0.0030,\n","        -0.0003, -0.0071])\n","gradient values before mask reapp. tensor([0.0032, 0.0009, 0.0046, 0.0019, 0.0051, 0.0007, 0.0019, 0.0031, 0.0007,\n","        0.0105])\n","gradient values before mask reapp. tensor([-0.0024, -0.0006, -0.0061, -0.0008, -0.0037, -0.0005, -0.0004, -0.0031,\n","        -0.0003, -0.0071])\n","gradient values before mask reapp. tensor([0.0032, 0.0009, 0.0046, 0.0019, 0.0052, 0.0007, 0.0020, 0.0031, 0.0007,\n","        0.0106])\n","gradient values before mask reapp. tensor([-0.0024, -0.0006, -0.0062, -0.0008, -0.0037, -0.0005, -0.0004, -0.0031,\n","        -0.0003, -0.0072])\n","gradient values before mask reapp. tensor([0.0032, 0.0009, 0.0046, 0.0019, 0.0052, 0.0007, 0.0020, 0.0031, 0.0007,\n","        0.0107])\n","gradient values before mask reapp. tensor([-0.0024, -0.0006, -0.0062, -0.0008, -0.0037, -0.0005, -0.0004, -0.0031,\n","        -0.0003, -0.0073])\n","gradient values before mask reapp. tensor([0.0033, 0.0009, 0.0047, 0.0019, 0.0053, 0.0007, 0.0020, 0.0032, 0.0007,\n","        0.0108])\n","gradient values before mask reapp. tensor([-0.0024, -0.0006, -0.0063, -0.0008, -0.0038, -0.0005, -0.0004, -0.0032,\n","        -0.0003, -0.0073])\n","gradient values before mask reapp. tensor([0.0033, 0.0009, 0.0047, 0.0020, 0.0053, 0.0007, 0.0020, 0.0032, 0.0007,\n","        0.0109])\n","gradient values before mask reapp. tensor([-0.0024, -0.0006, -0.0063, -0.0008, -0.0038, -0.0005, -0.0004, -0.0032,\n","        -0.0003, -0.0074])\n","gradient values before mask reapp. tensor([0.0033, 0.0009, 0.0047, 0.0020, 0.0053, 0.0007, 0.0020, 0.0032, 0.0007,\n","        0.0110])\n","gradient values before mask reapp. tensor([-0.0025, -0.0007, -0.0064, -0.0008, -0.0038, -0.0005, -0.0004, -0.0032,\n","        -0.0003, -0.0075])\n","gradient values before mask reapp. tensor([0.0034, 0.0009, 0.0048, 0.0020, 0.0054, 0.0007, 0.0020, 0.0032, 0.0008,\n","        0.0110])\n","gradient values before mask reapp. tensor([-0.0025, -0.0007, -0.0064, -0.0008, -0.0038, -0.0005, -0.0004, -0.0032,\n","        -0.0003, -0.0075])\n","gradient values before mask reapp. tensor([0.0034, 0.0009, 0.0048, 0.0020, 0.0054, 0.0007, 0.0020, 0.0033, 0.0008,\n","        0.0111])\n","gradient values before mask reapp. tensor([-0.0025, -0.0007, -0.0064, -0.0008, -0.0038, -0.0005, -0.0004, -0.0032,\n","        -0.0003, -0.0075])\n","gradient values before mask reapp. tensor([0.0020, 0.0006, 0.0018, 0.0016, 0.0029, 0.0005, 0.0015, 0.0016, 0.0005,\n","        0.0066])\n","gradient values before mask reapp. tensor([-0.0025, -0.0007, -0.0065, -0.0008, -0.0039, -0.0005, -0.0004, -0.0032,\n","        -0.0003, -0.0076])\n","gradient values before mask reapp. tensor([0.0035, 0.0009, 0.0049, 0.0020, 0.0056, 0.0008, 0.0021, 0.0033, 0.0008,\n","        0.0114])\n","gradient values before mask reapp. tensor([-0.0025, -0.0007, -0.0065, -0.0009, -0.0039, -0.0005, -0.0004, -0.0033,\n","        -0.0003, -0.0077])\n","gradient values before mask reapp. tensor([0.0035, 0.0010, 0.0050, 0.0021, 0.0056, 0.0008, 0.0021, 0.0034, 0.0008,\n","        0.0114])\n","gradient values before mask reapp. tensor([-0.0025, -0.0007, -0.0066, -0.0009, -0.0040, -0.0005, -0.0004, -0.0033,\n","        -0.0003, -0.0077])\n","gradient values before mask reapp. tensor([0.0035, 0.0010, 0.0050, 0.0021, 0.0056, 0.0008, 0.0021, 0.0034, 0.0008,\n","        0.0115])\n","gradient values before mask reapp. tensor([-0.0025, -0.0007, -0.0066, -0.0009, -0.0039, -0.0005, -0.0004, -0.0033,\n","        -0.0003, -0.0078])\n","gradient values before mask reapp. tensor([0.0035, 0.0010, 0.0050, 0.0021, 0.0057, 0.0008, 0.0021, 0.0034, 0.0008,\n","        0.0116])\n","gradient values before mask reapp. tensor([-0.0026, -0.0007, -0.0067, -0.0009, -0.0040, -0.0006, -0.0004, -0.0034,\n","        -0.0003, -0.0079])\n","gradient values before mask reapp. tensor([0.0036, 0.0010, 0.0051, 0.0021, 0.0057, 0.0008, 0.0022, 0.0034, 0.0008,\n","        0.0117])\n","gradient values before mask reapp. tensor([-0.0026, -0.0007, -0.0068, -0.0009, -0.0040, -0.0006, -0.0004, -0.0034,\n","        -0.0003, -0.0079])\n","gradient values before mask reapp. tensor([0.0036, 0.0010, 0.0051, 0.0021, 0.0058, 0.0008, 0.0022, 0.0035, 0.0008,\n","        0.0118])\n","gradient values before mask reapp. tensor([-0.0026, -0.0007, -0.0068, -0.0009, -0.0041, -0.0006, -0.0004, -0.0034,\n","        -0.0003, -0.0080])\n","gradient values before mask reapp. tensor([0.0021, 0.0007, 0.0020, 0.0017, 0.0031, 0.0006, 0.0016, 0.0017, 0.0005,\n","        0.0071])\n","gradient values before mask reapp. tensor([-1.7031e-03,  1.1357e-04, -3.6825e-03,  2.8755e-04, -1.3705e-03,\n","        -1.9159e-04,  7.8838e-04, -1.1195e-03,  5.9997e-05, -2.2894e-03])\n","gradient values before mask reapp. tensor([0.0037, 0.0010, 0.0052, 0.0021, 0.0059, 0.0008, 0.0022, 0.0035, 0.0008,\n","        0.0120])\n","gradient values before mask reapp. tensor([-0.0027, -0.0007, -0.0069, -0.0009, -0.0041, -0.0006, -0.0004, -0.0035,\n","        -0.0003, -0.0081])\n","gradient values before mask reapp. tensor([0.0021, 0.0007, 0.0020, 0.0017, 0.0032, 0.0006, 0.0016, 0.0017, 0.0006,\n","        0.0072])\n","gradient values before mask reapp. tensor([-0.0027, -0.0007, -0.0070, -0.0009, -0.0041, -0.0006, -0.0004, -0.0035,\n","        -0.0003, -0.0081])\n","gradient values before mask reapp. tensor([0.0038, 0.0010, 0.0053, 0.0022, 0.0060, 0.0008, 0.0022, 0.0036, 0.0008,\n","        0.0123])\n","gradient values before mask reapp. tensor([-0.0027, -0.0007, -0.0070, -0.0009, -0.0042, -0.0006, -0.0004, -0.0035,\n","        -0.0003, -0.0082])\n","gradient values before mask reapp. tensor([0.0038, 0.0010, 0.0054, 0.0022, 0.0061, 0.0008, 0.0023, 0.0036, 0.0008,\n","        0.0123])\n","gradient values before mask reapp. tensor([-0.0027, -0.0007, -0.0071, -0.0009, -0.0042, -0.0006, -0.0004, -0.0035,\n","        -0.0003, -0.0083])\n","gradient values before mask reapp. tensor([0.0038, 0.0010, 0.0054, 0.0022, 0.0061, 0.0008, 0.0023, 0.0037, 0.0009,\n","        0.0124])\n","gradient values before mask reapp. tensor([-0.0027, -0.0007, -0.0071, -0.0009, -0.0042, -0.0006, -0.0004, -0.0036,\n","        -0.0004, -0.0083])\n","gradient values before mask reapp. tensor([0.0038, 0.0010, 0.0054, 0.0022, 0.0061, 0.0008, 0.0023, 0.0037, 0.0009,\n","        0.0125])\n","gradient values before mask reapp. tensor([-0.0027, -0.0007, -0.0072, -0.0009, -0.0043, -0.0006, -0.0004, -0.0036,\n","        -0.0004, -0.0084])\n","gradient values before mask reapp. tensor([0.0039, 0.0011, 0.0055, 0.0023, 0.0062, 0.0008, 0.0023, 0.0037, 0.0009,\n","        0.0126])\n","gradient values before mask reapp. tensor([-0.0028, -0.0007, -0.0073, -0.0010, -0.0043, -0.0006, -0.0004, -0.0036,\n","        -0.0004, -0.0085])\n","gradient values before mask reapp. tensor([0.0039, 0.0011, 0.0056, 0.0023, 0.0063, 0.0008, 0.0023, 0.0038, 0.0009,\n","        0.0128])\n","gradient values before mask reapp. tensor([-0.0028, -0.0008, -0.0074, -0.0010, -0.0044, -0.0006, -0.0004, -0.0037,\n","        -0.0004, -0.0086])\n","gradient values before mask reapp. tensor([0.0023, 0.0007, 0.0022, 0.0019, 0.0035, 0.0006, 0.0017, 0.0019, 0.0006,\n","        0.0077])\n","gradient values before mask reapp. tensor([-0.0028, -0.0008, -0.0074, -0.0010, -0.0043, -0.0006, -0.0004, -0.0037,\n","        -0.0004, -0.0086])\n","gradient values before mask reapp. tensor([0.0040, 0.0011, 0.0057, 0.0023, 0.0065, 0.0009, 0.0024, 0.0039, 0.0009,\n","        0.0131])\n","gradient values before mask reapp. tensor([-0.0028, -0.0008, -0.0074, -0.0010, -0.0044, -0.0006, -0.0004, -0.0037,\n","        -0.0004, -0.0087])\n","gradient values before mask reapp. tensor([0.0040, 0.0011, 0.0057, 0.0023, 0.0064, 0.0009, 0.0024, 0.0039, 0.0009,\n","        0.0131])\n","gradient values before mask reapp. tensor([-0.0028, -0.0008, -0.0075, -0.0010, -0.0044, -0.0006, -0.0005, -0.0037,\n","        -0.0004, -0.0087])\n","gradient values before mask reapp. tensor([0.0041, 0.0011, 0.0058, 0.0024, 0.0065, 0.0009, 0.0024, 0.0039, 0.0009,\n","        0.0132])\n","gradient values before mask reapp. tensor([-0.0029, -0.0008, -0.0076, -0.0010, -0.0045, -0.0006, -0.0005, -0.0038,\n","        -0.0004, -0.0088])\n","gradient values before mask reapp. tensor([0.0041, 0.0011, 0.0058, 0.0024, 0.0066, 0.0009, 0.0024, 0.0039, 0.0009,\n","        0.0133])\n","gradient values before mask reapp. tensor([-0.0029, -0.0008, -0.0076, -0.0010, -0.0045, -0.0006, -0.0005, -0.0038,\n","        -0.0004, -0.0089])\n","gradient values before mask reapp. tensor([0.0041, 0.0011, 0.0059, 0.0024, 0.0066, 0.0009, 0.0025, 0.0040, 0.0009,\n","        0.0135])\n","gradient values before mask reapp. tensor([-0.0029, -0.0008, -0.0077, -0.0010, -0.0045, -0.0006, -0.0005, -0.0039,\n","        -0.0004, -0.0090])\n","gradient values before mask reapp. tensor([0.0024, 0.0008, 0.0023, 0.0019, 0.0037, 0.0007, 0.0018, 0.0020, 0.0006,\n","        0.0081])\n","gradient values before mask reapp. tensor([-1.8853e-03,  1.2678e-04, -4.1176e-03,  3.2524e-04, -1.4605e-03,\n","        -2.2091e-04,  8.9003e-04, -1.2345e-03,  9.4163e-05, -2.5347e-03])\n","gradient values before mask reapp. tensor([0.0025, 0.0008, 0.0023, 0.0020, 0.0037, 0.0007, 0.0018, 0.0020, 0.0006,\n","        0.0081])\n","gradient values before mask reapp. tensor([-0.0029, -0.0008, -0.0077, -0.0010, -0.0045, -0.0006, -0.0005, -0.0039,\n","        -0.0004, -0.0090])\n","gradient values before mask reapp. tensor([0.0043, 0.0011, 0.0061, 0.0025, 0.0069, 0.0009, 0.0025, 0.0041, 0.0010,\n","        0.0139])\n","gradient values before mask reapp. tensor([-0.0030, -0.0008, -0.0079, -0.0010, -0.0046, -0.0007, -0.0005, -0.0039,\n","        -0.0004, -0.0092])\n","gradient values before mask reapp. tensor([0.0043, 0.0012, 0.0061, 0.0025, 0.0069, 0.0009, 0.0025, 0.0041, 0.0010,\n","        0.0139])\n","gradient values before mask reapp. tensor([-0.0030, -0.0008, -0.0079, -0.0010, -0.0047, -0.0007, -0.0005, -0.0040,\n","        -0.0004, -0.0092])\n","gradient values before mask reapp. tensor([0.0043, 0.0012, 0.0061, 0.0025, 0.0069, 0.0009, 0.0026, 0.0041, 0.0010,\n","        0.0140])\n","gradient values before mask reapp. tensor([-0.0030, -0.0008, -0.0080, -0.0011, -0.0047, -0.0007, -0.0005, -0.0040,\n","        -0.0004, -0.0093])\n","gradient values before mask reapp. tensor([0.0044, 0.0012, 0.0062, 0.0025, 0.0070, 0.0009, 0.0026, 0.0042, 0.0010,\n","        0.0141])\n","gradient values before mask reapp. tensor([-0.0031, -0.0008, -0.0081, -0.0011, -0.0048, -0.0007, -0.0005, -0.0040,\n","        -0.0004, -0.0094])\n","gradient values before mask reapp. tensor([0.0044, 0.0012, 0.0062, 0.0025, 0.0070, 0.0009, 0.0026, 0.0042, 0.0010,\n","        0.0142])\n","gradient values before mask reapp. tensor([-0.0031, -0.0008, -0.0081, -0.0011, -0.0048, -0.0007, -0.0005, -0.0041,\n","        -0.0004, -0.0095])\n","gradient values before mask reapp. tensor([0.0027, 0.0008, 0.0026, 0.0021, 0.0040, 0.0007, 0.0019, 0.0021, 0.0007,\n","        0.0087])\n","gradient values before mask reapp. tensor([-0.0031, -0.0008, -0.0081, -0.0011, -0.0047, -0.0007, -0.0005, -0.0041,\n","        -0.0004, -0.0095])\n","gradient values before mask reapp. tensor([0.0045, 0.0012, 0.0064, 0.0026, 0.0072, 0.0010, 0.0026, 0.0043, 0.0010,\n","        0.0146])\n","gradient values before mask reapp. tensor([-0.0031, -0.0009, -0.0082, -0.0011, -0.0048, -0.0007, -0.0005, -0.0041,\n","        -0.0004, -0.0096])\n","gradient values before mask reapp. tensor([0.0045, 0.0012, 0.0064, 0.0026, 0.0073, 0.0010, 0.0027, 0.0043, 0.0010,\n","        0.0146])\n","gradient values before mask reapp. tensor([-0.0031, -0.0009, -0.0083, -0.0011, -0.0048, -0.0007, -0.0005, -0.0041,\n","        -0.0004, -0.0097])\n","gradient values before mask reapp. tensor([0.0046, 0.0012, 0.0064, 0.0026, 0.0073, 0.0010, 0.0027, 0.0044, 0.0010,\n","        0.0147])\n","gradient values before mask reapp. tensor([-0.0032, -0.0009, -0.0084, -0.0011, -0.0049, -0.0007, -0.0005, -0.0042,\n","        -0.0004, -0.0098])\n","gradient values before mask reapp. tensor([0.0046, 0.0012, 0.0065, 0.0027, 0.0074, 0.0010, 0.0027, 0.0044, 0.0011,\n","        0.0149])\n","gradient values before mask reapp. tensor([-0.0032, -0.0009, -0.0084, -0.0011, -0.0049, -0.0007, -0.0005, -0.0042,\n","        -0.0004, -0.0098])\n","gradient values before mask reapp. tensor([0.0028, 0.0009, 0.0027, 0.0022, 0.0042, 0.0007, 0.0020, 0.0022, 0.0007,\n","        0.0091])\n","gradient values before mask reapp. tensor([-0.0003, -0.0007, -0.0044, -0.0007, -0.0025, -0.0003, -0.0002, -0.0023,\n","        -0.0003, -0.0049])\n","gradient values before mask reapp. tensor([0.0028, 0.0009, 0.0027, 0.0022, 0.0042, 0.0007, 0.0020, 0.0023, 0.0007,\n","        0.0091])\n","gradient values before mask reapp. tensor([-0.0032, -0.0009, -0.0085, -0.0011, -0.0049, -0.0007, -0.0005, -0.0042,\n","        -0.0004, -0.0099])\n","gradient values before mask reapp. tensor([0.0048, 0.0013, 0.0068, 0.0027, 0.0077, 0.0010, 0.0028, 0.0046, 0.0011,\n","        0.0154])\n","gradient values before mask reapp. tensor([-0.0032, -0.0009, -0.0086, -0.0011, -0.0050, -0.0007, -0.0005, -0.0043,\n","        -0.0004, -0.0100])\n","gradient values before mask reapp. tensor([0.0048, 0.0013, 0.0068, 0.0027, 0.0077, 0.0010, 0.0028, 0.0046, 0.0011,\n","        0.0154])\n","gradient values before mask reapp. tensor([-0.0033, -0.0009, -0.0087, -0.0011, -0.0051, -0.0007, -0.0005, -0.0043,\n","        -0.0004, -0.0101])\n","gradient values before mask reapp. tensor([0.0048, 0.0013, 0.0069, 0.0028, 0.0078, 0.0010, 0.0028, 0.0046, 0.0011,\n","        0.0156])\n","gradient values before mask reapp. tensor([-0.0033, -0.0009, -0.0088, -0.0012, -0.0051, -0.0007, -0.0005, -0.0044,\n","        -0.0004, -0.0102])\n","gradient values before mask reapp. tensor([0.0049, 0.0013, 0.0069, 0.0028, 0.0078, 0.0010, 0.0028, 0.0047, 0.0011,\n","        0.0157])\n","gradient values before mask reapp. tensor([-0.0033, -0.0009, -0.0088, -0.0012, -0.0052, -0.0007, -0.0005, -0.0044,\n","        -0.0004, -0.0103])\n","gradient values before mask reapp. tensor([0.0029, 0.0009, 0.0028, 0.0023, 0.0044, 0.0008, 0.0021, 0.0024, 0.0008,\n","        0.0095])\n","gradient values before mask reapp. tensor([-0.0033, -0.0009, -0.0088, -0.0012, -0.0051, -0.0007, -0.0005, -0.0044,\n","        -0.0004, -0.0102])\n","gradient values before mask reapp. tensor([0.0050, 0.0013, 0.0070, 0.0028, 0.0080, 0.0011, 0.0029, 0.0048, 0.0011,\n","        0.0160])\n","gradient values before mask reapp. tensor([-0.0033, -0.0009, -0.0089, -0.0012, -0.0052, -0.0007, -0.0005, -0.0044,\n","        -0.0004, -0.0104])\n","gradient values before mask reapp. tensor([0.0050, 0.0013, 0.0071, 0.0029, 0.0081, 0.0011, 0.0029, 0.0048, 0.0012,\n","        0.0162])\n","gradient values before mask reapp. tensor([-0.0034, -0.0009, -0.0090, -0.0012, -0.0052, -0.0008, -0.0005, -0.0045,\n","        -0.0004, -0.0105])\n","gradient values before mask reapp. tensor([0.0051, 0.0013, 0.0072, 0.0029, 0.0081, 0.0011, 0.0029, 0.0048, 0.0012,\n","        0.0162])\n","gradient values before mask reapp. tensor([-0.0034, -0.0009, -0.0091, -0.0012, -0.0053, -0.0008, -0.0006, -0.0045,\n","        -0.0004, -0.0106])\n","gradient values before mask reapp. tensor([0.0031, 0.0009, 0.0030, 0.0023, 0.0046, 0.0008, 0.0022, 0.0025, 0.0008,\n","        0.0099])\n","gradient values before mask reapp. tensor([-0.0034, -0.0009, -0.0090, -0.0012, -0.0052, -0.0008, -0.0005, -0.0045,\n","        -0.0004, -0.0105])\n","gradient values before mask reapp. tensor([0.0052, 0.0014, 0.0073, 0.0029, 0.0083, 0.0011, 0.0030, 0.0049, 0.0012,\n","        0.0165])\n","gradient values before mask reapp. tensor([-0.0034, -0.0010, -0.0092, -0.0012, -0.0053, -0.0008, -0.0006, -0.0046,\n","        -0.0004, -0.0107])\n","gradient values before mask reapp. tensor([0.0052, 0.0014, 0.0074, 0.0030, 0.0084, 0.0011, 0.0030, 0.0050, 0.0012,\n","        0.0167])\n","gradient values before mask reapp. tensor([-0.0035, -0.0010, -0.0093, -0.0012, -0.0054, -0.0008, -0.0006, -0.0046,\n","        -0.0004, -0.0108])\n","gradient values before mask reapp. tensor([0.0053, 0.0014, 0.0074, 0.0030, 0.0085, 0.0011, 0.0030, 0.0050, 0.0012,\n","        0.0168])\n","gradient values before mask reapp. tensor([-0.0035, -0.0010, -0.0093, -0.0012, -0.0054, -0.0008, -0.0006, -0.0047,\n","        -0.0004, -0.0109])\n","gradient values before mask reapp. tensor([0.0053, 0.0014, 0.0075, 0.0030, 0.0085, 0.0011, 0.0030, 0.0050, 0.0012,\n","        0.0169])\n","gradient values before mask reapp. tensor([-0.0035, -0.0010, -0.0094, -0.0013, -0.0054, -0.0008, -0.0006, -0.0047,\n","        -0.0004, -0.0110])\n","gradient values before mask reapp. tensor([0.0032, 0.0010, 0.0031, 0.0024, 0.0049, 0.0008, 0.0023, 0.0026, 0.0009,\n","        0.0104])\n","gradient values before mask reapp. tensor([-0.0035, -0.0010, -0.0094, -0.0012, -0.0054, -0.0008, -0.0006, -0.0047,\n","        -0.0004, -0.0109])\n","gradient values before mask reapp. tensor([0.0054, 0.0014, 0.0077, 0.0031, 0.0088, 0.0011, 0.0031, 0.0052, 0.0013,\n","        0.0173])\n","gradient values before mask reapp. tensor([-0.0036, -0.0010, -0.0095, -0.0013, -0.0055, -0.0008, -0.0006, -0.0047,\n","        -0.0004, -0.0111])\n","gradient values before mask reapp. tensor([0.0054, 0.0014, 0.0077, 0.0031, 0.0088, 0.0011, 0.0031, 0.0052, 0.0013,\n","        0.0174])\n","gradient values before mask reapp. tensor([-0.0036, -0.0010, -0.0096, -0.0013, -0.0055, -0.0008, -0.0006, -0.0048,\n","        -0.0004, -0.0112])\n","gradient values before mask reapp. tensor([0.0055, 0.0014, 0.0077, 0.0031, 0.0088, 0.0011, 0.0031, 0.0052, 0.0013,\n","        0.0175])\n","gradient values before mask reapp. tensor([-0.0036, -0.0010, -0.0097, -0.0013, -0.0056, -0.0008, -0.0006, -0.0049,\n","        -0.0004, -0.0113])\n","gradient values before mask reapp. tensor([0.0034, 0.0010, 0.0033, 0.0025, 0.0051, 0.0008, 0.0023, 0.0027, 0.0009,\n","        0.0107])\n","gradient values before mask reapp. tensor([-0.0036, -0.0010, -0.0096, -0.0013, -0.0055, -0.0008, -0.0006, -0.0048,\n","        -0.0004, -0.0112])\n","gradient values before mask reapp. tensor([0.0056, 0.0015, 0.0079, 0.0032, 0.0091, 0.0012, 0.0032, 0.0054, 0.0013,\n","        0.0179])\n","gradient values before mask reapp. tensor([-0.0036, -0.0010, -0.0098, -0.0013, -0.0056, -0.0008, -0.0006, -0.0049,\n","        -0.0004, -0.0114])\n","gradient values before mask reapp. tensor([0.0056, 0.0015, 0.0080, 0.0032, 0.0091, 0.0012, 0.0032, 0.0054, 0.0013,\n","        0.0180])\n","gradient values before mask reapp. tensor([-0.0037, -0.0010, -0.0099, -0.0013, -0.0057, -0.0008, -0.0006, -0.0049,\n","        -0.0004, -0.0115])\n","gradient values before mask reapp. tensor([0.0057, 0.0015, 0.0080, 0.0032, 0.0092, 0.0012, 0.0032, 0.0054, 0.0013,\n","        0.0181])\n","gradient values before mask reapp. tensor([-0.0037, -0.0010, -0.0100, -0.0013, -0.0057, -0.0008, -0.0006, -0.0050,\n","        -0.0004, -0.0116])\n","gradient values before mask reapp. tensor([0.0035, 0.0010, 0.0034, 0.0026, 0.0053, 0.0009, 0.0024, 0.0028, 0.0010,\n","        0.0111])\n","gradient values before mask reapp. tensor([-0.0037, -0.0010, -0.0099, -0.0013, -0.0056, -0.0008, -0.0006, -0.0049,\n","        -0.0004, -0.0115])\n","gradient values before mask reapp. tensor([0.0058, 0.0015, 0.0083, 0.0033, 0.0094, 0.0012, 0.0033, 0.0056, 0.0014,\n","        0.0185])\n","gradient values before mask reapp. tensor([-0.0037, -0.0011, -0.0100, -0.0013, -0.0057, -0.0009, -0.0006, -0.0050,\n","        -0.0004, -0.0117])\n","gradient values before mask reapp. tensor([0.0058, 0.0015, 0.0082, 0.0033, 0.0094, 0.0012, 0.0033, 0.0056, 0.0014,\n","        0.0185])\n","gradient values before mask reapp. tensor([-0.0038, -0.0011, -0.0101, -0.0014, -0.0058, -0.0009, -0.0006, -0.0051,\n","        -0.0004, -0.0118])\n","gradient values before mask reapp. tensor([0.0036, 0.0010, 0.0036, 0.0027, 0.0055, 0.0009, 0.0025, 0.0029, 0.0010,\n","        0.0114])\n","gradient values before mask reapp. tensor([-0.0037, -0.0011, -0.0101, -0.0013, -0.0057, -0.0009, -0.0006, -0.0050,\n","        -0.0004, -0.0117])\n","gradient values before mask reapp. tensor([0.0060, 0.0015, 0.0085, 0.0033, 0.0097, 0.0012, 0.0034, 0.0058, 0.0014,\n","        0.0190])\n","gradient values before mask reapp. tensor([-0.0038, -0.0011, -0.0102, -0.0014, -0.0058, -0.0009, -0.0006, -0.0051,\n","        -0.0004, -0.0119])\n","gradient values before mask reapp. tensor([0.0060, 0.0015, 0.0085, 0.0034, 0.0097, 0.0012, 0.0034, 0.0058, 0.0014,\n","        0.0191])\n","gradient values before mask reapp. tensor([-0.0039, -0.0011, -0.0104, -0.0014, -0.0059, -0.0009, -0.0006, -0.0052,\n","        -0.0004, -0.0121])\n","gradient values before mask reapp. tensor([0.0037, 0.0011, 0.0037, 0.0027, 0.0057, 0.0009, 0.0025, 0.0030, 0.0010,\n","        0.0117])\n","gradient values before mask reapp. tensor([-0.0038, -0.0011, -0.0102, -0.0014, -0.0057, -0.0009, -0.0006, -0.0051,\n","        -0.0004, -0.0119])\n","gradient values before mask reapp. tensor([0.0062, 0.0016, 0.0088, 0.0034, 0.0100, 0.0013, 0.0035, 0.0059, 0.0015,\n","        0.0195])\n","gradient values before mask reapp. tensor([-0.0039, -0.0011, -0.0104, -0.0014, -0.0059, -0.0009, -0.0006, -0.0052,\n","        -0.0004, -0.0122])\n","gradient values before mask reapp. tensor([0.0062, 0.0016, 0.0087, 0.0034, 0.0100, 0.0013, 0.0035, 0.0059, 0.0015,\n","        0.0195])\n","gradient values before mask reapp. tensor([-0.0039, -0.0011, -0.0105, -0.0014, -0.0060, -0.0009, -0.0006, -0.0052,\n","        -0.0004, -0.0123])\n","gradient values before mask reapp. tensor([0.0062, 0.0016, 0.0088, 0.0034, 0.0100, 0.0013, 0.0035, 0.0059, 0.0015,\n","        0.0196])\n","gradient values before mask reapp. tensor([-0.0040, -0.0011, -0.0106, -0.0014, -0.0060, -0.0009, -0.0007, -0.0053,\n","        -0.0005, -0.0124])\n","gradient values before mask reapp. tensor([0.0039, 0.0011, 0.0038, 0.0028, 0.0059, 0.0009, 0.0026, 0.0032, 0.0011,\n","        0.0121])\n","gradient values before mask reapp. tensor([-0.0038, -0.0011, -0.0105, -0.0014, -0.0058, -0.0009, -0.0006, -0.0052,\n","        -0.0004, -0.0122])\n","gradient values before mask reapp. tensor([0.0063, 0.0016, 0.0089, 0.0035, 0.0103, 0.0013, 0.0035, 0.0061, 0.0015,\n","        0.0200])\n","gradient values before mask reapp. tensor([-0.0039, -0.0011, -0.0107, -0.0014, -0.0060, -0.0009, -0.0007, -0.0053,\n","        -0.0004, -0.0124])\n","gradient values before mask reapp. tensor([0.0063, 0.0016, 0.0089, 0.0035, 0.0103, 0.0013, 0.0035, 0.0061, 0.0015,\n","        0.0200])\n","gradient values before mask reapp. tensor([-0.0040, -0.0011, -0.0108, -0.0015, -0.0061, -0.0009, -0.0007, -0.0053,\n","        -0.0004, -0.0126])\n","gradient values before mask reapp. tensor([0.0039, 0.0011, 0.0039, 0.0029, 0.0061, 0.0010, 0.0026, 0.0032, 0.0011,\n","        0.0124])\n","gradient values before mask reapp. tensor([-0.0039, -0.0011, -0.0106, -0.0014, -0.0059, -0.0009, -0.0006, -0.0052,\n","        -0.0004, -0.0123])\n","gradient values before mask reapp. tensor([0.0065, 0.0017, 0.0092, 0.0036, 0.0106, 0.0013, 0.0036, 0.0063, 0.0016,\n","        0.0205])\n","gradient values before mask reapp. tensor([-0.0040, -0.0011, -0.0109, -0.0015, -0.0061, -0.0009, -0.0007, -0.0054,\n","        -0.0004, -0.0127])\n","gradient values before mask reapp. tensor([0.0065, 0.0016, 0.0091, 0.0036, 0.0105, 0.0013, 0.0036, 0.0062, 0.0016,\n","        0.0204])\n","gradient values before mask reapp. tensor([-0.0041, -0.0012, -0.0110, -0.0015, -0.0062, -0.0009, -0.0007, -0.0055,\n","        -0.0004, -0.0129])\n","gradient values before mask reapp. tensor([0.0041, 0.0012, 0.0041, 0.0030, 0.0063, 0.0010, 0.0027, 0.0034, 0.0012,\n","        0.0128])\n","gradient values before mask reapp. tensor([-0.0040, -0.0012, -0.0109, -0.0015, -0.0060, -0.0009, -0.0007, -0.0054,\n","        -0.0004, -0.0127])\n","gradient values before mask reapp. tensor([0.0067, 0.0017, 0.0095, 0.0037, 0.0109, 0.0014, 0.0037, 0.0065, 0.0017,\n","        0.0211])\n","gradient values before mask reapp. tensor([-0.0041, -0.0012, -0.0111, -0.0015, -0.0062, -0.0010, -0.0007, -0.0055,\n","        -0.0004, -0.0130])\n","gradient values before mask reapp. tensor([0.0067, 0.0017, 0.0094, 0.0037, 0.0108, 0.0013, 0.0037, 0.0064, 0.0016,\n","        0.0209])\n","gradient values before mask reapp. tensor([-0.0042, -0.0012, -0.0113, -0.0015, -0.0063, -0.0010, -0.0007, -0.0056,\n","        -0.0004, -0.0132])\n","gradient values before mask reapp. tensor([0.0041, 0.0012, 0.0041, 0.0030, 0.0064, 0.0010, 0.0027, 0.0034, 0.0012,\n","        0.0129])\n","gradient values before mask reapp. tensor([-0.0040, -0.0012, -0.0111, -0.0015, -0.0061, -0.0010, -0.0007, -0.0054,\n","        -0.0004, -0.0128])\n","gradient values before mask reapp. tensor([0.0069, 0.0017, 0.0097, 0.0038, 0.0112, 0.0014, 0.0038, 0.0066, 0.0017,\n","        0.0215])\n","gradient values before mask reapp. tensor([-0.0041, -0.0012, -0.0113, -0.0015, -0.0063, -0.0010, -0.0007, -0.0056,\n","        -0.0004, -0.0132])\n","gradient values before mask reapp. tensor([0.0043, 0.0012, 0.0044, 0.0031, 0.0067, 0.0010, 0.0028, 0.0036, 0.0012,\n","        0.0134])\n","gradient values before mask reapp. tensor([-0.0041, -0.0012, -0.0112, -0.0015, -0.0061, -0.0010, -0.0007, -0.0055,\n","        -0.0004, -0.0130])\n","gradient values before mask reapp. tensor([0.0070, 0.0017, 0.0099, 0.0038, 0.0114, 0.0014, 0.0038, 0.0067, 0.0017,\n","        0.0218])\n","gradient values before mask reapp. tensor([-0.0042, -0.0012, -0.0114, -0.0015, -0.0063, -0.0010, -0.0007, -0.0056,\n","        -0.0004, -0.0133])\n","gradient values before mask reapp. tensor([0.0070, 0.0018, 0.0099, 0.0038, 0.0114, 0.0014, 0.0038, 0.0067, 0.0017,\n","        0.0218])\n","gradient values before mask reapp. tensor([-0.0042, -0.0012, -0.0116, -0.0016, -0.0064, -0.0010, -0.0007, -0.0057,\n","        -0.0004, -0.0135])\n","gradient values before mask reapp. tensor([0.0044, 0.0012, 0.0044, 0.0031, 0.0068, 0.0010, 0.0029, 0.0036, 0.0013,\n","        0.0136])\n","gradient values before mask reapp. tensor([-0.0042, -0.0012, -0.0114, -0.0015, -0.0062, -0.0010, -0.0007, -0.0056,\n","        -0.0004, -0.0133])\n","gradient values before mask reapp. tensor([0.0071, 0.0018, 0.0101, 0.0039, 0.0116, 0.0014, 0.0039, 0.0069, 0.0018,\n","        0.0222])\n","gradient values before mask reapp. tensor([-0.0042, -0.0012, -0.0116, -0.0016, -0.0064, -0.0010, -0.0007, -0.0057,\n","        -0.0004, -0.0135])\n","gradient values before mask reapp. tensor([0.0071, 0.0018, 0.0101, 0.0039, 0.0117, 0.0014, 0.0039, 0.0069, 0.0018,\n","        0.0223])\n","gradient values before mask reapp. tensor([-0.0043, -0.0012, -0.0118, -0.0016, -0.0065, -0.0010, -0.0007, -0.0058,\n","        -0.0004, -0.0138])\n","gradient values before mask reapp. tensor([0.0045, 0.0012, 0.0045, 0.0032, 0.0070, 0.0011, 0.0029, 0.0037, 0.0013,\n","        0.0139])\n","gradient values before mask reapp. tensor([-0.0042, -0.0012, -0.0117, -0.0016, -0.0063, -0.0010, -0.0007, -0.0057,\n","        -0.0004, -0.0136])\n","gradient values before mask reapp. tensor([0.0073, 0.0018, 0.0103, 0.0039, 0.0119, 0.0014, 0.0040, 0.0070, 0.0018,\n","        0.0227])\n","gradient values before mask reapp. tensor([-0.0043, -0.0013, -0.0118, -0.0016, -0.0064, -0.0010, -0.0007, -0.0058,\n","        -0.0004, -0.0137])\n","gradient values before mask reapp. tensor([0.0046, 0.0013, 0.0046, 0.0032, 0.0071, 0.0011, 0.0029, 0.0038, 0.0013,\n","        0.0140])\n","gradient values before mask reapp. tensor([-0.0042, -0.0012, -0.0116, -0.0015, -0.0062, -0.0010, -0.0007, -0.0056,\n","        -0.0003, -0.0134])\n","gradient values before mask reapp. tensor([0.0074, 0.0018, 0.0105, 0.0040, 0.0122, 0.0015, 0.0040, 0.0072, 0.0019,\n","        0.0231])\n","gradient values before mask reapp. tensor([-0.0044, -0.0013, -0.0120, -0.0016, -0.0065, -0.0011, -0.0007, -0.0059,\n","        -0.0004, -0.0140])\n","gradient values before mask reapp. tensor([0.0074, 0.0018, 0.0105, 0.0040, 0.0121, 0.0015, 0.0040, 0.0071, 0.0019,\n","        0.0231])\n","gradient values before mask reapp. tensor([-0.0045, -0.0013, -0.0122, -0.0017, -0.0067, -0.0011, -0.0008, -0.0060,\n","        -0.0004, -0.0143])\n","gradient values before mask reapp. tensor([ 0.0003, -0.0009, -0.0054, -0.0009, -0.0023, -0.0005, -0.0003, -0.0026,\n","        -0.0001, -0.0058])\n","gradient values before mask reapp. tensor([0.0076, 0.0019, 0.0108, 0.0041, 0.0125, 0.0015, 0.0041, 0.0074, 0.0019,\n","        0.0237])\n","gradient values before mask reapp. tensor([-0.0044, -0.0013, -0.0122, -0.0017, -0.0066, -0.0011, -0.0008, -0.0060,\n","        -0.0004, -0.0142])\n","gradient values before mask reapp. tensor([0.0049, 0.0013, 0.0050, 0.0034, 0.0076, 0.0011, 0.0031, 0.0041, 0.0014,\n","        0.0149])\n","gradient values before mask reapp. tensor([-0.0043, -0.0013, -0.0119, -0.0016, -0.0063, -0.0011, -0.0007, -0.0058,\n","        -0.0003, -0.0138])\n","gradient values before mask reapp. tensor([0.0078, 0.0019, 0.0111, 0.0042, 0.0128, 0.0015, 0.0042, 0.0076, 0.0020,\n","        0.0242])\n","gradient values before mask reapp. tensor([-0.0045, -0.0013, -0.0123, -0.0017, -0.0067, -0.0011, -0.0008, -0.0060,\n","        -0.0004, -0.0144])\n","gradient values before mask reapp. tensor([0.0049, 0.0013, 0.0050, 0.0034, 0.0077, 0.0011, 0.0031, 0.0041, 0.0015,\n","        0.0149])\n","gradient values before mask reapp. tensor([-0.0043, -0.0013, -0.0121, -0.0016, -0.0064, -0.0011, -0.0007, -0.0058,\n","        -0.0003, -0.0140])\n","gradient values before mask reapp. tensor([0.0079, 0.0019, 0.0112, 0.0042, 0.0129, 0.0015, 0.0042, 0.0076, 0.0020,\n","        0.0244])\n","gradient values before mask reapp. tensor([-0.0045, -0.0013, -0.0124, -0.0017, -0.0066, -0.0011, -0.0008, -0.0060,\n","        -0.0004, -0.0144])\n","gradient values before mask reapp. tensor([0.0078, 0.0019, 0.0110, 0.0042, 0.0128, 0.0015, 0.0042, 0.0075, 0.0020,\n","        0.0241])\n","gradient values before mask reapp. tensor([-0.0046, -0.0013, -0.0126, -0.0017, -0.0068, -0.0011, -0.0008, -0.0062,\n","        -0.0004, -0.0147])\n","gradient values before mask reapp. tensor([ 3.8916e-04, -9.6336e-04, -5.4255e-03, -9.2675e-04, -2.1835e-03,\n","        -4.8312e-04, -2.4697e-04, -2.6033e-03, -8.4901e-05, -5.7371e-03])\n","gradient values before mask reapp. tensor([0.0080, 0.0020, 0.0113, 0.0043, 0.0131, 0.0016, 0.0043, 0.0077, 0.0020,\n","        0.0247])\n","gradient values before mask reapp. tensor([-0.0045, -0.0013, -0.0125, -0.0017, -0.0067, -0.0011, -0.0008, -0.0061,\n","        -0.0004, -0.0146])\n","gradient values before mask reapp. tensor([0.0022, 0.0006, 0.0006, 0.0013, 0.0030, 0.0002, 0.0020, 0.0018, 0.0007,\n","        0.0051])\n","gradient values before mask reapp. tensor([ 3.4607e-04, -9.8152e-04, -5.5784e-03, -9.6090e-04, -2.2705e-03,\n","        -5.0287e-04, -2.6746e-04, -2.6847e-03, -9.1400e-05, -5.9463e-03])\n","gradient values before mask reapp. tensor([0.0080, 0.0020, 0.0114, 0.0043, 0.0133, 0.0016, 0.0043, 0.0078, 0.0021,\n","        0.0249])\n","gradient values before mask reapp. tensor([-0.0045, -0.0013, -0.0126, -0.0017, -0.0067, -0.0011, -0.0008, -0.0062,\n","        -0.0004, -0.0147])\n","gradient values before mask reapp. tensor([0.0052, 0.0014, 0.0054, 0.0035, 0.0082, 0.0012, 0.0032, 0.0044, 0.0016,\n","        0.0158])\n","gradient values before mask reapp. tensor([-0.0045, -0.0013, -0.0126, -0.0017, -0.0066, -0.0011, -0.0008, -0.0061,\n","        -0.0003, -0.0146])\n","gradient values before mask reapp. tensor([0.0083, 0.0020, 0.0117, 0.0044, 0.0136, 0.0016, 0.0044, 0.0080, 0.0022,\n","        0.0255])\n","gradient values before mask reapp. tensor([-0.0047, -0.0014, -0.0129, -0.0018, -0.0069, -0.0012, -0.0008, -0.0063,\n","        -0.0004, -0.0151])\n","gradient values before mask reapp. tensor([0.0021, 0.0006, 0.0005, 0.0013, 0.0030, 0.0002, 0.0020, 0.0018, 0.0007,\n","        0.0050])\n","gradient values before mask reapp. tensor([ 4.4771e-04, -9.9499e-04, -5.5652e-03, -9.6372e-04, -2.1488e-03,\n","        -5.0816e-04, -2.5980e-04, -2.6468e-03, -5.1917e-05, -5.8915e-03])\n","gradient values before mask reapp. tensor([0.0082, 0.0020, 0.0115, 0.0044, 0.0135, 0.0016, 0.0044, 0.0079, 0.0022,\n","        0.0252])\n","gradient values before mask reapp. tensor([-0.0046, -0.0014, -0.0128, -0.0017, -0.0067, -0.0011, -0.0008, -0.0062,\n","        -0.0003, -0.0149])\n","gradient values before mask reapp. tensor([0.0022, 0.0006, 0.0006, 0.0013, 0.0032, 0.0002, 0.0021, 0.0019, 0.0008,\n","        0.0052])\n","gradient values before mask reapp. tensor([ 5.8607e-04, -9.8913e-04, -5.3988e-03, -9.2523e-04, -1.9222e-03,\n","        -4.9305e-04, -2.2740e-04, -2.5171e-03,  2.4890e-06, -5.6137e-03])\n","gradient values before mask reapp. tensor([0.0053, 0.0014, 0.0055, 0.0036, 0.0085, 0.0012, 0.0033, 0.0045, 0.0017,\n","        0.0161])\n","gradient values before mask reapp. tensor([-0.0044, -0.0014, -0.0125, -0.0017, -0.0063, -0.0011, -0.0007, -0.0059,\n","        -0.0002, -0.0144])\n","gradient values before mask reapp. tensor([0.0087, 0.0021, 0.0124, 0.0046, 0.0144, 0.0017, 0.0046, 0.0085, 0.0023,\n","        0.0267])\n","gradient values before mask reapp. tensor([-0.0047, -0.0014, -0.0131, -0.0018, -0.0068, -0.0012, -0.0008, -0.0063,\n","        -0.0003, -0.0152])\n","gradient values before mask reapp. tensor([0.0054, 0.0014, 0.0056, 0.0037, 0.0087, 0.0012, 0.0033, 0.0046, 0.0017,\n","        0.0164])\n","gradient values before mask reapp. tensor([-0.0045, -0.0014, -0.0128, -0.0017, -0.0064, -0.0012, -0.0008, -0.0061,\n","        -0.0002, -0.0148])\n","gradient values before mask reapp. tensor([0.0088, 0.0021, 0.0125, 0.0046, 0.0145, 0.0017, 0.0046, 0.0086, 0.0023,\n","        0.0269])\n","gradient values before mask reapp. tensor([-0.0047, -0.0014, -0.0132, -0.0018, -0.0069, -0.0012, -0.0008, -0.0064,\n","        -0.0003, -0.0154])\n","gradient values before mask reapp. tensor([0.0026, 0.0006, 0.0011, 0.0015, 0.0038, 0.0003, 0.0022, 0.0023, 0.0009,\n","        0.0061])\n","gradient values before mask reapp. tensor([ 4.2110e-04, -1.0412e-03, -5.8773e-03, -1.0393e-03, -2.2327e-03,\n","        -5.4885e-04, -2.8787e-04, -2.7901e-03, -3.5521e-05, -6.2734e-03])\n","gradient values before mask reapp. tensor([0.0057, 0.0015, 0.0060, 0.0038, 0.0092, 0.0012, 0.0034, 0.0049, 0.0018,\n","        0.0171])\n","gradient values before mask reapp. tensor([-0.0045, -0.0014, -0.0129, -0.0017, -0.0065, -0.0012, -0.0008, -0.0061,\n","        -0.0002, -0.0149])\n","gradient values before mask reapp. tensor([0.0091, 0.0022, 0.0130, 0.0048, 0.0151, 0.0017, 0.0047, 0.0089, 0.0025,\n","        0.0277])\n","gradient values before mask reapp. tensor([-0.0048, -0.0014, -0.0135, -0.0019, -0.0070, -0.0012, -0.0008, -0.0065,\n","        -0.0003, -0.0158])\n","gradient values before mask reapp. tensor([0.0057, 0.0015, 0.0060, 0.0038, 0.0092, 0.0012, 0.0035, 0.0049, 0.0018,\n","        0.0172])\n","gradient values before mask reapp. tensor([-0.0045, -0.0014, -0.0130, -0.0018, -0.0065, -0.0012, -0.0008, -0.0062,\n","        -0.0002, -0.0150])\n","gradient values before mask reapp. tensor([0.0093, 0.0022, 0.0132, 0.0048, 0.0154, 0.0018, 0.0048, 0.0091, 0.0025,\n","        0.0282])\n","gradient values before mask reapp. tensor([-0.0050, -0.0015, -0.0139, -0.0020, -0.0073, -0.0013, -0.0009, -0.0068,\n","        -0.0004, -0.0163])\n","gradient values before mask reapp. tensor([ 0.0009, -0.0010, -0.0053, -0.0009, -0.0015, -0.0005, -0.0002, -0.0024,\n","         0.0001, -0.0053])\n","gradient values before mask reapp. tensor([0.0088, 0.0021, 0.0124, 0.0046, 0.0147, 0.0017, 0.0047, 0.0086, 0.0024,\n","        0.0270])\n","gradient values before mask reapp. tensor([-0.0047, -0.0015, -0.0135, -0.0019, -0.0069, -0.0012, -0.0008, -0.0065,\n","        -0.0003, -0.0156])\n","gradient values before mask reapp. tensor([ 0.0007, -0.0010, -0.0055, -0.0010, -0.0017, -0.0005, -0.0002, -0.0025,\n","         0.0001, -0.0057])\n","gradient values before mask reapp. tensor([0.0093, 0.0022, 0.0132, 0.0048, 0.0155, 0.0018, 0.0048, 0.0091, 0.0025,\n","        0.0284])\n","gradient values before mask reapp. tensor([-0.0048, -0.0015, -0.0136, -0.0019, -0.0069, -0.0012, -0.0008, -0.0065,\n","        -0.0002, -0.0159])\n","gradient values before mask reapp. tensor([ 0.0009, -0.0010, -0.0054, -0.0010, -0.0016, -0.0005, -0.0002, -0.0024,\n","         0.0001, -0.0055])\n","gradient values before mask reapp. tensor([0.0093, 0.0022, 0.0132, 0.0048, 0.0155, 0.0017, 0.0048, 0.0091, 0.0025,\n","        0.0283])\n","gradient values before mask reapp. tensor([-0.0050, -0.0015, -0.0140, -0.0020, -0.0072, -0.0013, -0.0009, -0.0068,\n","        -0.0003, -0.0164])\n","gradient values before mask reapp. tensor([0.0028, 0.0007, 0.0012, 0.0015, 0.0042, 0.0003, 0.0023, 0.0024, 0.0010,\n","        0.0064])\n","gradient values before mask reapp. tensor([-4.3376e-03, -1.4109e-03, -1.2864e-02, -1.7050e-03, -6.0072e-03,\n","        -1.1773e-03, -7.1872e-04, -5.9715e-03, -3.6520e-05, -1.4665e-02])\n","gradient values before mask reapp. tensor([0.0097, 0.0023, 0.0138, 0.0050, 0.0162, 0.0018, 0.0049, 0.0095, 0.0027,\n","        0.0293])\n","gradient values before mask reapp. tensor([-0.0049, -0.0015, -0.0138, -0.0019, -0.0069, -0.0013, -0.0009, -0.0066,\n","        -0.0002, -0.0161])\n","gradient values before mask reapp. tensor([0.0062, 0.0016, 0.0066, 0.0040, 0.0100, 0.0013, 0.0036, 0.0054, 0.0020,\n","        0.0183])\n","gradient values before mask reapp. tensor([-0.0047, -0.0015, -0.0135, -0.0019, -0.0066, -0.0012, -0.0008, -0.0064,\n","        -0.0002, -0.0156])\n","gradient values before mask reapp. tensor([0.0096, 0.0023, 0.0136, 0.0049, 0.0160, 0.0018, 0.0049, 0.0093, 0.0026,\n","        0.0290])\n","gradient values before mask reapp. tensor([-0.0049, -0.0015, -0.0139, -0.0020, -0.0070, -0.0013, -0.0009, -0.0067,\n","        -0.0002, -0.0162])\n","gradient values before mask reapp. tensor([0.0029, 0.0007, 0.0013, 0.0016, 0.0044, 0.0003, 0.0023, 0.0026, 0.0011,\n","        0.0067])\n","gradient values before mask reapp. tensor([ 7.2890e-04, -1.0882e-03, -5.8774e-03, -1.0829e-03, -1.8590e-03,\n","        -5.6760e-04, -2.6028e-04, -2.7135e-03,  8.3726e-05, -6.1504e-03])\n","gradient values before mask reapp. tensor([0.0063, 0.0016, 0.0067, 0.0040, 0.0103, 0.0013, 0.0037, 0.0055, 0.0021,\n","        0.0187])\n","gradient values before mask reapp. tensor([-0.0048, -0.0015, -0.0139, -0.0020, -0.0069, -0.0013, -0.0008, -0.0066,\n","        -0.0002, -0.0162])\n","gradient values before mask reapp. tensor([0.0098, 0.0023, 0.0140, 0.0050, 0.0164, 0.0018, 0.0050, 0.0096, 0.0027,\n","        0.0297])\n","gradient values before mask reapp. tensor([-0.0051, -0.0015, -0.0143, -0.0021, -0.0073, -0.0013, -0.0009, -0.0069,\n","        -0.0003, -0.0168])\n","gradient values before mask reapp. tensor([0.0030, 0.0007, 0.0013, 0.0016, 0.0045, 0.0003, 0.0024, 0.0026, 0.0011,\n","        0.0067])\n","gradient values before mask reapp. tensor([-4.5424e-03, -1.4734e-03, -1.3446e-02, -1.8415e-03, -6.3124e-03,\n","        -1.2405e-03, -7.7075e-04, -6.2942e-03, -5.8875e-05, -1.5411e-02])\n","gradient values before mask reapp. tensor([0.0101, 0.0024, 0.0144, 0.0052, 0.0170, 0.0019, 0.0051, 0.0099, 0.0028,\n","        0.0305])\n","gradient values before mask reapp. tensor([-0.0050, -0.0015, -0.0144, -0.0021, -0.0072, -0.0013, -0.0009, -0.0069,\n","        -0.0003, -0.0168])\n","gradient values before mask reapp. tensor([0.0066, 0.0016, 0.0071, 0.0041, 0.0106, 0.0014, 0.0038, 0.0057, 0.0021,\n","        0.0193])\n","gradient values before mask reapp. tensor([-0.0048, -0.0015, -0.0140, -0.0020, -0.0068, -0.0013, -0.0008, -0.0066,\n","        -0.0002, -0.0162])\n","gradient values before mask reapp. tensor([0.0101, 0.0024, 0.0144, 0.0051, 0.0169, 0.0019, 0.0051, 0.0099, 0.0028,\n","        0.0305])\n","gradient values before mask reapp. tensor([-0.0052, -0.0016, -0.0148, -0.0022, -0.0076, -0.0014, -0.0009, -0.0072,\n","        -0.0003, -0.0174])\n","gradient values before mask reapp. tensor([ 0.0011, -0.0011, -0.0055, -0.0010, -0.0012, -0.0005, -0.0002, -0.0024,\n","         0.0002, -0.0055])\n","gradient values before mask reapp. tensor([0.0100, 0.0023, 0.0142, 0.0051, 0.0167, 0.0019, 0.0051, 0.0097, 0.0028,\n","        0.0302])\n","gradient values before mask reapp. tensor([-0.0050, -0.0016, -0.0145, -0.0021, -0.0072, -0.0013, -0.0009, -0.0070,\n","        -0.0002, -0.0168])\n","gradient values before mask reapp. tensor([ 0.0009, -0.0011, -0.0058, -0.0011, -0.0016, -0.0006, -0.0002, -0.0027,\n","         0.0002, -0.0060])\n","gradient values before mask reapp. tensor([0.0103, 0.0024, 0.0146, 0.0052, 0.0172, 0.0019, 0.0052, 0.0100, 0.0028,\n","        0.0310])\n","gradient values before mask reapp. tensor([-0.0054, -0.0016, -0.0151, -0.0022, -0.0077, -0.0014, -0.0010, -0.0074,\n","        -0.0003, -0.0177])\n","gradient values before mask reapp. tensor([ 0.0013, -0.0011, -0.0053, -0.0010, -0.0011, -0.0005, -0.0002, -0.0023,\n","         0.0003, -0.0053])\n","gradient values before mask reapp. tensor([0.0064, 0.0016, 0.0066, 0.0040, 0.0104, 0.0013, 0.0038, 0.0054, 0.0021,\n","        0.0188])\n","gradient values before mask reapp. tensor([-4.5972e-03, -1.5193e-03, -1.3780e-02, -1.9358e-03, -6.3854e-03,\n","        -1.2744e-03, -7.7788e-04, -6.4677e-03, -4.2101e-05, -1.5779e-02])\n","gradient values before mask reapp. tensor([0.0104, 0.0024, 0.0147, 0.0052, 0.0174, 0.0019, 0.0052, 0.0101, 0.0029,\n","        0.0312])\n","gradient values before mask reapp. tensor([-0.0053, -0.0016, -0.0150, -0.0022, -0.0076, -0.0014, -0.0010, -0.0073,\n","        -0.0003, -0.0175])\n","gradient values before mask reapp. tensor([0.0034, 0.0007, 0.0018, 0.0016, 0.0051, 0.0003, 0.0025, 0.0029, 0.0012,\n","        0.0076])\n","gradient values before mask reapp. tensor([-4.6589e-03, -1.5346e-03, -1.3941e-02, -1.9701e-03, -6.4352e-03,\n","        -1.2987e-03, -7.9866e-04, -6.5389e-03, -2.9193e-05, -1.5996e-02])\n","gradient values before mask reapp. tensor([0.0110, 0.0025, 0.0157, 0.0054, 0.0184, 0.0020, 0.0054, 0.0107, 0.0031,\n","        0.0327])\n","gradient values before mask reapp. tensor([-0.0051, -0.0016, -0.0148, -0.0022, -0.0073, -0.0014, -0.0009, -0.0071,\n","        -0.0002, -0.0173])\n","gradient values before mask reapp. tensor([0.0070, 0.0017, 0.0076, 0.0043, 0.0114, 0.0014, 0.0040, 0.0061, 0.0023,\n","        0.0203])\n","gradient values before mask reapp. tensor([-0.0050, -0.0016, -0.0146, -0.0021, -0.0071, -0.0014, -0.0009, -0.0070,\n","        -0.0002, -0.0169])\n","gradient values before mask reapp. tensor([0.0104, 0.0024, 0.0146, 0.0052, 0.0174, 0.0019, 0.0053, 0.0100, 0.0029,\n","        0.0311])\n","gradient values before mask reapp. tensor([-0.0053, -0.0016, -0.0151, -0.0023, -0.0076, -0.0014, -0.0010, -0.0074,\n","        -0.0003, -0.0177])\n","gradient values before mask reapp. tensor([ 0.0012, -0.0011, -0.0056, -0.0011, -0.0011, -0.0006, -0.0002, -0.0024,\n","         0.0003, -0.0056])\n","gradient values before mask reapp. tensor([0.0071, 0.0017, 0.0076, 0.0043, 0.0115, 0.0014, 0.0040, 0.0061, 0.0023,\n","        0.0205])\n","gradient values before mask reapp. tensor([-4.9150e-03, -1.5898e-03, -1.4524e-02, -2.1218e-03, -6.8509e-03,\n","        -1.3623e-03, -8.6763e-04, -6.9014e-03, -9.0944e-05, -1.6809e-02])\n","gradient values before mask reapp. tensor([0.0107, 0.0025, 0.0152, 0.0053, 0.0179, 0.0019, 0.0054, 0.0104, 0.0030,\n","        0.0320])\n","gradient values before mask reapp. tensor([-0.0053, -0.0016, -0.0152, -0.0023, -0.0076, -0.0014, -0.0010, -0.0074,\n","        -0.0003, -0.0178])\n","gradient values before mask reapp. tensor([ 0.0014, -0.0011, -0.0054, -0.0011, -0.0009, -0.0005, -0.0002, -0.0024,\n","         0.0003, -0.0053])\n","gradient values before mask reapp. tensor([0.0069, 0.0017, 0.0073, 0.0042, 0.0114, 0.0014, 0.0039, 0.0060, 0.0023,\n","        0.0201])\n","gradient values before mask reapp. tensor([-0.0049, -0.0016, -0.0146, -0.0022, -0.0069, -0.0014, -0.0009, -0.0070,\n","        -0.0001, -0.0169])\n","gradient values before mask reapp. tensor([0.0107, 0.0025, 0.0151, 0.0053, 0.0180, 0.0019, 0.0054, 0.0104, 0.0030,\n","        0.0319])\n","gradient values before mask reapp. tensor([-0.0051, -0.0016, -0.0150, -0.0023, -0.0074, -0.0014, -0.0009, -0.0073,\n","        -0.0002, -0.0175])\n","gradient values before mask reapp. tensor([ 0.0014, -0.0011, -0.0055, -0.0011, -0.0008, -0.0006, -0.0002, -0.0024,\n","         0.0004, -0.0054])\n","gradient values before mask reapp. tensor([0.0074, 0.0018, 0.0081, 0.0044, 0.0121, 0.0015, 0.0041, 0.0064, 0.0024,\n","        0.0213])\n","gradient values before mask reapp. tensor([-4.9269e-03, -1.6124e-03, -1.4680e-02, -2.1727e-03, -6.8055e-03,\n","        -1.3873e-03, -8.7139e-04, -6.9635e-03, -4.9262e-05, -1.6977e-02])\n","gradient values before mask reapp. tensor([0.0112, 0.0025, 0.0159, 0.0054, 0.0186, 0.0020, 0.0055, 0.0108, 0.0031,\n","        0.0332])\n","gradient values before mask reapp. tensor([-0.0055, -0.0017, -0.0157, -0.0024, -0.0079, -0.0015, -0.0010, -0.0077,\n","        -0.0003, -0.0185])\n","gradient values before mask reapp. tensor([ 0.0016, -0.0011, -0.0053, -0.0011, -0.0006, -0.0005, -0.0001, -0.0022,\n","         0.0004, -0.0051])\n","gradient values before mask reapp. tensor([0.0070, 0.0017, 0.0074, 0.0042, 0.0115, 0.0014, 0.0040, 0.0059, 0.0023,\n","        0.0203])\n","gradient values before mask reapp. tensor([-4.8568e-03, -1.6169e-03, -1.4637e-02, -2.1838e-03, -6.7121e-03,\n","        -1.3788e-03, -8.4721e-04, -6.9437e-03, -3.2059e-05, -1.6873e-02])\n","gradient values before mask reapp. tensor([0.0115, 0.0026, 0.0163, 0.0056, 0.0192, 0.0021, 0.0056, 0.0111, 0.0032,\n","        0.0339])\n","gradient values before mask reapp. tensor([-0.0057, -0.0017, -0.0162, -0.0026, -0.0083, -0.0015, -0.0011, -0.0081,\n","        -0.0004, -0.0193])\n","gradient values before mask reapp. tensor([ 1.8801e-03, -1.0946e-03, -4.8293e-03, -1.0237e-03, -1.7325e-04,\n","        -5.0078e-04, -5.1029e-05, -1.9690e-03,  4.8395e-04, -4.4252e-03])\n","gradient values before mask reapp. tensor([0.0069, 0.0017, 0.0072, 0.0042, 0.0114, 0.0014, 0.0040, 0.0058, 0.0023,\n","        0.0200])\n","gradient values before mask reapp. tensor([-4.8020e-03, -1.6207e-03, -1.4609e-02, -2.1919e-03, -6.6031e-03,\n","        -1.3783e-03, -8.3113e-04, -6.9167e-03, -1.1929e-07, -1.6799e-02])\n","gradient values before mask reapp. tensor([0.0112, 0.0025, 0.0159, 0.0054, 0.0189, 0.0020, 0.0056, 0.0109, 0.0032,\n","        0.0333])\n","gradient values before mask reapp. tensor([-0.0055, -0.0017, -0.0159, -0.0025, -0.0080, -0.0015, -0.0010, -0.0079,\n","        -0.0003, -0.0187])\n","gradient values before mask reapp. tensor([ 0.0016, -0.0011, -0.0054, -0.0011, -0.0005, -0.0006, -0.0001, -0.0023,\n","         0.0004, -0.0052])\n","gradient values before mask reapp. tensor([0.0075, 0.0018, 0.0081, 0.0044, 0.0123, 0.0015, 0.0042, 0.0064, 0.0025,\n","        0.0215])\n","gradient values before mask reapp. tensor([-5.0992e-03, -1.6680e-03, -1.5186e-02, -2.3317e-03, -7.0550e-03,\n","        -1.4472e-03, -9.1580e-04, -7.2741e-03, -6.6941e-05, -1.7646e-02])\n","gradient values before mask reapp. tensor([0.0118, 0.0026, 0.0169, 0.0057, 0.0198, 0.0021, 0.0058, 0.0115, 0.0033,\n","        0.0349])\n","gradient values before mask reapp. tensor([-0.0059, -0.0018, -0.0167, -0.0027, -0.0087, -0.0016, -0.0011, -0.0084,\n","        -0.0004, -0.0199])\n","gradient values before mask reapp. tensor([ 1.9670e-03, -1.1130e-03, -4.8543e-03, -1.0877e-03, -1.1571e-04,\n","        -5.0951e-04, -4.6720e-05, -2.0118e-03,  4.9466e-04, -4.4544e-03])\n","gradient values before mask reapp. tensor([0.0072, 0.0017, 0.0075, 0.0042, 0.0119, 0.0014, 0.0041, 0.0061, 0.0025,\n","        0.0206])\n","gradient values before mask reapp. tensor([-4.7979e-03, -1.6439e-03, -1.4742e-02, -2.2647e-03, -6.6140e-03,\n","        -1.3904e-03, -8.2339e-04, -7.0163e-03,  3.7348e-06, -1.6938e-02])\n","gradient values before mask reapp. tensor([0.0115, 0.0026, 0.0162, 0.0055, 0.0194, 0.0020, 0.0057, 0.0111, 0.0033,\n","        0.0339])\n","gradient values before mask reapp. tensor([-0.0058, -0.0018, -0.0165, -0.0027, -0.0084, -0.0016, -0.0011, -0.0083,\n","        -0.0004, -0.0196])\n","gradient values before mask reapp. tensor([ 1.7332e-03, -1.1425e-03, -5.2677e-03, -1.1649e-03, -3.3279e-04,\n","        -5.5740e-04, -8.6354e-05, -2.2248e-03,  4.9294e-04, -4.9954e-03])\n","gradient values before mask reapp. tensor([0.0079, 0.0019, 0.0087, 0.0045, 0.0131, 0.0016, 0.0043, 0.0068, 0.0026,\n","        0.0226])\n","gradient values before mask reapp. tensor([-0.0053, -0.0017, -0.0157, -0.0025, -0.0074, -0.0015, -0.0010, -0.0076,\n","        -0.0001, -0.0183])\n","gradient values before mask reapp. tensor([0.0121, 0.0027, 0.0172, 0.0057, 0.0203, 0.0021, 0.0058, 0.0116, 0.0034,\n","        0.0355])\n","gradient values before mask reapp. tensor([-0.0061, -0.0018, -0.0172, -0.0029, -0.0089, -0.0016, -0.0012, -0.0087,\n","        -0.0005, -0.0205])\n","gradient values before mask reapp. tensor([-0.0038, -0.0015, -0.0130, -0.0019, -0.0047, -0.0012, -0.0005, -0.0058,\n","         0.0004, -0.0143])\n","gradient values before mask reapp. tensor([0.0120, 0.0027, 0.0171, 0.0057, 0.0204, 0.0021, 0.0058, 0.0117, 0.0035,\n","        0.0353])\n","gradient values before mask reapp. tensor([-0.0055, -0.0018, -0.0161, -0.0026, -0.0078, -0.0015, -0.0010, -0.0079,\n","        -0.0002, -0.0189])\n","gradient values before mask reapp. tensor([0.0041, 0.0008, 0.0025, 0.0017, 0.0065, 0.0003, 0.0028, 0.0035, 0.0016,\n","        0.0090])\n","gradient values before mask reapp. tensor([-0.0043, -0.0016, -0.0140, -0.0021, -0.0056, -0.0013, -0.0007, -0.0065,\n","         0.0002, -0.0158])\n","gradient values before mask reapp. tensor([0.0122, 0.0027, 0.0174, 0.0057, 0.0207, 0.0021, 0.0059, 0.0119, 0.0036,\n","        0.0357])\n","gradient values before mask reapp. tensor([-0.0057, -0.0018, -0.0165, -0.0027, -0.0082, -0.0016, -0.0011, -0.0082,\n","        -0.0003, -0.0196])\n","gradient values before mask reapp. tensor([0.0043, 0.0008, 0.0028, 0.0017, 0.0067, 0.0003, 0.0028, 0.0036, 0.0016,\n","        0.0093])\n","gradient values before mask reapp. tensor([-0.0044, -0.0016, -0.0141, -0.0022, -0.0056, -0.0014, -0.0007, -0.0065,\n","         0.0003, -0.0160])\n","gradient values before mask reapp. tensor([0.0120, 0.0027, 0.0171, 0.0056, 0.0205, 0.0021, 0.0058, 0.0117, 0.0035,\n","        0.0353])\n","gradient values before mask reapp. tensor([-0.0053, -0.0017, -0.0158, -0.0026, -0.0074, -0.0015, -0.0010, -0.0077,\n","        -0.0001, -0.0185])\n","gradient values before mask reapp. tensor([0.0043, 0.0008, 0.0027, 0.0017, 0.0067, 0.0003, 0.0028, 0.0036, 0.0016,\n","        0.0092])\n","gradient values before mask reapp. tensor([-0.0045, -0.0016, -0.0145, -0.0023, -0.0059, -0.0014, -0.0008, -0.0068,\n","         0.0002, -0.0165])\n","gradient values before mask reapp. tensor([0.0130, 0.0028, 0.0187, 0.0060, 0.0220, 0.0023, 0.0061, 0.0127, 0.0038,\n","        0.0379])\n","gradient values before mask reapp. tensor([-0.0059, -0.0018, -0.0170, -0.0029, -0.0086, -0.0016, -0.0011, -0.0086,\n","        -0.0003, -0.0203])\n","gradient values before mask reapp. tensor([0.0045, 0.0009, 0.0031, 0.0017, 0.0071, 0.0004, 0.0029, 0.0038, 0.0017,\n","        0.0098])\n","gradient values before mask reapp. tensor([-0.0046, -0.0017, -0.0147, -0.0023, -0.0060, -0.0014, -0.0008, -0.0069,\n","         0.0002, -0.0167])\n","gradient values before mask reapp. tensor([0.0132, 0.0028, 0.0190, 0.0061, 0.0223, 0.0023, 0.0062, 0.0129, 0.0038,\n","        0.0384])\n","gradient values before mask reapp. tensor([-0.0061, -0.0019, -0.0173, -0.0030, -0.0088, -0.0017, -0.0012, -0.0088,\n","        -0.0004, -0.0207])\n","gradient values before mask reapp. tensor([0.0047, 0.0009, 0.0033, 0.0017, 0.0073, 0.0004, 0.0029, 0.0039, 0.0017,\n","        0.0101])\n","gradient values before mask reapp. tensor([-0.0047, -0.0017, -0.0148, -0.0024, -0.0062, -0.0014, -0.0008, -0.0070,\n","         0.0002, -0.0170])\n","gradient values before mask reapp. tensor([0.0132, 0.0028, 0.0189, 0.0060, 0.0223, 0.0023, 0.0062, 0.0128, 0.0039,\n","        0.0382])\n","gradient values before mask reapp. tensor([-0.0061, -0.0019, -0.0173, -0.0030, -0.0088, -0.0017, -0.0012, -0.0088,\n","        -0.0004, -0.0207])\n","gradient values before mask reapp. tensor([ 2.3569e-03, -1.1199e-03, -4.5461e-03, -1.1612e-03,  6.9813e-04,\n","        -5.1493e-04,  4.0151e-05, -1.7886e-03,  7.3070e-04, -3.9084e-03])\n","gradient values before mask reapp. tensor([0.0079, 0.0018, 0.0084, 0.0043, 0.0132, 0.0015, 0.0043, 0.0066, 0.0027,\n","        0.0221])\n","gradient values before mask reapp. tensor([-0.0046, -0.0017, -0.0147, -0.0024, -0.0060, -0.0014, -0.0008, -0.0069,\n","         0.0002, -0.0168])\n","gradient values before mask reapp. tensor([0.0076, 0.0018, 0.0078, 0.0042, 0.0127, 0.0014, 0.0042, 0.0063, 0.0026,\n","        0.0212])\n","gradient values before mask reapp. tensor([-0.0045, -0.0017, -0.0146, -0.0024, -0.0060, -0.0014, -0.0008, -0.0069,\n","         0.0002, -0.0167])\n","gradient values before mask reapp. tensor([0.0121, 0.0026, 0.0169, 0.0055, 0.0205, 0.0021, 0.0058, 0.0115, 0.0036,\n","        0.0351])\n","gradient values before mask reapp. tensor([-0.0058, -0.0018, -0.0169, -0.0030, -0.0083, -0.0016, -0.0011, -0.0085,\n","        -0.0003, -0.0200])\n","gradient values before mask reapp. tensor([ 2.0549e-03, -1.1616e-03, -5.0975e-03, -1.3001e-03,  3.3114e-04,\n","        -5.8314e-04, -2.9563e-05, -2.1233e-03,  6.9389e-04, -4.6925e-03])\n","gradient values before mask reapp. tensor([0.0045, 0.0008, 0.0029, 0.0016, 0.0070, 0.0003, 0.0029, 0.0036, 0.0017,\n","        0.0095])\n","gradient values before mask reapp. tensor([-0.0043, -0.0016, -0.0143, -0.0023, -0.0055, -0.0014, -0.0007, -0.0067,\n","         0.0004, -0.0162])\n","gradient values before mask reapp. tensor([0.0130, 0.0028, 0.0186, 0.0059, 0.0222, 0.0022, 0.0061, 0.0126, 0.0039,\n","        0.0377])\n","gradient values before mask reapp. tensor([-0.0059, -0.0019, -0.0171, -0.0030, -0.0084, -0.0017, -0.0011, -0.0086,\n","        -0.0003, -0.0204])\n","gradient values before mask reapp. tensor([0.0049, 0.0009, 0.0036, 0.0017, 0.0078, 0.0004, 0.0030, 0.0041, 0.0018,\n","        0.0105])\n","gradient values before mask reapp. tensor([-0.0047, -0.0017, -0.0149, -0.0025, -0.0061, -0.0015, -0.0008, -0.0071,\n","         0.0002, -0.0171])\n","gradient values before mask reapp. tensor([0.0131, 0.0028, 0.0186, 0.0058, 0.0222, 0.0022, 0.0061, 0.0126, 0.0039,\n","        0.0378])\n","gradient values before mask reapp. tensor([-0.0059, -0.0019, -0.0172, -0.0031, -0.0085, -0.0017, -0.0011, -0.0087,\n","        -0.0003, -0.0205])\n","gradient values before mask reapp. tensor([0.0050, 0.0009, 0.0037, 0.0017, 0.0079, 0.0004, 0.0030, 0.0041, 0.0019,\n","        0.0108])\n","gradient values before mask reapp. tensor([-0.0049, -0.0017, -0.0155, -0.0027, -0.0066, -0.0015, -0.0009, -0.0075,\n","         0.0001, -0.0179])\n","gradient values before mask reapp. tensor([0.0136, 0.0029, 0.0194, 0.0060, 0.0229, 0.0023, 0.0063, 0.0130, 0.0040,\n","        0.0390])\n","gradient values before mask reapp. tensor([-0.0061, -0.0019, -0.0175, -0.0032, -0.0087, -0.0017, -0.0012, -0.0089,\n","        -0.0003, -0.0210])\n"]},{"output_type":"display_data","data":{"text/plain":["'20.0% done'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{}},{"output_type":"stream","name":"stdout","text":["sc1 weights:  torch.Size([100, 612])\n","sc2 weights:  torch.Size([1, 100])\n","first ten digits of weight at init tensor([ 7.8166e-05,  6.9054e-04,  7.1941e-04, -1.3594e-04,  2.0601e-05,\n","         6.5509e-04,  4.1681e-04, -3.2486e-04, -0.0000e+00, -6.3775e-04],\n","       grad_fn=<SliceBackward0>)\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n"]},{"output_type":"display_data","data":{"text/plain":["'30.0% done'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{}},{"output_type":"stream","name":"stdout","text":["sc1 weights:  torch.Size([100, 612])\n","sc2 weights:  torch.Size([1, 100])\n","first ten digits of weight at init tensor([ 3.8164e-04,  6.0344e-04, -1.7202e-03, -4.4083e-04,  3.9599e-04,\n","        -1.6348e-03,  1.3398e-04,  5.1253e-04,  0.0000e+00, -4.5992e-05],\n","       grad_fn=<SliceBackward0>)\n","gradient values before mask reapp. tensor([-0.0010, -0.0002, -0.0017, -0.0004, -0.0015, -0.0002, -0.0003, -0.0010,\n","        -0.0002, -0.0027])\n","gradient values before mask reapp. tensor([-0.0010, -0.0002, -0.0017, -0.0004, -0.0015, -0.0002, -0.0004, -0.0011,\n","        -0.0002, -0.0028])\n","gradient values before mask reapp. tensor([-0.0010, -0.0002, -0.0018, -0.0004, -0.0016, -0.0003, -0.0004, -0.0011,\n","        -0.0002, -0.0029])\n","gradient values before mask reapp. tensor([-0.0011, -0.0002, -0.0019, -0.0004, -0.0017, -0.0003, -0.0004, -0.0012,\n","        -0.0002, -0.0031])\n","gradient values before mask reapp. tensor([-0.0012, -0.0002, -0.0021, -0.0005, -0.0018, -0.0003, -0.0004, -0.0012,\n","        -0.0002, -0.0033])\n","gradient values before mask reapp. tensor([-0.0012, -0.0002, -0.0022, -0.0005, -0.0019, -0.0003, -0.0005, -0.0013,\n","        -0.0003, -0.0036])\n","gradient values before mask reapp. tensor([-0.0013, -0.0003, -0.0024, -0.0005, -0.0020, -0.0003, -0.0005, -0.0014,\n","        -0.0003, -0.0038])\n","gradient values before mask reapp. tensor([-0.0014, -0.0003, -0.0026, -0.0006, -0.0021, -0.0004, -0.0005, -0.0015,\n","        -0.0003, -0.0041])\n","gradient values before mask reapp. tensor([-0.0016, -0.0003, -0.0028, -0.0006, -0.0023, -0.0004, -0.0006, -0.0016,\n","        -0.0003, -0.0045])\n","gradient values before mask reapp. tensor([-0.0017, -0.0003, -0.0030, -0.0007, -0.0025, -0.0004, -0.0006, -0.0017,\n","        -0.0003, -0.0048])\n","gradient values before mask reapp. tensor([-0.0018, -0.0003, -0.0032, -0.0007, -0.0026, -0.0005, -0.0007, -0.0018,\n","        -0.0003, -0.0052])\n","gradient values before mask reapp. tensor([-0.0020, -0.0004, -0.0034, -0.0008, -0.0028, -0.0005, -0.0007, -0.0020,\n","        -0.0003, -0.0056])\n","gradient values before mask reapp. tensor([-0.0021, -0.0004, -0.0037, -0.0008, -0.0030, -0.0006, -0.0008, -0.0021,\n","        -0.0003, -0.0060])\n","gradient values before mask reapp. tensor([-0.0022, -0.0004, -0.0039, -0.0008, -0.0031, -0.0006, -0.0008, -0.0022,\n","        -0.0003, -0.0063])\n","gradient values before mask reapp. tensor([-0.0024, -0.0005, -0.0041, -0.0009, -0.0032, -0.0007, -0.0009, -0.0023,\n","        -0.0003, -0.0067])\n","gradient values before mask reapp. tensor([-0.0025, -0.0005, -0.0043, -0.0009, -0.0034, -0.0007, -0.0010, -0.0024,\n","        -0.0003, -0.0071])\n","gradient values before mask reapp. tensor([-0.0026, -0.0005, -0.0045, -0.0009, -0.0034, -0.0007, -0.0010, -0.0024,\n","        -0.0003, -0.0074])\n","gradient values before mask reapp. tensor([-0.0027, -0.0005, -0.0047, -0.0010, -0.0035, -0.0008, -0.0011, -0.0025,\n","        -0.0003, -0.0076])\n","gradient values before mask reapp. tensor([-0.0028, -0.0005, -0.0048, -0.0010, -0.0035, -0.0008, -0.0011, -0.0025,\n","        -0.0002, -0.0078])\n","gradient values before mask reapp. tensor([-0.0028, -0.0006, -0.0048, -0.0009, -0.0034, -0.0009, -0.0011, -0.0025,\n","        -0.0002, -0.0080])\n","gradient values before mask reapp. tensor([-0.0028, -0.0006, -0.0048, -0.0009, -0.0033, -0.0009, -0.0012, -0.0024,\n","        -0.0001, -0.0080])\n","gradient values before mask reapp. tensor([-2.7889e-03, -5.5571e-04, -4.7669e-03, -8.7135e-04, -3.0954e-03,\n","        -9.0262e-04, -1.1692e-03, -2.2793e-03, -3.4736e-05, -7.9306e-03])\n","gradient values before mask reapp. tensor([-2.7382e-03, -5.4976e-04, -4.6502e-03, -8.1354e-04, -2.8527e-03,\n","        -9.1880e-04, -1.1738e-03, -2.1281e-03,  5.8653e-05, -7.7813e-03])\n","gradient values before mask reapp. tensor([-0.0027, -0.0005, -0.0045, -0.0007, -0.0026, -0.0009, -0.0012, -0.0019,\n","         0.0002, -0.0075])\n","gradient values before mask reapp. tensor([-0.0026, -0.0005, -0.0043, -0.0007, -0.0022, -0.0009, -0.0012, -0.0017,\n","         0.0003, -0.0072])\n","gradient values before mask reapp. tensor([-0.0024, -0.0005, -0.0040, -0.0006, -0.0018, -0.0009, -0.0011, -0.0015,\n","         0.0004, -0.0069])\n","gradient values before mask reapp. tensor([-0.0023, -0.0005, -0.0037, -0.0005, -0.0015, -0.0009, -0.0011, -0.0012,\n","         0.0005, -0.0065])\n","gradient values before mask reapp. tensor([-0.0021, -0.0005, -0.0034, -0.0004, -0.0011, -0.0009, -0.0011, -0.0010,\n","         0.0006, -0.0060])\n","gradient values before mask reapp. tensor([-0.0020, -0.0004, -0.0031, -0.0003, -0.0007, -0.0009, -0.0010, -0.0007,\n","         0.0007, -0.0056])\n","gradient values before mask reapp. tensor([-0.0018, -0.0004, -0.0029, -0.0002, -0.0003, -0.0009, -0.0010, -0.0005,\n","         0.0008, -0.0052])\n","gradient values before mask reapp. tensor([-1.6892e-03, -3.8057e-04, -2.5839e-03, -1.0020e-04,  2.9483e-05,\n","        -8.8126e-04, -9.7448e-04, -2.6194e-04,  9.2695e-04, -4.7581e-03])\n","gradient values before mask reapp. tensor([-1.5589e-03, -3.5874e-04, -2.3353e-03, -2.2323e-05,  3.4054e-04,\n","        -8.6862e-04, -9.4354e-04, -5.8244e-05,  1.0115e-03, -4.3850e-03])\n","gradient values before mask reapp. tensor([-1.4409e-03, -3.3896e-04, -2.1109e-03,  4.7325e-05,  6.1859e-04,\n","        -8.5663e-04, -9.1514e-04,  1.2391e-04,  1.0863e-03, -4.0475e-03])\n","gradient values before mask reapp. tensor([-0.0013, -0.0003, -0.0019,  0.0001,  0.0009, -0.0008, -0.0009,  0.0003,\n","         0.0012, -0.0037])\n","gradient values before mask reapp. tensor([-0.0012, -0.0003, -0.0017,  0.0002,  0.0011, -0.0008, -0.0009,  0.0004,\n","         0.0012, -0.0035])\n","gradient values before mask reapp. tensor([-0.0012, -0.0003, -0.0016,  0.0002,  0.0013, -0.0008, -0.0008,  0.0005,\n","         0.0013, -0.0033])\n","gradient values before mask reapp. tensor([-0.0011, -0.0003, -0.0015,  0.0002,  0.0014, -0.0008, -0.0008,  0.0006,\n","         0.0013, -0.0031])\n","gradient values before mask reapp. tensor([-0.0010, -0.0003, -0.0013,  0.0003,  0.0015, -0.0008, -0.0008,  0.0007,\n","         0.0013, -0.0029])\n","gradient values before mask reapp. tensor([-0.0010, -0.0003, -0.0013,  0.0003,  0.0017, -0.0008, -0.0008,  0.0008,\n","         0.0014, -0.0028])\n","gradient values before mask reapp. tensor([-0.0009, -0.0003, -0.0012,  0.0003,  0.0018, -0.0008, -0.0008,  0.0009,\n","         0.0014, -0.0026])\n","gradient values before mask reapp. tensor([-0.0009, -0.0003, -0.0011,  0.0004,  0.0018, -0.0008, -0.0008,  0.0009,\n","         0.0014, -0.0025])\n","gradient values before mask reapp. tensor([-0.0009, -0.0002, -0.0010,  0.0004,  0.0019, -0.0008, -0.0008,  0.0010,\n","         0.0014, -0.0024])\n","gradient values before mask reapp. tensor([-0.0008, -0.0002, -0.0010,  0.0004,  0.0020, -0.0008, -0.0008,  0.0010,\n","         0.0014, -0.0024])\n","gradient values before mask reapp. tensor([-0.0008, -0.0002, -0.0010,  0.0004,  0.0020, -0.0008, -0.0008,  0.0010,\n","         0.0015, -0.0023])\n","gradient values before mask reapp. tensor([-0.0008, -0.0002, -0.0009,  0.0004,  0.0021, -0.0008, -0.0008,  0.0011,\n","         0.0015, -0.0023])\n","gradient values before mask reapp. tensor([-0.0008, -0.0002, -0.0009,  0.0004,  0.0021, -0.0008, -0.0008,  0.0011,\n","         0.0015, -0.0022])\n","gradient values before mask reapp. tensor([-0.0008, -0.0002, -0.0009,  0.0004,  0.0021, -0.0008, -0.0008,  0.0011,\n","         0.0015, -0.0022])\n","gradient values before mask reapp. tensor([-0.0008, -0.0002, -0.0008,  0.0004,  0.0022, -0.0008, -0.0008,  0.0011,\n","         0.0015, -0.0021])\n","gradient values before mask reapp. tensor([-0.0007, -0.0002, -0.0008,  0.0004,  0.0022, -0.0008, -0.0008,  0.0011,\n","         0.0015, -0.0021])\n","gradient values before mask reapp. tensor([-0.0007, -0.0002, -0.0008,  0.0004,  0.0022, -0.0008, -0.0007,  0.0012,\n","         0.0015, -0.0021])\n","gradient values before mask reapp. tensor([-0.0007, -0.0002, -0.0008,  0.0005,  0.0022, -0.0008, -0.0007,  0.0012,\n","         0.0015, -0.0020])\n","gradient values before mask reapp. tensor([-0.0007, -0.0002, -0.0008,  0.0005,  0.0023, -0.0008, -0.0007,  0.0012,\n","         0.0015, -0.0020])\n","gradient values before mask reapp. tensor([-0.0007, -0.0002, -0.0007,  0.0005,  0.0023, -0.0008, -0.0007,  0.0012,\n","         0.0015, -0.0020])\n","gradient values before mask reapp. tensor([-0.0007, -0.0002, -0.0007,  0.0005,  0.0023, -0.0008, -0.0007,  0.0012,\n","         0.0015, -0.0020])\n","gradient values before mask reapp. tensor([-0.0007, -0.0002, -0.0007,  0.0005,  0.0023, -0.0008, -0.0007,  0.0012,\n","         0.0015, -0.0020])\n","gradient values before mask reapp. tensor([-0.0007, -0.0002, -0.0007,  0.0005,  0.0024, -0.0008, -0.0007,  0.0012,\n","         0.0015, -0.0019])\n","gradient values before mask reapp. tensor([-0.0007, -0.0002, -0.0007,  0.0005,  0.0024, -0.0008, -0.0007,  0.0012,\n","         0.0016, -0.0019])\n","gradient values before mask reapp. tensor([-0.0007, -0.0002, -0.0007,  0.0005,  0.0024, -0.0008, -0.0007,  0.0013,\n","         0.0016, -0.0019])\n","gradient values before mask reapp. tensor([-0.0007, -0.0002, -0.0007,  0.0005,  0.0024, -0.0008, -0.0007,  0.0013,\n","         0.0016, -0.0019])\n","gradient values before mask reapp. tensor([-0.0007, -0.0002, -0.0007,  0.0005,  0.0024, -0.0008, -0.0007,  0.0013,\n","         0.0016, -0.0019])\n","gradient values before mask reapp. tensor([-0.0007, -0.0002, -0.0007,  0.0005,  0.0024, -0.0008, -0.0007,  0.0013,\n","         0.0016, -0.0019])\n","gradient values before mask reapp. tensor([-0.0006, -0.0002, -0.0006,  0.0005,  0.0025, -0.0008, -0.0007,  0.0013,\n","         0.0016, -0.0019])\n","gradient values before mask reapp. tensor([-0.0006, -0.0002, -0.0006,  0.0005,  0.0025, -0.0008, -0.0007,  0.0013,\n","         0.0016, -0.0019])\n","gradient values before mask reapp. tensor([-0.0006, -0.0002, -0.0006,  0.0005,  0.0025, -0.0008, -0.0007,  0.0013,\n","         0.0016, -0.0018])\n","gradient values before mask reapp. tensor([-0.0006, -0.0002, -0.0006,  0.0005,  0.0025, -0.0008, -0.0007,  0.0013,\n","         0.0016, -0.0018])\n","gradient values before mask reapp. tensor([-0.0006, -0.0002, -0.0006,  0.0005,  0.0025, -0.0008, -0.0007,  0.0013,\n","         0.0016, -0.0018])\n","gradient values before mask reapp. tensor([-0.0006, -0.0002, -0.0006,  0.0005,  0.0025, -0.0008, -0.0008,  0.0013,\n","         0.0016, -0.0018])\n","gradient values before mask reapp. tensor([-0.0006, -0.0002, -0.0006,  0.0005,  0.0025, -0.0008, -0.0008,  0.0013,\n","         0.0016, -0.0018])\n","gradient values before mask reapp. tensor([-0.0006, -0.0002, -0.0006,  0.0005,  0.0026, -0.0008, -0.0008,  0.0013,\n","         0.0016, -0.0018])\n","gradient values before mask reapp. tensor([-0.0006, -0.0002, -0.0006,  0.0005,  0.0026, -0.0008, -0.0008,  0.0013,\n","         0.0016, -0.0018])\n","gradient values before mask reapp. tensor([-0.0006, -0.0002, -0.0006,  0.0005,  0.0026, -0.0008, -0.0008,  0.0014,\n","         0.0016, -0.0018])\n","gradient values before mask reapp. tensor([-0.0006, -0.0002, -0.0006,  0.0005,  0.0026, -0.0008, -0.0008,  0.0014,\n","         0.0016, -0.0018])\n","gradient values before mask reapp. tensor([-0.0006, -0.0002, -0.0006,  0.0005,  0.0026, -0.0008, -0.0008,  0.0014,\n","         0.0016, -0.0018])\n","gradient values before mask reapp. tensor([-0.0006, -0.0002, -0.0006,  0.0005,  0.0026, -0.0008, -0.0008,  0.0014,\n","         0.0016, -0.0018])\n","gradient values before mask reapp. tensor([-0.0006, -0.0002, -0.0006,  0.0005,  0.0026, -0.0008, -0.0008,  0.0014,\n","         0.0016, -0.0018])\n","gradient values before mask reapp. tensor([-0.0006, -0.0002, -0.0006,  0.0005,  0.0026, -0.0008, -0.0008,  0.0014,\n","         0.0016, -0.0018])\n","gradient values before mask reapp. tensor([-0.0006, -0.0002, -0.0006,  0.0005,  0.0027, -0.0008, -0.0008,  0.0014,\n","         0.0016, -0.0018])\n","gradient values before mask reapp. tensor([-0.0006, -0.0002, -0.0006,  0.0005,  0.0027, -0.0008, -0.0008,  0.0014,\n","         0.0017, -0.0018])\n","gradient values before mask reapp. tensor([-0.0006, -0.0002, -0.0005,  0.0005,  0.0027, -0.0008, -0.0008,  0.0014,\n","         0.0017, -0.0018])\n","gradient values before mask reapp. tensor([-0.0006, -0.0002, -0.0005,  0.0005,  0.0027, -0.0008, -0.0008,  0.0014,\n","         0.0017, -0.0018])\n","gradient values before mask reapp. tensor([-0.0006, -0.0002, -0.0005,  0.0005,  0.0027, -0.0008, -0.0008,  0.0014,\n","         0.0017, -0.0018])\n","gradient values before mask reapp. tensor([-0.0006, -0.0002, -0.0005,  0.0005,  0.0027, -0.0008, -0.0008,  0.0014,\n","         0.0017, -0.0018])\n","gradient values before mask reapp. tensor([-0.0006, -0.0002, -0.0005,  0.0005,  0.0027, -0.0008, -0.0008,  0.0014,\n","         0.0017, -0.0018])\n","gradient values before mask reapp. tensor([-0.0006, -0.0002, -0.0005,  0.0005,  0.0027, -0.0008, -0.0008,  0.0014,\n","         0.0017, -0.0018])\n","gradient values before mask reapp. tensor([-0.0006, -0.0002, -0.0005,  0.0005,  0.0027, -0.0008, -0.0008,  0.0014,\n","         0.0017, -0.0018])\n","gradient values before mask reapp. tensor([-0.0005, -0.0002, -0.0005,  0.0005,  0.0027, -0.0008, -0.0008,  0.0014,\n","         0.0017, -0.0018])\n","gradient values before mask reapp. tensor([-0.0005, -0.0002, -0.0005,  0.0005,  0.0027, -0.0008, -0.0008,  0.0014,\n","         0.0017, -0.0018])\n","gradient values before mask reapp. tensor([-0.0005, -0.0003, -0.0005,  0.0005,  0.0027, -0.0008, -0.0008,  0.0014,\n","         0.0017, -0.0018])\n","gradient values before mask reapp. tensor([-0.0005, -0.0003, -0.0005,  0.0005,  0.0027, -0.0008, -0.0008,  0.0014,\n","         0.0017, -0.0018])\n","gradient values before mask reapp. tensor([-0.0005, -0.0003, -0.0005,  0.0005,  0.0027, -0.0008, -0.0008,  0.0014,\n","         0.0017, -0.0018])\n","gradient values before mask reapp. tensor([-0.0005, -0.0003, -0.0005,  0.0005,  0.0027, -0.0008, -0.0008,  0.0014,\n","         0.0017, -0.0018])\n","gradient values before mask reapp. tensor([-0.0005, -0.0003, -0.0005,  0.0005,  0.0027, -0.0008, -0.0008,  0.0014,\n","         0.0017, -0.0018])\n","gradient values before mask reapp. tensor([-0.0005, -0.0003, -0.0005,  0.0005,  0.0027, -0.0008, -0.0008,  0.0014,\n","         0.0017, -0.0018])\n","gradient values before mask reapp. tensor([-0.0005, -0.0003, -0.0005,  0.0005,  0.0027, -0.0008, -0.0008,  0.0014,\n","         0.0017, -0.0018])\n","gradient values before mask reapp. tensor([-0.0005, -0.0003, -0.0005,  0.0005,  0.0027, -0.0008, -0.0008,  0.0013,\n","         0.0017, -0.0018])\n","gradient values before mask reapp. tensor([-0.0005, -0.0003, -0.0005,  0.0005,  0.0027, -0.0008, -0.0008,  0.0013,\n","         0.0017, -0.0018])\n","gradient values before mask reapp. tensor([-0.0005, -0.0003, -0.0006,  0.0005,  0.0027, -0.0008, -0.0008,  0.0013,\n","         0.0017, -0.0018])\n","gradient values before mask reapp. tensor([-0.0005, -0.0003, -0.0006,  0.0005,  0.0027, -0.0008, -0.0008,  0.0013,\n","         0.0017, -0.0018])\n","gradient values before mask reapp. tensor([-0.0005, -0.0003, -0.0006,  0.0005,  0.0027, -0.0008, -0.0008,  0.0013,\n","         0.0017, -0.0018])\n","gradient values before mask reapp. tensor([-0.0005, -0.0003, -0.0006,  0.0005,  0.0027, -0.0008, -0.0008,  0.0013,\n","         0.0017, -0.0018])\n","gradient values before mask reapp. tensor([-0.0005, -0.0003, -0.0006,  0.0005,  0.0027, -0.0008, -0.0008,  0.0013,\n","         0.0017, -0.0018])\n","gradient values before mask reapp. tensor([-0.0005, -0.0003, -0.0006,  0.0005,  0.0027, -0.0008, -0.0008,  0.0013,\n","         0.0016, -0.0018])\n","gradient values before mask reapp. tensor([-0.0005, -0.0003, -0.0006,  0.0005,  0.0027, -0.0008, -0.0008,  0.0013,\n","         0.0016, -0.0018])\n","gradient values before mask reapp. tensor([-0.0005, -0.0003, -0.0006,  0.0005,  0.0027, -0.0008, -0.0008,  0.0013,\n","         0.0016, -0.0018])\n","gradient values before mask reapp. tensor([-0.0005, -0.0003, -0.0006,  0.0005,  0.0027, -0.0008, -0.0008,  0.0012,\n","         0.0016, -0.0018])\n","gradient values before mask reapp. tensor([-0.0005, -0.0003, -0.0006,  0.0005,  0.0027, -0.0008, -0.0008,  0.0012,\n","         0.0016, -0.0018])\n","gradient values before mask reapp. tensor([-0.0005, -0.0003, -0.0006,  0.0005,  0.0026, -0.0008, -0.0008,  0.0012,\n","         0.0016, -0.0018])\n","gradient values before mask reapp. tensor([-0.0005, -0.0003, -0.0006,  0.0005,  0.0026, -0.0008, -0.0008,  0.0012,\n","         0.0016, -0.0019])\n","gradient values before mask reapp. tensor([-0.0005, -0.0003, -0.0006,  0.0005,  0.0026, -0.0008, -0.0008,  0.0012,\n","         0.0016, -0.0019])\n","gradient values before mask reapp. tensor([-0.0005, -0.0003, -0.0006,  0.0005,  0.0026, -0.0008, -0.0008,  0.0012,\n","         0.0016, -0.0018])\n","gradient values before mask reapp. tensor([-0.0004, -0.0003, -0.0006,  0.0005,  0.0026, -0.0008, -0.0008,  0.0012,\n","         0.0016, -0.0018])\n","gradient values before mask reapp. tensor([-0.0004, -0.0003, -0.0006,  0.0005,  0.0026, -0.0008, -0.0008,  0.0011,\n","         0.0016, -0.0018])\n","gradient values before mask reapp. tensor([-0.0004, -0.0003, -0.0006,  0.0004,  0.0026, -0.0008, -0.0008,  0.0011,\n","         0.0016, -0.0018])\n","gradient values before mask reapp. tensor([-0.0004, -0.0003, -0.0006,  0.0004,  0.0025, -0.0008, -0.0008,  0.0011,\n","         0.0015, -0.0018])\n","gradient values before mask reapp. tensor([-0.0004, -0.0003, -0.0006,  0.0004,  0.0025, -0.0008, -0.0008,  0.0011,\n","         0.0015, -0.0018])\n","gradient values before mask reapp. tensor([-0.0004, -0.0003, -0.0006,  0.0004,  0.0025, -0.0008, -0.0008,  0.0011,\n","         0.0015, -0.0018])\n","gradient values before mask reapp. tensor([-0.0004, -0.0003, -0.0006,  0.0004,  0.0025, -0.0008, -0.0008,  0.0010,\n","         0.0015, -0.0018])\n","gradient values before mask reapp. tensor([-0.0004, -0.0003, -0.0006,  0.0004,  0.0025, -0.0008, -0.0008,  0.0010,\n","         0.0015, -0.0018])\n","gradient values before mask reapp. tensor([-0.0004, -0.0003, -0.0006,  0.0004,  0.0024, -0.0008, -0.0008,  0.0010,\n","         0.0015, -0.0018])\n","gradient values before mask reapp. tensor([-0.0004, -0.0003, -0.0006,  0.0004,  0.0024, -0.0008, -0.0008,  0.0010,\n","         0.0015, -0.0018])\n","gradient values before mask reapp. tensor([-0.0004, -0.0003, -0.0006,  0.0004,  0.0024, -0.0008, -0.0008,  0.0010,\n","         0.0014, -0.0018])\n","gradient values before mask reapp. tensor([-0.0004, -0.0003, -0.0006,  0.0004,  0.0024, -0.0008, -0.0008,  0.0009,\n","         0.0014, -0.0018])\n","gradient values before mask reapp. tensor([-0.0003, -0.0003, -0.0006,  0.0004,  0.0024, -0.0008, -0.0008,  0.0009,\n","         0.0014, -0.0018])\n","gradient values before mask reapp. tensor([-0.0003, -0.0003, -0.0006,  0.0004,  0.0023, -0.0008, -0.0008,  0.0009,\n","         0.0014, -0.0018])\n","gradient values before mask reapp. tensor([-0.0003, -0.0003, -0.0006,  0.0004,  0.0023, -0.0008, -0.0008,  0.0009,\n","         0.0014, -0.0018])\n","gradient values before mask reapp. tensor([-0.0003, -0.0003, -0.0005,  0.0004,  0.0023, -0.0008, -0.0008,  0.0009,\n","         0.0014, -0.0017])\n","gradient values before mask reapp. tensor([-0.0003, -0.0003, -0.0005,  0.0004,  0.0023, -0.0008, -0.0008,  0.0008,\n","         0.0014, -0.0017])\n","gradient values before mask reapp. tensor([-0.0003, -0.0003, -0.0005,  0.0004,  0.0023, -0.0008, -0.0008,  0.0008,\n","         0.0013, -0.0017])\n","gradient values before mask reapp. tensor([-0.0003, -0.0003, -0.0005,  0.0003,  0.0023, -0.0008, -0.0008,  0.0008,\n","         0.0013, -0.0017])\n","gradient values before mask reapp. tensor([-0.0002, -0.0003, -0.0005,  0.0003,  0.0022, -0.0008, -0.0008,  0.0008,\n","         0.0013, -0.0016])\n","gradient values before mask reapp. tensor([-0.0002, -0.0003, -0.0005,  0.0003,  0.0022, -0.0007, -0.0008,  0.0008,\n","         0.0013, -0.0016])\n","gradient values before mask reapp. tensor([-0.0002, -0.0003, -0.0004,  0.0003,  0.0022, -0.0007, -0.0008,  0.0008,\n","         0.0013, -0.0016])\n","gradient values before mask reapp. tensor([-0.0002, -0.0003, -0.0004,  0.0003,  0.0022, -0.0007, -0.0008,  0.0008,\n","         0.0013, -0.0015])\n","gradient values before mask reapp. tensor([-0.0001, -0.0003, -0.0004,  0.0003,  0.0022, -0.0007, -0.0007,  0.0008,\n","         0.0013, -0.0015])\n","gradient values before mask reapp. tensor([-0.0001, -0.0003, -0.0004,  0.0003,  0.0022, -0.0007, -0.0007,  0.0008,\n","         0.0012, -0.0014])\n","gradient values before mask reapp. tensor([-9.9574e-05, -3.2790e-04, -3.4444e-04,  3.3094e-04,  2.2138e-03,\n","        -7.0367e-04, -7.2426e-04,  7.5985e-04,  1.2368e-03, -1.3708e-03])\n","gradient values before mask reapp. tensor([-7.1105e-05, -3.2602e-04, -3.0951e-04,  3.3157e-04,  2.2184e-03,\n","        -6.9427e-04, -7.1451e-04,  7.5827e-04,  1.2252e-03, -1.3095e-03])\n","gradient values before mask reapp. tensor([-5.1898e-05, -3.2570e-04, -2.9144e-04,  3.2788e-04,  2.2054e-03,\n","        -6.8647e-04, -7.0757e-04,  7.4553e-04,  1.2099e-03, -1.2745e-03])\n","gradient values before mask reapp. tensor([-2.7081e-05, -3.2437e-04, -2.6310e-04,  3.2675e-04,  2.2029e-03,\n","        -6.7761e-04, -6.9880e-04,  7.3944e-04,  1.1967e-03, -1.2233e-03])\n","gradient values before mask reapp. tensor([-1.0927e-05, -3.2452e-04, -2.5050e-04,  3.2161e-04,  2.1835e-03,\n","        -6.7017e-04, -6.9255e-04,  7.2252e-04,  1.1798e-03, -1.1963e-03])\n","gradient values before mask reapp. tensor([ 1.0677e-05, -3.2366e-04, -2.2783e-04,  3.1906e-04,  2.1745e-03,\n","        -6.6173e-04, -6.8456e-04,  7.1246e-04,  1.1651e-03, -1.1536e-03])\n","gradient values before mask reapp. tensor([-3.6095e-05, -3.4313e-04, -3.5766e-04,  2.3008e-04,  1.9683e-03,\n","        -6.6512e-04, -6.9512e-04,  4.8866e-04,  1.0700e-03, -1.3380e-03])\n","gradient values before mask reapp. tensor([-1.0316e-05, -3.4120e-04, -3.2636e-04,  2.3115e-04,  1.9696e-03,\n","        -6.5592e-04, -6.8586e-04,  4.8788e-04,  1.0586e-03, -1.2822e-03])\n","gradient values before mask reapp. tensor([ 9.9585e-06, -3.4016e-04, -3.0494e-04,  2.2981e-04,  1.9606e-03,\n","        -6.4764e-04, -6.7819e-04,  4.8076e-04,  1.0452e-03, -1.2417e-03])\n","gradient values before mask reapp. tensor([-3.3818e-05, -3.5804e-04, -4.2597e-04,  1.4833e-04,  1.7678e-03,\n","        -6.5046e-04, -6.8794e-04,  2.7535e-04,  9.5727e-04, -1.4135e-03])\n","gradient values before mask reapp. tensor([-1.2831e-05, -3.5657e-04, -4.0231e-04,  1.4877e-04,  1.7621e-03,\n","        -6.4202e-04, -6.8001e-04,  2.7275e-04,  9.4559e-04, -1.3698e-03])\n","gradient values before mask reapp. tensor([-7.2955e-05, -3.6823e-04, -5.3348e-04,  1.0541e-04,  1.5470e-03,\n","        -6.3675e-04, -6.7742e-04,  1.2495e-04,  8.8152e-04, -1.5314e-03])\n","gradient values before mask reapp. tensor([-4.8073e-05, -3.6599e-04, -5.0226e-04,  1.0800e-04,  1.5512e-03,\n","        -6.2799e-04, -6.6886e-04,  1.2927e-04,  8.7239e-04, -1.4772e-03])\n","gradient values before mask reapp. tensor([-9.9808e-05, -3.7876e-04, -5.9577e-04,  8.5205e-05,  1.3509e-03,\n","        -6.2047e-04, -6.6407e-04, -3.3403e-05,  7.8235e-04, -1.5380e-03])\n","gradient values before mask reapp. tensor([-7.1402e-05, -3.7574e-04, -5.5803e-04,  8.9469e-05,  1.3640e-03,\n","        -6.1136e-04, -6.5476e-04, -2.2369e-05,  7.7615e-04, -1.4755e-03])\n","gradient values before mask reapp. tensor([-4.4417e-05, -3.7292e-04, -5.2277e-04,  9.3135e-05,  1.3750e-03,\n","        -6.0258e-04, -6.4596e-04, -1.2515e-05,  7.6969e-04, -1.4172e-03])\n","gradient values before mask reapp. tensor([-1.1922e-04, -3.8232e-04, -6.2870e-04,  5.9550e-05,  1.1758e-03,\n","        -5.9482e-04, -6.4066e-04, -1.3859e-04,  7.1509e-04, -1.5586e-03])\n","gradient values before mask reapp. tensor([-1.5137e-04, -3.8900e-04, -7.0770e-04,  3.0671e-05,  1.0282e-03,\n","        -5.8735e-04, -6.3382e-04, -2.3980e-04,  6.6819e-04, -1.6474e-03])\n","gradient values before mask reapp. tensor([-1.1385e-04, -3.8428e-04, -6.5346e-04,  3.9626e-05,  1.0631e-03,\n","        -5.7752e-04, -6.2287e-04, -2.1402e-04,  6.6759e-04, -1.5611e-03])\n","gradient values before mask reapp. tensor([-6.8182e-05, -3.7808e-04, -5.8406e-04,  5.2569e-05,  1.1137e-03,\n","        -5.6620e-04, -6.0927e-04, -1.7819e-04,  6.7029e-04, -1.4508e-03])\n","gradient values before mask reapp. tensor([-2.5448e-05, -3.7234e-04, -5.1988e-04,  6.4272e-05,  1.1596e-03,\n","        -5.5553e-04, -5.9665e-04, -1.4528e-04,  6.7223e-04, -1.3489e-03])\n","gradient values before mask reapp. tensor([ 9.5979e-06, -3.6791e-04, -4.6978e-04,  7.2413e-05,  1.1921e-03,\n","        -5.4643e-04, -5.8667e-04, -1.2071e-04,  6.7180e-04, -1.2697e-03])\n","gradient values before mask reapp. tensor([ 4.5323e-05, -3.6328e-04, -4.1805e-04,  8.1062e-05,  1.2264e-03,\n","        -5.3719e-04, -5.7634e-04, -9.5041e-05,  6.7180e-04, -1.1879e-03])\n","gradient values before mask reapp. tensor([ 1.0432e-05, -3.7235e-04, -4.8306e-04,  6.5192e-05,  1.0787e-03,\n","        -5.3053e-04, -5.7176e-04, -2.1528e-04,  6.0275e-04, -1.2234e-03])\n","gradient values before mask reapp. tensor([ 4.8756e-05, -3.6714e-04, -4.2611e-04,  7.5365e-05,  1.1193e-03,\n","        -5.2091e-04, -5.6058e-04, -1.8536e-04,  6.0448e-04, -1.1336e-03])\n","gradient values before mask reapp. tensor([ 8.1591e-05, -3.6285e-04, -3.7912e-04,  8.3063e-05,  1.1503e-03,\n","        -5.1242e-04, -5.5124e-04, -1.6139e-04,  6.0451e-04, -1.0598e-03])\n","gradient values before mask reapp. tensor([ 1.7936e-05, -3.7084e-04, -4.7166e-04,  5.4060e-05,  9.8448e-04,\n","        -5.0709e-04, -5.4876e-04, -2.6454e-04,  5.6016e-04, -1.1872e-03])\n","gradient values before mask reapp. tensor([ 4.7431e-05, -3.6713e-04, -4.3106e-04,  6.0286e-05,  1.0107e-03,\n","        -4.9956e-04, -5.4089e-04, -2.4359e-04,  5.5955e-04, -1.1239e-03])\n","gradient values before mask reapp. tensor([ 7.2202e-05, -3.6422e-04, -3.9908e-04,  6.4353e-05,  1.0286e-03,\n","        -4.9300e-04, -5.3464e-04, -2.2781e-04,  5.5745e-04, -1.0745e-03])\n","gradient values before mask reapp. tensor([ 9.7419e-05, -3.6119e-04, -3.6603e-04,  6.8788e-05,  1.0477e-03,\n","        -4.8634e-04, -5.2813e-04, -2.1131e-04,  5.5562e-04, -1.0232e-03])\n","gradient values before mask reapp. tensor([ 1.2041e-04, -3.5850e-04, -3.3688e-04,  7.2290e-05,  1.0632e-03,\n","        -4.8014e-04, -5.2234e-04, -1.9711e-04,  5.5318e-04, -9.7808e-04])\n","gradient values before mask reapp. tensor([ 1.3766e-04, -3.5681e-04, -3.1834e-04,  7.3102e-05,  1.0684e-03,\n","        -4.7512e-04, -5.1853e-04, -1.8930e-04,  5.4886e-04, -9.5006e-04])\n","gradient values before mask reapp. tensor([ 1.5416e-04, -3.5521e-04, -3.0098e-04,  7.3679e-05,  1.0726e-03,\n","        -4.7025e-04, -5.1492e-04, -1.8215e-04,  5.4439e-04, -9.2387e-04])\n","gradient values before mask reapp. tensor([ 1.6708e-04, -3.5422e-04, -2.9023e-04,  7.2591e-05,  1.0704e-03,\n","        -4.6610e-04, -5.1253e-04, -1.7897e-04,  5.3875e-04, -9.0827e-04])\n","gradient values before mask reapp. tensor([ 1.7862e-04, -3.5344e-04, -2.8186e-04,  7.0939e-05,  1.0660e-03,\n","        -4.6223e-04, -5.1057e-04, -1.7719e-04,  5.3273e-04, -8.9646e-04])\n","gradient values before mask reapp. tensor([ 1.8880e-04, -3.5289e-04, -2.7598e-04,  6.8679e-05,  1.0592e-03,\n","        -4.5864e-04, -5.0906e-04, -1.7689e-04,  5.2628e-04, -8.8861e-04])\n","gradient values before mask reapp. tensor([ 1.9824e-04, -3.5244e-04, -2.7132e-04,  6.6147e-05,  1.0513e-03,\n","        -4.5519e-04, -5.0775e-04, -1.7729e-04,  5.1966e-04, -8.8268e-04])\n","gradient values before mask reapp. tensor([ 2.0731e-04, -3.5202e-04, -2.6722e-04,  6.3517e-05,  1.0428e-03,\n","        -4.5180e-04, -5.0652e-04, -1.7800e-04,  5.1295e-04, -8.7757e-04])\n","gradient values before mask reapp. tensor([ 2.1582e-04, -3.5168e-04, -2.6406e-04,  6.0677e-05,  1.0335e-03,\n","        -4.4853e-04, -5.0545e-04, -1.7925e-04,  5.0612e-04, -8.7395e-04])\n","gradient values before mask reapp. tensor([ 2.2493e-04, -3.5120e-04, -2.5963e-04,  5.8217e-05,  1.0255e-03,\n","        -4.4511e-04, -5.0411e-04, -1.7968e-04,  4.9955e-04, -8.6819e-04])\n","gradient values before mask reapp. tensor([ 2.3321e-04, -3.5085e-04, -2.5664e-04,  5.5417e-05,  1.0161e-03,\n","        -4.4187e-04, -5.0303e-04, -1.8096e-04,  4.9276e-04, -8.6473e-04])\n","gradient values before mask reapp. tensor([ 2.4114e-04, -3.5053e-04, -2.5419e-04,  5.2519e-05,  1.0063e-03,\n","        -4.3868e-04, -5.0202e-04, -1.8254e-04,  4.8591e-04, -8.6207e-04])\n","gradient values before mask reapp. tensor([ 2.4962e-04, -3.5008e-04, -2.5052e-04,  4.9990e-05,  9.9766e-04,\n","        -4.3538e-04, -5.0076e-04, -1.8334e-04,  4.7932e-04, -8.5738e-04])\n","gradient values before mask reapp. tensor([ 2.5731e-04, -3.4975e-04, -2.4826e-04,  4.7131e-05,  9.8774e-04,\n","        -4.3223e-04, -4.9974e-04, -1.8496e-04,  4.7251e-04, -8.5491e-04])\n","gradient values before mask reapp. tensor([ 2.6573e-04, -3.4925e-04, -2.4446e-04,  4.4719e-05,  9.7937e-04,\n","        -4.2892e-04, -4.9840e-04, -1.8560e-04,  4.6603e-04, -8.4988e-04])\n","gradient values before mask reapp. tensor([ 2.7280e-04, -3.4898e-04, -2.4306e-04,  4.1729e-05,  9.6872e-04,\n","        -4.2588e-04, -4.9749e-04, -1.8767e-04,  4.5915e-04, -8.4869e-04])\n","gradient values before mask reapp. tensor([ 2.8032e-04, -3.4860e-04, -2.4071e-04,  3.9026e-05,  9.5907e-04,\n","        -4.2275e-04, -4.9639e-04, -1.8912e-04,  4.5249e-04, -8.4590e-04])\n","gradient values before mask reapp. tensor([ 2.8811e-04, -3.4813e-04, -2.3766e-04,  3.6556e-05,  9.5013e-04,\n","        -4.1955e-04, -4.9513e-04, -1.9012e-04,  4.4600e-04, -8.4192e-04])\n","gradient values before mask reapp. tensor([ 2.9543e-04, -3.4773e-04, -2.3540e-04,  3.3920e-05,  9.4052e-04,\n","        -4.1645e-04, -4.9400e-04, -1.9156e-04,  4.3942e-04, -8.3917e-04])\n","gradient values before mask reapp. tensor([ 3.0256e-04, -3.4734e-04, -2.3337e-04,  3.1265e-05,  9.3073e-04,\n","        -4.1338e-04, -4.9289e-04, -1.9310e-04,  4.3283e-04, -8.3673e-04])\n","gradient values before mask reapp. tensor([ 3.1033e-04, -3.4680e-04, -2.2993e-04,  2.9038e-05,  9.2241e-04,\n","        -4.1017e-04, -4.9149e-04, -1.9374e-04,  4.2657e-04, -8.3194e-04])\n","gradient values before mask reapp. tensor([ 3.1695e-04, -3.4644e-04, -2.2858e-04,  2.6306e-05,  9.1210e-04,\n","        -4.0720e-04, -4.9046e-04, -1.9561e-04,  4.1996e-04, -8.3047e-04])\n","gradient values before mask reapp. tensor([ 3.2398e-04, -3.4598e-04, -2.2627e-04,  2.3873e-05,  9.0282e-04,\n","        -4.0413e-04, -4.8924e-04, -1.9687e-04,  4.1358e-04, -8.2741e-04])\n","gradient values before mask reapp. tensor([ 3.3135e-04, -3.4543e-04, -2.2316e-04,  2.1691e-05,  8.9438e-04,\n","        -4.0100e-04, -4.8785e-04, -1.9759e-04,  4.0741e-04, -8.2300e-04])\n","gradient values before mask reapp. tensor([ 3.3739e-04, -3.4510e-04, -2.2244e-04,  1.8939e-05,  8.8370e-04,\n","        -3.9814e-04, -4.8689e-04, -1.9974e-04,  4.0084e-04, -8.2241e-04])\n","gradient values before mask reapp. tensor([ 3.4428e-04, -3.4459e-04, -2.1999e-04,  1.6678e-05,  8.7478e-04,\n","        -3.9510e-04, -4.8558e-04, -2.0080e-04,  3.9465e-04, -8.1895e-04])\n","gradient values before mask reapp. tensor([ 3.5151e-04, -3.4399e-04, -2.1668e-04,  1.4687e-05,  8.6678e-04,\n","        -3.9199e-04, -4.8410e-04, -2.0129e-04,  3.8868e-04, -8.1407e-04])\n","gradient values before mask reapp. tensor([ 3.5845e-04, -3.4342e-04, -2.1383e-04,  1.2632e-05,  8.5841e-04,\n","        -3.8893e-04, -4.8267e-04, -2.0202e-04,  3.8266e-04, -8.0985e-04])\n","gradient values before mask reapp. tensor([ 3.6532e-04, -3.4283e-04, -2.1097e-04,  1.0618e-05,  8.5013e-04,\n","        -3.8589e-04, -4.8123e-04, -2.0271e-04,  3.7671e-04, -8.0558e-04])\n","gradient values before mask reapp. tensor([ 3.7275e-04, -3.4211e-04, -2.0682e-04,  9.0062e-06,  8.4321e-04,\n","        -3.8273e-04, -4.7952e-04, -2.0257e-04,  3.7107e-04, -7.9915e-04])\n","gradient values before mask reapp. tensor([ 3.7887e-04, -3.4161e-04, -2.0507e-04,  6.7996e-06,  8.3401e-04,\n","        -3.7985e-04, -4.7826e-04, -2.0386e-04,  3.6503e-04, -7.9658e-04])\n","gradient values before mask reapp. tensor([ 3.8517e-04, -3.4105e-04, -2.0280e-04,  4.7900e-06,  8.2544e-04,\n","        -3.7693e-04, -4.7688e-04, -2.0478e-04,  3.5915e-04, -7.9309e-04])\n","gradient values before mask reapp. tensor([ 3.9115e-04, -3.4052e-04, -2.0097e-04,  2.7041e-06,  8.1652e-04,\n","        -3.7407e-04, -4.7557e-04, -2.0594e-04,  3.5326e-04, -7.9028e-04])\n","gradient values before mask reapp. tensor([ 4.0252e-04, -3.3899e-04, -1.8883e-04,  3.3441e-06,  8.1772e-04,\n","        -3.7010e-04, -4.7228e-04, -2.0079e-04,  3.4932e-04, -7.7076e-04])\n","gradient values before mask reapp. tensor([ 4.0993e-04, -3.3815e-04, -1.8400e-04,  2.1533e-06,  8.1193e-04,\n","        -3.6695e-04, -4.7036e-04, -2.0003e-04,  3.4411e-04, -7.6297e-04])\n","gradient values before mask reapp. tensor([ 4.1260e-04, -3.3813e-04, -1.8778e-04, -1.2306e-06,  7.9797e-04,\n","        -3.6481e-04, -4.7013e-04, -2.0448e-04,  3.3743e-04, -7.6914e-04])\n","gradient values before mask reapp. tensor([ 4.2124e-04, -3.3701e-04, -1.8031e-04, -1.6457e-06,  7.9491e-04,\n","        -3.6140e-04, -4.6767e-04, -2.0203e-04,  3.3283e-04, -7.5698e-04])\n","gradient values before mask reapp. tensor([ 4.2785e-04, -3.3624e-04, -1.7646e-04, -2.9478e-06,  7.8849e-04,\n","        -3.5843e-04, -4.6591e-04, -2.0175e-04,  3.2765e-04, -7.5067e-04])\n","gradient values before mask reapp. tensor([ 4.3493e-04, -3.3536e-04, -1.7162e-04, -3.9556e-06,  7.8310e-04,\n","        -3.5537e-04, -4.6394e-04, -2.0084e-04,  3.2270e-04, -7.4270e-04])\n","gradient values before mask reapp. tensor([ 4.4164e-04, -3.3452e-04, -1.6725e-04, -5.0302e-06,  7.7740e-04,\n","        -3.5239e-04, -4.6207e-04, -2.0016e-04,  3.1775e-04, -7.3547e-04])\n","gradient values before mask reapp. tensor([ 4.4965e-04, -3.3341e-04, -1.6027e-04, -5.3573e-06,  7.7434e-04,\n","        -3.4913e-04, -4.5966e-04, -1.9784e-04,  3.1336e-04, -7.2391e-04])\n","gradient values before mask reapp. tensor([ 4.6092e-04, -3.3170e-04, -1.4692e-04, -4.0049e-06,  7.7765e-04,\n","        -3.4523e-04, -4.5608e-04, -1.9164e-04,  3.1024e-04, -7.0211e-04])\n","gradient values before mask reapp. tensor([ 4.7069e-04, -3.3022e-04, -1.3622e-04, -3.2569e-06,  7.7851e-04,\n","        -3.4163e-04, -4.5297e-04, -1.8699e-04,  3.0671e-04, -6.8449e-04])\n","gradient values before mask reapp. tensor([ 4.7837e-04, -3.2909e-04, -1.2919e-04, -3.4171e-06,  7.7599e-04,\n","        -3.3850e-04, -4.5057e-04, -1.8452e-04,  3.0262e-04, -6.7282e-04])\n","gradient values before mask reapp. tensor([ 4.8439e-04, -3.2823e-04, -1.2509e-04, -4.2679e-06,  7.7073e-04,\n","        -3.3569e-04, -4.4871e-04, -1.8377e-04,  2.9806e-04, -6.6577e-04])\n","gradient values before mask reapp. tensor([ 4.8915e-04, -3.2758e-04, -1.2321e-04, -5.6542e-06,  7.6345e-04,\n","        -3.3318e-04, -4.4730e-04, -1.8436e-04,  2.9318e-04, -6.6233e-04])\n","gradient values before mask reapp. tensor([ 4.9607e-04, -3.2651e-04, -1.1703e-04, -5.8969e-06,  7.6051e-04,\n","        -3.3023e-04, -4.4509e-04, -1.8231e-04,  2.8918e-04, -6.5196e-04])\n","gradient values before mask reapp. tensor([ 5.0639e-04, -3.2482e-04, -1.0435e-04, -4.3908e-06,  7.6395e-04,\n","        -3.2657e-04, -4.4160e-04, -1.7627e-04,  2.8643e-04, -6.3099e-04])\n","gradient values before mask reapp. tensor([ 5.1618e-04, -3.2318e-04, -9.2281e-05, -2.9893e-06,  7.6707e-04,\n","        -3.2306e-04, -4.3827e-04, -1.7055e-04,  2.8372e-04, -6.1105e-04])\n","gradient values before mask reapp. tensor([ 5.2527e-04, -3.2165e-04, -8.1427e-05, -1.8547e-06,  7.6912e-04,\n","        -3.1970e-04, -4.3517e-04, -1.6554e-04,  2.8085e-04, -5.9302e-04])\n","gradient values before mask reapp. tensor([ 5.3048e-04, -3.2079e-04, -7.7575e-05, -2.4786e-06,  7.6458e-04,\n","        -3.1717e-04, -4.3344e-04, -1.6474e-04,  2.7683e-04, -5.8633e-04])\n","gradient values before mask reapp. tensor([ 5.3751e-04, -3.1959e-04, -7.0265e-05, -2.1684e-06,  7.6341e-04,\n","        -3.1425e-04, -4.3100e-04, -1.6179e-04,  2.7346e-04, -5.7395e-04])\n","gradient values before mask reapp. tensor([ 5.4147e-04, -3.1890e-04, -6.8345e-05, -3.1933e-06,  7.5728e-04,\n","        -3.1200e-04, -4.2964e-04, -1.6209e-04,  2.6925e-04, -5.7032e-04])\n","gradient values before mask reapp. tensor([ 5.4561e-04, -3.1818e-04, -6.6122e-05, -4.1228e-06,  7.5142e-04,\n","        -3.0971e-04, -4.2819e-04, -1.6218e-04,  2.6510e-04, -5.6614e-04])\n","gradient values before mask reapp. tensor([ 5.0814e-04, -3.2613e-04, -1.8435e-04, -3.5442e-05,  5.9605e-04,\n","        -3.0923e-04, -4.3149e-04, -2.2816e-04,  2.2367e-04, -7.3452e-04])\n","gradient values before mask reapp. tensor([ 5.1644e-04, -3.2460e-04, -1.7323e-04, -3.3982e-05,  5.9966e-04,\n","        -3.0622e-04, -4.2866e-04, -2.2290e-04,  2.2158e-04, -7.1630e-04])\n","gradient values before mask reapp. tensor([ 5.2798e-04, -3.2246e-04, -1.5600e-04, -3.0892e-05,  6.0922e-04,\n","        -3.0251e-04, -4.2460e-04, -2.1386e-04,  2.2062e-04, -6.8809e-04])\n","gradient values before mask reapp. tensor([ 5.3595e-04, -3.2093e-04, -1.4503e-04, -2.9364e-05,  6.1301e-04,\n","        -2.9959e-04, -4.2179e-04, -2.0859e-04,  2.1870e-04, -6.7006e-04])\n","gradient values before mask reapp. tensor([ 5.4665e-04, -3.1890e-04, -1.2899e-04, -2.6482e-05,  6.2170e-04,\n","        -2.9609e-04, -4.1797e-04, -2.0021e-04,  2.1771e-04, -6.4372e-04])\n","gradient values before mask reapp. tensor([ 5.5518e-04, -3.1724e-04, -1.1678e-04, -2.4548e-05,  6.2688e-04,\n","        -2.9307e-04, -4.1490e-04, -1.9411e-04,  2.1613e-04, -6.2359e-04])\n","gradient values before mask reapp. tensor([ 5.6114e-04, -3.1602e-04, -1.0912e-04, -2.3734e-05,  6.2787e-04,\n","        -2.9061e-04, -4.1275e-04, -1.9074e-04,  2.1386e-04, -6.1083e-04])\n","gradient values before mask reapp. tensor([ 5.6684e-04, -3.1482e-04, -1.0175e-04, -2.2965e-05,  6.2867e-04,\n","        -2.8820e-04, -4.1064e-04, -1.8752e-04,  2.1159e-04, -5.9852e-04])\n","gradient values before mask reapp. tensor([ 5.7167e-04, -3.1377e-04, -9.5906e-05, -2.2556e-05,  6.2812e-04,\n","        -2.8600e-04, -4.0884e-04, -1.8520e-04,  2.0911e-04, -5.8869e-04])\n","gradient values before mask reapp. tensor([ 5.7543e-04, -3.1289e-04, -9.1953e-05, -2.2607e-05,  6.2582e-04,\n","        -2.8403e-04, -4.0741e-04, -1.8401e-04,  2.0634e-04, -5.8188e-04])\n","gradient values before mask reapp. tensor([ 5.7842e-04, -3.1214e-04, -8.9264e-05, -2.2946e-05,  6.2241e-04,\n","        -2.8223e-04, -4.0623e-04, -1.8357e-04,  2.0341e-04, -5.7711e-04])\n","gradient values before mask reapp. tensor([ 5.8249e-04, -3.1117e-04, -8.4496e-05, -2.2725e-05,  6.2107e-04,\n","        -2.8020e-04, -4.0464e-04, -1.8184e-04,  2.0090e-04, -5.6894e-04])\n","gradient values before mask reapp. tensor([ 5.5000e-04, -3.1778e-04, -1.8412e-04, -4.8839e-05,  4.9085e-04,\n","        -2.8000e-04, -4.0754e-04, -2.3734e-04,  1.6641e-04, -7.1077e-04])\n","gradient values before mask reapp. tensor([ 5.5476e-04, -3.1664e-04, -1.7742e-04, -4.8042e-05,  4.9182e-04,\n","        -2.7789e-04, -4.0570e-04, -2.3442e-04,  1.6449e-04, -6.9961e-04])\n","gradient values before mask reapp. tensor([ 5.5929e-04, -3.1553e-04, -1.7101e-04, -4.7287e-05,  4.9259e-04,\n","        -2.7584e-04, -4.0391e-04, -2.3162e-04,  1.6258e-04, -6.8889e-04])\n","gradient values before mask reapp. tensor([ 5.6542e-04, -3.1412e-04, -1.6169e-04, -4.5736e-05,  4.9618e-04,\n","        -2.7344e-04, -4.0152e-04, -2.2704e-04,  1.6119e-04, -6.7335e-04])\n","gradient values before mask reapp. tensor([ 5.7128e-04, -3.1276e-04, -1.5277e-04, -4.4273e-05,  4.9948e-04,\n","        -2.7112e-04, -3.9921e-04, -2.2267e-04,  1.5979e-04, -6.5848e-04])\n","gradient values before mask reapp. tensor([ 5.7415e-04, -3.1191e-04, -1.4922e-04, -4.4161e-05,  4.9776e-04,\n","        -2.6944e-04, -3.9796e-04, -2.2156e-04,  1.5751e-04, -6.5230e-04])\n","gradient values before mask reapp. tensor([ 5.7666e-04, -3.1110e-04, -1.4612e-04, -4.4124e-05,  4.9568e-04,\n","        -2.6784e-04, -3.9679e-04, -2.2065e-04,  1.5522e-04, -6.4684e-04])\n","gradient values before mask reapp. tensor([ 5.8023e-04, -3.1011e-04, -1.4117e-04, -4.3607e-05,  4.9536e-04,\n","        -2.6601e-04, -3.9525e-04, -2.1864e-04,  1.5323e-04, -6.3834e-04])\n","gradient values before mask reapp. tensor([ 5.8226e-04, -3.0938e-04, -1.3898e-04, -4.3763e-05,  4.9247e-04,\n","        -2.6451e-04, -3.9425e-04, -2.1829e-04,  1.5081e-04, -6.3428e-04])\n","gradient values before mask reapp. tensor([ 5.8465e-04, -3.0858e-04, -1.3600e-04, -4.3710e-05,  4.9045e-04,\n","        -2.6296e-04, -3.9309e-04, -2.1741e-04,  1.4859e-04, -6.2897e-04])\n","gradient values before mask reapp. tensor([ 5.8697e-04, -3.0778e-04, -1.3313e-04, -4.3641e-05,  4.8832e-04,\n","        -2.6140e-04, -3.9193e-04, -2.1659e-04,  1.4636e-04, -6.2375e-04])\n","gradient values before mask reapp. tensor([ 5.8917e-04, -3.0697e-04, -1.3029e-04, -4.3564e-05,  4.8618e-04,\n","        -2.5987e-04, -3.9077e-04, -2.1575e-04,  1.4416e-04, -6.1859e-04])\n","gradient values before mask reapp. tensor([ 5.9077e-04, -3.0628e-04, -1.2860e-04, -4.3760e-05,  4.8304e-04,\n","        -2.5848e-04, -3.8984e-04, -2.1560e-04,  1.4179e-04, -6.1529e-04])\n","gradient values before mask reapp. tensor([ 5.9202e-04, -3.0564e-04, -1.2750e-04, -4.4094e-05,  4.7938e-04,\n","        -2.5717e-04, -3.8901e-04, -2.1580e-04,  1.3935e-04, -6.1290e-04])\n","gradient values before mask reapp. tensor([ 5.9325e-04, -3.0500e-04, -1.2638e-04, -4.4414e-05,  4.7573e-04,\n","        -2.5585e-04, -3.8818e-04, -2.1597e-04,  1.3692e-04, -6.1048e-04])\n","gradient values before mask reapp. tensor([ 5.9442e-04, -3.0436e-04, -1.2531e-04, -4.4705e-05,  4.7214e-04,\n","        -2.5456e-04, -3.8736e-04, -2.1614e-04,  1.3453e-04, -6.0811e-04])\n","gradient values before mask reapp. tensor([ 5.9766e-04, -3.0332e-04, -1.2029e-04, -4.3958e-05,  4.7229e-04,\n","        -2.5281e-04, -3.8570e-04, -2.1386e-04,  1.3286e-04, -5.9927e-04])\n","gradient values before mask reapp. tensor([ 5.9699e-04, -3.0299e-04, -1.2248e-04, -4.5068e-05,  4.6566e-04,\n","        -2.5192e-04, -3.8551e-04, -2.1599e-04,  1.2996e-04, -6.0218e-04])\n","gradient values before mask reapp. tensor([ 5.9864e-04, -3.0224e-04, -1.2036e-04, -4.5055e-05,  4.6316e-04,\n","        -2.5054e-04, -3.8446e-04, -2.1547e-04,  1.2783e-04, -5.9808e-04])\n","gradient values before mask reapp. tensor([ 6.0052e-04, -3.0144e-04, -1.1780e-04, -4.4884e-05,  4.6109e-04,\n","        -2.4908e-04, -3.8329e-04, -2.1466e-04,  1.2578e-04, -5.9317e-04])\n","gradient values before mask reapp. tensor([ 6.0105e-04, -3.0088e-04, -1.1764e-04, -4.5335e-05,  4.5679e-04,\n","        -2.4793e-04, -3.8261e-04, -2.1531e-04,  1.2335e-04, -5.9220e-04])\n","gradient values before mask reapp. tensor([ 6.0222e-04, -3.0017e-04, -1.1611e-04, -4.5393e-05,  4.5386e-04,\n","        -2.4665e-04, -3.8162e-04, -2.1505e-04,  1.2123e-04, -5.8898e-04])\n","gradient values before mask reapp. tensor([ 6.0445e-04, -2.9928e-04, -1.1276e-04, -4.4980e-05,  4.5265e-04,\n","        -2.4513e-04, -3.8028e-04, -2.1372e-04,  1.1940e-04, -5.8277e-04])\n","gradient values before mask reapp. tensor([ 6.0452e-04, -2.9877e-04, -1.1330e-04, -4.5549e-05,  4.4781e-04,\n","        -2.4409e-04, -3.7972e-04, -2.1473e-04,  1.1693e-04, -5.8286e-04])\n","gradient values before mask reapp. tensor([ 6.0600e-04, -2.9801e-04, -1.1118e-04, -4.5441e-05,  4.4554e-04,\n","        -2.4275e-04, -3.7862e-04, -2.1410e-04,  1.1495e-04, -5.7866e-04])\n","gradient values before mask reapp. tensor([ 6.0530e-04, -2.9763e-04, -1.1304e-04, -4.6291e-05,  4.3954e-04,\n","        -2.4187e-04, -3.7831e-04, -2.1589e-04,  1.1232e-04, -5.8085e-04])\n","gradient values before mask reapp. tensor([ 6.0817e-04, -2.9659e-04, -1.0830e-04, -4.5465e-05,  4.3978e-04,\n","        -2.4022e-04, -3.7665e-04, -2.1363e-04,  1.1082e-04, -5.7232e-04])\n","gradient values before mask reapp. tensor([ 6.0968e-04, -2.9578e-04, -1.0588e-04, -4.5189e-05,  4.3788e-04,\n","        -2.3887e-04, -3.7545e-04, -2.1274e-04,  1.0898e-04, -5.6753e-04])\n","gradient values before mask reapp. tensor([ 6.1016e-04, -2.9517e-04, -1.0542e-04, -4.5421e-05,  4.3419e-04,\n","        -2.3775e-04, -3.7466e-04, -2.1305e-04,  1.0682e-04, -5.6594e-04])\n","gradient values before mask reapp. tensor([ 6.1219e-04, -2.9427e-04, -1.0207e-04, -4.4886e-05,  4.3326e-04,\n","        -2.3630e-04, -3.7327e-04, -2.1159e-04,  1.0518e-04, -5.5961e-04])\n","gradient values before mask reapp. tensor([ 6.1201e-04, -2.9375e-04, -1.0272e-04, -4.5351e-05,  4.2858e-04,\n","        -2.3531e-04, -3.7268e-04, -2.1255e-04,  1.0287e-04, -5.5975e-04])\n","gradient values before mask reapp. tensor([ 6.1369e-04, -2.9291e-04, -9.9905e-05, -4.4957e-05,  4.2721e-04,\n","        -2.3395e-04, -3.7139e-04, -2.1137e-04,  1.0118e-04, -5.5432e-04])\n","gradient values before mask reapp. tensor([ 6.1454e-04, -2.9220e-04, -9.8597e-05, -4.4896e-05,  4.2446e-04,\n","        -2.3275e-04, -3.7040e-04, -2.1111e-04,  9.9259e-05, -5.5126e-04])\n","gradient values before mask reapp. tensor([ 6.1571e-04, -2.9143e-04, -9.6647e-05, -4.4664e-05,  4.2234e-04,\n","        -2.3149e-04, -3.6927e-04, -2.1043e-04,  9.7469e-05, -5.4715e-04])\n","gradient values before mask reapp. tensor([ 6.1560e-04, -2.9087e-04, -9.6899e-05, -4.4952e-05,  4.1817e-04,\n","        -2.3049e-04, -3.6858e-04, -2.1107e-04,  9.5343e-05, -5.4660e-04])\n","gradient values before mask reapp. tensor([ 6.1786e-04, -2.8989e-04, -9.2726e-05, -4.4129e-05,  4.1828e-04,\n","        -2.2902e-04, -3.6700e-04, -2.0897e-04,  9.4035e-05, -5.3891e-04])\n","gradient values before mask reapp. tensor([ 6.1917e-04, -2.8906e-04, -9.0272e-05, -4.3707e-05,  4.1677e-04,\n","        -2.2773e-04, -3.6576e-04, -2.0792e-04,  9.2437e-05, -5.3396e-04])\n","gradient values before mask reapp. tensor([ 6.1808e-04, -2.8866e-04, -9.2173e-05, -4.4367e-05,  4.1116e-04,\n","        -2.2695e-04, -3.6538e-04, -2.0950e-04,  9.0108e-05, -5.3603e-04])\n","gradient values before mask reapp. tensor([ 6.1883e-04, -2.8794e-04, -9.0831e-05, -4.4228e-05,  4.0862e-04,\n","        -2.2580e-04, -3.6435e-04, -2.0914e-04,  8.8312e-05, -5.3286e-04])\n","gradient values before mask reapp. tensor([ 6.2082e-04, -2.8698e-04, -8.6973e-05, -4.3414e-05,  4.0859e-04,\n","        -2.2440e-04, -3.6281e-04, -2.0716e-04,  8.7051e-05, -5.2561e-04])\n","gradient values before mask reapp. tensor([ 6.2059e-04, -2.8642e-04, -8.7334e-05, -4.3662e-05,  4.0453e-04,\n","        -2.2344e-04, -3.6211e-04, -2.0780e-04,  8.5017e-05, -5.2514e-04])\n","gradient values before mask reapp. tensor([ 6.2061e-04, -2.8581e-04, -8.7085e-05, -4.3737e-05,  4.0110e-04,\n","        -2.2246e-04, -3.6129e-04, -2.0803e-04,  8.3148e-05, -5.2371e-04])\n","gradient values before mask reapp. tensor([ 6.2118e-04, -2.8510e-04, -8.5933e-05, -4.3565e-05,  3.9851e-04,\n","        -2.2134e-04, -3.6027e-04, -2.0772e-04,  8.1403e-05, -5.2073e-04])\n","gradient values before mask reapp. tensor([ 6.2258e-04, -2.8424e-04, -8.3038e-05, -4.2965e-05,  3.9767e-04,\n","        -2.2008e-04, -3.5892e-04, -2.0630e-04,  8.0038e-05, -5.1504e-04])\n","gradient values before mask reapp. tensor([ 6.2325e-04, -2.8350e-04, -8.1621e-05, -4.2715e-05,  3.9541e-04,\n","        -2.1894e-04, -3.5785e-04, -2.0580e-04,  7.8388e-05, -5.1164e-04])\n","gradient values before mask reapp. tensor([ 6.2288e-04, -2.8293e-04, -8.1914e-05, -4.2861e-05,  3.9160e-04,\n","        -2.1805e-04, -3.5711e-04, -2.0630e-04,  7.6512e-05, -5.1102e-04])\n","gradient values before mask reapp. tensor([ 6.2327e-04, -2.8224e-04, -8.0927e-05, -4.2724e-05,  3.8898e-04,\n","        -2.1698e-04, -3.5613e-04, -2.0604e-04,  7.4824e-05, -5.0834e-04])\n","gradient values before mask reapp. tensor([ 6.2334e-04, -2.8159e-04, -8.0301e-05, -4.2622e-05,  3.8614e-04,\n","        -2.1601e-04, -3.5521e-04, -2.0594e-04,  7.3168e-05, -5.0626e-04])\n","gradient values before mask reapp. tensor([ 6.2556e-04, -2.8055e-04, -7.5899e-05, -4.1564e-05,  3.8682e-04,\n","        -2.1455e-04, -3.5352e-04, -2.0357e-04,  7.2106e-05, -4.9796e-04])\n","gradient values before mask reapp. tensor([ 6.2500e-04, -2.8002e-04, -7.6547e-05, -4.1805e-05,  3.8275e-04,\n","        -2.1370e-04, -3.5285e-04, -2.0427e-04,  7.0200e-05, -4.9790e-04])\n","gradient values before mask reapp. tensor([ 6.2408e-04, -2.7952e-04, -7.7683e-05, -4.2104e-05,  3.7828e-04,\n","        -2.1293e-04, -3.5227e-04, -2.0522e-04,  6.8273e-05, -4.9860e-04])\n","gradient values before mask reapp. tensor([ 6.2642e-04, -2.7848e-04, -7.3083e-05, -4.1024e-05,  3.7920e-04,\n","        -2.1146e-04, -3.5054e-04, -2.0272e-04,  6.7261e-05, -4.9002e-04])\n","gradient values before mask reapp. tensor([ 6.2673e-04, -2.7776e-04, -7.1876e-05, -4.0715e-05,  3.7703e-04,\n","        -2.1043e-04, -3.4948e-04, -2.0222e-04,  6.5783e-05, -4.8691e-04])\n","gradient values before mask reapp. tensor([ 6.2513e-04, -2.7737e-04, -7.4151e-05, -4.1262e-05,  3.7159e-04,\n","        -2.0982e-04, -3.4912e-04, -2.0383e-04,  6.3728e-05, -4.8941e-04])\n","gradient values before mask reapp. tensor([ 6.2599e-04, -2.7657e-04, -7.2166e-05, -4.0814e-05,  3.7010e-04,\n","        -2.0866e-04, -3.4792e-04, -2.0290e-04,  6.2318e-05, -4.8505e-04])\n","gradient values before mask reapp. tensor([ 6.2954e-04, -2.7526e-04, -6.4842e-05, -3.8887e-05,  3.7388e-04,\n","        -2.0698e-04, -3.4562e-04, -1.9859e-04,  6.2006e-05, -4.7199e-04])\n","gradient values before mask reapp. tensor([ 6.2547e-04, -2.7532e-04, -7.1768e-05, -4.0679e-05,  3.6397e-04,\n","        -2.0687e-04, -3.4619e-04, -2.0308e-04,  5.9090e-05, -4.8206e-04])\n","gradient values before mask reapp. tensor([ 6.2676e-04, -2.7441e-04, -6.8556e-05, -3.9806e-05,  3.6391e-04,\n","        -2.0568e-04, -3.4473e-04, -2.0127e-04,  5.8102e-05, -4.7570e-04])\n","gradient values before mask reapp. tensor([ 6.2716e-04, -2.7367e-04, -6.7238e-05, -3.9460e-05,  3.6190e-04,\n","        -2.0462e-04, -3.4363e-04, -2.0069e-04,  5.6665e-05, -4.7236e-04])\n","gradient values before mask reapp. tensor([ 6.3447e-04, -2.7167e-04, -5.2951e-05, -3.5671e-05,  3.7238e-04,\n","        -2.0212e-04, -3.3990e-04, -1.9208e-04,  5.7601e-05, -4.4787e-04])\n","gradient values before mask reapp. tensor([ 6.2857e-04, -2.7204e-04, -6.3038e-05, -3.8268e-05,  3.5965e-04,\n","        -2.0244e-04, -3.4112e-04, -1.9844e-04,  5.4266e-05, -4.6313e-04])\n","gradient values before mask reapp. tensor([ 6.3371e-04, -2.7044e-04, -5.2813e-05, -3.5541e-05,  3.6629e-04,\n","        -2.0040e-04, -3.3821e-04, -1.9233e-04,  5.4504e-05, -4.4525e-04])\n","gradient values before mask reapp. tensor([ 6.3242e-04, -2.6997e-04, -5.4178e-05, -3.5802e-05,  3.6202e-04,\n","        -1.9976e-04, -3.3765e-04, -1.9326e-04,  5.2791e-05, -4.4627e-04])\n","gradient values before mask reapp. tensor([ 6.3308e-04, -2.6916e-04, -5.2135e-05, -3.5213e-05,  3.6089e-04,\n","        -1.9869e-04, -3.3640e-04, -1.9216e-04,  5.1615e-05, -4.4175e-04])\n","gradient values before mask reapp. tensor([ 6.3095e-04, -2.6883e-04, -5.5040e-05, -3.5854e-05,  3.5519e-04,\n","        -1.9823e-04, -3.3615e-04, -1.9404e-04,  4.9669e-05, -4.4526e-04])\n","gradient values before mask reapp. tensor([ 6.3370e-04, -2.6764e-04, -4.9157e-05, -3.4255e-05,  3.5768e-04,\n","        -1.9668e-04, -3.3411e-04, -1.9058e-04,  4.9146e-05, -4.3444e-04])\n","gradient values before mask reapp. tensor([ 6.3142e-04, -2.6734e-04, -5.2167e-05, -3.4876e-05,  3.5209e-04,\n","        -1.9631e-04, -3.3388e-04, -1.9245e-04,  4.7297e-05, -4.3813e-04])\n","gradient values before mask reapp. tensor([ 6.3578e-04, -2.6585e-04, -4.3288e-05, -3.2501e-05,  3.5743e-04,\n","        -1.9441e-04, -3.3123e-04, -1.8715e-04,  4.7307e-05, -4.2243e-04])\n","gradient values before mask reapp. tensor([ 6.3188e-04, -2.6583e-04, -4.9303e-05, -3.3918e-05,  3.4899e-04,\n","        -1.9436e-04, -3.3161e-04, -1.9087e-04,  4.4946e-05, -4.3101e-04])\n","gradient values before mask reapp. tensor([ 6.3388e-04, -2.6476e-04, -4.4591e-05, -3.2506e-05,  3.5059e-04,\n","        -1.9301e-04, -3.2980e-04, -1.8805e-04,  4.4351e-05, -4.2199e-04])\n","gradient values before mask reapp. tensor([ 6.3478e-04, -2.6387e-04, -4.1781e-05, -3.1663e-05,  3.5047e-04,\n","        -1.9193e-04, -3.2838e-04, -1.8637e-04,  4.3499e-05, -4.1622e-04])\n","gradient values before mask reapp. tensor([ 6.3413e-04, -2.6328e-04, -4.1890e-05, -3.1575e-05,  3.4747e-04,\n","        -1.9115e-04, -3.2756e-04, -1.8650e-04,  4.2072e-05, -4.1520e-04])\n","gradient values before mask reapp. tensor([ 6.3558e-04, -2.6229e-04, -3.8063e-05, -3.0354e-05,  3.4838e-04,\n","        -1.8993e-04, -3.2591e-04, -1.8418e-04,  4.1413e-05, -4.0760e-04])\n","gradient values before mask reapp. tensor([ 6.3501e-04, -2.6166e-04, -3.7869e-05, -3.0181e-05,  3.4585e-04,\n","        -1.8917e-04, -3.2503e-04, -1.8407e-04,  4.0149e-05, -4.0609e-04])\n","gradient values before mask reapp. tensor([ 6.3366e-04, -2.6118e-04, -3.9198e-05, -3.0333e-05,  3.4183e-04,\n","        -1.8856e-04, -3.2446e-04, -1.8492e-04,  3.8595e-05, -4.0698e-04])\n","gradient values before mask reapp. tensor([ 6.3536e-04, -2.6013e-04, -3.4765e-05, -2.8975e-05,  3.4343e-04,\n","        -1.8730e-04, -3.2267e-04, -1.8217e-04,  3.8127e-05, -3.9842e-04])\n","gradient values before mask reapp. tensor([ 6.3618e-04, -2.5926e-04, -3.2057e-05, -2.8131e-05,  3.4320e-04,\n","        -1.8623e-04, -3.2128e-04, -1.8055e-04,  3.7249e-05, -3.9281e-04])\n","gradient values before mask reapp. tensor([ 6.0164e-04, -2.6824e-04, -1.1690e-04, -4.2399e-05,  2.0967e-04,\n","        -1.8611e-04, -3.3561e-04, -2.4203e-04, -9.5815e-06, -5.1678e-04])\n","gradient values before mask reapp. tensor([ 6.0261e-04, -2.6728e-04, -1.1352e-04, -4.1471e-05,  2.1092e-04,\n","        -1.8510e-04, -3.3409e-04, -2.3981e-04, -9.8232e-06, -5.1021e-04])\n","gradient values before mask reapp. tensor([ 6.3950e-04, -2.5647e-04, -2.1979e-05, -2.4919e-05,  3.4501e-04,\n","        -1.8290e-04, -3.1667e-04, -1.7428e-04,  3.5343e-05, -3.7262e-04])\n","gradient values before mask reapp. tensor([ 6.0623e-04, -2.6507e-04, -1.0359e-04, -3.8636e-05,  2.1644e-04,\n","        -1.8275e-04, -3.3042e-04, -2.3342e-04, -9.7622e-06, -4.9181e-04])\n","gradient values before mask reapp. tensor([ 6.0158e-04, -2.6507e-04, -1.1026e-04, -4.0267e-05,  2.0850e-04,\n","        -1.8297e-04, -3.3092e-04, -2.3726e-04, -1.1532e-05, -5.0158e-04])\n","gradient values before mask reapp. tensor([ 6.4006e-04, -2.5413e-04, -1.6815e-05, -2.2896e-05,  3.4230e-04,\n","        -1.8016e-04, -3.1305e-04, -1.7098e-04,  3.2690e-05, -3.6033e-04])\n","gradient values before mask reapp. tensor([ 6.0701e-04, -2.6255e-04, -9.7031e-05, -3.6561e-05,  2.1708e-04,\n","        -1.8022e-04, -3.2657e-04, -2.2885e-04, -1.0927e-05, -4.7776e-04])\n","gradient values before mask reapp. tensor([ 6.0755e-04, -2.6166e-04, -9.4261e-05, -3.5644e-05,  2.1797e-04,\n","        -1.7933e-04, -3.2517e-04, -2.2694e-04, -1.1147e-05, -4.7207e-04])\n","gradient values before mask reapp. tensor([ 6.0803e-04, -2.6078e-04, -9.1567e-05, -3.4868e-05,  2.1874e-04,\n","        -1.7848e-04, -3.2381e-04, -2.2508e-04, -1.1401e-05, -4.6668e-04])\n","gradient values before mask reapp. tensor([ 6.1173e-04, -2.5934e-04, -8.3082e-05, -3.2462e-05,  2.2486e-04,\n","        -1.7689e-04, -3.2124e-04, -2.1969e-04, -1.0745e-05, -4.5166e-04])\n","gradient values before mask reapp. tensor([ 6.4715e-04, -2.4911e-04,  3.6474e-06, -1.6369e-05,  3.4963e-04,\n","        -1.7435e-04, -3.0459e-04, -1.5800e-04,  3.0686e-05, -3.2057e-04])\n","gradient values before mask reapp. tensor([ 6.0928e-04, -2.5815e-04, -8.3815e-05, -3.2280e-05,  2.2077e-04,\n","        -1.7587e-04, -3.1969e-04, -2.1966e-04, -1.2197e-05, -4.5052e-04])\n","gradient values before mask reapp. tensor([ 6.1220e-04, -2.5685e-04, -7.6696e-05, -3.0263e-05,  2.2567e-04,\n","        -1.7448e-04, -3.1743e-04, -2.1511e-04, -1.1720e-05, -4.3782e-04])\n","gradient values before mask reapp. tensor([ 6.1160e-04, -2.5616e-04, -7.5924e-05, -2.9864e-05,  2.2483e-04,\n","        -1.7387e-04, -3.1645e-04, -2.1438e-04, -1.2169e-05, -4.3544e-04])\n","gradient values before mask reapp. tensor([ 6.1944e-04, -2.5397e-04, -5.9733e-05, -2.5457e-05,  2.3820e-04,\n","        -1.7139e-04, -3.1229e-04, -2.0424e-04, -1.0221e-05, -4.0786e-04])\n","gradient values before mask reapp. tensor([ 6.1231e-04, -2.5441e-04, -7.0669e-05, -2.8175e-05,  2.2660e-04,\n","        -1.7224e-04, -3.1371e-04, -2.1061e-04, -1.2480e-05, -4.2470e-04])\n","gradient values before mask reapp. tensor([ 6.1579e-04, -2.5300e-04, -6.2424e-05, -2.5794e-05,  2.3269e-04,\n","        -1.7072e-04, -3.1119e-04, -2.0531e-04, -1.1742e-05, -4.1007e-04])\n","gradient values before mask reapp. tensor([ 6.2195e-04, -2.5112e-04, -4.9372e-05, -2.2164e-05,  2.4317e-04,\n","        -1.6861e-04, -3.0770e-04, -1.9712e-04, -1.0270e-05, -3.8758e-04])\n","gradient values before mask reapp. tensor([ 6.1787e-04, -2.5101e-04, -5.4731e-05, -2.3353e-05,  2.3668e-04,\n","        -1.6874e-04, -3.0794e-04, -2.0007e-04, -1.1676e-05, -3.9517e-04])\n","gradient values before mask reapp. tensor([ 6.1784e-04, -2.5022e-04, -5.2789e-05, -2.2669e-05,  2.3697e-04,\n","        -1.6804e-04, -3.0673e-04, -1.9860e-04, -1.1904e-05, -3.9096e-04])\n","gradient values before mask reapp. tensor([ 6.1425e-04, -2.5007e-04, -5.7305e-05, -2.3691e-05,  2.3132e-04,\n","        -1.6812e-04, -3.0686e-04, -2.0106e-04, -1.3132e-05, -3.9733e-04])\n","gradient values before mask reapp. tensor([ 6.1852e-04, -2.4850e-04, -4.7528e-05, -2.0899e-05,  2.3882e-04,\n","        -1.6643e-04, -3.0401e-04, -1.9480e-04, -1.2158e-05, -3.8017e-04])\n","gradient values before mask reapp. tensor([ 6.1355e-04, -2.4858e-04, -5.4513e-05, -2.2560e-05,  2.3098e-04,\n","        -1.6682e-04, -3.0464e-04, -1.9875e-04, -1.3716e-05, -3.9057e-04])\n","gradient values before mask reapp. tensor([ 6.1872e-04, -2.4686e-04, -4.3187e-05, -1.9367e-05,  2.3981e-04,\n","        -1.6490e-04, -3.0148e-04, -1.9159e-04, -1.2558e-05, -3.7088e-04])\n","gradient values before mask reapp. tensor([ 6.2035e-04, -2.4578e-04, -3.8169e-05, -1.7854e-05,  2.4301e-04,\n","        -1.6384e-04, -2.9964e-04, -1.8822e-04, -1.2258e-05, -3.6162e-04])\n","gradient values before mask reapp. tensor([ 6.1424e-04, -2.4603e-04, -4.7102e-05, -1.9952e-05,  2.3348e-04,\n","        -1.6447e-04, -3.0063e-04, -1.9329e-04, -1.4068e-05, -3.7508e-04])\n","gradient values before mask reapp. tensor([ 6.2013e-04, -2.4420e-04, -3.4418e-05, -1.6474e-05,  2.4367e-04,\n","        -1.6245e-04, -2.9724e-04, -1.8530e-04, -1.2615e-05, -3.5333e-04])\n","gradient values before mask reapp. tensor([ 6.2091e-04, -2.4328e-04, -3.0903e-05, -1.5334e-05,  2.4562e-04,\n","        -1.6159e-04, -2.9573e-04, -1.8282e-04, -1.2473e-05, -3.4655e-04])\n","gradient values before mask reapp. tensor([ 6.2122e-04, -2.4240e-04, -2.8237e-05, -1.4386e-05,  2.4667e-04,\n","        -1.6078e-04, -2.9434e-04, -1.8087e-04, -1.2535e-05, -3.4101e-04])\n","gradient values before mask reapp. tensor([ 6.1975e-04, -2.4186e-04, -2.8647e-05, -1.4319e-05,  2.4512e-04,\n","        -1.6046e-04, -2.9363e-04, -1.8073e-04, -1.2929e-05, -3.4074e-04])\n","gradient values before mask reapp. tensor([ 6.1890e-04, -2.4118e-04, -2.8053e-05, -1.3870e-05,  2.4429e-04,\n","        -1.5990e-04, -2.9266e-04, -1.8002e-04, -1.3296e-05, -3.3854e-04])\n","gradient values before mask reapp. tensor([ 6.1880e-04, -2.4040e-04, -2.6136e-05, -1.3192e-05,  2.4469e-04,\n","        -1.5922e-04, -2.9147e-04, -1.7854e-04, -1.3441e-05, -3.3440e-04])\n","gradient values before mask reapp. tensor([ 6.2090e-04, -2.3923e-04, -2.0152e-05, -1.1381e-05,  2.4891e-04,\n","        -1.5807e-04, -2.8943e-04, -1.7454e-04, -1.2913e-05, -3.2353e-04])\n","gradient values before mask reapp. tensor([ 6.2053e-04, -2.3852e-04, -1.8645e-05, -1.0795e-05,  2.4902e-04,\n","        -1.5748e-04, -2.8833e-04, -1.7326e-04, -1.3073e-05, -3.2010e-04])\n","gradient values before mask reapp. tensor([ 6.1718e-04, -2.3827e-04, -2.2479e-05, -1.1580e-05,  2.4419e-04,\n","        -1.5750e-04, -2.8828e-04, -1.7522e-04, -1.4075e-05, -3.2526e-04])\n","gradient values before mask reapp. tensor([ 6.1602e-04, -2.3769e-04, -2.2398e-05, -1.1331e-05,  2.4305e-04,\n","        -1.5710e-04, -2.8748e-04, -1.7480e-04, -1.4419e-05, -3.2413e-04])\n","gradient values before mask reapp. tensor([ 6.1666e-04, -2.3675e-04, -1.9083e-05, -1.0191e-05,  2.4476e-04,\n","        -1.5622e-04, -2.8596e-04, -1.7244e-04, -1.4347e-05, -3.1751e-04])\n","gradient values before mask reapp. tensor([ 6.1488e-04, -2.3628e-04, -2.0096e-05, -1.0261e-05,  2.4260e-04,\n","        -1.5596e-04, -2.8539e-04, -1.7268e-04, -1.4864e-05, -3.1822e-04])\n","gradient values before mask reapp. tensor([ 6.1622e-04, -2.3523e-04, -1.5510e-05, -8.7815e-06,  2.4550e-04,\n","        -1.5493e-04, -2.8361e-04, -1.6954e-04, -1.4579e-05, -3.0953e-04])\n","gradient values before mask reapp. tensor([ 6.1511e-04, -2.3462e-04, -1.5356e-05, -8.5591e-06,  2.4433e-04,\n","        -1.5449e-04, -2.8279e-04, -1.6911e-04, -1.4955e-05, -3.0829e-04])\n","gradient values before mask reapp. tensor([ 6.1772e-04, -2.3341e-04, -8.3749e-06, -6.5752e-06,  2.4958e-04,\n","        -1.5329e-04, -2.8061e-04, -1.6447e-04, -1.4204e-05, -2.9604e-04])\n","gradient values before mask reapp. tensor([ 6.1320e-04, -2.3337e-04, -1.4294e-05, -7.8235e-06,  2.4295e-04,\n","        -1.5358e-04, -2.8097e-04, -1.6767e-04, -1.5466e-05, -3.0451e-04])\n","gradient values before mask reapp. tensor([ 6.1410e-04, -2.3241e-04, -1.0502e-05, -6.6559e-06,  2.4515e-04,\n","        -1.5269e-04, -2.7942e-04, -1.6503e-04, -1.5270e-05, -2.9734e-04])\n","gradient values before mask reapp. tensor([ 6.1718e-04, -2.3109e-04, -2.7049e-06, -4.3685e-06,  2.5114e-04,\n","        -1.5135e-04, -2.7704e-04, -1.5991e-04, -1.4393e-05, -2.8357e-04])\n","gradient values before mask reapp. tensor([ 6.1330e-04, -2.3095e-04, -7.4543e-06, -5.3275e-06,  2.4558e-04,\n","        -1.5150e-04, -2.7718e-04, -1.6240e-04, -1.5476e-05, -2.9019e-04])\n","gradient values before mask reapp. tensor([ 6.1384e-04, -2.3006e-04, -4.2959e-06, -4.3228e-06,  2.4722e-04,\n","        -1.5071e-04, -2.7576e-04, -1.6013e-04, -1.5362e-05, -2.8406e-04])\n","gradient values before mask reapp. tensor([ 6.1468e-04, -2.2913e-04, -4.4974e-07, -3.0676e-06,  2.4965e-04,\n","        -1.4988e-04, -2.7418e-04, -1.5738e-04, -1.5056e-05, -2.7679e-04])\n","gradient values before mask reapp. tensor([ 6.1395e-04, -2.2848e-04,  4.2123e-07, -2.6453e-06,  2.4929e-04,\n","        -1.4938e-04, -2.7324e-04, -1.5648e-04, -1.5238e-05, -2.7440e-04])\n","gradient values before mask reapp. tensor([ 6.1164e-04, -2.2805e-04, -1.4448e-06, -2.8497e-06,  2.4639e-04,\n","        -1.4919e-04, -2.7279e-04, -1.5721e-04, -1.5865e-05, -2.7631e-04])\n","gradient values before mask reapp. tensor([ 6.1302e-04, -2.2705e-04,  3.2977e-06, -1.4111e-06,  2.4963e-04,\n","        -1.4826e-04, -2.7106e-04, -1.5394e-04, -1.5419e-05, -2.6765e-04])\n","gradient values before mask reapp. tensor([ 6.1124e-04, -2.2653e-04,  2.4433e-06, -1.3687e-06,  2.4777e-04,\n","        -1.4797e-04, -2.7042e-04, -1.5403e-04, -1.5830e-05, -2.6796e-04])\n","gradient values before mask reapp. tensor([ 6.1136e-04, -2.2573e-04,  4.8606e-06, -5.4922e-07,  2.4874e-04,\n","        -1.4728e-04, -2.6915e-04, -1.5221e-04, -1.5816e-05, -2.6305e-04])\n","gradient values before mask reapp. tensor([ 6.0964e-04, -2.2523e-04,  4.1273e-06, -4.4456e-07,  2.4709e-04,\n","        -1.4701e-04, -2.6850e-04, -1.5220e-04, -1.6151e-05, -2.6318e-04])\n","gradient values before mask reapp. tensor([ 6.1198e-04, -2.2404e-04,  1.0583e-05,  1.4402e-06,  2.5187e-04,\n","        -1.4584e-04, -2.6643e-04, -1.4793e-04, -1.5464e-05, -2.5167e-04])\n","gradient values before mask reapp. tensor([ 6.1249e-04, -2.2316e-04,  1.3832e-05,  2.4525e-06,  2.5372e-04,\n","        -1.4508e-04, -2.6499e-04, -1.4555e-04, -1.5255e-05, -2.4548e-04])\n","gradient values before mask reapp. tensor([ 6.0954e-04, -2.2287e-04,  1.0957e-05,  2.0045e-06,  2.5020e-04,\n","        -1.4511e-04, -2.6477e-04, -1.4681e-04, -1.5857e-05, -2.4913e-04])\n","gradient values before mask reapp. tensor([ 6.1097e-04, -2.2183e-04,  1.5816e-05,  3.4540e-06,  2.5350e-04,\n","        -1.4414e-04, -2.6302e-04, -1.4349e-04, -1.5414e-05, -2.4026e-04])\n","gradient values before mask reapp. tensor([ 6.0938e-04, -2.2132e-04,  1.5237e-05,  3.5307e-06,  2.5194e-04,\n","        -1.4385e-04, -2.6237e-04, -1.4343e-04, -1.5742e-05, -2.4023e-04])\n","gradient values before mask reapp. tensor([ 5.6794e-04, -2.2587e-04, -5.8016e-05, -4.9381e-05,  1.4027e-04,\n","        -1.4500e-04, -2.7398e-04, -1.9424e-04, -5.1778e-05, -3.8778e-04])\n","gradient values before mask reapp. tensor([ 6.0923e-04, -2.1974e-04,  1.9756e-05,  5.2199e-06,  2.5416e-04,\n","        -1.4262e-04, -2.5988e-04, -1.3980e-04, -1.5448e-05, -2.3085e-04])\n","gradient values before mask reapp. tensor([ 5.6526e-04, -2.2477e-04, -5.8054e-05, -4.8481e-05,  1.3887e-04,\n","        -1.4443e-04, -2.7246e-04, -1.9329e-04, -5.1865e-05, -3.8553e-04])\n","gradient values before mask reapp. tensor([ 6.0788e-04, -2.1837e-04,  2.2065e-05,  6.3085e-06,  2.5425e-04,\n","        -1.4161e-04, -2.5784e-04, -1.3755e-04, -1.5546e-05, -2.2506e-04])\n","gradient values before mask reapp. tensor([ 6.0762e-04, -2.1766e-04,  2.3986e-05,  7.0079e-06,  2.5516e-04,\n","        -1.4109e-04, -2.5672e-04, -1.3593e-04, -1.5376e-05, -2.2110e-04])\n","gradient values before mask reapp. tensor([ 5.6215e-04, -2.2297e-04, -5.6498e-05, -4.6801e-05,  1.3817e-04,\n","        -1.4338e-04, -2.6989e-04, -1.9092e-04, -5.1781e-05, -3.7966e-04])\n","gradient values before mask reapp. tensor([ 6.0526e-04, -2.1646e-04,  2.4485e-05,  7.6347e-06,  2.5367e-04,\n","        -1.4032e-04, -2.5505e-04, -1.3476e-04, -1.5708e-05, -2.1827e-04])\n","gradient values before mask reapp. tensor([ 5.6182e-04, -2.2147e-04, -5.2279e-05, -4.4883e-05,  1.4063e-04,\n","        -1.4228e-04, -2.6752e-04, -1.8740e-04, -5.1233e-05, -3.7056e-04])\n","gradient values before mask reapp. tensor([ 6.0263e-04, -2.1533e-04,  2.4543e-05,  8.1250e-06,  2.5190e-04,\n","        -1.3967e-04, -2.5351e-04, -1.3383e-04, -1.6037e-05, -2.1628e-04])\n","gradient values before mask reapp. tensor([ 5.5973e-04, -2.2025e-04, -5.1288e-05, -4.3748e-05,  1.4012e-04,\n","        -1.4155e-04, -2.6579e-04, -1.8585e-04, -5.1190e-05, -3.6661e-04])\n","gradient values before mask reapp. tensor([ 5.9835e-04, -2.1449e-04,  2.1556e-05,  7.7862e-06,  2.4718e-04,\n","        -1.3935e-04, -2.5258e-04, -1.3479e-04, -1.6917e-05, -2.1924e-04])\n","gradient values before mask reapp. tensor([ 5.6066e-04, -2.1855e-04, -4.4700e-05, -4.1295e-05,  1.4483e-04,\n","        -1.4022e-04, -2.6296e-04, -1.8086e-04, -5.0235e-05, -3.5384e-04])\n","gradient values before mask reapp. tensor([ 5.9800e-04, -2.1300e-04,  2.5839e-05,  9.3546e-06,  2.4946e-04,\n","        -1.3826e-04, -2.5021e-04, -1.3125e-04, -1.6492e-05, -2.1048e-04])\n","gradient values before mask reapp. tensor([ 5.5766e-04, -2.1755e-04, -4.5467e-05, -4.0669e-05,  1.4274e-04,\n","        -1.3976e-04, -2.6169e-04, -1.8042e-04, -5.0429e-05, -3.5296e-04])\n","gradient values before mask reapp. tensor([ 5.9849e-04, -2.1131e-04,  3.1446e-05,  1.1331e-05,  2.5263e-04,\n","        -1.3684e-04, -2.4749e-04, -1.2698e-04, -1.6065e-05, -1.9926e-04])\n","gradient values before mask reapp. tensor([ 5.5540e-04, -2.1637e-04, -4.4780e-05, -3.9642e-05,  1.4194e-04,\n","        -1.3907e-04, -2.6004e-04, -1.7907e-04, -5.0440e-05, -3.4957e-04])\n","gradient values before mask reapp. tensor([ 5.9792e-04, -2.0986e-04,  3.5088e-05,  1.2644e-05,  2.5401e-04,\n","        -1.3573e-04, -2.4529e-04, -1.2396e-04, -1.5901e-05, -1.9157e-04])\n","gradient values before mask reapp. tensor([ 5.4092e-04, -2.1856e-04, -7.4132e-05, -4.3852e-05,  9.5721e-05,\n","        -1.3876e-04, -2.6378e-04, -1.9930e-04, -6.6025e-05, -3.9072e-04])\n","gradient values before mask reapp. tensor([ 5.9555e-04, -2.0870e-04,  3.5659e-05,  1.3257e-05,  2.5278e-04,\n","        -1.3505e-04, -2.4366e-04, -1.2271e-04, -1.6110e-05, -1.8880e-04])\n","gradient values before mask reapp. tensor([ 5.7803e-04, -2.1218e-04, -1.3673e-06,  6.4012e-06,  2.0049e-04,\n","        -1.3603e-04, -2.4973e-04, -1.4800e-04, -3.2658e-05, -2.4386e-04])\n","gradient values before mask reapp. tensor([ 5.4263e-04, -2.1592e-04, -6.3629e-05, -4.0118e-05,  1.0378e-04,\n","        -1.3674e-04, -2.5948e-04, -1.9144e-04, -6.4223e-05, -3.7066e-04])\n","gradient values before mask reapp. tensor([ 5.9023e-04, -2.0730e-04,  3.3253e-05,  1.3251e-05,  2.4789e-04,\n","        -1.3442e-04, -2.4192e-04, -1.2284e-04, -1.6944e-05, -1.9009e-04])\n","gradient values before mask reapp. tensor([ 5.7533e-04, -2.1027e-04,  1.2442e-06,  7.6012e-06,  2.0087e-04,\n","        -1.3490e-04, -2.4700e-04, -1.4497e-04, -3.2313e-05, -2.3712e-04])\n","gradient values before mask reapp. tensor([ 5.4326e-04, -2.1345e-04, -5.4993e-05, -3.6827e-05,  1.1023e-04,\n","        -1.3495e-04, -2.5553e-04, -1.8466e-04, -6.2653e-05, -3.5359e-04])\n","gradient values before mask reapp. tensor([ 5.7324e-04, -2.0905e-04,  2.4236e-06,  8.2294e-06,  2.0056e-04,\n","        -1.3420e-04, -2.4530e-04, -1.4332e-04, -3.2190e-05, -2.3355e-04])\n","gradient values before mask reapp. tensor([ 5.7598e-04, -2.0781e-04,  9.8055e-06,  1.0292e-05,  2.0651e-04,\n","        -1.3304e-04, -2.4309e-04, -1.3839e-04, -3.1162e-05, -2.2077e-04])\n","gradient values before mask reapp. tensor([ 5.7161e-04, -2.0776e-04,  4.5099e-06,  9.1737e-06,  2.0123e-04,\n","        -1.3342e-04, -2.4341e-04, -1.4106e-04, -3.1860e-05, -2.2845e-04])\n","gradient values before mask reapp. tensor([ 5.3883e-04, -2.1113e-04, -5.3025e-05, -3.4897e-05,  1.1040e-04,\n","        -1.3384e-04, -2.5232e-04, -1.8139e-04, -6.1825e-05, -3.4655e-04])\n","gradient values before mask reapp. tensor([ 5.6838e-04, -2.0674e-04,  3.6333e-06,  9.2432e-06,  1.9907e-04,\n","        -1.3297e-04, -2.4213e-04, -1.4065e-04, -3.2036e-05, -2.2825e-04])\n","gradient values before mask reapp. tensor([ 5.7538e-04, -2.0480e-04,  1.8678e-05,  1.3278e-05,  2.1192e-04,\n","        -1.3091e-04, -2.3840e-04, -1.3110e-04, -2.9909e-05, -2.0308e-04])\n","gradient values before mask reapp. tensor([ 5.6825e-04, -2.0524e-04,  8.3631e-06,  1.0763e-05,  2.0202e-04,\n","        -1.3194e-04, -2.3978e-04, -1.3684e-04, -3.1372e-05, -2.1912e-04])\n","gradient values before mask reapp. tensor([ 5.3456e-04, -2.0881e-04, -5.0679e-05, -3.2897e-05,  1.1095e-04,\n","        -1.3270e-04, -2.4901e-04, -1.7786e-04, -6.0937e-05, -3.3893e-04])\n","gradient values before mask reapp. tensor([ 5.6557e-04, -2.0413e-04,  8.4725e-06,  1.1115e-05,  2.0078e-04,\n","        -1.3136e-04, -2.3831e-04, -1.3584e-04, -3.1395e-05, -2.1728e-04])\n","gradient values before mask reapp. tensor([ 5.6430e-04, -2.0357e-04,  8.6616e-06,  1.1272e-05,  2.0027e-04,\n","        -1.3106e-04, -2.3754e-04, -1.3525e-04, -3.1399e-05, -2.1622e-04])\n","gradient values before mask reapp. tensor([ 5.3212e-04, -2.0688e-04, -4.7732e-05, -3.1072e-05,  1.1228e-04,\n","        -1.3161e-04, -2.4628e-04, -1.7460e-04, -6.0180e-05, -3.3114e-04])\n","gradient values before mask reapp. tensor([ 5.6241e-04, -2.0233e-04,  1.0110e-05,  1.1936e-05,  2.0015e-04,\n","        -1.3032e-04, -2.3582e-04, -1.3348e-04, -3.1270e-05, -2.1226e-04])\n","gradient values before mask reapp. tensor([ 5.6304e-04, -2.0147e-04,  1.3858e-05,  1.3166e-05,  2.0309e-04,\n","        -1.2968e-04, -2.3435e-04, -1.3064e-04, -3.0629e-05, -2.0537e-04])\n","gradient values before mask reapp. tensor([ 5.2902e-04, -2.0517e-04, -4.5848e-05, -2.9599e-05,  1.1278e-04,\n","        -1.3079e-04, -2.4385e-04, -1.7190e-04, -5.9505e-05, -3.2543e-04])\n","gradient values before mask reapp. tensor([ 5.5861e-04, -2.0069e-04,  1.0764e-05,  1.2610e-05,  1.9892e-04,\n","        -1.2952e-04, -2.3356e-04, -1.3160e-04, -3.1134e-05, -2.0889e-04])\n","gradient values before mask reapp. tensor([ 5.6037e-04, -1.9961e-04,  1.6309e-05,  1.4167e-05,  2.0314e-04,\n","        -1.2855e-04, -2.3173e-04, -1.2783e-04, -3.0413e-05, -1.9909e-04])\n","gradient values before mask reapp. tensor([ 5.5802e-04, -1.9926e-04,  1.4496e-05,  1.3770e-05,  2.0077e-04,\n","        -1.2851e-04, -2.3142e-04, -1.2848e-04, -3.0723e-05, -2.0139e-04])\n","gradient values before mask reapp. tensor([ 5.2004e-04, -2.0365e-04, -5.2139e-05, -2.9750e-05,  1.0566e-04,\n","        -1.3068e-04, -2.4233e-04, -1.7364e-04, -5.9799e-05, -3.3176e-04])\n","gradient values before mask reapp. tensor([ 5.5667e-04, -1.9793e-04,  1.6911e-05,  1.4684e-05,  2.0156e-04,\n","        -1.2765e-04, -2.2950e-04, -1.2612e-04, -3.0443e-05, -1.9585e-04])\n","gradient values before mask reapp. tensor([ 5.5239e-04, -1.9791e-04,  1.1800e-05,  1.3561e-05,  1.9648e-04,\n","        -1.2807e-04, -2.2982e-04, -1.2867e-04, -3.1105e-05, -2.0338e-04])\n","gradient values before mask reapp. tensor([ 5.2391e-04, -2.0071e-04, -3.7929e-05, -2.5262e-05,  1.1688e-04,\n","        -1.2822e-04, -2.3738e-04, -1.6364e-04, -5.7577e-05, -3.0601e-04])\n","gradient values before mask reapp. tensor([ 5.4950e-04, -1.9690e-04,  1.1349e-05,  1.3647e-05,  1.9463e-04,\n","        -1.2758e-04, -2.2855e-04, -1.2808e-04, -3.1261e-05, -2.0270e-04])\n","gradient values before mask reapp. tensor([ 5.4979e-04, -1.9608e-04,  1.4305e-05,  1.4543e-05,  1.9662e-04,\n","        -1.2694e-04, -2.2724e-04, -1.2583e-04, -3.0862e-05, -1.9712e-04])\n","gradient values before mask reapp. tensor([ 5.1783e-04, -1.9954e-04, -4.1584e-05, -2.5201e-05,  1.1246e-04,\n","        -1.2804e-04, -2.3611e-04, -1.6433e-04, -5.7670e-05, -3.0924e-04])\n","gradient values before mask reapp. tensor([ 5.4855e-04, -1.9478e-04,  1.6950e-05,  1.5476e-05,  1.9766e-04,\n","        -1.2611e-04, -2.2532e-04, -1.2332e-04, -3.0534e-05, -1.9137e-04])\n","gradient values before mask reapp. tensor([ 5.4566e-04, -1.9450e-04,  1.4144e-05,  1.4921e-05,  1.9448e-04,\n","        -1.2618e-04, -2.2519e-04, -1.2456e-04, -3.0949e-05, -1.9511e-04])\n","gradient values before mask reapp. tensor([ 5.1753e-04, -1.9735e-04, -3.4943e-05, -2.2615e-05,  1.1700e-04,\n","        -1.2654e-04, -2.3274e-04, -1.5891e-04, -5.6453e-05, -2.9581e-04])\n","gradient values before mask reapp. tensor([ 5.4541e-04, -1.9312e-04,  1.8514e-05,  1.6258e-05,  1.9712e-04,\n","        -1.2524e-04, -2.2301e-04, -1.2101e-04, -3.0332e-05, -1.8682e-04])\n","gradient values before mask reapp. tensor([ 5.1599e-04, -1.9619e-04, -3.2794e-05, -2.1481e-05,  1.1817e-04,\n","        -1.2592e-04, -2.3099e-04, -1.5657e-04, -5.5869e-05, -2.9074e-04])\n","gradient values before mask reapp. tensor([ 5.4149e-04, -1.9225e-04,  1.6360e-05,  1.5963e-05,  1.9384e-04,\n","        -1.2496e-04, -2.2204e-04, -1.2139e-04, -3.0694e-05, -1.8879e-04])\n","gradient values before mask reapp. tensor([ 5.4178e-04, -1.9148e-04,  1.9208e-05,  1.6742e-05,  1.9565e-04,\n","        -1.2433e-04, -2.2079e-04, -1.1924e-04, -3.0352e-05, -1.8352e-04])\n","gradient values before mask reapp. tensor([ 5.0820e-04, -1.9523e-04, -3.9487e-05, -2.2153e-05,  1.1099e-04,\n","        -1.2609e-04, -2.3029e-04, -1.5912e-04, -5.6424e-05, -2.9877e-04])\n","gradient values before mask reapp. tensor([ 5.4308e-04, -1.8979e-04,  2.6157e-05,  1.8697e-05,  2.0039e-04,\n","        -1.2293e-04, -2.1806e-04, -1.1425e-04, -2.9493e-05, -1.7087e-04])\n","gradient values before mask reapp. tensor([ 5.0712e-04, -1.9390e-04, -3.6576e-05, -2.0734e-05,  1.1278e-04,\n","        -1.2523e-04, -2.2830e-04, -1.5636e-04, -5.5773e-05, -2.9209e-04])\n","gradient values before mask reapp. tensor([ 5.4275e-04, -1.8827e-04,  3.0456e-05,  2.0153e-05,  2.0294e-04,\n","        -1.2184e-04, -2.1575e-04, -1.1074e-04, -2.8916e-05, -1.6220e-04])\n","gradient values before mask reapp. tensor([ 5.3319e-04, -1.8912e-04,  1.5862e-05,  1.6667e-05,  1.8947e-04,\n","        -1.2338e-04, -2.1795e-04, -1.1896e-04, -3.0868e-05, -1.8496e-04])\n","gradient values before mask reapp. tensor([ 5.1472e-04, -1.9047e-04, -1.5811e-05, -1.4754e-05,  1.2978e-04,\n","        -1.2207e-04, -2.2218e-04, -1.4248e-04, -5.2673e-05, -2.5617e-04])\n","gradient values before mask reapp. tensor([ 5.3478e-04, -1.8740e-04,  2.3613e-05,  1.8972e-05,  1.9524e-04,\n","        -1.2204e-04, -2.1507e-04, -1.1334e-04, -2.9723e-05, -1.7106e-04])\n","gradient values before mask reapp. tensor([ 5.1241e-04, -1.8940e-04, -1.5158e-05, -1.3936e-05,  1.2958e-04,\n","        -1.2155e-04, -2.2071e-04, -1.4110e-04, -5.2310e-05, -2.5332e-04])\n","gradient values before mask reapp. tensor([ 5.3495e-04, -1.8591e-04,  2.8615e-05,  2.0448e-05,  1.9829e-04,\n","        -1.2090e-04, -2.1274e-04, -1.0948e-04, -2.9102e-05, -1.6158e-04])\n","gradient values before mask reapp. tensor([ 5.0653e-04, -1.8889e-04, -2.0767e-05, -1.4627e-05,  1.2391e-04,\n","        -1.2184e-04, -2.2048e-04, -1.4344e-04, -5.2764e-05, -2.6052e-04])\n","gradient values before mask reapp. tensor([ 5.3350e-04, -1.8461e-04,  3.0882e-05,  2.1356e-05,  1.9904e-04,\n","        -1.2007e-04, -2.1086e-04, -1.0719e-04, -2.8805e-05, -1.5628e-04])\n","gradient values before mask reapp. tensor([ 5.0448e-04, -1.8776e-04, -1.9633e-05, -1.3681e-05,  1.2412e-04,\n","        -1.2126e-04, -2.1891e-04, -1.4177e-04, -5.2348e-05, -2.5685e-04])\n","gradient values before mask reapp. tensor([ 5.0464e-04, -1.8694e-04, -1.6895e-05, -1.2637e-05,  1.2611e-04,\n","        -1.2065e-04, -2.1763e-04, -1.3963e-04, -5.1879e-05, -2.5136e-04])\n","gradient values before mask reapp. tensor([ 5.3008e-04, -1.8300e-04,  3.2002e-05,  2.2075e-05,  1.9824e-04,\n","        -1.1926e-04, -2.0864e-04, -1.0513e-04, -2.8607e-05, -1.5236e-04])\n","gradient values before mask reapp. tensor([ 5.0368e-04, -1.8566e-04, -1.3756e-05, -1.1243e-05,  1.2812e-04,\n","        -1.1987e-04, -2.1567e-04, -1.3674e-04, -5.1190e-05, -2.4459e-04])\n","gradient values before mask reapp. tensor([ 5.3042e-04, -1.8145e-04,  3.7349e-05,  2.3676e-05,  2.0163e-04,\n","        -1.1808e-04, -2.0623e-04, -1.0106e-04, -2.7934e-05, -1.4225e-04])\n","gradient values before mask reapp. tensor([ 5.0136e-04, -1.8460e-04, -1.3131e-05, -1.0441e-05,  1.2789e-04,\n","        -1.1936e-04, -2.1422e-04, -1.3538e-04, -5.0836e-05, -2.4181e-04])\n","gradient values before mask reapp. tensor([ 4.9998e-04, -1.8410e-04, -1.3201e-05, -1.0111e-05,  1.2747e-04,\n","        -1.1920e-04, -2.1360e-04, -1.3495e-04, -5.0698e-05, -2.4105e-04])\n","gradient values before mask reapp. tensor([ 5.3006e-04, -1.7932e-04,  4.3927e-05,  2.5823e-05,  2.0571e-04,\n","        -1.1655e-04, -2.0288e-04, -9.5710e-05, -2.6974e-05, -1.2938e-04])\n","gradient values before mask reapp. tensor([ 4.9632e-04, -1.8328e-04, -1.4836e-05, -9.8865e-06,  1.2531e-04,\n","        -1.1903e-04, -2.1260e-04, -1.3489e-04, -5.0623e-05, -2.4199e-04])\n","gradient values before mask reapp. tensor([ 5.2833e-04, -1.7818e-04,  4.5504e-05,  2.6471e-05,  2.0585e-04,\n","        -1.1586e-04, -2.0127e-04, -9.3890e-05, -2.6762e-05, -1.2546e-04])\n","gradient values before mask reapp. tensor([ 4.9536e-04, -1.8197e-04, -1.1783e-05, -8.4901e-06,  1.2719e-04,\n","        -1.1822e-04, -2.1067e-04, -1.3210e-04, -4.9968e-05, -2.3528e-04])\n","gradient values before mask reapp. tensor([ 5.0242e-04, -1.8012e-04,  3.0309e-06, -4.5861e-06,  1.3976e-04,\n","        -1.1614e-04, -2.0709e-04, -1.2281e-04, -4.7903e-05, -2.1061e-04])\n","gradient values before mask reapp. tensor([ 4.9638e-04, -1.8036e-04, -5.0693e-06, -6.1645e-06,  1.3243e-04,\n","        -1.1700e-04, -2.0798e-04, -1.2704e-04, -4.8762e-05, -2.2269e-04])\n","gradient values before mask reapp. tensor([ 5.2563e-04, -1.7571e-04,  5.0346e-05,  2.8365e-05,  2.0784e-04,\n","        -1.1434e-04, -1.9761e-04, -8.9108e-05, -2.6002e-05, -1.1466e-04])\n","gradient values before mask reapp. tensor([ 4.9428e-04, -1.7924e-04, -3.9742e-06, -5.2359e-06,  1.3264e-04,\n","        -1.1643e-04, -2.0642e-04, -1.2538e-04, -4.8346e-05, -2.1910e-04])\n","gradient values before mask reapp. tensor([ 4.9936e-04, -1.7770e-04,  7.3377e-06, -2.1972e-06,  1.4209e-04,\n","        -1.1483e-04, -2.0356e-04, -1.1821e-04, -4.6765e-05, -2.0012e-04])\n","gradient values before mask reapp. tensor([ 4.9076e-04, -1.7838e-04, -5.4250e-06, -4.8906e-06,  1.3068e-04,\n","        -1.1621e-04, -2.0538e-04, -1.2524e-04, -4.8223e-05, -2.1961e-04])\n","gradient values before mask reapp. tensor([ 4.9776e-04, -1.7652e-04,  9.2687e-06, -1.0313e-06,  1.4309e-04,\n","        -1.1417e-04, -2.0186e-04, -1.1607e-04, -4.6208e-05, -1.9517e-04])\n","gradient values before mask reapp. tensor([ 4.9438e-04, -1.7641e-04,  5.9400e-06, -1.5177e-06,  1.4002e-04,\n","        -1.1447e-04, -2.0181e-04, -1.1738e-04, -4.6409e-05, -1.9973e-04])\n","gradient values before mask reapp. tensor([ 5.1998e-04, -1.7223e-04,  5.4765e-05,  3.0472e-05,  2.0825e-04,\n","        -1.1239e-04, -1.9268e-04, -8.3668e-05, -2.5295e-05, -1.0303e-04])\n","gradient values before mask reapp. tensor([ 4.9064e-04, -1.7553e-04,  3.9699e-06, -1.3053e-06,  1.3747e-04,\n","        -1.1426e-04, -2.0089e-04, -1.1764e-04, -4.6425e-05, -2.0102e-04])\n","gradient values before mask reapp. tensor([ 4.9245e-04, -1.7458e-04,  9.3866e-06,  2.4060e-07,  1.4173e-04,\n","        -1.1343e-04, -1.9927e-04, -1.1402e-04, -4.5622e-05, -1.9167e-04])\n","gradient values before mask reapp. tensor([ 4.9044e-04, -1.7413e-04,  8.3670e-06,  3.7712e-07,  1.4053e-04,\n","        -1.1333e-04, -1.9873e-04, -1.1407e-04, -4.5597e-05, -1.9226e-04])\n","gradient values before mask reapp. tensor([ 4.8961e-04, -1.7361e-04,  9.1553e-06,  8.7271e-07,  1.4086e-04,\n","        -1.1304e-04, -1.9798e-04, -1.1313e-04, -4.5341e-05, -1.9020e-04])\n","gradient values before mask reapp. tensor([ 4.9526e-04, -1.7205e-04,  2.1713e-05,  4.1851e-06,  1.5163e-04,\n","        -1.1137e-04, -1.9485e-04, -1.0505e-04, -4.3500e-05, -1.6936e-04])\n","gradient values before mask reapp. tensor([ 4.8494e-04, -1.7299e-04,  5.6845e-06,  6.1798e-07,  1.3711e-04,\n","        -1.1316e-04, -1.9741e-04, -1.1419e-04, -4.5503e-05, -1.9425e-04])\n","gradient values before mask reapp. tensor([ 4.8794e-04, -1.7179e-04,  1.3364e-05,  2.8144e-06,  1.4349e-04,\n","        -1.1197e-04, -1.9522e-04, -1.0912e-04, -4.4351e-05, -1.8098e-04])\n","gradient values before mask reapp. tensor([ 4.8511e-04, -1.7153e-04,  1.0718e-05,  2.5036e-06,  1.4079e-04,\n","        -1.1210e-04, -1.9509e-04, -1.1021e-04, -4.4571e-05, -1.8433e-04])\n","gradient values before mask reapp. tensor([ 4.8740e-04, -1.7041e-04,  1.7225e-05,  4.4264e-06,  1.4615e-04,\n","        -1.1106e-04, -1.9310e-04, -1.0582e-04, -4.3573e-05, -1.7292e-04])\n","gradient values before mask reapp. tensor([ 4.8291e-04, -1.7046e-04,  1.1583e-05,  3.3819e-06,  1.4085e-04,\n","        -1.1159e-04, -1.9361e-04, -1.0871e-04, -4.4159e-05, -1.8117e-04])\n","gradient values before mask reapp. tensor([ 4.9187e-04, -1.6836e-04,  2.9960e-05,  8.1036e-06,  1.5671e-04,\n","        -1.0919e-04, -1.8935e-04, -9.7184e-05, -4.1572e-05, -1.5097e-04])\n","gradient values before mask reapp. tensor([ 4.7506e-04, -1.7041e-04,  2.2535e-06,  1.6948e-06,  1.3198e-04,\n","        -1.1240e-04, -1.9426e-04, -1.1332e-04, -4.5070e-05, -1.9466e-04])\n","gradient values before mask reapp. tensor([ 4.8586e-04, -1.6793e-04,  2.3948e-05,  7.2396e-06,  1.5063e-04,\n","        -1.0957e-04, -1.8929e-04, -9.9850e-05, -4.2116e-05, -1.5902e-04])\n","gradient values before mask reapp. tensor([ 4.7617e-04, -1.6885e-04,  8.8997e-06,  3.8878e-06,  1.3703e-04,\n","        -1.1121e-04, -1.9169e-04, -1.0841e-04, -4.3960e-05, -1.8237e-04])\n","gradient values before mask reapp. tensor([ 4.8260e-04, -1.6705e-04,  2.2844e-05,  7.5948e-06,  1.4891e-04,\n","        -1.0931e-04, -1.8823e-04, -9.9556e-05, -4.1997e-05, -1.5910e-04])\n","gradient values before mask reapp. tensor([ 4.7742e-04, -1.6722e-04,  1.5987e-05,  6.2705e-06,  1.4261e-04,\n","        -1.0998e-04, -1.8896e-04, -1.0314e-04, -4.2718e-05, -1.6926e-04])\n","gradient values before mask reapp. tensor([ 4.7997e-04, -1.6607e-04,  2.2889e-05,  8.2604e-06,  1.4827e-04,\n","        -1.0891e-04, -1.8694e-04, -9.8555e-05, -4.1698e-05, -1.5728e-04])\n","gradient values before mask reapp. tensor([ 4.7444e-04, -1.6632e-04,  1.5364e-05,  6.7595e-06,  1.4137e-04,\n","        -1.0967e-04, -1.8782e-04, -1.0255e-04, -4.2509e-05, -1.6856e-04])\n","gradient values before mask reapp. tensor([ 4.7653e-04, -1.6526e-04,  2.1412e-05,  8.5202e-06,  1.4625e-04,\n","        -1.0871e-04, -1.8599e-04, -9.8492e-05, -4.1612e-05, -1.5800e-04])\n","gradient values before mask reapp. tensor([ 4.7065e-04, -1.6559e-04,  1.3198e-05,  6.8188e-06,  1.3873e-04,\n","        -1.0957e-04, -1.8705e-04, -1.0293e-04, -4.2524e-05, -1.7047e-04])\n","gradient values before mask reapp. tensor([ 4.7436e-04, -1.6422e-04,  2.2182e-05,  9.3124e-06,  1.4619e-04,\n","        -1.0822e-04, -1.8458e-04, -9.7098e-05, -4.1248e-05, -1.5510e-04])\n","gradient values before mask reapp. tensor([ 4.7194e-04, -1.6401e-04,  2.0241e-05,  9.1254e-06,  1.4425e-04,\n","        -1.0835e-04, -1.8438e-04, -9.7724e-05, -4.1305e-05, -1.5755e-04])\n","gradient values before mask reapp. tensor([ 4.7051e-04, -1.6350e-04,  1.9915e-05,  9.3159e-06,  1.4345e-04,\n","        -1.0812e-04, -1.8381e-04, -9.7532e-05, -4.1292e-05, -1.5719e-04])\n","gradient values before mask reapp. tensor([ 4.7193e-04, -1.6272e-04,  2.4696e-05,  1.0746e-05,  1.4745e-04,\n","        -1.0744e-04, -1.8233e-04, -9.4156e-05, -4.0440e-05, -1.4893e-04])\n","gradient values before mask reapp. tensor([ 4.6887e-04, -1.6241e-04,  2.1504e-05,  1.0302e-05,  1.4410e-04,\n","        -1.0756e-04, -1.8231e-04, -9.5693e-05, -4.0812e-05, -1.5308e-04])\n","gradient values before mask reapp. tensor([ 4.7179e-04, -1.6137e-04,  2.9036e-05,  1.2406e-05,  1.5053e-04,\n","        -1.0654e-04, -1.8025e-04, -9.0653e-05, -3.9601e-05, -1.4036e-04])\n","gradient values before mask reapp. tensor([ 4.6320e-04, -1.6212e-04,  1.5839e-05,  9.4864e-06,  1.3855e-04,\n","        -1.0792e-04, -1.8230e-04, -9.8143e-05, -4.1201e-05, -1.6074e-04])\n","gradient values before mask reapp. tensor([ 4.6868e-04, -1.6053e-04,  2.8017e-05,  1.2750e-05,  1.4892e-04,\n","        -1.0629e-04, -1.7925e-04, -9.0360e-05, -3.9470e-05, -1.4040e-04])\n","gradient values before mask reapp. tensor([ 4.6562e-04, -1.6037e-04,  2.4704e-05,  1.2177e-05,  1.4553e-04,\n","        -1.0649e-04, -1.7935e-04, -9.1956e-05, -3.9822e-05, -1.4502e-04])\n","gradient values before mask reapp. tensor([ 4.6469e-04, -1.5982e-04,  2.5545e-05,  1.2728e-05,  1.4602e-04,\n","        -1.0625e-04, -1.7852e-04, -9.0904e-05, -3.9528e-05, -1.4282e-04])\n","gradient values before mask reapp. tensor([ 4.6588e-04, -1.5900e-04,  2.9850e-05,  1.4027e-05,  1.4943e-04,\n","        -1.0554e-04, -1.7712e-04, -8.7906e-05, -3.8826e-05, -1.3523e-04])\n","gradient values before mask reapp. tensor([ 4.5364e-04, -1.6025e-04,  1.0392e-05,  9.6474e-06,  1.3201e-04,\n","        -1.0766e-04, -1.8028e-04, -9.9040e-05, -4.1237e-05, -1.6546e-04])\n","gradient values before mask reapp. tensor([ 4.6552e-04, -1.5769e-04,  3.3676e-05,  1.5511e-05,  1.5200e-04,\n","        -1.0464e-04, -1.7513e-04, -8.4742e-05, -3.8109e-05, -1.2745e-04])\n","gradient values before mask reapp. tensor([ 4.6079e-04, -1.5775e-04,  2.7676e-05,  1.4403e-05,  1.4644e-04,\n","        -1.0522e-04, -1.7567e-04, -8.7818e-05, -3.8734e-05, -1.3621e-04])\n","gradient values before mask reapp. tensor([ 4.6077e-04, -1.5718e-04,  2.9751e-05,  1.5114e-05,  1.4788e-04,\n","        -1.0482e-04, -1.7476e-04, -8.6174e-05, -3.8322e-05, -1.3234e-04])\n","gradient values before mask reapp. tensor([ 4.5476e-04, -1.5741e-04,  2.1426e-05,  1.3447e-05,  1.4023e-04,\n","        -1.0561e-04, -1.7572e-04, -9.0650e-05, -3.9297e-05, -1.4469e-04])\n","gradient values before mask reapp. tensor([ 4.6103e-04, -1.5592e-04,  3.4452e-05,  1.6727e-05,  1.5128e-04,\n","        -1.0387e-04, -1.7274e-04, -8.2520e-05, -3.7436e-05, -1.2347e-04])\n","gradient values before mask reapp. tensor([ 4.4980e-04, -1.5693e-04,  1.7003e-05,  1.2905e-05,  1.3564e-04,\n","        -1.0580e-04, -1.7545e-04, -9.2416e-05, -3.9612e-05, -1.5034e-04])\n","gradient values before mask reapp. tensor([ 4.5989e-04, -1.5471e-04,  3.7002e-05,  1.7897e-05,  1.5273e-04,\n","        -1.0315e-04, -1.7099e-04, -8.0098e-05, -3.6893e-05, -1.1776e-04])\n","gradient values before mask reapp. tensor([ 4.4647e-04, -1.5615e-04,  1.5532e-05,  1.3087e-05,  1.3362e-04,\n","        -1.0559e-04, -1.7456e-04, -9.2408e-05, -3.9555e-05, -1.5118e-04])\n","gradient values before mask reapp. tensor([ 4.5718e-04, -1.5380e-04,  3.6651e-05,  1.8359e-05,  1.5166e-04,\n","        -1.0281e-04, -1.6985e-04, -7.9436e-05, -3.6718e-05, -1.1675e-04])\n","gradient values before mask reapp. tensor([ 4.4539e-04, -1.5497e-04,  1.8067e-05,  1.4237e-05,  1.3507e-04,\n","        -1.0486e-04, -1.7283e-04, -9.0010e-05, -3.9001e-05, -1.4553e-04])\n","gradient values before mask reapp. tensor([ 4.5466e-04, -1.5293e-04,  3.6490e-05,  1.8832e-05,  1.5076e-04,\n","        -1.0247e-04, -1.6876e-04, -7.8692e-05, -3.6502e-05, -1.1557e-04])\n","gradient values before mask reapp. tensor([ 4.4568e-04, -1.5366e-04,  2.2911e-05,  1.5945e-05,  1.3860e-04,\n","        -1.0394e-04, -1.7076e-04, -8.6277e-05, -3.8117e-05, -1.3633e-04])\n","gradient values before mask reapp. tensor([ 4.5474e-04, -1.5171e-04,  4.0888e-05,  2.0371e-05,  1.5392e-04,\n","        -1.0157e-04, -1.6680e-04, -7.5207e-05, -3.5644e-05, -1.0723e-04])\n","gradient values before mask reapp. tensor([ 4.4233e-04, -1.5291e-04,  2.1350e-05,  1.6072e-05,  1.3649e-04,\n","        -1.0378e-04, -1.6993e-04, -8.6347e-05, -3.8082e-05, -1.3741e-04])\n","gradient values before mask reapp. tensor([ 4.5573e-04, -1.5026e-04,  4.6907e-05,  2.2351e-05,  1.5839e-04,\n","        -1.0047e-04, -1.6450e-04, -7.0812e-05, -3.4636e-05, -9.6174e-05])\n","gradient values before mask reapp. tensor([ 4.3556e-04, -1.5273e-04,  1.3793e-05,  1.4768e-05,  1.2922e-04,\n","        -1.0438e-04, -1.7026e-04, -8.9948e-05, -3.8791e-05, -1.4809e-04])\n","gradient values before mask reapp. tensor([ 4.5406e-04, -1.4933e-04,  4.8104e-05,  2.3102e-05,  1.5870e-04,\n","        -9.9972e-05, -1.6321e-04, -6.9295e-05, -3.4231e-05, -9.2969e-05])\n","gradient values before mask reapp. tensor([ 4.3334e-04, -1.5182e-04,  1.4141e-05,  1.5359e-05,  1.2880e-04,\n","        -1.0398e-04, -1.6907e-04, -8.8901e-05, -3.8502e-05, -1.4611e-04])\n","gradient values before mask reapp. tensor([ 4.5359e-04, -1.4807e-04,  5.1683e-05,  2.4487e-05,  1.6107e-04,\n","        -9.9134e-05, -1.6131e-04, -6.6294e-05, -3.3550e-05, -8.5705e-05])\n","gradient values before mask reapp. tensor([ 4.3163e-04, -1.5081e-04,  1.5456e-05,  1.6193e-05,  1.2922e-04,\n","        -1.0344e-04, -1.6766e-04, -8.7263e-05, -3.8091e-05, -1.4253e-04])\n","gradient values before mask reapp. tensor([ 4.5284e-04, -1.4687e-04,  5.4709e-05,  2.5753e-05,  1.6298e-04,\n","        -9.8373e-05, -1.5954e-04, -6.3638e-05, -3.2928e-05, -7.9319e-05])\n","gradient values before mask reapp. tensor([ 4.3011e-04, -1.4974e-04,  1.7148e-05,  1.7153e-05,  1.3002e-04,\n","        -1.0284e-04, -1.6614e-04, -8.5369e-05, -3.7616e-05, -1.3826e-04])\n","gradient values before mask reapp. tensor([ 4.4960e-04, -1.4615e-04,  5.3200e-05,  2.5914e-05,  1.6097e-04,\n","        -9.8217e-05, -1.5874e-04, -6.3710e-05, -3.2865e-05, -8.0314e-05])\n","gradient values before mask reapp. tensor([ 4.2848e-04, -1.4876e-04,  1.8477e-05,  1.7997e-05,  1.3048e-04,\n","        -1.0232e-04, -1.6478e-04, -8.3752e-05, -3.7186e-05, -1.3472e-04])\n","gradient values before mask reapp. tensor([ 4.4866e-04, -1.4499e-04,  5.5909e-05,  2.7114e-05,  1.6263e-04,\n","        -9.7507e-05, -1.5704e-04, -6.1232e-05, -3.2269e-05, -7.4458e-05])\n","gradient values before mask reapp. tensor([ 4.2675e-04, -1.4779e-04,  1.9673e-05,  1.8802e-05,  1.3084e-04,\n","        -1.0182e-04, -1.6343e-04, -8.2199e-05, -3.6770e-05, -1.3140e-04])\n","gradient values before mask reapp. tensor([ 4.4641e-04, -1.4408e-04,  5.6223e-05,  2.7702e-05,  1.6220e-04,\n","        -9.7104e-05, -1.5584e-04, -6.0196e-05, -3.1982e-05, -7.2505e-05])\n","gradient values before mask reapp. tensor([ 4.2535e-04, -1.4672e-04,  2.1513e-05,  1.9773e-05,  1.3175e-04,\n","        -1.0123e-04, -1.6192e-04, -8.0248e-05, -3.6285e-05, -1.2697e-04])\n","gradient values before mask reapp. tensor([ 4.4193e-04, -1.4356e-04,  5.2520e-05,  2.7333e-05,  1.5830e-04,\n","        -9.7229e-05, -1.5548e-04, -6.1576e-05, -3.2202e-05, -7.7006e-05])\n","gradient values before mask reapp. tensor([ 4.2727e-04, -1.4520e-04,  2.8977e-05,  2.2094e-05,  1.3756e-04,\n","        -9.9939e-05, -1.5940e-04, -7.5018e-05, -3.5059e-05, -1.1364e-04])\n","gradient values before mask reapp. tensor([ 4.3809e-04, -1.4289e-04,  5.0117e-05,  2.7302e-05,  1.5557e-04,\n","        -9.7165e-05, -1.5477e-04, -6.2111e-05, -3.2241e-05, -7.9334e-05])\n","gradient values before mask reapp. tensor([ 4.2628e-04, -1.4410e-04,  3.1485e-05,  2.3212e-05,  1.3906e-04,\n","        -9.9262e-05, -1.5778e-04, -7.2692e-05, -3.4490e-05, -1.0817e-04])\n","gradient values before mask reapp. tensor([ 4.3639e-04, -1.4192e-04,  5.1323e-05,  2.8101e-05,  1.5593e-04,\n","        -9.6666e-05, -1.5344e-04, -6.0571e-05, -3.1833e-05, -7.6006e-05])\n","gradient values before mask reapp. tensor([ 4.2374e-04, -1.4322e-04,  3.1287e-05,  2.3702e-05,  1.3820e-04,\n","        -9.8937e-05, -1.5669e-04, -7.1967e-05, -3.4267e-05, -1.0702e-04])\n","gradient values before mask reapp. tensor([ 4.3350e-04, -1.4119e-04,  5.0326e-05,  2.8364e-05,  1.5441e-04,\n","        -9.6463e-05, -1.5259e-04, -6.0361e-05, -3.1693e-05, -7.6270e-05])\n","gradient values before mask reapp. tensor([ 4.2207e-04, -1.4228e-04,  3.2463e-05,  2.4478e-05,  1.3855e-04,\n","        -9.8449e-05, -1.5539e-04, -7.0460e-05, -3.3856e-05, -1.0380e-04])\n","gradient values before mask reapp. tensor([ 4.3108e-04, -1.4036e-04,  5.0190e-05,  2.8832e-05,  1.5361e-04,\n","        -9.6147e-05, -1.5155e-04, -5.9638e-05, -3.1451e-05, -7.5144e-05])\n","gradient values before mask reapp. tensor([ 4.1972e-04, -1.4141e-04,  3.2508e-05,  2.5026e-05,  1.3793e-04,\n","        -9.8100e-05, -1.5428e-04, -6.9615e-05, -3.3592e-05, -1.0228e-04])\n","gradient values before mask reapp. tensor([ 4.3034e-04, -1.3924e-04,  5.3019e-05,  3.0045e-05,  1.5543e-04,\n","        -9.5431e-05, -1.4990e-04, -5.7147e-05, -3.0830e-05, -6.9145e-05])\n","gradient values before mask reapp. tensor([ 4.1774e-04, -1.4056e-04,  3.3049e-05,  2.5653e-05,  1.3777e-04,\n","        -9.7712e-05, -1.5316e-04, -6.8503e-05, -3.3240e-05, -1.0013e-04])\n","gradient values before mask reapp. tensor([ 4.2986e-04, -1.3803e-04,  5.6413e-05,  3.1420e-05,  1.5775e-04,\n","        -9.4637e-05, -1.4809e-04, -5.4279e-05, -3.0128e-05, -6.2196e-05])\n","gradient values before mask reapp. tensor([ 4.1363e-04, -1.4003e-04,  2.9870e-05,  2.5428e-05,  1.3440e-04,\n","        -9.7803e-05, -1.5275e-04, -6.9599e-05, -3.3358e-05, -1.0386e-04])\n","gradient values before mask reapp. tensor([ 4.2782e-04, -1.3717e-04,  5.6889e-05,  3.2049e-05,  1.5753e-04,\n","        -9.4248e-05, -1.4695e-04, -5.3203e-05, -2.9792e-05, -6.0086e-05])\n","gradient values before mask reapp. tensor([ 4.1163e-04, -1.3918e-04,  3.0364e-05,  2.6052e-05,  1.3420e-04,\n","        -9.7423e-05, -1.5163e-04, -6.8520e-05, -3.3012e-05, -1.0178e-04])\n","gradient values before mask reapp. tensor([ 4.2537e-04, -1.3638e-04,  5.6594e-05,  3.2488e-05,  1.5665e-04,\n","        -9.3969e-05, -1.4599e-04, -5.2597e-05, -2.9553e-05, -5.9252e-05])\n","gradient values before mask reapp. tensor([ 4.0665e-04, -1.3873e-04,  2.5735e-05,  2.5484e-05,  1.2954e-04,\n","        -9.7673e-05, -1.5145e-04, -7.0465e-05, -3.3351e-05, -1.0773e-04])\n","gradient values before mask reapp. tensor([ 4.2882e-04, -1.3465e-04,  6.6591e-05,  3.5396e-05,  1.6467e-04,\n","        -9.2367e-05, -1.4301e-04, -4.5910e-05, -2.8012e-05, -4.1934e-05])\n","gradient values before mask reapp. tensor([ 4.0330e-04, -1.3804e-04,  2.4003e-05,  2.5589e-05,  1.2746e-04,\n","        -9.7525e-05, -1.5067e-04, -7.0641e-05, -3.3290e-05, -1.0904e-04])\n","gradient values before mask reapp. tensor([ 4.2657e-04, -1.3387e-04,  6.6553e-05,  3.5871e-05,  1.6402e-04,\n","        -9.2051e-05, -1.4203e-04, -4.5173e-05, -2.7743e-05, -4.0723e-05])\n","gradient values before mask reapp. tensor([ 4.0047e-04, -1.3730e-04,  2.3032e-05,  2.5835e-05,  1.2592e-04,\n","        -9.7337e-05, -1.4985e-04, -7.0466e-05, -3.3178e-05, -1.0931e-04])\n","gradient values before mask reapp. tensor([ 4.2541e-04, -1.3283e-04,  6.8586e-05,  3.6878e-05,  1.6517e-04,\n","        -9.1424e-05, -1.4053e-04, -4.3145e-05, -2.7219e-05, -3.6032e-05])\n","gradient values before mask reapp. tensor([ 3.9766e-04, -1.3662e-04,  2.1979e-05,  2.6063e-05,  1.2438e-04,\n","        -9.7161e-05, -1.4908e-04, -7.0346e-05, -3.3042e-05, -1.0974e-04])\n","gradient values before mask reapp. tensor([ 4.2328e-04, -1.3204e-04,  6.8726e-05,  3.7370e-05,  1.6463e-04,\n","        -9.1102e-05, -1.3953e-04, -4.2326e-05, -2.6943e-05, -3.4604e-05])\n","gradient values before mask reapp. tensor([ 3.9677e-04, -1.3553e-04,  2.4476e-05,  2.7170e-05,  1.2591e-04,\n","        -9.6496e-05, -1.4751e-04, -6.8072e-05, -3.2475e-05, -1.0435e-04])\n","gradient values before mask reapp. tensor([ 4.1748e-04, -1.3176e-04,  6.2503e-05,  3.6407e-05,  1.5856e-04,\n","        -9.1566e-05, -1.3972e-04, -4.5277e-05, -2.7502e-05, -4.3176e-05])\n","gradient values before mask reapp. tensor([ 3.9298e-04, -1.3492e-04,  2.1839e-05,  2.7071e-05,  1.2302e-04,\n","        -9.6433e-05, -1.4692e-04, -6.8823e-05, -3.2557e-05, -1.0705e-04])\n","gradient values before mask reapp. tensor([ 4.1531e-04, -1.3091e-04,  6.2685e-05,  3.6924e-05,  1.5807e-04,\n","        -9.1182e-05, -1.3862e-04, -4.4379e-05, -2.7240e-05, -4.1519e-05])\n","gradient values before mask reapp. tensor([ 3.9611e-04, -1.3332e-04,  3.1039e-05,  2.9743e-05,  1.3036e-04,\n","        -9.4959e-05, -1.4419e-04, -6.2678e-05, -3.1121e-05, -9.1156e-05])\n","gradient values before mask reapp. tensor([ 4.1110e-04, -1.3038e-04,  5.9303e-05,  3.6640e-05,  1.5458e-04,\n","        -9.1257e-05, -1.3821e-04, -4.5588e-05, -2.7397e-05, -4.5482e-05])\n","gradient values before mask reapp. tensor([ 3.9413e-04, -1.3249e-04,  3.1426e-05,  3.0307e-05,  1.3006e-04,\n","        -9.4597e-05, -1.4314e-04, -6.1717e-05, -3.0814e-05, -8.9290e-05])\n","gradient values before mask reapp. tensor([ 4.0765e-04, -1.2990e-04,  5.6925e-05,  3.6481e-05,  1.5188e-04,\n","        -9.1281e-05, -1.3780e-04, -4.6297e-05, -2.7421e-05, -4.8270e-05])\n","gradient values before mask reapp. tensor([ 3.9273e-04, -1.3158e-04,  3.2795e-05,  3.1103e-05,  1.3062e-04,\n","        -9.4106e-05, -1.4190e-04, -6.0183e-05, -3.0387e-05, -8.5850e-05])\n","gradient values before mask reapp. tensor([ 4.0776e-04, -1.2866e-04,  6.1058e-05,  3.8010e-05,  1.5488e-04,\n","        -9.0393e-05, -1.3592e-04, -4.3080e-05, -2.6639e-05, -4.0175e-05])\n","gradient values before mask reapp. tensor([ 3.8533e-04, -1.3160e-04,  2.3335e-05,  2.6965e-05,  1.1871e-04,\n","        -9.4521e-05, -1.4272e-04, -6.5606e-05, -3.3053e-05, -1.0192e-04])\n","gradient values before mask reapp. tensor([ 4.0341e-04, -1.2815e-04,  5.6920e-05,  3.4488e-05,  1.4671e-04,\n","        -8.9957e-05, -1.3563e-04, -4.5489e-05, -2.9131e-05, -4.8246e-05])\n","gradient values before mask reapp. tensor([ 3.8109e-04, -1.3109e-04,  1.9817e-05,  2.6956e-05,  1.1546e-04,\n","        -9.4714e-05, -1.4241e-04, -6.6889e-05, -3.3021e-05, -1.0589e-04])\n","gradient values before mask reapp. tensor([ 4.0554e-04, -1.2677e-04,  6.4240e-05,  3.6639e-05,  1.5240e-04,\n","        -8.8725e-05, -1.3332e-04, -4.0484e-05, -2.7949e-05, -3.5505e-05])\n","gradient values before mask reapp. tensor([ 3.7643e-04, -1.3067e-04,  1.5584e-05,  2.6782e-05,  1.1165e-04,\n","        -9.4992e-05, -1.4221e-04, -6.8557e-05, -3.3050e-05, -1.1099e-04])\n","gradient values before mask reapp. tensor([ 4.0574e-04, -1.2567e-04,  6.8256e-05,  3.8141e-05,  1.5542e-04,\n","        -8.7908e-05, -1.3161e-04, -3.7373e-05, -2.7095e-05, -2.7821e-05])\n","gradient values before mask reapp. tensor([ 3.7202e-04, -1.3032e-04,  1.1510e-05,  2.6485e-05,  1.0783e-04,\n","        -9.5277e-05, -1.4214e-04, -7.0248e-05, -3.3126e-05, -1.1617e-04])\n","gradient values before mask reapp. tensor([ 4.0387e-04, -1.2493e-04,  6.8581e-05,  3.8775e-05,  1.5526e-04,\n","        -8.7608e-05, -1.3067e-04, -3.6480e-05, -2.6688e-05, -2.6106e-05])\n","gradient values before mask reapp. tensor([ 3.7193e-04, -1.2917e-04,  1.5182e-05,  2.8009e-05,  1.1059e-04,\n","        -9.4508e-05, -1.4042e-04, -6.7311e-05, -3.2306e-05, -1.0884e-04])\n","gradient values before mask reapp. tensor([ 3.9513e-04, -1.2508e-04,  5.7187e-05,  3.7169e-05,  1.4544e-04,\n","        -8.8828e-05, -1.3187e-04, -4.2411e-05, -2.7532e-05, -4.2304e-05])\n","gradient values before mask reapp. tensor([ 3.7030e-04, -1.2828e-04,  1.6096e-05,  2.9010e-05,  1.1115e-04,\n","        -9.4042e-05, -1.3920e-04, -6.5956e-05, -3.1739e-05, -1.0570e-04])\n","gradient values before mask reapp. tensor([ 3.9796e-04, -1.2363e-04,  6.5632e-05,  3.9527e-05,  1.5212e-04,\n","        -8.7432e-05, -1.2935e-04, -3.6746e-05, -2.6218e-05, -2.7810e-05])\n","gradient values before mask reapp. tensor([ 3.6780e-04, -1.2748e-04,  1.5604e-05,  2.9684e-05,  1.1054e-04,\n","        -9.3811e-05, -1.3826e-04, -6.5448e-05, -3.1353e-05, -1.0476e-04])\n","gradient values before mask reapp. tensor([ 3.9591e-04, -1.2298e-04,  6.5534e-05,  4.0007e-05,  1.5160e-04,\n","        -8.7179e-05, -1.2854e-04, -3.6120e-05, -2.5866e-05, -2.6880e-05])\n","gradient values before mask reapp. tensor([ 3.6753e-04, -1.2640e-04,  1.8851e-05,  3.1053e-05,  1.1291e-04,\n","        -9.3110e-05, -1.3668e-04, -6.2815e-05, -3.0606e-05, -9.8191e-05])\n","gradient values before mask reapp. tensor([ 3.9159e-04, -1.2255e-04,  6.1677e-05,  3.9859e-05,  1.4806e-04,\n","        -8.7402e-05, -1.2834e-04, -3.7640e-05, -2.5890e-05, -3.1493e-05])\n","gradient values before mask reapp. tensor([ 3.6661e-04, -1.2546e-04,  2.0835e-05,  3.2107e-05,  1.1418e-04,\n","        -9.2578e-05, -1.3539e-04, -6.0963e-05, -3.0025e-05, -9.3717e-05])\n","gradient values before mask reapp. tensor([ 3.8743e-04, -1.2209e-04,  5.8012e-05,  3.9750e-05,  1.4458e-04,\n","        -8.7613e-05, -1.2814e-04, -3.9104e-05, -2.5936e-05, -3.5852e-05])\n","gradient values before mask reapp. tensor([ 3.6000e-04, -1.2540e-04,  1.2964e-05,  3.1207e-05,  1.0746e-04,\n","        -9.3248e-05, -1.3589e-04, -6.4739e-05, -3.0404e-05, -1.0442e-04])\n","gradient values before mask reapp. tensor([ 3.8934e-04, -1.2050e-04,  6.5333e-05,  4.2252e-05,  1.5059e-04,\n","        -8.6312e-05, -1.2557e-04, -3.3969e-05, -2.4658e-05, -2.2287e-05])\n","gradient values before mask reapp. tensor([ 3.6064e-04, -1.2421e-04,  1.7675e-05,  3.2850e-05,  1.1104e-04,\n","        -9.2352e-05, -1.3406e-04, -6.1293e-05, -2.9521e-05, -9.5596e-05])\n","gradient values before mask reapp. tensor([ 3.8887e-04, -1.1953e-04,  6.8019e-05,  4.3440e-05,  1.5252e-04,\n","        -8.5655e-05, -1.2414e-04, -3.1680e-05, -2.3971e-05, -1.6707e-05])\n","gradient values before mask reapp. tensor([ 3.5811e-04, -1.2360e-04,  1.6642e-05,  3.3156e-05,  1.0971e-04,\n","        -9.2228e-05, -1.3345e-04, -6.1277e-05, -2.9308e-05, -9.6070e-05])\n","gradient values before mask reapp. tensor([ 3.8662e-04, -1.1886e-04,  6.7513e-05,  4.3888e-05,  1.5165e-04,\n","        -8.5451e-05, -1.2339e-04, -3.1330e-05, -2.3692e-05, -1.6306e-05])\n","gradient values before mask reapp. tensor([ 3.5586e-04, -1.2290e-04,  1.6188e-05,  3.3659e-05,  1.0894e-04,\n","        -9.2007e-05, -1.3265e-04, -6.0873e-05, -2.9002e-05, -9.5479e-05])\n","gradient values before mask reapp. tensor([ 3.8522e-04, -1.1787e-04,  6.8815e-05,  4.4987e-05,  1.5251e-04,\n","        -8.4966e-05, -1.2211e-04, -2.9821e-05, -2.3138e-05, -1.2465e-05])\n","gradient values before mask reapp. tensor([ 3.4915e-04, -1.2298e-04,  7.8889e-06,  3.2451e-05,  1.0166e-04,\n","        -9.2790e-05, -1.3340e-04, -6.5034e-05, -2.9529e-05, -1.0729e-04])\n","gradient values before mask reapp. tensor([ 3.8750e-04, -1.1645e-04,  7.6303e-05,  4.7240e-05,  1.5851e-04,\n","        -8.3659e-05, -1.1971e-04, -2.4706e-05, -2.1909e-05,  7.9145e-07])\n","gradient values before mask reapp. tensor([ 3.4850e-04, -1.2203e-04,  1.0199e-05,  3.3499e-05,  1.0316e-04,\n","        -9.2227e-05, -1.3209e-04, -6.3045e-05, -2.8947e-05, -1.0242e-04])\n","gradient values before mask reapp. tensor([ 3.8607e-04, -1.1571e-04,  7.7126e-05,  4.7904e-05,  1.5876e-04,\n","        -8.3277e-05, -1.1874e-04, -2.3590e-05, -2.1485e-05,  3.1840e-06])\n","gradient values before mask reapp. tensor([ 3.4689e-04, -1.2126e-04,  1.0771e-05,  3.4138e-05,  1.0318e-04,\n","        -9.1902e-05, -1.3116e-04, -6.2097e-05, -2.8574e-05, -1.0036e-04])\n","gradient values before mask reapp. tensor([ 3.8418e-04, -1.1506e-04,  7.7109e-05,  4.8365e-05,  1.5829e-04,\n","        -8.3008e-05, -1.1795e-04, -2.2978e-05, -2.1162e-05,  4.2066e-06])\n","gradient values before mask reapp. tensor([ 3.5005e-04, -1.1964e-04,  1.9816e-05,  3.6704e-05,  1.1026e-04,\n","        -9.0455e-05, -1.2850e-04, -5.6160e-05, -2.7270e-05, -8.4786e-05])\n","gradient values before mask reapp. tensor([ 3.7845e-04, -1.1505e-04,  7.0296e-05,  4.7314e-05,  1.5205e-04,\n","        -8.3656e-05, -1.1853e-04, -2.6392e-05, -2.1620e-05, -5.6248e-06])\n","gradient values before mask reapp. tensor([ 3.4722e-04, -1.1906e-04,  1.8245e-05,  3.6952e-05,  1.0856e-04,\n","        -9.0371e-05, -1.2794e-04, -5.6423e-05, -2.7096e-05, -8.5984e-05])\n","gradient values before mask reapp. tensor([ 3.6656e-04, -1.1565e-04,  5.3232e-05,  4.4545e-05,  1.3747e-04,\n","        -8.5614e-05, -1.2085e-04, -3.5724e-05, -2.3138e-05, -3.0618e-05])\n","gradient values before mask reapp. tensor([ 3.3911e-04, -1.1926e-04,  7.6435e-06,  3.5495e-05,  9.9720e-05,\n","        -9.1343e-05, -1.2894e-04, -6.1788e-05, -2.7743e-05, -1.0080e-04])\n","gradient values before mask reapp. tensor([ 3.7183e-04, -1.1365e-04,  6.6132e-05,  4.8104e-05,  1.4822e-04,\n","        -8.3542e-05, -1.1725e-04, -2.7359e-05, -2.1254e-05, -8.4103e-06])\n","gradient values before mask reapp. tensor([ 3.4444e-04, -1.1722e-04,  2.0540e-05,  3.9040e-05,  1.1026e-04,\n","        -8.9326e-05, -1.2543e-04, -5.3546e-05, -2.5949e-05, -7.8719e-05])\n","gradient values before mask reapp. tensor([ 3.7117e-04, -1.1299e-04,  6.7749e-05,  4.8673e-05,  1.4885e-04,\n","        -8.3094e-05, -1.1636e-04, -2.5961e-05, -2.0866e-05, -5.3800e-06])\n","gradient values before mask reapp. tensor([ 3.4026e-04, -1.1685e-04,  1.6588e-05,  3.8825e-05,  1.0668e-04,\n","        -8.9518e-05, -1.2529e-04, -5.5176e-05, -2.6001e-05, -8.3514e-05])\n","gradient values before mask reapp. tensor([ 3.6571e-04, -1.1269e-04,  6.1828e-05,  4.8153e-05,  1.4372e-04,\n","        -8.3547e-05, -1.1651e-04, -2.8700e-05, -2.1112e-05, -1.2977e-05])\n","gradient values before mask reapp. tensor([ 3.4166e-04, -1.1559e-04,  2.2309e-05,  4.0586e-05,  1.1102e-04,\n","        -8.8496e-05, -1.2335e-04, -5.1248e-05, -2.5079e-05, -7.3257e-05])\n","gradient values before mask reapp. tensor([ 3.6427e-04, -1.1202e-04,  6.2373e-05,  4.8674e-05,  1.4370e-04,\n","        -8.3192e-05, -1.1566e-04, -2.7820e-05, -2.0762e-05, -1.1160e-05])\n","gradient values before mask reapp. tensor([ 3.3956e-04, -1.1494e-04,  2.1840e-05,  4.0973e-05,  1.1016e-04,\n","        -8.8291e-05, -1.2265e-04, -5.0961e-05, -2.4846e-05, -7.2860e-05])\n","gradient values before mask reapp. tensor([ 3.6975e-04, -1.1035e-04,  7.4812e-05,  5.1610e-05,  1.5349e-04,\n","        -8.1288e-05, -1.1257e-04, -2.0011e-05, -1.9145e-05,  9.0640e-06])\n","gradient values before mask reapp. tensor([ 3.3139e-04, -1.1526e-04,  1.0812e-05,  3.9160e-05,  1.0059e-04,\n","        -8.9427e-05, -1.2395e-04, -5.6777e-05, -2.5707e-05, -8.8998e-05])\n","gradient values before mask reapp. tensor([ 3.6228e-04, -1.1047e-04,  6.5059e-05,  5.0149e-05,  1.4492e-04,\n","        -8.2286e-05, -1.1362e-04, -2.5138e-05, -1.9901e-05, -4.8987e-06])\n","gradient values before mask reapp. tensor([ 3.2613e-04, -1.1504e-04,  4.9972e-06,  3.8666e-05,  9.5600e-05,\n","        -8.9797e-05, -1.2409e-04, -5.9420e-05, -2.5895e-05, -9.6462e-05])\n","gradient values before mask reapp. tensor([ 3.6415e-04, -1.0914e-04,  7.1626e-05,  5.2169e-05,  1.5012e-04,\n","        -8.1099e-05, -1.1144e-04, -2.0636e-05, -1.8817e-05,  6.8793e-06])\n","gradient values before mask reapp. tensor([ 3.2559e-04, -1.1408e-04,  7.3878e-06,  3.9780e-05,  9.7281e-05,\n","        -8.9178e-05, -1.2274e-04, -5.7380e-05, -2.5287e-05, -9.1289e-05])\n","gradient values before mask reapp. tensor([ 3.6636e-04, -1.0782e-04,  7.8703e-05,  5.4217e-05,  1.5571e-04,\n","        -7.9853e-05, -1.0922e-04, -1.5859e-05, -1.7694e-05,  1.9297e-05])\n","gradient values before mask reapp. tensor([ 3.2567e-04, -1.1305e-04,  1.0787e-05,  4.1039e-05,  9.9720e-05,\n","        -8.8458e-05, -1.2125e-04, -5.4801e-05, -2.4608e-05, -8.4678e-05])\n","gradient values before mask reapp. tensor([ 3.6133e-04, -1.0765e-04,  7.3034e-05,  5.3477e-05,  1.5050e-04,\n","        -8.0324e-05, -1.0955e-04, -1.8625e-05, -1.8035e-05,  1.1460e-05])\n","gradient values before mask reapp. tensor([ 3.2197e-04, -1.1266e-04,  7.4782e-06,  4.0824e-05,  9.6532e-05,\n","        -8.8607e-05, -1.2109e-04, -5.6164e-05, -2.4672e-05, -8.8729e-05])\n","gradient values before mask reapp. tensor([ 3.6261e-04, -1.0663e-04,  7.8218e-05,  5.4918e-05,  1.5438e-04,\n","        -7.9350e-05, -1.0782e-04, -1.5026e-05, -1.7166e-05,  2.0480e-05])\n","gradient values before mask reapp. tensor([ 3.2286e-04, -1.1154e-04,  1.2179e-05,  4.2247e-05,  9.9896e-05,\n","        -8.7768e-05, -1.1943e-04, -5.2916e-05, -2.3928e-05, -8.0318e-05])\n","gradient values before mask reapp. tensor([ 3.5903e-04, -1.0612e-04,  7.5298e-05,  5.4921e-05,  1.5161e-04,\n","        -7.9432e-05, -1.0749e-04, -1.6096e-05, -1.7153e-05,  1.7316e-05])\n","gradient values before mask reapp. tensor([ 3.2623e-04, -1.1005e-04,  2.1013e-05,  4.4534e-05,  1.0661e-04,\n","        -8.6374e-05, -1.1702e-04, -4.7298e-05, -2.2767e-05, -6.5522e-05])\n","gradient values before mask reapp. tensor([ 3.4293e-04, -1.0771e-04,  5.0235e-05,  5.0052e-05,  1.3018e-04,\n","        -8.2465e-05, -1.1161e-04, -3.0272e-05, -1.9640e-05, -2.0987e-05])\n","gradient values before mask reapp. tensor([ 3.2176e-04, -1.0972e-04,  1.6466e-05,  4.4372e-05,  1.0280e-04,\n","        -8.6520e-05, -1.1687e-04, -4.9176e-05, -2.2783e-05, -7.0823e-05])\n","gradient values before mask reapp. tensor([ 3.3416e-04, -1.0776e-04,  3.8697e-05,  4.8664e-05,  1.2069e-04,\n","        -8.3550e-05, -1.1264e-04, -3.6195e-05, -2.0403e-05, -3.6661e-05])\n","gradient values before mask reapp. tensor([ 3.3561e-04, -1.0668e-04,  4.3435e-05,  5.0471e-05,  1.2484e-04,\n","        -8.2674e-05, -1.1093e-04, -3.2880e-05, -1.9569e-05, -2.7495e-05])\n","gradient values before mask reapp. tensor([ 3.3333e-04, -1.0693e-04,  4.0398e-05,  4.9584e-05,  1.2185e-04,\n","        -8.2990e-05, -1.1144e-04, -3.4555e-05, -1.9854e-05, -3.2627e-05])\n","gradient values before mask reapp. tensor([ 3.3854e-04, -1.0530e-04,  5.1601e-05,  5.2654e-05,  1.3127e-04,\n","        -8.1310e-05, -1.0856e-04, -2.7532e-05, -1.8375e-05, -1.3537e-05])\n","gradient values before mask reapp. tensor([ 3.3227e-04, -1.0629e-04,  4.1372e-05,  5.0034e-05,  1.2206e-04,\n","        -8.2632e-05, -1.1062e-04, -3.3528e-05, -1.9536e-05, -3.0431e-05])\n","gradient values before mask reapp. tensor([ 3.3725e-04, -1.0468e-04,  5.2179e-05,  5.3022e-05,  1.3113e-04,\n","        -8.1007e-05, -1.0782e-04, -2.6746e-05, -1.8107e-05, -1.1970e-05])\n","gradient values before mask reapp. tensor([ 3.2933e-04, -1.0593e-04,  3.9021e-05,  4.9819e-05,  1.1947e-04,\n","        -8.2697e-05, -1.1045e-04, -3.4461e-05, -1.9583e-05, -3.3413e-05])\n","gradient values before mask reapp. tensor([ 3.2085e-04, -1.0602e-04,  2.7126e-05,  4.8563e-05,  1.1006e-04,\n","        -8.3960e-05, -1.1163e-04, -4.0724e-05, -2.0470e-05, -4.9364e-05])\n","gradient values before mask reapp. tensor([ 3.3662e-04, -1.0367e-04,  5.4897e-05,  5.3887e-05,  1.3233e-04,\n","        -8.0291e-05, -1.0646e-04, -2.4596e-05, -1.7557e-05, -6.9188e-06])\n","gradient values before mask reapp. tensor([ 3.0841e-04, -1.0693e-04,  8.6664e-06,  4.5406e-05,  9.4563e-05,\n","        -8.5978e-05, -1.1422e-04, -5.0802e-05, -2.2056e-05, -7.6601e-05])\n","gradient values before mask reapp. tensor([ 3.3921e-04, -1.0246e-04,  6.2250e-05,  5.5894e-05,  1.3829e-04,\n","        -7.8940e-05, -1.0424e-04, -1.9659e-05, -1.6364e-05,  5.8342e-06])\n","gradient values before mask reapp. tensor([ 3.1683e-04, -1.0454e-04,  2.6575e-05,  4.9820e-05,  1.0921e-04,\n","        -8.3326e-05, -1.0986e-04, -3.9730e-05, -1.9784e-05, -4.6965e-05])\n","gradient values before mask reapp. tensor([ 3.3455e-04, -1.0227e-04,  5.7046e-05,  5.5208e-05,  1.3344e-04,\n","        -7.9360e-05, -1.0452e-04, -2.2211e-05, -1.6690e-05, -1.3155e-06])\n","gradient values before mask reapp. tensor([ 3.1288e-04, -1.0425e-04,  2.2641e-05,  4.9469e-05,  1.0558e-04,\n","        -8.3521e-05, -1.0982e-04, -4.1451e-05, -1.9899e-05, -5.1947e-05])\n","gradient values before mask reapp. tensor([ 3.4002e-04, -1.0042e-04,  6.9680e-05,  5.8467e-05,  1.4372e-04,\n","        -7.7373e-05, -1.0120e-04, -1.4219e-05, -1.4976e-05,  1.9974e-05])\n","gradient values before mask reapp. tensor([ 3.1272e-04, -1.0336e-04,  2.5295e-05,  5.0426e-05,  1.0732e-04,\n","        -8.2913e-05, -1.0857e-04, -3.9401e-05, -1.9362e-05, -4.6761e-05])\n","gradient values before mask reapp. tensor([ 3.2871e-04, -1.0129e-04,  5.2763e-05,  5.5255e-05,  1.2897e-04,\n","        -7.9356e-05, -1.0381e-04, -2.3682e-05, -1.6631e-05, -5.7267e-06])\n","gradient values before mask reapp. tensor([ 3.0260e-04, -1.0388e-04,  1.0861e-05,  4.8150e-05,  9.5175e-05,\n","        -8.4405e-05, -1.1038e-04, -4.7140e-05, -2.0523e-05, -6.7621e-05])\n","gradient values before mask reapp. tensor([ 3.3259e-04, -9.9854e-05,  6.2424e-05,  5.7784e-05,  1.3690e-04,\n","        -7.7694e-05, -1.0109e-04, -1.7365e-05, -1.5175e-05,  1.0737e-05])\n","gradient values before mask reapp. tensor([ 3.0982e-04, -1.0180e-04,  2.6331e-05,  5.1885e-05,  1.0762e-04,\n","        -8.2101e-05, -1.0663e-04, -3.7613e-05, -1.8592e-05, -4.2171e-05])\n","gradient values before mask reapp. tensor([ 3.1812e-04, -1.0072e-04,  4.1036e-05,  5.4340e-05,  1.1915e-04,\n","        -8.0113e-05, -1.0400e-04, -2.9077e-05, -1.7055e-05, -2.0321e-05])\n","gradient values before mask reapp. tensor([ 3.2351e-04, -9.8966e-05,  5.2643e-05,  5.7650e-05,  1.2903e-04,\n","        -7.8351e-05, -1.0094e-04, -2.1784e-05, -1.5499e-05, -2.5134e-07])\n","gradient values before mask reapp. tensor([ 3.1658e-04, -1.0033e-04,  4.0736e-05,  5.4295e-05,  1.1816e-04,\n","        -7.9949e-05, -1.0360e-04, -2.8927e-05, -1.6951e-05, -2.0553e-05])\n","gradient values before mask reapp. tensor([ 3.1987e-04, -9.8646e-05,  4.9099e-05,  5.7239e-05,  1.2549e-04,\n","        -7.8591e-05, -1.0096e-04, -2.3445e-05, -1.5697e-05, -4.9136e-06])\n","gradient values before mask reapp. tensor([ 3.0245e-04, -1.0082e-04,  2.0306e-05,  5.1456e-05,  1.0135e-04,\n","        -8.2232e-05, -1.0611e-04, -4.0060e-05, -1.8710e-05, -4.9270e-05])\n","gradient values before mask reapp. tensor([ 3.2171e-04, -9.7266e-05,  5.5233e-05,  5.9286e-05,  1.3037e-04,\n","        -7.7410e-05, -9.8863e-05, -1.9323e-05, -1.4724e-05,  6.4943e-06])\n","gradient values before mask reapp. tensor([ 2.7960e-04, -1.0362e-04, -1.6813e-05,  4.4155e-05,  7.0367e-05,\n","        -8.6597e-05, -1.1241e-04, -6.1036e-05, -2.2298e-05, -1.0617e-04])\n","gradient values before mask reapp. tensor([ 3.4754e-04, -9.2716e-05,  1.0234e-04,  6.9294e-05,  1.6914e-04,\n","        -7.0882e-05, -8.9236e-05,  8.6562e-06, -9.3515e-06,  8.0780e-05])\n","gradient values before mask reapp. tensor([ 2.8427e-04, -1.0199e-04, -5.8854e-06,  4.6752e-05,  7.8857e-05,\n","        -8.4973e-05, -1.0965e-04, -5.4265e-05, -2.0953e-05, -8.8195e-05])\n","gradient values before mask reapp. tensor([ 3.4674e-04, -9.2282e-05,  1.0323e-04,  6.9466e-05,  1.6922e-04,\n","        -7.0525e-05, -8.8595e-05,  9.5584e-06, -9.0805e-06,  8.2370e-05])\n","gradient values before mask reapp. tensor([ 2.8807e-04, -1.0042e-04,  3.6194e-06,  4.9179e-05,  8.6193e-05,\n","        -8.3513e-05, -1.0710e-04, -4.8295e-05, -1.9748e-05, -7.2237e-05])\n","gradient values before mask reapp. tensor([ 3.2765e-04, -9.4036e-05,  7.3352e-05,  6.4012e-05,  1.4417e-04,\n","        -7.4110e-05, -9.3346e-05, -7.2894e-06, -1.1990e-05,  3.7508e-05])\n","gradient values before mask reapp. tensor([ 2.8117e-04, -1.0068e-04, -5.9078e-06,  4.7576e-05,  7.7833e-05,\n","        -8.4424e-05, -1.0826e-04, -5.3439e-05, -2.0544e-05, -8.6100e-05])\n","gradient values before mask reapp. tensor([ 3.2312e-04, -9.3494e-05,  6.8604e-05,  6.3884e-05,  1.3995e-04,\n","        -7.4392e-05, -9.3281e-05, -9.5399e-06, -1.2230e-05,  3.2080e-05])\n","gradient values before mask reapp. tensor([ 2.7514e-04, -1.0046e-04, -1.3123e-05,  4.6993e-05,  7.2044e-05,\n","        -8.4875e-05, -1.0850e-04, -5.6852e-05, -2.0832e-05, -9.5113e-05])\n","gradient values before mask reapp. tensor([ 3.4678e-04, -8.9556e-05,  1.1143e-04,  7.2601e-05,  1.7490e-04,\n","        -6.8483e-05, -8.4736e-05,  1.5795e-05, -7.4288e-06,  9.8843e-05])\n","gradient values before mask reapp. tensor([ 2.7712e-04, -9.9294e-05, -7.0425e-06,  4.8571e-05,  7.6450e-05,\n","        -8.3874e-05, -1.0671e-04, -5.2954e-05, -2.0031e-05, -8.4776e-05])\n","gradient values before mask reapp. tensor([ 3.2709e-04, -9.1734e-05,  7.9941e-05,  6.6321e-05,  1.4815e-04,\n","        -7.2361e-05, -9.0117e-05, -2.1725e-06, -1.0648e-05,  5.0433e-05])\n","gradient values before mask reapp. tensor([ 2.7520e-04, -9.8690e-05, -7.6851e-06,  4.8900e-05,  7.5537e-05,\n","        -8.3634e-05, -1.0607e-04, -5.2838e-05, -1.9847e-05, -8.4583e-05])\n","gradient values before mask reapp. tensor([ 3.2573e-04, -9.1094e-05,  8.0034e-05,  6.6712e-05,  1.4759e-04,\n","        -7.2078e-05, -8.9457e-05, -1.7507e-06, -1.0479e-05,  5.1467e-05])\n","gradient values before mask reapp. tensor([ 2.6810e-04, -9.8654e-05, -1.6716e-05,  4.7959e-05,  6.8248e-05,\n","        -8.4335e-05, -1.0664e-04, -5.7270e-05, -2.0306e-05, -9.6418e-05])\n","gradient values before mask reapp. tensor([ 3.3126e-04, -8.9312e-05,  9.2522e-05,  6.9954e-05,  1.5792e-04,\n","        -7.0037e-05, -8.6145e-05,  6.1878e-06, -8.7346e-06,  7.2641e-05])\n","gradient values before mask reapp. tensor([ 2.7399e-04, -9.6917e-05, -4.0277e-06,  5.0862e-05,  7.8107e-05,\n","        -8.2473e-05, -1.0364e-04, -4.9586e-05, -1.8831e-05, -7.5816e-05])\n","gradient values before mask reapp. tensor([ 3.2841e-04, -8.9155e-05,  8.9799e-05,  6.9448e-05,  1.5508e-04,\n","        -7.0120e-05, -8.6146e-05,  4.9835e-06, -8.8451e-06,  6.8783e-05])\n","gradient values before mask reapp. tensor([ 2.6949e-04, -9.6794e-05, -9.3172e-06,  5.0105e-05,  7.3214e-05,\n","        -8.2878e-05, -1.0398e-04, -5.2248e-05, -1.9193e-05, -8.3146e-05])\n","gradient values before mask reapp. tensor([ 3.1098e-04, -8.9959e-05,  6.3904e-05,  6.5818e-05,  1.3412e-04,\n","        -7.3025e-05, -8.9460e-05, -9.1966e-06, -1.1069e-05,  3.2370e-05])\n","gradient values before mask reapp. tensor([ 2.7629e-04, -9.5075e-05,  4.6658e-06,  5.3249e-05,  8.4403e-05,\n","        -8.0722e-05, -1.0071e-04, -4.3718e-05, -1.7475e-05, -6.0473e-05])\n","gradient values before mask reapp. tensor([ 3.0570e-04, -9.0122e-05,  5.7046e-05,  6.4633e-05,  1.2810e-04,\n","        -7.3531e-05, -9.0103e-05, -1.2682e-05, -1.1520e-05,  2.2452e-05])\n","gradient values before mask reapp. tensor([ 2.9703e-04, -9.1586e-05,  4.2173e-05,  6.0794e-05,  1.1466e-04,\n","        -7.5577e-05, -9.3304e-05, -2.1658e-05, -1.3377e-05, -2.2498e-06])\n","gradient values before mask reapp. tensor([ 2.7731e-04, -9.3091e-05,  1.1308e-05,  5.6046e-05,  8.9944e-05,\n","        -7.9227e-05, -9.7764e-05, -3.8777e-05, -1.6160e-05, -4.6758e-05])\n","gradient values before mask reapp. tensor([ 3.2159e-04, -8.7180e-05,  8.7033e-05,  7.0414e-05,  1.5163e-04,\n","        -6.9333e-05, -8.4055e-05,  5.0142e-06, -8.2508e-06,  6.8723e-05])\n","gradient values before mask reapp. tensor([ 2.8012e-04, -9.1902e-05,  1.8432e-05,  5.7731e-05,  9.5098e-05,\n","        -7.8086e-05, -9.5886e-05, -3.4363e-05, -1.5308e-05, -3.5055e-05])\n","gradient values before mask reapp. tensor([ 2.8207e-04, -9.1734e-05,  2.1972e-05,  5.8026e-05,  9.7410e-05,\n","        -7.7512e-05, -9.5349e-05, -3.2373e-05, -1.4971e-05, -3.0319e-05])\n","gradient values before mask reapp. tensor([ 2.7542e-04, -9.1646e-05,  1.3236e-05,  5.7598e-05,  9.1313e-05,\n","        -7.8132e-05, -9.5681e-05, -3.6475e-05, -1.5243e-05, -4.0732e-05])\n","gradient values before mask reapp. tensor([ 3.1442e-04, -8.6410e-05,  7.9938e-05,  7.0031e-05,  1.4518e-04,\n","        -6.9581e-05, -8.3792e-05,  1.8592e-06, -8.4719e-06,  6.0510e-05])\n","gradient values before mask reapp. tensor([ 2.7517e-04, -9.0721e-05,  1.5513e-05,  5.8378e-05,  9.2476e-05,\n","        -7.7712e-05, -9.4626e-05, -3.4878e-05, -1.4936e-05, -3.6287e-05])\n","gradient values before mask reapp. tensor([ 3.1238e-04, -8.6342e-05,  7.8180e-05,  6.9471e-05,  1.4296e-04,\n","        -6.9569e-05, -8.3798e-05,  1.1055e-06, -8.5525e-06,  5.7604e-05])\n","gradient values before mask reapp. tensor([ 2.7763e-04, -8.9783e-05,  2.1510e-05,  5.9610e-05,  9.6453e-05,\n","        -7.6736e-05, -9.3171e-05, -3.1273e-05, -1.4297e-05, -2.6867e-05])\n","gradient values before mask reapp. tensor([ 2.5680e-04, -9.2921e-05, -1.3939e-05,  5.2022e-05,  6.6777e-05,\n","        -8.1181e-05, -9.9819e-05, -5.1797e-05, -1.8015e-05, -8.2416e-05])\n","gradient values before mask reapp. tensor([ 3.0114e-04, -8.5506e-05,  6.4573e-05,  6.9007e-05,  1.3228e-04,\n","        -7.0611e-05, -8.4120e-05, -5.5412e-06, -9.2521e-06,  4.1785e-05])\n","gradient values before mask reapp. tensor([ 2.9011e-04, -8.7009e-05,  4.6440e-05,  6.5071e-05,  1.1690e-04,\n","        -7.2893e-05, -8.7424e-05, -1.5974e-05, -1.1150e-05,  1.3343e-05])\n","gradient values before mask reapp. tensor([ 2.8595e-04, -8.7205e-05,  4.0155e-05,  6.3875e-05,  1.1092e-04,\n","        -7.3679e-05, -8.8472e-05, -1.9683e-05, -1.1929e-05,  3.6250e-06])\n","gradient values before mask reapp. tensor([ 2.8038e-04, -8.7121e-05,  3.2841e-05,  6.3512e-05,  1.0577e-04,\n","        -7.4196e-05, -8.8772e-05, -2.3179e-05, -1.2167e-05, -5.0159e-06])\n","gradient values before mask reapp. tensor([ 2.7506e-04, -8.8447e-05,  2.3212e-05,  6.0404e-05,  9.6537e-05,\n","        -7.5497e-05, -9.1149e-05, -2.9057e-05, -1.3451e-05, -2.2388e-05])\n","gradient values before mask reapp. tensor([ 2.8933e-04, -8.4913e-05,  5.1095e-05,  6.7792e-05,  1.2090e-04,\n","        -7.1457e-05, -8.4428e-05, -1.1928e-05, -9.8384e-06,  2.4974e-05])\n","gradient values before mask reapp. tensor([ 2.8645e-04, -8.6092e-05,  4.5224e-05,  6.5056e-05,  1.1432e-04,\n","        -7.2385e-05, -8.6401e-05, -1.5846e-05, -1.0901e-05,  1.2527e-05])\n","gradient values before mask reapp. tensor([ 2.9278e-04, -8.4033e-05,  5.8656e-05,  6.9082e-05,  1.2619e-04,\n","        -7.0301e-05, -8.2773e-05, -7.3889e-06, -9.0196e-06,  3.6383e-05])\n","gradient values before mask reapp. tensor([ 2.5785e-04, -8.8742e-05, -5.2619e-07,  5.7040e-05,  7.6470e-05,\n","        -7.7978e-05, -9.3745e-05, -4.1819e-05, -1.5439e-05, -5.5566e-05])\n","gradient values before mask reapp. tensor([ 2.7127e-04, -8.6060e-05,  2.4551e-05,  6.3119e-05,  9.8159e-05,\n","        -7.4235e-05, -8.8052e-05, -2.6489e-05, -1.2204e-05, -1.4188e-05])\n","gradient values before mask reapp. tensor([ 3.0076e-04, -8.1567e-05,  7.6031e-05,  7.3415e-05,  1.4022e-04,\n","        -6.7471e-05, -7.8317e-05,  3.4335e-06, -6.7556e-06,  6.5498e-05])\n","gradient values before mask reapp. tensor([ 2.4677e-04, -8.8782e-05, -1.5174e-05,  5.5284e-05,  6.4617e-05,\n","        -7.9231e-05, -9.4909e-05, -4.9305e-05, -1.6363e-05, -7.5056e-05])\n","gradient values before mask reapp. tensor([ 3.0362e-04, -8.0418e-05,  8.3018e-05,  7.5156e-05,  1.4540e-04,\n","        -6.6267e-05, -7.6412e-05,  7.8242e-06, -5.8663e-06,  7.7164e-05])\n","gradient values before mask reapp. tensor([ 2.4463e-04, -8.8272e-05, -1.6367e-05,  5.5568e-05,  6.3476e-05,\n","        -7.8999e-05, -9.4297e-05, -4.9427e-05, -1.6163e-05, -7.5488e-05])\n","gradient values before mask reapp. tensor([ 3.0323e-04, -7.9534e-05,  8.5056e-05,  7.6174e-05,  1.4699e-04,\n","        -6.5653e-05, -7.5141e-05,  9.5627e-06, -5.3298e-06,  8.1995e-05])\n","gradient values before mask reapp. tensor([ 2.5057e-04, -8.6545e-05, -3.8193e-06,  5.8486e-05,  7.3358e-05,\n","        -7.7130e-05, -9.1297e-05, -4.1841e-05, -1.4698e-05, -5.4901e-05])\n","gradient values before mask reapp. tensor([ 3.0317e-04, -7.8742e-05,  8.7496e-05,  7.7148e-05,  1.4904e-04,\n","        -6.4913e-05, -7.3810e-05,  1.1602e-05, -4.7021e-06,  8.7261e-05])\n","gradient values before mask reapp. tensor([ 2.7609e-04, -8.2167e-05,  4.1944e-05,  6.8117e-05,  1.1069e-04,\n","        -7.0827e-05, -8.2155e-05, -1.4929e-05, -9.6497e-06,  1.6958e-05])\n","gradient values before mask reapp. tensor([ 2.4638e-04, -8.5976e-05, -7.5775e-06,  5.8464e-05,  6.9943e-05,\n","        -7.7013e-05, -9.0830e-05, -4.3257e-05, -1.4653e-05, -5.8748e-05])\n","gradient values before mask reapp. tensor([ 2.9775e-04, -7.8474e-05,  8.1261e-05,  7.6336e-05,  1.4313e-04,\n","        -6.5282e-05, -7.4089e-05,  8.4737e-06, -5.1155e-06,  7.8917e-05])\n","gradient values before mask reapp. tensor([ 2.5018e-04, -8.4648e-05,  1.2957e-06,  6.0660e-05,  7.6945e-05,\n","        -7.5548e-05, -8.8455e-05, -3.7653e-05, -1.3471e-05, -4.3846e-05])\n","gradient values before mask reapp. tensor([ 2.8991e-04, -7.8738e-05,  7.0143e-05,  7.4527e-05,  1.3343e-04,\n","        -6.6473e-05, -7.5476e-05,  2.3720e-06, -6.1402e-06,  6.2843e-05])\n","gradient values before mask reapp. tensor([ 2.3887e-04, -8.5478e-05, -1.5741e-05,  5.7723e-05,  6.2717e-05,\n","        -7.7399e-05, -9.0830e-05, -4.7024e-05, -1.4972e-05, -6.8801e-05])\n","gradient values before mask reapp. tensor([ 2.7500e-04, -7.9925e-05,  4.7489e-05,  7.0809e-05,  1.1524e-04,\n","        -6.8888e-05, -7.8537e-05, -9.9249e-06, -7.9755e-06,  3.0147e-05])\n","gradient values before mask reapp. tensor([ 2.8641e-04, -7.7309e-05,  6.9131e-05,  7.6069e-05,  1.3317e-04,\n","        -6.5897e-05, -7.3720e-05,  3.0239e-06, -5.4899e-06,  6.5559e-05])\n","gradient values before mask reapp. tensor([ 2.3927e-04, -8.4069e-05, -1.1527e-05,  5.9269e-05,  6.5599e-05,\n","        -7.6461e-05, -8.8989e-05, -4.4098e-05, -1.4290e-05, -6.0268e-05])\n","gradient values before mask reapp. tensor([ 2.6260e-04, -7.9662e-05,  3.0930e-05,  6.9197e-05,  1.0166e-04,\n","        -7.0435e-05, -7.9829e-05, -1.8581e-05, -9.2036e-06,  8.5652e-06])\n","gradient values before mask reapp. tensor([ 2.6653e-04, -7.9774e-05,  3.6992e-05,  6.9225e-05,  1.0572e-04,\n","        -6.9635e-05, -7.9281e-05, -1.5338e-05, -8.7424e-06,  1.5705e-05])\n","gradient values before mask reapp. tensor([ 2.8504e-04, -7.5911e-05,  7.1295e-05,  7.7325e-05,  1.3435e-04,\n","        -6.4964e-05, -7.1865e-05,  5.1196e-06, -4.8248e-06,  7.1344e-05])\n","gradient values before mask reapp. tensor([ 2.5926e-04, -7.9963e-05,  2.6659e-05,  6.7474e-05,  9.6382e-05,\n","        -7.0822e-05, -8.0660e-05, -2.1159e-05, -9.8174e-06,  5.6119e-07])\n","gradient values before mask reapp. tensor([ 2.3118e-04, -8.2423e-05, -1.7915e-05,  6.0595e-05,  6.1302e-05,\n","        -7.5988e-05, -8.7119e-05, -4.5741e-05, -1.3672e-05, -6.3646e-05])\n","gradient values before mask reapp. tensor([ 3.0209e-04, -7.2861e-05,  1.0292e-04,  8.3713e-05,  1.5983e-04,\n","        -6.0367e-05, -6.5316e-05,  2.3922e-05, -1.1951e-06,  1.2097e-04])\n","gradient values before mask reapp. tensor([ 2.5261e-04, -7.8653e-05,  2.0891e-05,  6.8541e-05,  9.2693e-05,\n","        -7.0769e-05, -7.9401e-05, -2.3012e-05, -9.5023e-06, -2.9630e-06])\n","gradient values before mask reapp. tensor([ 2.5631e-04, -7.8748e-05,  2.6038e-05,  6.8294e-05,  9.5248e-05,\n","        -7.0238e-05, -7.9302e-05, -2.0696e-05, -9.4468e-06,  2.2191e-06])\n","gradient values before mask reapp. tensor([ 2.4499e-04, -7.8776e-05,  1.0088e-05,  6.7059e-05,  8.3578e-05,\n","        -7.1779e-05, -8.0557e-05, -2.8860e-05, -1.0414e-05, -1.7909e-05])\n","gradient values before mask reapp. tensor([ 2.6625e-04, -7.6783e-05,  4.5137e-05,  7.2376e-05,  1.1118e-04,\n","        -6.7287e-05, -7.4990e-05, -9.0240e-06, -7.0432e-06,  3.2941e-05])\n","gradient values before mask reapp. tensor([ 2.7614e-04, -7.3879e-05,  6.4950e-05,  7.8016e-05,  1.2808e-04,\n","        -6.4425e-05, -7.0030e-05,  3.1157e-06, -4.5743e-06,  6.7079e-05])\n","gradient values before mask reapp. tensor([ 2.3377e-04, -8.0388e-05, -8.1975e-06,  6.2356e-05,  6.6692e-05,\n","        -7.3941e-05, -8.4120e-05, -3.9651e-05, -1.2545e-05, -4.7902e-05])\n","gradient values before mask reapp. tensor([ 2.5050e-04, -7.6356e-05,  2.4045e-05,  7.0896e-05,  9.4919e-05,\n","        -6.9192e-05, -7.6342e-05, -1.9801e-05, -8.3678e-06,  6.7464e-06])\n","gradient values before mask reapp. tensor([ 2.9719e-04, -7.0461e-05,  1.0321e-04,  8.5539e-05,  1.5923e-04,\n","        -5.8892e-05, -6.2265e-05,  2.5867e-05, -1.7966e-07,  1.2667e-04])\n","gradient values before mask reapp. tensor([ 2.4404e-04, -7.7352e-05,  1.3191e-05,  6.7766e-05,  8.4031e-05,\n","        -7.0656e-05, -7.8795e-05, -2.6547e-05, -9.9261e-06, -1.2058e-05])\n","gradient values before mask reapp. tensor([ 2.0672e-04, -8.2265e-05, -4.9215e-05,  5.5653e-05,  3.3194e-05,\n","        -7.8393e-05, -8.9672e-05, -6.2131e-05, -1.6103e-05, -1.0716e-04])\n","gradient values before mask reapp. tensor([ 3.1782e-04, -6.6281e-05,  1.4192e-04,  9.4089e-05,  1.9090e-04,\n","        -5.3322e-05, -5.3893e-05,  4.9003e-05,  4.3012e-06,  1.8873e-04])\n","gradient values before mask reapp. tensor([ 2.3041e-04, -7.7829e-05, -6.2977e-06,  6.4856e-05,  6.7858e-05,\n","        -7.2668e-05, -8.1036e-05, -3.7055e-05, -1.1550e-05, -3.9469e-05])\n","gradient values before mask reapp. tensor([ 2.4719e-04, -7.4874e-05,  2.3761e-05,  7.1571e-05,  9.3092e-05,\n","        -6.8386e-05, -7.4765e-05, -1.9171e-05, -8.0397e-06,  8.7135e-06])\n","gradient values before mask reapp. tensor([ 2.4801e-04, -7.4622e-05,  2.6114e-05,  7.1964e-05,  9.5084e-05,\n","        -6.7891e-05, -7.4034e-05, -1.7517e-05, -7.6112e-06,  1.2580e-05])\n","gradient values before mask reapp. tensor([ 2.7300e-04, -7.0535e-05,  6.9965e-05,  8.1168e-05,  1.3099e-04,\n","        -6.2039e-05, -6.5505e-05,  8.0532e-06, -2.9181e-06,  8.1249e-05])\n","gradient values before mask reapp. tensor([ 2.1964e-04, -7.7877e-05, -2.0471e-05,  6.3112e-05,  5.6259e-05,\n","        -7.3604e-05, -8.1954e-05, -4.4127e-05, -1.2336e-05, -5.8198e-05])\n","gradient values before mask reapp. tensor([ 2.7154e-04, -6.9906e-05,  7.0029e-05,  8.1820e-05,  1.3138e-04,\n","        -6.1593e-05, -6.4501e-05,  8.7765e-06, -2.4672e-06,  8.3332e-05])\n","gradient values before mask reapp. tensor([ 2.4405e-04, -7.3506e-05,  2.3635e-05,  7.2447e-05,  9.2346e-05,\n","        -6.7625e-05, -7.3028e-05, -1.8203e-05, -7.5094e-06,  1.1433e-05])\n","gradient values before mask reapp. tensor([ 2.5546e-04, -7.1779e-05,  4.3775e-05,  7.6561e-05,  1.0894e-04,\n","        -6.4744e-05, -6.9010e-05, -6.2587e-06, -5.1863e-06,  4.2922e-05])\n","gradient values before mask reapp. tensor([ 2.4271e-04, -7.2423e-05,  2.4747e-05,  7.4285e-05,  9.4583e-05,\n","        -6.6746e-05, -7.1151e-05, -1.6341e-05, -6.5159e-06,  1.7219e-05])\n","gradient values before mask reapp. tensor([ 2.8382e-04, -6.6964e-05,  9.4931e-05,  8.7379e-05,  1.5142e-04,\n","        -5.7686e-05, -5.8551e-05,  2.4140e-05,  6.6697e-07,  1.2374e-04])\n","gradient values before mask reapp. tensor([ 2.3773e-04, -7.3069e-05,  1.6645e-05,  7.1855e-05,  8.6103e-05,\n","        -6.7872e-05, -7.2979e-05, -2.1463e-05, -7.7660e-06,  3.0772e-06])\n","gradient values before mask reapp. tensor([ 2.1061e-04, -7.6440e-05, -2.8134e-05,  6.3303e-05,  4.9626e-05,\n","        -7.3366e-05, -8.0547e-05, -4.6799e-05, -1.2133e-05, -6.4889e-05])\n","gradient values before mask reapp. tensor([ 2.9819e-04, -6.4056e-05,  1.2234e-04,  9.3428e-05,  1.7403e-04,\n","        -5.3537e-05, -5.2416e-05,  4.0742e-05,  4.0506e-06,  1.6806e-04])\n","gradient values before mask reapp. tensor([ 2.3541e-04, -7.2180e-05,  1.6122e-05,  7.2458e-05,  8.5375e-05,\n","        -6.7458e-05, -7.1869e-05, -2.1013e-05, -7.4444e-06,  4.3025e-06])\n","gradient values before mask reapp. tensor([ 2.1265e-04, -7.4252e-05, -2.0161e-05,  6.6678e-05,  5.6854e-05,\n","        -7.1663e-05, -7.7202e-05, -4.1125e-05, -1.0612e-05, -4.8044e-05])\n","gradient values before mask reapp. tensor([ 2.8902e-04, -6.4116e-05,  1.0997e-04,  9.1757e-05,  1.6369e-04,\n","        -5.4599e-05, -5.3469e-05,  3.4307e-05,  3.1480e-06,  1.5126e-04])\n","gradient values before mask reapp. tensor([ 2.3929e-04, -7.0732e-05,  2.5295e-05,  7.4731e-05,  9.2514e-05,\n","        -6.5750e-05, -6.9272e-05, -1.5201e-05, -6.1829e-06,  2.0006e-05])\n","gradient values before mask reapp. tensor([ 1.9599e-04, -7.6141e-05, -4.6871e-05,  6.0877e-05,  3.3472e-05,\n","        -7.4887e-05, -8.1842e-05, -5.6521e-05, -1.3508e-05, -8.9779e-05])\n","gradient values before mask reapp. tensor([ 2.9107e-04, -6.2737e-05,  1.1636e-04,  9.3627e-05,  1.6861e-04,\n","        -5.3290e-05, -5.1268e-05,  3.8528e-05,  4.1148e-06,  1.6306e-04])\n","gradient values before mask reapp. tensor([ 2.3096e-04, -7.0373e-05,  1.4517e-05,  7.3676e-05,  8.3276e-05,\n","        -6.6668e-05, -6.9954e-05, -2.0832e-05, -7.0267e-06,  6.1067e-06])\n","gradient values before mask reapp. tensor([ 2.0255e-04, -7.3522e-05, -3.1771e-05,  6.5500e-05,  4.6476e-05,\n","        -7.2215e-05, -7.7348e-05, -4.6842e-05, -1.1289e-05, -6.2296e-05])\n","gradient values before mask reapp. tensor([ 2.8091e-04, -6.2156e-05,  1.0288e-04,  9.2691e-05,  1.5718e-04,\n","        -5.4501e-05, -5.2124e-05,  3.1404e-05,  3.0083e-06,  1.4610e-04])\n","gradient values before mask reapp. tensor([ 1.8253e-04, -7.5972e-05, -6.4523e-05,  5.9195e-05,  1.9460e-05,\n","        -7.6015e-05, -8.2760e-05, -6.5307e-05, -1.4392e-05, -1.1189e-04])\n","gradient values before mask reapp. tensor([ 3.0869e-04, -5.7937e-05,  1.5221e-04,  1.0258e-04,  1.9806e-04,\n","        -4.7672e-05, -4.2327e-05,  6.0640e-05,  8.6321e-06,  2.2307e-04])\n","gradient values before mask reapp. tensor([ 2.0307e-04, -7.2410e-05, -2.7781e-05,  6.6651e-05,  4.8823e-05,\n","        -7.1149e-05, -7.5584e-05, -4.3954e-05, -1.0587e-05, -5.4740e-05])\n","gradient values before mask reapp. tensor([ 2.4226e-04, -6.5974e-05,  4.1159e-05,  8.1425e-05,  1.0621e-04,\n","        -6.1845e-05, -6.1889e-05, -3.4343e-06, -2.9672e-06,  5.4055e-05])\n","gradient values before mask reapp. tensor([ 2.4407e-04, -6.5170e-05,  4.5700e-05,  8.2899e-05,  1.1042e-04,\n","        -6.0969e-05, -6.0377e-05, -3.5268e-07, -2.1760e-06,  6.2659e-05])\n","gradient values before mask reapp. tensor([ 2.4885e-04, -6.4723e-05,  5.3410e-05,  8.3802e-05,  1.1559e-04,\n","        -5.9981e-05, -5.9323e-05,  3.7975e-06, -1.6431e-06,  7.3068e-05])\n","gradient values before mask reapp. tensor([ 1.7918e-04, -7.4082e-05, -6.4196e-05,  6.0766e-05,  1.9341e-05,\n","        -7.4962e-05, -8.0375e-05, -6.3864e-05, -1.3665e-05, -1.0685e-04])\n","gradient values before mask reapp. tensor([ 3.0488e-04, -5.6338e-05,  1.5119e-04,  1.0371e-04,  1.9664e-04,\n","        -4.6766e-05, -4.0367e-05,  6.1207e-05,  9.1737e-06,  2.2554e-04])\n","gradient values before mask reapp. tensor([ 1.8385e-04, -7.2835e-05, -5.4698e-05,  6.2970e-05,  2.6678e-05,\n","        -7.3470e-05, -7.8094e-05, -5.8120e-05, -1.2539e-05, -9.1275e-05])\n","gradient values before mask reapp. tensor([ 2.6433e-04, -6.0351e-05,  8.5796e-05,  9.2354e-05,  1.4366e-04,\n","        -5.4800e-05, -5.0755e-05,  2.4297e-05,  2.8856e-06,  1.2883e-04])\n","gradient values before mask reapp. tensor([ 2.6914e-04, -5.9734e-05,  9.4119e-05,  9.3956e-05,  1.5037e-04,\n","        -5.3500e-05, -4.9146e-05,  2.9199e-05,  3.8806e-06,  1.4173e-04])\n","gradient values before mask reapp. tensor([ 1.9035e-04, -7.0372e-05, -3.9864e-05,  6.7228e-05,  3.9124e-05,\n","        -7.0967e-05, -7.3813e-05, -4.8647e-05, -1.0472e-05, -6.5017e-05])\n","gradient values before mask reapp. tensor([ 2.5773e-04, -6.0615e-05,  7.6413e-05,  9.0713e-05,  1.3529e-04,\n","        -5.5549e-05, -5.1797e-05,  1.9220e-05,  2.0999e-06,  1.1535e-04])\n","gradient values before mask reapp. tensor([ 2.2879e-04, -6.4364e-05,  2.7515e-05,  8.1105e-05,  9.4574e-05,\n","        -6.1831e-05, -6.0657e-05, -9.1552e-06, -3.0918e-06,  4.0300e-05])\n","gradient values before mask reapp. tensor([ 2.0309e-04, -6.7453e-05, -1.4626e-05,  7.3198e-05,  6.0497e-05,\n","        -6.6999e-05, -6.7641e-05, -3.2920e-05, -7.1245e-06, -2.3175e-05])\n","gradient values before mask reapp. tensor([ 2.8736e-04, -5.5468e-05,  1.2979e-04,  1.0204e-04,  1.7920e-04,\n","        -4.8104e-05, -4.0835e-05,  5.0824e-05,  8.1384e-06,  1.9986e-04])\n","gradient values before mask reapp. tensor([ 2.0171e-04, -6.6090e-05, -1.3881e-05,  7.5026e-05,  6.1548e-05,\n","        -6.6472e-05, -6.6079e-05, -3.1779e-05, -6.5973e-06, -1.8223e-05])\n","gradient values before mask reapp. tensor([ 2.2124e-04, -6.4766e-05,  1.7494e-05,  7.8961e-05,  8.5713e-05,\n","        -6.2576e-05, -6.1572e-05, -1.4270e-05, -3.7890e-06,  2.5624e-05])\n","gradient values before mask reapp. tensor([ 2.6565e-04, -5.6310e-05,  9.7216e-05,  9.7774e-05,  1.5296e-04,\n","        -5.1691e-05, -4.4789e-05,  3.2983e-05,  5.3288e-06,  1.5485e-04])\n","gradient values before mask reapp. tensor([ 1.6303e-04, -7.1131e-05, -7.7989e-05,  6.2180e-05,  8.6765e-06,\n","        -7.4254e-05, -7.7132e-05, -6.8309e-05, -1.2949e-05, -1.1621e-04])\n","gradient values before mask reapp. tensor([ 3.1564e-04, -4.9680e-05,  1.8314e-04,  1.1411e-04,  2.2346e-04,\n","        -4.0181e-05, -2.8822e-05,  8.3135e-05,  1.4616e-05,  2.8643e-04])\n","gradient values before mask reapp. tensor([ 1.8769e-04, -6.6229e-05, -3.2986e-05,  7.2601e-05,  4.5909e-05,\n","        -6.8039e-05, -6.7548e-05, -4.1609e-05, -7.8605e-06, -4.3565e-05])\n","gradient values before mask reapp. tensor([ 2.1439e-04, -6.3897e-05,  1.0664e-05,  7.8991e-05,  8.0243e-05,\n","        -6.2539e-05, -6.0753e-05, -1.6966e-05, -3.7420e-06,  1.9278e-05])\n","gradient values before mask reapp. tensor([ 2.6332e-04, -5.4691e-05,  9.8235e-05,  9.9522e-05,  1.5400e-04,\n","        -5.0622e-05, -4.2438e-05,  3.4858e-05,  6.2140e-06,  1.6090e-04])\n","gradient values before mask reapp. tensor([ 1.6015e-04, -6.9293e-05, -7.7255e-05,  6.4494e-05,  1.0210e-05,\n","        -7.3021e-05, -7.4358e-05, -6.6220e-05, -1.1794e-05, -1.0919e-04])\n","gradient values before mask reapp. tensor([ 3.1890e-04, -4.7025e-05,  1.9412e-04,  1.1823e-04,  2.3301e-04,\n","        -3.7757e-05, -2.4374e-05,  9.0926e-05,  1.6659e-05,  3.0871e-04])\n","gradient values before mask reapp. tensor([ 1.7836e-04, -6.5763e-05, -4.4299e-05,  7.1739e-05,  3.6749e-05,\n","        -6.8564e-05, -6.7599e-05, -4.6955e-05, -8.2971e-06, -5.6815e-05])\n","gradient values before mask reapp. tensor([ 2.2467e-04, -5.9511e-05,  3.5047e-05,  8.6912e-05,  1.0186e-04,\n","        -5.8159e-05, -5.3006e-05, -8.9088e-07,  8.5222e-08,  6.4718e-05])\n","gradient values before mask reapp. tensor([ 2.4472e-04, -5.6474e-05,  6.9332e-05,  9.3817e-05,  1.2931e-04,\n","        -5.3633e-05, -4.6672e-05,  1.8779e-05,  3.5407e-06,  1.1761e-04])\n","gradient values before mask reapp. tensor([ 1.5199e-04, -6.8611e-05, -8.6598e-05,  6.3774e-05,  2.1274e-06,\n","        -7.3492e-05, -7.4218e-05, -7.0636e-05, -1.2270e-05, -1.2006e-04])\n","gradient values before mask reapp. tensor([ 3.1614e-04, -4.6200e-05,  1.9308e-04,  1.1868e-04,  2.3193e-04,\n","        -3.7025e-05, -2.2998e-05,  9.1299e-05,  1.7156e-05,  3.0983e-04])\n","gradient values before mask reapp. tensor([ 1.6959e-04, -6.5612e-05, -5.5463e-05,  7.0145e-05,  2.6901e-05,\n","        -6.9303e-05, -6.8150e-05, -5.2595e-05, -9.0507e-06, -7.1544e-05])\n","gradient values before mask reapp. tensor([ 2.4020e-04, -5.4528e-05,  6.8137e-05,  9.6523e-05,  1.3082e-04,\n","        -5.2600e-05, -4.3671e-05,  2.0255e-05,  4.8907e-06,  1.2363e-04])\n","gradient values before mask reapp. tensor([ 2.2713e-04, -5.8291e-05,  4.1737e-05,  8.7996e-05,  1.0523e-04,\n","        -5.6610e-05, -5.0917e-05,  3.2752e-06,  8.1411e-07,  7.5426e-05])\n","gradient values before mask reapp. tensor([ 1.6527e-04, -6.3769e-05, -5.7213e-05,  7.2812e-05,  2.8004e-05,\n","        -6.8462e-05, -6.5515e-05, -5.1711e-05, -7.9024e-06, -6.6514e-05])\n","gradient values before mask reapp. tensor([ 2.8384e-04, -4.9184e-05,  1.4201e-04,  1.0950e-04,  1.8978e-04,\n","        -4.2805e-05, -3.0613e-05,  6.2750e-05,  1.2385e-05,  2.3450e-04])\n","gradient values before mask reapp. tensor([ 1.9059e-04, -5.9986e-05, -1.3619e-05,  8.1167e-05,  6.2617e-05,\n","        -6.2705e-05, -5.7486e-05, -2.6687e-05, -3.5672e-06,  1.2953e-07])\n","gradient values before mask reapp. tensor([ 2.1798e-04, -5.6923e-05,  3.2223e-05,  8.8979e-05,  9.9520e-05,\n","        -5.6739e-05, -4.9627e-05, -3.9840e-07,  1.0560e-06,  6.8443e-05])\n","gradient values before mask reapp. tensor([ 2.3180e-04, -5.3083e-05,  5.9054e-05,  9.6945e-05,  1.2322e-04,\n","        -5.2654e-05, -4.2776e-05,  1.6161e-05,  4.6014e-06,  1.1554e-04])\n","gradient values before mask reapp. tensor([ 1.6011e-04, -6.4460e-05, -6.5429e-05,  6.9761e-05,  1.8823e-05,\n","        -6.9120e-05, -6.7079e-05, -5.6799e-05, -9.1448e-06, -8.1066e-05])\n","gradient values before mask reapp. tensor([ 2.9484e-04, -4.4396e-05,  1.6768e-04,  1.1828e-04,  2.1332e-04,\n","        -3.7994e-05, -2.2206e-05,  7.9740e-05,  1.6539e-05,  2.8358e-04])\n","gradient values before mask reapp. tensor([ 2.1875e-04, -5.6218e-05,  3.4759e-05,  8.9282e-05,  9.9927e-05,\n","        -5.5969e-05, -4.8704e-05,  1.0833e-06,  1.1791e-06,  7.2363e-05])\n","gradient values before mask reapp. tensor([ 1.6692e-04, -6.2081e-05, -5.1222e-05,  7.3829e-05,  3.0271e-05,\n","        -6.6770e-05, -6.3219e-05, -4.8111e-05, -7.4058e-06, -5.6114e-05])\n","gradient values before mask reapp. tensor([ 2.1237e-04, -5.4949e-05,  2.7873e-05,  9.0370e-05,  9.5776e-05,\n","        -5.6201e-05, -4.7835e-05, -1.8504e-06,  1.1607e-06,  6.7779e-05])\n","gradient values before mask reapp. tensor([ 2.1307e-04, -5.4280e-05,  3.0437e-05,  9.1641e-05,  9.8686e-05,\n","        -5.5532e-05, -4.6584e-05,  1.2982e-07,  1.8325e-06,  7.3906e-05])\n","gradient values before mask reapp. tensor([ 2.3951e-04, -5.0359e-05,  7.6535e-05,  1.0107e-04,  1.3695e-04,\n","        -4.9263e-05, -3.7560e-05,  2.7329e-05,  6.9846e-06,  1.4580e-04])\n","gradient values before mask reapp. tensor([ 1.8747e-04, -5.7574e-05, -1.1917e-05,  8.3433e-05,  6.4011e-05,\n","        -6.0636e-05, -5.3696e-05, -2.3813e-05, -2.2332e-06,  9.6904e-06])\n","gradient values before mask reapp. tensor([ 2.3804e-04, -5.0345e-05,  7.5220e-05,  1.0089e-04,  1.3591e-04,\n","        -4.9072e-05, -3.7212e-05,  2.7080e-05,  7.1727e-06,  1.4454e-04])\n","gradient values before mask reapp. tensor([ 2.0933e-04, -5.4563e-05,  2.6334e-05,  9.0718e-05,  9.5281e-05,\n","        -5.5358e-05, -4.6258e-05, -1.1644e-06,  2.0515e-06,  6.8484e-05])\n","gradient values before mask reapp. tensor([ 2.4698e-04, -4.9101e-05,  9.0996e-05,  1.0373e-04,  1.4851e-04,\n","        -4.6809e-05, -3.4146e-05,  3.6309e-05,  8.9299e-06,  1.6886e-04])\n","gradient values before mask reapp. tensor([ 2.0059e-04, -5.3786e-05,  1.4742e-05,  9.0724e-05,  8.6561e-05,\n","        -5.6363e-05, -4.6636e-05, -7.1608e-06,  1.3171e-06,  5.5865e-05])\n","gradient values before mask reapp. tensor([ 1.2565e-04, -6.5068e-05, -1.1438e-04,  6.3614e-05, -2.0699e-05,\n","        -7.3160e-05, -7.1106e-05, -8.2363e-05, -1.2552e-05, -1.4568e-04])\n","gradient values before mask reapp. tensor([ 2.9805e-04, -3.8908e-05,  1.8390e-04,  1.2585e-04,  2.2710e-04,\n","        -3.3739e-05, -1.3904e-05,  9.1793e-05,  1.9788e-05,  3.2065e-04])\n","gradient values before mask reapp. tensor([ 1.4113e-04, -6.2531e-05, -8.7248e-05,  6.8955e-05,  8.6238e-07,\n","        -6.9455e-05, -6.5819e-05, -6.6637e-05, -9.7859e-06, -1.0366e-04])\n","gradient values before mask reapp. tensor([ 2.7285e-04, -4.1849e-05,  1.4230e-04,  1.1799e-04,  1.9297e-04,\n","        -3.8752e-05, -2.0800e-05,  6.8138e-05,  1.5672e-05,  2.5804e-04])\n","gradient values before mask reapp. tensor([ 1.6768e-04, -5.6673e-05, -3.7522e-05,  8.1734e-05,  4.4054e-05,\n","        -6.2129e-05, -5.4129e-05, -3.6245e-05, -3.4602e-06, -2.0143e-05])\n","gradient values before mask reapp. tensor([ 2.4526e-04, -4.6152e-05,  9.4951e-05,  1.0752e-04,  1.5322e-04,\n","        -4.4754e-05, -2.9726e-05,  4.0628e-05,  1.0596e-05,  1.8357e-04])\n","gradient values before mask reapp. tensor([ 2.2103e-04, -4.9826e-05,  5.2204e-05,  9.8295e-05,  1.1601e-04,\n","        -5.0469e-05, -3.8329e-05,  1.5107e-05,  5.4941e-06,  1.1551e-04])\n","gradient values before mask reapp. tensor([ 1.4242e-04, -5.9499e-05, -7.9332e-05,  7.3711e-05,  9.1527e-06,\n","        -6.7160e-05, -6.1146e-05, -6.0322e-05, -7.7804e-06, -8.3112e-05])\n","gradient values before mask reapp. tensor([ 2.3889e-04, -4.6134e-05,  8.5971e-05,  1.0635e-04,  1.4554e-04,\n","        -4.5421e-05, -3.0365e-05,  3.5907e-05,  9.8869e-06,  1.7169e-04])\n","gradient values before mask reapp. tensor([ 2.0215e-04, -5.1524e-05,  2.2239e-05,  9.3033e-05,  9.1670e-05,\n","        -5.3817e-05, -4.2641e-05, -1.5971e-06,  2.7527e-06,  7.1937e-05])\n","gradient values before mask reapp. tensor([ 1.7035e-04, -5.4167e-05, -2.8452e-05,  8.5292e-05,  5.1710e-05,\n","        -5.9874e-05, -5.0028e-05, -2.9781e-05, -1.8014e-06, -7.9188e-07])\n","gradient values before mask reapp. tensor([ 2.3705e-04, -4.4992e-05,  8.6231e-05,  1.0824e-04,  1.4758e-04,\n","        -4.4482e-05, -2.8287e-05,  3.7388e-05,  1.0934e-05,  1.7740e-04])\n","gradient values before mask reapp. tensor([ 2.3916e-04, -4.5737e-05,  8.7088e-05,  1.0637e-04,  1.4499e-04,\n","        -4.4843e-05, -2.9742e-05,  3.6576e-05,  9.9372e-06,  1.7358e-04])\n","gradient values before mask reapp. tensor([ 1.2982e-04, -5.9802e-05, -9.7176e-05,  7.1038e-05, -5.8320e-06,\n","        -6.8514e-05, -6.2487e-05, -6.9551e-05, -9.0723e-06, -1.0717e-04])\n","gradient values before mask reapp. tensor([ 2.1246e-04, -4.7767e-05,  4.5600e-05,  1.0018e-04,  1.1307e-04,\n","        -4.9486e-05, -3.5175e-05,  1.4010e-05,  6.5801e-06,  1.1530e-04])\n","gradient values before mask reapp. tensor([ 2.4622e-04, -4.3467e-05,  1.0235e-04,  1.1086e-04,  1.5916e-04,\n","        -4.2040e-05, -2.5091e-05,  4.6588e-05,  1.2409e-05,  2.0173e-04])\n","gradient values before mask reapp. tensor([ 1.9526e-04, -4.8732e-05,  1.7831e-05,  9.6099e-05,  8.9647e-05,\n","        -5.2838e-05, -3.9370e-05, -2.0446e-06,  3.6089e-06,  7.5388e-05])\n","gradient values before mask reapp. tensor([ 1.2240e-04, -6.0258e-05, -1.0892e-04,  6.8551e-05, -1.6571e-05,\n","        -6.9521e-05, -6.4057e-05, -7.6336e-05, -1.0386e-05, -1.2455e-04])\n","gradient values before mask reapp. tensor([ 2.3562e-04, -4.1576e-05,  9.0358e-05,  1.1242e-04,  1.5172e-04,\n","        -4.2595e-05, -2.3916e-05,  4.1350e-05,  1.2244e-05,  1.9270e-04])\n","gradient values before mask reapp. tensor([ 2.2265e-04, -4.4732e-05,  6.4996e-05,  1.0507e-04,  1.2771e-04,\n","        -4.6302e-05, -3.0337e-05,  2.5340e-05,  8.5348e-06,  1.4809e-04])\n","gradient values before mask reapp. tensor([ 1.5834e-04, -5.1544e-05, -4.0276e-05,  8.7278e-05,  4.4177e-05,\n","        -5.9194e-05, -4.7141e-05, -3.4012e-05, -1.3018e-06, -6.4740e-06])\n","gradient values before mask reapp. tensor([ 2.2345e-04, -4.5548e-05,  6.5885e-05,  1.0389e-04,  1.2844e-04,\n","        -4.5830e-05, -3.0316e-05,  2.6123e-05,  8.8614e-06,  1.4786e-04])\n","gradient values before mask reapp. tensor([ 2.1511e-04, -4.4130e-05,  5.5062e-05,  1.0501e-04,  1.2048e-04,\n","        -4.6885e-05, -3.0374e-05,  2.0417e-05,  8.1027e-06,  1.3783e-04])\n","gradient values before mask reapp. tensor([ 1.6559e-04, -5.0439e-05, -2.7977e-05,  8.9027e-05,  5.2659e-05,\n","        -5.7437e-05, -4.4910e-05, -2.7216e-05, -3.6554e-07,  1.1524e-05])\n","gradient values before mask reapp. tensor([ 2.0508e-04, -4.3318e-05,  4.3005e-05,  1.0606e-04,  1.1445e-04,\n","        -4.7165e-05, -2.9374e-05,  1.5742e-05,  8.5393e-06,  1.2797e-04])\n","gradient values before mask reapp. tensor([ 2.0088e-04, -4.6202e-05,  3.1553e-05,  9.9828e-05,  1.0112e-04,\n","        -4.9410e-05, -3.4102e-05,  7.3609e-06,  5.9521e-06,  1.0180e-04])\n","gradient values before mask reapp. tensor([ 2.0087e-04, -4.4137e-05,  3.6308e-05,  1.0404e-04,  1.0861e-04,\n","        -4.7896e-05, -3.0444e-05,  1.2108e-05,  7.9448e-06,  1.1706e-04])\n","gradient values before mask reapp. tensor([ 1.8983e-04, -4.8588e-05,  1.1204e-05,  9.4240e-05,  8.2468e-05,\n","        -5.2086e-05, -3.8603e-05, -4.9143e-06,  3.3702e-06,  6.7294e-05])\n","gradient values before mask reapp. tensor([ 1.4835e-04, -4.9990e-05, -5.1153e-05,  8.8006e-05,  3.6558e-05,\n","        -5.9021e-05, -4.5394e-05, -3.8284e-05, -1.1654e-06, -1.4459e-05])\n","gradient values before mask reapp. tensor([ 2.4817e-04, -3.9445e-05,  1.1381e-04,  1.1615e-04,  1.6941e-04,\n","        -3.7895e-05, -1.7809e-05,  5.5999e-05,  1.5285e-05,  2.3020e-04])\n","gradient values before mask reapp. tensor([ 1.8035e-04, -4.6294e-05,  1.5303e-06,  9.7226e-05,  7.8109e-05,\n","        -5.2107e-05, -3.6486e-05, -8.4468e-06,  3.9190e-06,  6.4171e-05])\n","gradient values before mask reapp. tensor([ 1.6362e-04, -4.8808e-05, -2.7227e-05,  9.0765e-05,  5.3628e-05,\n","        -5.5838e-05, -4.1939e-05, -2.5222e-05,  6.5923e-07,  1.8500e-05])\n","gradient values before mask reapp. tensor([ 1.7835e-04, -4.6149e-05, -5.2692e-07,  9.6928e-05,  7.6766e-05,\n","        -5.1983e-05, -3.6057e-05, -9.0780e-06,  3.9829e-06,  6.2217e-05])\n","gradient values before mask reapp. tensor([ 2.1435e-04, -4.0528e-05,  6.2196e-05,  1.1022e-04,  1.2900e-04,\n","        -4.3532e-05, -2.3702e-05,  2.7780e-05,  1.0937e-05,  1.6094e-04])\n","gradient values before mask reapp. tensor([ 1.3709e-04, -4.8739e-05, -6.4792e-05,  8.8837e-05,  2.8074e-05,\n","        -5.9093e-05, -4.4120e-05, -4.4001e-05, -1.0227e-06, -2.5584e-05])\n","gradient values before mask reapp. tensor([ 2.4117e-04, -3.8131e-05,  1.0579e-04,  1.1680e-04,  1.6331e-04,\n","        -3.7777e-05, -1.6645e-05,  5.2539e-05,  1.5149e-05,  2.2427e-04])\n","gradient values before mask reapp. tensor([ 1.7084e-04, -4.4367e-05, -8.7308e-06,  9.8662e-05,  7.1666e-05,\n","        -5.2040e-05, -3.4652e-05, -1.2528e-05,  4.0130e-06,  5.7937e-05])\n","gradient values before mask reapp. tensor([ 1.7745e-04, -4.4997e-05, -5.3428e-07,  9.7762e-05,  7.5932e-05,\n","        -5.1233e-05, -3.4743e-05, -8.8012e-06,  4.0454e-06,  6.5074e-05])\n","gradient values before mask reapp. tensor([ 1.7320e-04, -4.1931e-05, -9.5678e-07,  1.0302e-04,  8.0565e-05,\n","        -5.0110e-05, -3.0775e-05, -6.6925e-06,  5.8251e-06,  7.7071e-05])\n","gradient values before mask reapp. tensor([ 1.7756e-04, -4.5506e-05, -8.5684e-07,  9.6660e-05,  7.5265e-05,\n","        -5.0973e-05, -3.4852e-05, -8.9066e-06,  4.0094e-06,  6.3310e-05])\n","gradient values before mask reapp. tensor([ 2.3209e-04, -3.3933e-05,  9.9216e-05,  1.2231e-04,  1.6217e-04,\n","        -3.6925e-05, -1.2337e-05,  5.1313e-05,  1.6247e-05,  2.3053e-04])\n","gradient values before mask reapp. tensor([ 1.5411e-04, -4.4221e-05, -3.2267e-05,  9.6989e-05,  5.4873e-05,\n","        -5.3638e-05, -3.5569e-05, -2.4083e-05,  2.9097e-06,  3.0093e-05])\n","gradient values before mask reapp. tensor([ 2.8977e-04, -3.0721e-05,  1.9044e-04,  1.3379e-04,  2.3336e-04,\n","        -2.5459e-05,  7.1619e-07,  1.0263e-04,  2.4737e-05,  3.5778e-04])\n","gradient values before mask reapp. tensor([ 1.7464e-04, -4.3951e-05, -3.0869e-06,  9.8327e-05,  7.3279e-05,\n","        -5.0692e-05, -3.3455e-05, -9.5918e-06,  4.0787e-06,  6.4771e-05])\n","gradient values before mask reapp. tensor([ 9.1397e-05, -5.4521e-05, -1.4197e-04,  7.2836e-05, -3.7577e-05,\n","        -6.7771e-05, -5.6889e-05, -8.8263e-05, -9.0786e-06, -1.4334e-04])\n","gradient values before mask reapp. tensor([ 3.1888e-04, -2.0718e-05,  2.5151e-04,  1.5469e-04,  2.9111e-04,\n","        -1.5420e-05,  1.8808e-05,  1.4220e-04,  3.4262e-05,  4.7221e-04])\n","gradient values before mask reapp. tensor([ 1.3995e-04, -4.9804e-05, -6.3488e-05,  8.4630e-05,  2.2331e-05,\n","        -5.8321e-05, -4.5016e-05, -4.4695e-05, -2.3990e-06, -3.0940e-05])\n","gradient values before mask reapp. tensor([ 1.5570e-04, -4.2604e-05, -2.6861e-05,  9.9514e-05,  5.9942e-05,\n","        -5.1895e-05, -3.2518e-05, -1.9946e-05,  4.2278e-06,  4.3514e-05])\n","gradient values before mask reapp. tensor([ 1.7253e-04, -4.3651e-05, -4.1003e-06,  9.8588e-05,  7.3778e-05,\n","        -4.9770e-05, -3.1761e-05, -8.7031e-06,  4.9544e-06,  6.6574e-05])\n","gradient values before mask reapp. tensor([ 2.1122e-04, -3.4450e-05,  6.8965e-05,  1.1893e-04,  1.3906e-04,\n","        -3.9107e-05, -1.4095e-05,  3.6090e-05,  1.4600e-05,  1.9264e-04])\n","gradient values before mask reapp. tensor([ 1.2466e-04, -4.7622e-05, -8.0536e-05,  8.7306e-05,  1.4179e-05,\n","        -5.8755e-05, -4.2652e-05, -5.1069e-05, -1.6654e-06, -4.1813e-05])\n","gradient values before mask reapp. tensor([ 2.7975e-04, -2.3574e-05,  1.8868e-04,  1.4461e-04,  2.3937e-04,\n","        -2.2840e-05,  9.7740e-06,  1.0663e-04,  2.8040e-05,  3.8200e-04])\n","gradient values before mask reapp. tensor([ 1.1886e-04, -5.0081e-05, -9.4438e-05,  8.1542e-05, -9.5717e-07,\n","        -6.0974e-05, -4.7230e-05, -6.0730e-05, -4.4065e-06, -6.9769e-05])\n","gradient values before mask reapp. tensor([ 1.9163e-04, -3.5673e-05,  3.7397e-05,  1.1417e-04,  1.1322e-04,\n","        -4.2484e-05, -1.8291e-05,  1.8332e-05,  1.1563e-05,  1.4820e-04])\n","gradient values before mask reapp. tensor([ 2.1502e-04, -3.0901e-05,  8.0508e-05,  1.2474e-04,  1.5079e-04,\n","        -3.6332e-05, -8.5129e-06,  4.4478e-05,  1.6909e-05,  2.1973e-04])\n","gradient values before mask reapp. tensor([ 1.3563e-04, -4.6933e-05, -6.4240e-05,  8.8384e-05,  2.4898e-05,\n","        -5.6329e-05, -4.0292e-05, -4.2447e-05, -7.0677e-07, -2.0043e-05])\n","gradient values before mask reapp. tensor([ 2.4401e-04, -2.7328e-05,  1.2882e-04,  1.3355e-04,  1.8964e-04,\n","        -2.9906e-05,  1.2140e-07,  7.2190e-05,  2.1794e-05,  2.9303e-04])\n","gradient values before mask reapp. tensor([ 1.5300e-04, -3.9665e-05, -2.5360e-05,  1.0323e-04,  6.3280e-05,\n","        -4.9731e-05, -2.7615e-05, -1.6618e-05,  5.8642e-06,  5.6671e-05])\n","gradient values before mask reapp. tensor([ 2.9191e-04, -2.3181e-05,  2.0735e-04,  1.4608e-04,  2.5322e-04,\n","        -1.9496e-05,  1.3294e-05,  1.1763e-04,  3.0014e-05,  4.0836e-04])\n","gradient values before mask reapp. tensor([ 1.1950e-04, -4.6000e-05, -8.6077e-05,  8.8355e-05,  9.6860e-06,\n","        -5.8127e-05, -4.0663e-05, -5.3101e-05, -1.6318e-06, -4.3290e-05])\n","gradient values before mask reapp. tensor([ 2.1015e-04, -2.9835e-05,  7.5096e-05,  1.2603e-04,  1.4785e-04,\n","        -3.5728e-05, -6.7502e-06,  4.2891e-05,  1.7402e-05,  2.1830e-04])\n","gradient values before mask reapp. tensor([ 1.2138e-04, -4.5126e-05, -8.2398e-05,  8.9708e-05,  1.3174e-05,\n","        -5.7148e-05, -3.9200e-05, -5.0771e-05, -1.0682e-06, -3.5330e-05])\n","gradient values before mask reapp. tensor([ 1.6636e-04, -3.5040e-05,  2.0107e-06,  1.1245e-04,  8.8698e-05,\n","        -4.4749e-05, -1.9020e-05,  1.1339e-06,  1.0125e-05,  1.0885e-04])\n","gradient values before mask reapp. tensor([ 3.2980e-04, -1.5928e-05,  2.7562e-04,  1.6174e-04,  3.1112e-04,\n","        -9.5742e-06,  2.8524e-05,  1.5857e-04,  3.8066e-05,  5.2014e-04])\n","gradient values before mask reapp. tensor([ 1.1021e-04, -4.7586e-05, -1.0356e-04,  8.3852e-05, -6.2567e-06,\n","        -5.9861e-05, -4.3829e-05, -6.3639e-05, -3.8277e-06, -7.0984e-05])\n","gradient values before mask reapp. tensor([ 1.5651e-04, -3.7789e-05, -1.7468e-05,  1.0645e-04,  7.0442e-05,\n","        -4.7206e-05, -2.3577e-05, -1.0718e-05,  7.5644e-06,  7.4710e-05])\n","gradient values before mask reapp. tensor([ 3.0631e-04, -1.5733e-05,  2.4207e-04,  1.6022e-04,  2.8782e-04,\n","        -1.2637e-05,  2.6546e-05,  1.4166e-04,  3.6405e-05,  4.8080e-04])\n","gradient values before mask reapp. tensor([ 1.1927e-04, -4.7022e-05, -8.8707e-05,  8.5939e-05,  5.6162e-06,\n","        -5.7596e-05, -4.0965e-05, -5.4695e-05, -2.0442e-06, -4.8934e-05])\n","gradient values before mask reapp. tensor([ 1.8428e-04, -3.1073e-05,  3.5375e-05,  1.2053e-04,  1.1653e-04,\n","        -3.9638e-05, -1.0694e-05,  2.1625e-05,  1.4263e-05,  1.6505e-04])\n","gradient values before mask reapp. tensor([ 1.4274e-04, -3.8497e-05, -3.8615e-05,  1.0321e-04,  5.3314e-05,\n","        -4.9549e-05, -2.5913e-05, -2.2214e-05,  5.6808e-06,  4.5514e-05])\n","gradient values before mask reapp. tensor([ 2.3625e-04, -2.5462e-05,  1.2107e-04,  1.3515e-04,  1.8517e-04,\n","        -2.8500e-05,  3.8807e-06,  7.0645e-05,  2.2747e-05,  2.9240e-04])\n","gradient values before mask reapp. tensor([ 1.4027e-04, -3.5703e-05, -3.6293e-05,  1.0901e-04,  6.1161e-05,\n","        -4.7698e-05, -2.1088e-05, -1.7893e-05,  8.3068e-06,  6.2369e-05])\n","gradient values before mask reapp. tensor([ 3.6344e-04, -7.9662e-06,  3.3949e-04,  1.7909e-04,  3.6750e-04,\n","         7.6224e-07,  4.5469e-05,  1.9883e-04,  4.6999e-05,  6.3163e-04])\n","gradient values before mask reapp. tensor([ 7.6868e-05, -4.7859e-05, -1.5138e-04,  8.0517e-05, -4.0190e-05,\n","        -6.3920e-05, -4.6202e-05, -8.7223e-05, -6.0672e-06, -1.2802e-04])\n","gradient values before mask reapp. tensor([ 1.7717e-04, -3.2683e-05,  2.1679e-05,  1.1672e-04,  1.0408e-04,\n","        -4.0774e-05, -1.2840e-05,  1.3817e-05,  1.2815e-05,  1.4342e-04])\n","gradient values before mask reapp. tensor([ 1.6054e-04, -3.4007e-05, -5.0778e-06,  1.1260e-04,  8.3000e-05,\n","        -4.3911e-05, -1.6665e-05, -1.1433e-06,  1.0346e-05,  1.0529e-04])\n","gradient values before mask reapp. tensor([ 2.0204e-04, -2.5342e-05,  7.1504e-05,  1.3263e-04,  1.5111e-04,\n","        -3.2643e-05,  1.2381e-06,  4.5804e-05,  2.0392e-05,  2.3469e-04])\n","gradient values before mask reapp. tensor([ 2.6505e-04, -1.9839e-05,  1.7350e-04,  1.4775e-04,  2.3087e-04,\n","        -2.0223e-05,  1.6804e-05,  1.0311e-04,  2.9653e-05,  3.8085e-04])\n","gradient values before mask reapp. tensor([ 5.9363e-06, -4.3833e-05, -3.0703e-04,  2.4288e-05, -2.2658e-04,\n","        -5.9702e-05, -7.8346e-05, -2.0917e-04, -4.4841e-05, -3.8322e-04])\n","gradient values before mask reapp. tensor([ 1.7775e-04, -3.0497e-05,  2.7442e-05,  1.2126e-04,  1.1287e-04,\n","        -3.8317e-05, -7.8464e-06,  2.0033e-05,  1.5388e-05,  1.6184e-04])\n","gradient values before mask reapp. tensor([ 2.4283e-04, -2.3603e-05,  1.3457e-04,  1.3954e-04,  1.9899e-04,\n","        -2.4789e-05,  9.8690e-06,  8.0856e-05,  2.5910e-05,  3.2106e-04])\n","gradient values before mask reapp. tensor([ 1.2008e-04, -3.9807e-05, -7.3936e-05,  9.8807e-05,  2.6448e-05,\n","        -5.1967e-05, -2.8029e-05, -3.9942e-05,  3.7392e-06,  7.8793e-07])\n","gradient values before mask reapp. tensor([ 2.3064e-04, -2.1098e-05,  1.2060e-04,  1.4200e-04,  1.9026e-04,\n","        -2.5914e-05,  1.1142e-05,  7.4539e-05,  2.5516e-05,  3.1111e-04])\n","gradient values before mask reapp. tensor([-2.9317e-05, -4.5836e-05, -3.6070e-04,  1.8007e-05, -2.6615e-04,\n","        -6.5231e-05, -8.3756e-05, -2.3718e-04, -4.8361e-05, -4.5426e-04])\n","gradient values before mask reapp. tensor([ 3.2598e-04, -8.1034e-06,  2.8390e-04,  1.7445e-04,  3.2650e-04,\n","        -3.9823e-06,  4.2151e-05,  1.7021e-04,  4.3522e-05,  5.6441e-04])\n","gradient values before mask reapp. tensor([-1.9720e-06, -4.3678e-05, -3.1691e-04,  2.4720e-05, -2.3193e-04,\n","        -6.0287e-05, -7.7194e-05, -2.1255e-04, -4.4349e-05, -3.9143e-04])\n","gradient values before mask reapp. tensor([ 2.0458e-04, -2.5069e-05,  7.6742e-05,  1.3340e-04,  1.5598e-04,\n","        -3.0572e-05,  4.5127e-06,  5.0640e-05,  2.1989e-05,  2.4585e-04])\n","gradient values before mask reapp. tensor([ 2.2961e-04, -2.3563e-05,  1.1487e-04,  1.3772e-04,  1.8372e-04,\n","        -2.6332e-05,  9.0595e-06,  7.0834e-05,  2.4615e-05,  2.9742e-04])\n","gradient values before mask reapp. tensor([-2.9154e-05, -4.7313e-05, -3.6142e-04,  1.7028e-05, -2.6675e-04,\n","        -6.5848e-05, -8.3944e-05, -2.3665e-04, -4.7955e-05, -4.5720e-04])\n","gradient values before mask reapp. tensor([ 2.4867e-04, -1.4551e-05,  1.5904e-04,  1.5590e-04,  2.2814e-04,\n","        -1.8671e-05,  2.4275e-05,  1.0059e-04,  3.2354e-05,  3.8720e-04])\n","gradient values before mask reapp. tensor([ 8.9804e-05, -3.9700e-05, -1.1859e-04,  9.5287e-05, -6.5853e-06,\n","        -5.6047e-05, -3.0688e-05, -6.2986e-05,  8.0805e-07, -5.3157e-05])\n","gradient values before mask reapp. tensor([ 2.4392e-04, -1.5735e-05,  1.4860e-04,  1.5241e-04,  2.1718e-04,\n","        -2.0231e-05,  2.1481e-05,  9.3495e-05,  3.0355e-05,  3.6827e-04])\n","gradient values before mask reapp. tensor([-2.0399e-05, -4.0895e-05, -3.3840e-04,  2.7862e-05, -2.4304e-04,\n","        -6.0901e-05, -7.4111e-05, -2.2079e-04, -4.3783e-05, -4.0534e-04])\n","gradient values before mask reapp. tensor([ 2.7770e-04, -1.2578e-05,  2.0369e-04,  1.6135e-04,  2.6165e-04,\n","        -1.2880e-05,  3.0901e-05,  1.2524e-04,  3.5987e-05,  4.4979e-04])\n","gradient values before mask reapp. tensor([ 7.4649e-05, -4.1367e-05, -1.4432e-04,  9.1071e-05, -2.6803e-05,\n","        -5.8654e-05, -3.4054e-05, -7.7175e-05, -1.3595e-06, -8.9241e-05])\n","gradient values before mask reapp. tensor([ 2.9555e-04, -7.7604e-06,  2.3880e-04,  1.7218e-04,  2.9442e-04,\n","        -7.2875e-06,  4.0620e-05,  1.4772e-04,  4.1304e-05,  5.1344e-04])\n","gradient values before mask reapp. tensor([ 1.4383e-05, -3.5982e-05, -2.7745e-04,  4.1576e-05, -1.8977e-04,\n","        -5.2495e-05, -6.0978e-05, -1.8348e-04, -3.5870e-05, -3.0662e-04])\n","gradient values before mask reapp. tensor([ 1.6201e-04, -2.5896e-05,  1.1531e-05,  1.2739e-04,  1.0717e-04,\n","        -3.6565e-05, -4.6268e-07,  1.6481e-05,  1.7485e-05,  1.6440e-04])\n","gradient values before mask reapp. tensor([ 2.4574e-04, -1.6859e-05,  1.4989e-04,  1.5147e-04,  2.1953e-04,\n","        -1.8796e-05,  2.2919e-05,  9.5495e-05,  3.1449e-05,  3.7145e-04])\n","gradient values before mask reapp. tensor([ 1.9409e-07, -4.0668e-05, -3.0667e-04,  3.2881e-05, -2.1623e-04,\n","        -5.7048e-05, -6.8425e-05, -2.0122e-04, -3.9652e-05, -3.5856e-04])\n","gradient values before mask reapp. tensor([ 2.5255e-04, -1.1500e-05,  1.6861e-04,  1.6142e-04,  2.3928e-04,\n","        -1.5154e-05,  3.0951e-05,  1.0875e-04,  3.5086e-05,  4.1425e-04])\n","gradient values before mask reapp. tensor([ 1.8198e-05, -3.4526e-05, -2.7071e-04,  4.4280e-05, -1.8371e-04,\n","        -5.0854e-05, -5.8044e-05, -1.7881e-04, -3.4792e-05, -2.9220e-04])\n","gradient values before mask reapp. tensor([ 2.2769e-04, -1.7325e-05,  1.2015e-04,  1.4771e-04,  1.9454e-04,\n","        -2.2143e-05,  1.9206e-05,  7.8430e-05,  2.8173e-05,  3.3063e-04])\n","gradient values before mask reapp. tensor([-3.3180e-05, -4.0078e-05, -3.5571e-04,  3.0005e-05, -2.5144e-04,\n","        -6.1648e-05, -7.1788e-05, -2.2700e-04, -4.2937e-05, -4.1693e-04])\n","gradient values before mask reapp. tensor([ 1.7211e-04, -2.3078e-05,  2.9944e-05,  1.3324e-04,  1.2511e-04,\n","        -3.2566e-05,  5.9738e-06,  2.8608e-05,  2.0578e-05,  2.0119e-04])\n","gradient values before mask reapp. tensor([ 3.3136e-04, -2.4195e-06,  2.9948e-04,  1.8459e-04,  3.4577e-04,\n","         2.3275e-06,  5.4525e-05,  1.8437e-04,  4.8581e-05,  6.1227e-04])\n","gradient values before mask reapp. tensor([-6.1578e-05, -4.7314e-05, -4.0984e-04,  1.5527e-05, -2.9880e-04,\n","        -6.9579e-05, -8.4274e-05, -2.5931e-04, -4.9474e-05, -5.0897e-04])\n","gradient values before mask reapp. tensor([ 2.4818e-04, -1.3490e-05,  1.5674e-04,  1.5680e-04,  2.2753e-04,\n","        -1.6064e-05,  2.8495e-05,  1.0121e-04,  3.3279e-05,  3.9381e-04])\n","gradient values before mask reapp. tensor([ 1.1126e-04, -3.4256e-05, -8.1614e-05,  1.0601e-04,  2.6257e-05,\n","        -4.8058e-05, -1.8012e-05, -3.8987e-05,  6.2813e-06,  1.7935e-05])\n","gradient values before mask reapp. tensor([ 2.1133e-04, -1.5483e-05,  9.8873e-05,  1.4983e-04,  1.8342e-04,\n","        -2.2584e-05,  2.1385e-05,  6.9584e-05,  2.8530e-05,  3.1537e-04])\n","gradient values before mask reapp. tensor([ 7.1741e-05, -2.5315e-05, -1.7628e-04,  6.6520e-05, -1.0192e-04,\n","        -3.7374e-05, -3.6583e-05, -1.2136e-04, -2.3008e-05, -1.3611e-04])\n","gradient values before mask reapp. tensor([ 6.8441e-05, -3.7121e-05, -1.4852e-04,  9.7866e-05, -2.2925e-05,\n","        -5.5135e-05, -2.5762e-05, -7.4810e-05,  1.5791e-06, -7.1511e-05])\n","gradient values before mask reapp. tensor([ 3.0104e-04, -3.7296e-06,  2.5081e-04,  1.7881e-04,  3.0784e-04,\n","        -2.5806e-06,  4.9453e-05,  1.5784e-04,  4.4487e-05,  5.4803e-04])\n","gradient values before mask reapp. tensor([-4.7979e-05, -4.0325e-05, -3.7803e-04,  2.9413e-05, -2.6574e-04,\n","        -6.3497e-05, -7.1650e-05, -2.3704e-04, -4.3407e-05, -4.4032e-04])\n","gradient values before mask reapp. tensor([3.6802e-04, 9.3713e-06, 3.7208e-04, 2.0914e-04, 4.1395e-04, 1.4766e-05,\n","        7.6690e-05, 2.3122e-04, 5.9660e-05, 7.4989e-04])\n","gradient values before mask reapp. tensor([-1.1419e-04, -5.4106e-05, -4.9683e-04,  1.3259e-06, -3.6539e-04,\n","        -8.0622e-05, -9.6721e-05, -3.0628e-04, -5.6380e-05, -6.3433e-04])\n","gradient values before mask reapp. tensor([ 1.6237e-04, -1.6029e-05,  2.6067e-05,  1.4476e-04,  1.3224e-04,\n","        -2.9463e-05,  1.6226e-05,  3.2142e-05,  2.4317e-05,  2.2734e-04])\n","gradient values before mask reapp. tensor([4.4133e-04, 1.6075e-05, 4.9172e-04, 2.2804e-04, 5.0993e-04, 3.0142e-05,\n","        9.6471e-05, 2.9968e-04, 7.1534e-05, 9.2538e-04])\n","gradient values before mask reapp. tensor([-6.8191e-05, -4.6349e-05, -4.1760e-04,  1.8632e-05, -2.9983e-04,\n","        -6.9508e-05, -8.0582e-05, -2.6003e-04, -4.7825e-05, -5.0774e-04])\n","gradient values before mask reapp. tensor([ 1.6703e-04, -1.9201e-05,  2.7197e-05,  1.4001e-04,  1.2936e-04,\n","        -2.9656e-05,  1.3638e-05,  3.1561e-05,  2.3402e-05,  2.1876e-04])\n","gradient values before mask reapp. tensor([ 1.9642e-04, -4.8339e-06,  4.2567e-05,  1.1554e-04,  8.5145e-05,\n","        -6.4287e-06,  1.0256e-05,  9.8969e-06,  3.1381e-06,  2.1790e-04])\n","gradient values before mask reapp. tensor([-7.0870e-05, -4.3473e-05, -4.1619e-04,  2.4006e-05, -2.9262e-04,\n","        -6.7028e-05, -7.5457e-05, -2.5634e-04, -4.5230e-05, -4.9097e-04])\n","gradient values before mask reapp. tensor([3.8426e-04, 1.1755e-05, 4.0044e-04, 2.1503e-04, 4.3846e-04, 1.9374e-05,\n","        8.4167e-05, 2.4931e-04, 6.3551e-05, 7.9736e-04])\n","gradient values before mask reapp. tensor([-4.7168e-05, -4.0720e-05, -3.7659e-04,  3.0922e-05, -2.6178e-04,\n","        -6.2852e-05, -6.8823e-05, -2.3358e-04, -4.1672e-05, -4.3322e-04])\n","gradient values before mask reapp. tensor([ 1.9316e-04, -1.6203e-05,  6.9734e-05,  1.4764e-04,  1.6384e-04,\n","        -2.3733e-05,  2.1815e-05,  5.6242e-05,  2.7850e-05,  2.8442e-04])\n","gradient values before mask reapp. tensor([ 2.7859e-04, -1.8939e-06,  2.2059e-04,  1.8069e-04,  2.9038e-04,\n","        -3.8372e-06,  5.2200e-05,  1.4537e-04,  4.4659e-05,  5.2361e-04])\n","gradient values before mask reapp. tensor([-3.7045e-05, -3.5434e-05, -3.5276e-04,  4.1214e-05, -2.3603e-04,\n","        -5.7168e-05, -5.9076e-05, -2.1687e-04, -3.6739e-05, -3.8055e-04])\n","gradient values before mask reapp. tensor([4.1629e-04, 1.5858e-05, 4.5484e-04, 2.2597e-04, 4.8497e-04, 2.7291e-05,\n","        9.5684e-05, 2.8216e-04, 7.0177e-05, 8.8395e-04])\n","gradient values before mask reapp. tensor([ 1.8176e-06, -3.3175e-05, -2.9190e-04,  4.9487e-05, -1.9025e-04,\n","        -5.1296e-05, -5.1194e-05, -1.8309e-04, -3.1839e-05, -2.9759e-04])\n","gradient values before mask reapp. tensor([ 2.7455e-05, -2.4600e-05, -2.3895e-04,  6.6255e-05, -1.4085e-04,\n","        -4.2006e-05, -3.5681e-05, -1.4928e-04, -2.3949e-05, -1.9959e-04])\n","gradient values before mask reapp. tensor([3.2923e-04, 5.7017e-06, 3.0843e-04, 1.9990e-04, 3.6611e-04, 8.7512e-06,\n","        7.0828e-05, 1.9806e-04, 5.5417e-05, 6.6571e-04])\n","gradient values before mask reapp. tensor([ 3.7686e-05, -2.5869e-05, -2.2675e-04,  6.5635e-05, -1.3334e-04,\n","        -4.1409e-05, -3.5909e-05, -1.4354e-04, -2.3606e-05, -1.8792e-04])\n","gradient values before mask reapp. tensor([ 3.3790e-05, -2.3812e-05, -2.2705e-04,  6.9952e-05, -1.2754e-04,\n","        -3.9703e-05, -3.1751e-05, -1.4065e-04, -2.1181e-05, -1.7634e-04])\n","gradient values before mask reapp. tensor([3.6340e-04, 1.0393e-05, 3.6737e-04, 2.1173e-04, 4.1511e-04, 1.6670e-05,\n","        8.2703e-05, 2.3329e-04, 6.2114e-05, 7.5755e-04])\n","gradient values before mask reapp. tensor([-1.3448e-05, -2.9999e-05, -3.0860e-04,  5.4170e-05, -1.9579e-04,\n","        -5.0720e-05, -4.6865e-05, -1.8855e-04, -3.0279e-05, -3.0138e-04])\n","gradient values before mask reapp. tensor([ 1.3549e-04, -1.0867e-05, -5.6854e-05,  1.0182e-04,  9.2146e-06,\n","        -1.8394e-05, -1.8042e-06, -4.3049e-05, -4.3907e-06,  8.0733e-05])\n","gradient values before mask reapp. tensor([ 5.6831e-05, -1.3583e-05, -1.7807e-04,  8.8029e-05, -8.2612e-05,\n","        -3.1342e-05, -1.6046e-05, -1.0972e-04, -1.4421e-05, -8.0687e-05])\n","gradient values before mask reapp. tensor([ 1.7676e-04, -1.5159e-05,  4.7101e-05,  1.4815e-04,  1.4950e-04,\n","        -2.5115e-05,  2.3866e-05,  4.6989e-05,  2.7625e-05,  2.6441e-04])\n","gradient values before mask reapp. tensor([ 1.9310e-04,  2.7845e-06,  4.9670e-05,  1.3020e-04,  1.0345e-04,\n","        -1.6716e-06,  2.4251e-05,  2.1524e-05,  9.1385e-06,  2.6463e-04])\n","gradient values before mask reapp. tensor([ 3.9907e-05, -1.8834e-05, -2.1134e-04,  7.9015e-05, -1.1046e-04,\n","        -3.6306e-05, -2.3654e-05, -1.2898e-04, -1.7944e-05, -1.3720e-04])\n","gradient values before mask reapp. tensor([ 1.8284e-04, -9.9527e-06,  6.5229e-05,  1.5884e-04,  1.7147e-04,\n","        -2.1262e-05,  3.2736e-05,  6.0816e-05,  3.2112e-05,  3.0968e-04])\n","gradient values before mask reapp. tensor([ 1.9563e-04,  1.9339e-06,  5.3020e-05,  1.3079e-04,  1.0801e-04,\n","        -1.0576e-06,  2.5424e-05,  2.4746e-05,  1.0417e-05,  2.7034e-04])\n","gradient values before mask reapp. tensor([ 8.4668e-05, -1.4992e-05, -1.3692e-04,  9.1789e-05, -4.8516e-05,\n","        -2.7121e-05, -1.0541e-05, -8.4992e-05, -9.6024e-06, -2.6092e-05])\n","gradient values before mask reapp. tensor([ 6.1489e-05, -1.4706e-05, -1.7241e-04,  8.8636e-05, -7.6655e-05,\n","        -3.0906e-05, -1.4390e-05, -1.0501e-04, -1.3027e-05, -7.2005e-05])\n","gradient values before mask reapp. tensor([2.8174e-04, 3.5577e-06, 2.3472e-04, 1.9346e-04, 3.1398e-04, 1.7972e-06,\n","        6.5960e-05, 1.6112e-04, 5.1439e-05, 5.7488e-04])\n","gradient values before mask reapp. tensor([ 1.0518e-04, -1.1348e-05, -1.0033e-04,  1.0103e-04, -1.5759e-05,\n","        -2.1757e-05, -1.8731e-06, -6.2397e-05, -4.6471e-06,  3.5936e-05])\n","gradient values before mask reapp. tensor([ 6.0709e-05, -1.5398e-05, -1.7399e-04,  8.8442e-05, -7.6763e-05,\n","        -3.1128e-05, -1.4050e-05, -1.0496e-04, -1.2581e-05, -7.3515e-05])\n","gradient values before mask reapp. tensor([2.0598e-04, 9.8479e-06, 8.1671e-05, 1.4591e-04, 1.4101e-04, 5.9830e-06,\n","        3.9394e-05, 4.6205e-05, 1.7144e-05, 3.3999e-04])\n","gradient values before mask reapp. tensor([ 1.1845e-04, -1.3949e-05, -8.2779e-05,  1.0006e-04, -2.5730e-06,\n","        -2.0761e-05, -1.1470e-06, -5.2028e-05, -2.9318e-06,  5.2949e-05])\n","gradient values before mask reapp. tensor([ 5.8765e-05, -1.2385e-05, -1.7175e-04,  9.3693e-05, -7.0555e-05,\n","        -2.9423e-05, -9.3479e-06, -1.0120e-04, -1.0600e-05, -5.7753e-05])\n","gradient values before mask reapp. tensor([2.8297e-04, 1.2119e-05, 2.0079e-04, 1.5946e-04, 2.3216e-04, 1.7949e-05,\n","        5.4027e-05, 1.1279e-04, 2.7318e-05, 4.9881e-04])\n","gradient values before mask reapp. tensor([ 9.9320e-05, -8.6212e-06, -1.0627e-04,  1.0447e-04, -1.8275e-05,\n","        -2.1274e-05,  1.3312e-06, -6.3885e-05, -4.2621e-06,  3.8343e-05])\n","gradient values before mask reapp. tensor([-1.1341e-04, -4.3308e-05, -4.7448e-04,  2.7449e-05, -3.2044e-04,\n","        -7.0958e-05, -6.9642e-05, -2.7718e-04, -4.2584e-05, -5.3781e-04])\n","gradient values before mask reapp. tensor([6.0462e-04, 5.2366e-05, 7.9559e-04, 3.1222e-04, 7.8652e-04, 7.7269e-05,\n","        1.7748e-04, 4.9249e-04, 1.1497e-04, 1.4604e-03])\n","gradient values before mask reapp. tensor([-1.1688e-04, -4.8477e-05, -4.8885e-04,  1.9000e-05, -3.3779e-04,\n","        -7.5084e-05, -7.6925e-05, -2.8767e-04, -4.6036e-05, -5.7470e-04])\n","gradient values before mask reapp. tensor([ 1.4107e-04,  1.9010e-06, -2.5302e-05,  1.2782e-04,  5.6920e-05,\n","        -8.2341e-06,  2.3280e-05, -1.2362e-05,  7.6938e-06,  1.8289e-04])\n","gradient values before mask reapp. tensor([ 2.6143e-05, -2.6796e-05, -2.3997e-04,  7.1613e-05, -1.2759e-04,\n","        -4.0680e-05, -2.7157e-05, -1.4042e-04, -1.7498e-05, -1.8121e-04])\n","gradient values before mask reapp. tensor([2.3776e-04, 1.4191e-05, 1.3893e-04, 1.5967e-04, 1.9254e-04, 1.2860e-05,\n","        5.3445e-05, 8.3464e-05, 2.5380e-05, 4.3461e-04])\n","gradient values before mask reapp. tensor([-8.6837e-06, -2.1603e-05, -2.8363e-04,  7.5674e-05, -1.5374e-04,\n","        -4.2634e-05, -2.5000e-05, -1.6109e-04, -1.8576e-05, -2.1696e-04])\n","gradient values before mask reapp. tensor([4.6836e-04, 2.8904e-05, 5.5603e-04, 2.5987e-04, 5.8787e-04, 4.5780e-05,\n","        1.3143e-04, 3.5350e-04, 8.9588e-05, 1.0833e-03])\n","gradient values before mask reapp. tensor([ 8.8862e-05, -1.6537e-05, -1.3186e-04,  9.4727e-05, -3.9589e-05,\n","        -2.6763e-05, -5.7975e-06, -7.7361e-05, -6.3294e-06, -1.1446e-05])\n","gradient values before mask reapp. tensor([-5.5537e-05, -2.4144e-05, -3.5572e-04,  6.7177e-05, -2.0837e-04,\n","        -5.1353e-05, -3.3475e-05, -1.9976e-04, -2.4246e-05, -3.1469e-04])\n","gradient values before mask reapp. tensor([3.7219e-04, 2.3902e-05, 3.5645e-04, 1.9367e-04, 3.6936e-04, 3.9523e-05,\n","        8.8158e-05, 2.0894e-04, 4.7939e-05, 7.5086e-04])\n","gradient values before mask reapp. tensor([ 7.4092e-05, -1.1804e-05, -1.4554e-04,  1.0089e-04, -4.3624e-05,\n","        -2.6180e-05, -8.2357e-07, -8.1421e-05, -5.0207e-06, -1.0361e-05])\n","gradient values before mask reapp. tensor([-1.1394e-04, -3.8618e-05, -4.6421e-04,  3.8966e-05, -3.0112e-04,\n","        -6.7983e-05, -5.8409e-05, -2.6398e-04, -3.6772e-05, -4.9768e-04])\n","gradient values before mask reapp. tensor([3.2866e-04, 3.2049e-05, 3.0081e-04, 1.9885e-04, 3.3061e-04, 3.6060e-05,\n","        8.9761e-05, 1.8029e-04, 4.4398e-05, 7.0264e-04])\n","gradient values before mask reapp. tensor([-4.6497e-05, -3.2247e-05, -3.5688e-04,  5.5888e-05, -2.1771e-04,\n","        -5.4937e-05, -4.2172e-05, -2.0443e-04, -2.7458e-05, -3.4252e-04])\n","gradient values before mask reapp. tensor([1.9217e-04, 1.4174e-05, 6.9840e-05, 1.5519e-04, 1.4332e-04, 5.9808e-06,\n","        4.8870e-05, 4.7583e-05, 2.0848e-05, 3.5208e-04])\n","gradient values before mask reapp. tensor([-9.8169e-06, -2.1763e-05, -2.8688e-04,  7.6327e-05, -1.5501e-04,\n","        -4.3696e-05, -2.3909e-05, -1.6180e-04, -1.8489e-05, -2.1778e-04])\n","gradient values before mask reapp. tensor([4.1909e-04, 4.3749e-05, 4.5314e-04, 2.2862e-04, 4.5798e-04, 5.6508e-05,\n","        1.1857e-04, 2.6929e-04, 6.0976e-05, 9.3871e-04])\n","gradient values before mask reapp. tensor([-1.5711e-04, -4.8513e-05, -5.4656e-04,  1.9009e-05, -3.7035e-04,\n","        -7.9148e-05, -7.5844e-05, -3.1277e-04, -4.6107e-05, -6.3125e-04])\n","gradient values before mask reapp. tensor([3.5236e-04, 3.6596e-05, 3.4397e-04, 2.1053e-04, 3.7231e-04, 4.2920e-05,\n","        1.0155e-04, 2.0821e-04, 5.1053e-05, 7.7952e-04])\n","gradient values before mask reapp. tensor([-7.4130e-05, -3.7588e-05, -4.0609e-04,  4.5759e-05, -2.5564e-04,\n","        -6.1354e-05, -5.0384e-05, -2.3154e-04, -3.1739e-05, -4.1713e-04])\n","gradient values before mask reapp. tensor([3.3735e-04, 3.1728e-05, 3.1377e-04, 2.0201e-04, 3.4643e-04, 3.8204e-05,\n","        9.4124e-05, 1.9020e-04, 4.7554e-05, 7.2732e-04])\n","gradient values before mask reapp. tensor([ 9.5871e-05, -5.0157e-06, -1.0233e-04,  1.1733e-04,  3.3190e-06,\n","        -1.7623e-05,  1.5146e-05, -5.1144e-05,  3.6425e-06,  7.9813e-05])\n","gradient values before mask reapp. tensor([ 1.0212e-04, -4.0183e-06, -9.0073e-05,  1.1988e-04,  1.4056e-05,\n","        -1.6551e-05,  1.7887e-05, -4.3241e-05,  5.1578e-06,  9.8743e-05])\n","gradient values before mask reapp. tensor([2.4899e-04, 1.5330e-05, 1.5726e-04, 1.6753e-04, 2.1641e-04, 1.6013e-05,\n","        6.2569e-05, 9.9225e-05, 3.0744e-05, 4.7748e-04])\n","gradient values before mask reapp. tensor([ 1.3942e-04,  5.8936e-06, -2.0370e-05,  1.4016e-04,  7.6742e-05,\n","        -4.7750e-06,  3.6094e-05, -6.2602e-07,  1.4467e-05,  2.2325e-04])\n","gradient values before mask reapp. tensor([ 5.2430e-05, -1.5263e-05, -1.8112e-04,  9.7835e-05, -6.2668e-05,\n","        -3.0174e-05, -1.8153e-06, -9.6414e-05, -4.9608e-06, -5.1456e-05])\n","gradient values before mask reapp. tensor([ 1.0917e-04,  5.2816e-06, -6.6833e-05,  1.3559e-04,  4.1797e-05,\n","        -1.0330e-05,  3.0861e-05, -2.6253e-05,  1.0469e-05,  1.6271e-04])\n","gradient values before mask reapp. tensor([3.2770e-04, 2.8834e-05, 2.9548e-04, 1.9874e-04, 3.3393e-04, 3.5158e-05,\n","        9.1780e-05, 1.8152e-04, 4.6688e-05, 7.0058e-04])\n","gradient values before mask reapp. tensor([ 5.0384e-05, -1.1237e-05, -1.7935e-04,  1.0363e-04, -5.8008e-05,\n","        -2.8760e-05,  2.7477e-06, -9.3783e-05, -3.7899e-06, -3.5710e-05])\n","gradient values before mask reapp. tensor([ 6.8764e-05, -4.5269e-06, -1.4271e-04,  1.1624e-04, -2.3264e-05,\n","        -2.2058e-05,  1.3588e-05, -7.1228e-05,  1.4581e-06,  3.5045e-05])\n","gradient values before mask reapp. tensor([2.2053e-04, 1.5495e-05, 1.1307e-04, 1.6482e-04, 1.8460e-04, 1.1265e-05,\n","        5.9440e-05, 7.5903e-05, 2.7422e-05, 4.2443e-04])\n","gradient values before mask reapp. tensor([ 2.3628e-05, -1.2772e-05, -2.2233e-04,  9.8941e-05, -8.7551e-05,\n","        -3.2284e-05, -1.6140e-06, -1.1710e-04, -6.4316e-06, -8.9186e-05])\n","gradient values before mask reapp. tensor([4.0319e-04, 3.7439e-05, 4.2285e-04, 2.2338e-04, 4.4349e-04, 5.2576e-05,\n","        1.1652e-04, 2.5737e-04, 6.1792e-05, 8.9922e-04])\n","gradient values before mask reapp. tensor([ 1.7102e-04,  1.0666e-06,  1.9733e-05,  1.3929e-04,  1.0685e-04,\n","        -3.0850e-06,  3.7617e-05,  2.1689e-05,  1.7560e-05,  2.6508e-04])\n","gradient values before mask reapp. tensor([-2.2105e-05, -2.2656e-05, -3.0399e-04,  7.9113e-05, -1.5696e-04,\n","        -4.5031e-05, -1.8970e-05, -1.6418e-04, -1.5558e-05, -2.2492e-04])\n","gradient values before mask reapp. tensor([2.7470e-04, 2.4823e-05, 2.1092e-04, 1.8868e-04, 2.7294e-04, 2.5691e-05,\n","        8.2405e-05, 1.3664e-04, 4.0867e-05, 5.8880e-04])\n","gradient values before mask reapp. tensor([ 1.6275e-04,  4.8224e-06,  1.5147e-05,  1.4558e-04,  1.1093e-04,\n","        -1.3654e-06,  4.3445e-05,  2.3242e-05,  2.0110e-05,  2.7681e-04])\n","gradient values before mask reapp. tensor([ 5.9747e-05, -9.6807e-06, -1.6213e-04,  1.1013e-04, -3.7012e-05,\n","        -2.5838e-05,  9.6711e-06, -8.0500e-05,  4.6552e-07,  1.2514e-06])\n","gradient values before mask reapp. tensor([1.9603e-04, 1.2001e-05, 7.3839e-05, 1.6087e-04, 1.6193e-04, 7.2665e-06,\n","        5.6672e-05, 5.7584e-05, 2.6958e-05, 3.7711e-04])\n","gradient values before mask reapp. tensor([2.8345e-04, 2.7613e-05, 2.2896e-04, 1.9522e-04, 2.9167e-04, 2.8840e-05,\n","        8.9010e-05, 1.4959e-04, 4.4252e-05, 6.2455e-04])\n","gradient values before mask reapp. tensor([-1.2786e-04, -4.0838e-05, -4.8785e-04,  4.2075e-05, -3.0361e-04,\n","        -7.0176e-05, -5.2867e-05, -2.6858e-04, -3.3242e-05, -5.0846e-04])\n","gradient values before mask reapp. tensor([3.1174e-04, 3.5352e-05, 2.8129e-04, 2.0985e-04, 3.3608e-04, 3.6157e-05,\n","        1.0152e-04, 1.8041e-04, 4.9932e-05, 7.1474e-04])\n","gradient values before mask reapp. tensor([ 4.2445e-05, -8.8481e-06, -1.8635e-04,  1.1120e-04, -4.9750e-05,\n","        -2.7184e-05,  1.0612e-05, -9.1112e-05,  4.9780e-07, -2.0093e-05])\n","gradient values before mask reapp. tensor([4.5124e-04, 4.3539e-05, 5.0449e-04, 2.4160e-04, 5.1571e-04, 6.2781e-05,\n","        1.3465e-04, 3.0799e-04, 7.2175e-05, 1.0315e-03])\n","gradient values before mask reapp. tensor([-2.5211e-05, -2.6040e-05, -3.1566e-04,  7.6836e-05, -1.6251e-04,\n","        -4.7167e-05, -2.0644e-05, -1.6965e-04, -1.5637e-05, -2.4046e-04])\n","gradient values before mask reapp. tensor([ 1.0547e-04, -1.2385e-06, -8.0172e-05,  1.3121e-04,  3.8241e-05,\n","        -1.3797e-05,  3.0106e-05, -2.9078e-05,  1.1815e-05,  1.4207e-04])\n","gradient values before mask reapp. tensor([2.1989e-04, 1.3571e-05, 1.1250e-04, 1.6861e-04, 1.9755e-04, 1.1988e-05,\n","        6.5333e-05, 8.2350e-05, 3.2362e-05, 4.3890e-04])\n","gradient values before mask reapp. tensor([1.9637e-04, 8.2377e-06, 7.1296e-05, 1.5811e-04, 1.6286e-04, 5.3564e-06,\n","        5.6591e-05, 5.9106e-05, 2.7887e-05, 3.6913e-04])\n","gradient values before mask reapp. tensor([-9.7842e-06, -1.8328e-05, -2.7884e-04,  9.2744e-05, -1.2187e-04,\n","        -3.9705e-05, -5.9238e-06, -1.4334e-04, -8.0491e-06, -1.6060e-04])\n","gradient values before mask reapp. tensor([2.5921e-04, 1.9853e-05, 1.8080e-04, 1.8329e-04, 2.5515e-04, 2.0997e-05,\n","        7.9479e-05, 1.2302e-04, 3.9951e-05, 5.4734e-04])\n","gradient values before mask reapp. tensor([ 1.1953e-04, -4.0008e-07, -5.9974e-05,  1.3481e-04,  5.5119e-05,\n","        -1.1618e-05,  3.3777e-05, -1.7350e-05,  1.3758e-05,  1.7290e-04])\n","gradient values before mask reapp. tensor([ 8.8046e-05, -3.8802e-06, -1.1226e-04,  1.2610e-04,  1.5029e-05,\n","        -1.7773e-05,  2.5633e-05, -4.6849e-05,  9.0968e-06,  9.7697e-05])\n","gradient values before mask reapp. tensor([ 1.3220e-04,  5.6007e-06, -3.3279e-05,  1.4527e-04,  8.1324e-05,\n","        -6.5702e-06,  4.2794e-05, -5.5958e-07,  1.7644e-05,  2.2761e-04])\n","gradient values before mask reapp. tensor([2.8230e-04, 2.6225e-05, 2.2045e-04, 1.9422e-04, 2.8740e-04, 2.6602e-05,\n","        8.8791e-05, 1.4541e-04, 4.3307e-05, 6.1536e-04])\n","gradient values before mask reapp. tensor([-8.4568e-05, -2.7977e-05, -4.0802e-04,  6.9335e-05, -2.2335e-04,\n","        -5.4817e-05, -2.7049e-05, -2.1710e-04, -2.0462e-05, -3.5044e-04])\n","gradient values before mask reapp. tensor([5.6886e-04, 5.8110e-05, 7.0121e-04, 2.8134e-04, 6.8483e-04, 8.9091e-05,\n","        1.7378e-04, 4.2484e-04, 9.4853e-05, 1.3417e-03])\n","gradient values before mask reapp. tensor([-1.0191e-04, -4.0513e-05, -4.5403e-04,  4.8093e-05, -2.7181e-04,\n","        -6.6064e-05, -4.5625e-05, -2.4804e-04, -2.9169e-05, -4.5329e-04])\n","gradient values before mask reapp. tensor([2.4602e-04, 2.4871e-05, 1.6661e-04, 1.9085e-04, 2.5472e-04, 2.2801e-05,\n","        8.6117e-05, 1.1931e-04, 4.1961e-05, 5.5413e-04])\n","gradient values before mask reapp. tensor([ 7.5805e-05, -1.7767e-05, -1.5220e-04,  1.0600e-04, -2.2223e-05,\n","        -2.6483e-05,  9.9881e-06, -7.1922e-05,  3.2407e-06,  8.7972e-06])\n","gradient values before mask reapp. tensor([2.0247e-04, 1.4586e-05, 8.6631e-05, 1.7137e-04, 1.8845e-04, 1.0520e-05,\n","        6.8446e-05, 7.2421e-05, 3.3278e-05, 4.2264e-04])\n","gradient values before mask reapp. tensor([ 7.0106e-05, -1.5463e-05, -1.5661e-04,  1.0911e-04, -2.2209e-05,\n","        -2.6359e-05,  1.2641e-05, -7.2638e-05,  3.9420e-06,  1.2083e-05])\n","gradient values before mask reapp. tensor([1.6839e-04, 1.2770e-05, 3.0587e-05, 1.6355e-04, 1.4267e-04, 3.5417e-06,\n","        6.0159e-05, 4.0002e-05, 2.7222e-05, 3.4338e-04])\n","gradient values before mask reapp. tensor([ 5.0403e-05, -1.9766e-05, -1.9419e-04,  9.9651e-05, -5.5620e-05,\n","        -3.2229e-05,  4.0513e-06, -9.5436e-05, -1.0732e-06, -5.1250e-05])\n","gradient values before mask reapp. tensor([1.7683e-04, 1.3372e-05, 4.2672e-05, 1.6540e-04, 1.5288e-04, 5.0684e-06,\n","        6.2139e-05, 4.6652e-05, 2.8234e-05, 3.6162e-04])\n"]},{"output_type":"display_data","data":{"text/plain":["'40.0% done'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{}},{"output_type":"stream","name":"stdout","text":["sc1 weights:  torch.Size([100, 612])\n","sc2 weights:  torch.Size([1, 100])\n","first ten digits of weight at init tensor([ 4.7080e-04,  5.1068e-04,  4.1066e-04,  1.5612e-03,  3.4589e-04,\n","        -1.5422e-03, -1.7923e-03, -7.8273e-04,  1.6193e-03, -9.0031e-05],\n","       grad_fn=<SliceBackward0>)\n","gradient values before mask reapp. tensor([-1.2284e-04, -2.3607e-05, -2.1653e-04, -4.7492e-05, -1.7671e-04,\n","        -3.2737e-05, -4.5954e-05, -1.2422e-04, -2.1601e-05, -3.5061e-04])\n","gradient values before mask reapp. tensor([-1.9023e-04, -3.6595e-05, -3.3500e-04, -7.3110e-05, -2.7173e-04,\n","        -5.1024e-05, -7.1420e-05, -1.9122e-04, -3.2496e-05, -5.4286e-04])\n","gradient values before mask reapp. tensor([-2.5528e-04, -4.9159e-05, -4.4911e-04, -9.7518e-05, -3.6203e-04,\n","        -6.8920e-05, -9.6193e-05, -2.5505e-04, -4.2308e-05, -7.2838e-04])\n","gradient values before mask reapp. tensor([-3.1875e-04, -6.1445e-05, -5.6020e-04, -1.2101e-04, -4.4870e-04,\n","        -8.6624e-05, -1.2055e-04, -3.1647e-04, -5.1170e-05, -9.0932e-04])\n","gradient values before mask reapp. tensor([-3.8124e-04, -7.3569e-05, -6.6934e-04, -1.4380e-04, -5.3258e-04,\n","        -1.0430e-04, -1.4473e-04, -3.7609e-04, -5.9175e-05, -1.0874e-03])\n","gradient values before mask reapp. tensor([-4.4323e-04, -8.5627e-05, -7.7737e-04, -1.6609e-04, -6.1432e-04,\n","        -1.2209e-04, -1.6892e-04, -4.3436e-04, -6.6383e-05, -1.2640e-03])\n","gradient values before mask reapp. tensor([-5.0511e-04, -9.7692e-05, -8.8495e-04, -1.8798e-04, -6.9438e-04,\n","        -1.4012e-04, -1.9326e-04, -4.9161e-04, -7.2819e-05, -1.4403e-03])\n","gradient values before mask reapp. tensor([-5.6716e-04, -1.0982e-04, -9.9254e-04, -2.0958e-04, -7.7306e-04,\n","        -1.5846e-04, -2.1789e-04, -5.4807e-04, -7.8480e-05, -1.6169e-03])\n","gradient values before mask reapp. tensor([-6.2957e-04, -1.2205e-04, -1.1005e-03, -2.3092e-04, -8.5051e-04,\n","        -1.7719e-04, -2.4288e-04, -6.0385e-04, -8.3338e-05, -1.7945e-03])\n","gradient values before mask reapp. tensor([-6.9243e-04, -1.3441e-04, -1.2089e-03, -2.5200e-04, -9.2672e-04,\n","        -1.9637e-04, -2.6829e-04, -6.5897e-04, -8.7335e-05, -1.9733e-03])\n","gradient values before mask reapp. tensor([-7.5576e-04, -1.4690e-04, -1.3178e-03, -2.7280e-04, -1.0016e-03,\n","        -2.1604e-04, -2.9417e-04, -7.1335e-04, -9.0395e-05, -2.1534e-03])\n","gradient values before mask reapp. tensor([-8.1952e-04, -1.5951e-04, -1.4271e-03, -2.9326e-04, -1.0748e-03,\n","        -2.3619e-04, -3.2050e-04, -7.6682e-04, -9.2415e-05, -2.3345e-03])\n","gradient values before mask reapp. tensor([-8.8353e-04, -1.7222e-04, -1.5364e-03, -3.1327e-04, -1.1459e-03,\n","        -2.5684e-04, -3.4726e-04, -8.1911e-04, -9.3268e-05, -2.5164e-03])\n","gradient values before mask reapp. tensor([-9.4758e-04, -1.8499e-04, -1.6454e-03, -3.3269e-04, -1.2144e-03,\n","        -2.7795e-04, -3.7439e-04, -8.6985e-04, -9.2804e-05, -2.6982e-03])\n","gradient values before mask reapp. tensor([-1.0113e-03, -1.9777e-04, -1.7533e-03, -3.5133e-04, -1.2796e-03,\n","        -2.9949e-04, -4.0179e-04, -9.1855e-04, -9.0843e-05, -2.8790e-03])\n","gradient values before mask reapp. tensor([-1.0743e-03, -2.1046e-04, -1.8594e-03, -3.6898e-04, -1.3405e-03,\n","        -3.2136e-04, -4.2936e-04, -9.6466e-04, -8.7192e-05, -3.0577e-03])\n","gradient values before mask reapp. tensor([-1.1361e-03, -2.2299e-04, -1.9628e-03, -3.8538e-04, -1.3963e-03,\n","        -3.4350e-04, -4.5692e-04, -1.0075e-03, -8.1629e-05, -3.2326e-03])\n","gradient values before mask reapp. tensor([-1.1960e-03, -2.3525e-04, -2.0623e-03, -4.0025e-04, -1.4458e-03,\n","        -3.6578e-04, -4.8429e-04, -1.0463e-03, -7.3927e-05, -3.4022e-03])\n","gradient values before mask reapp. tensor([-1.2534e-03, -2.4710e-04, -2.1568e-03, -4.1326e-04, -1.4877e-03,\n","        -3.8806e-04, -5.1125e-04, -1.0802e-03, -6.3835e-05, -3.5645e-03])\n","gradient values before mask reapp. tensor([-1.3075e-03, -2.5841e-04, -2.2448e-03, -4.2406e-04, -1.5208e-03,\n","        -4.1019e-04, -5.3756e-04, -1.1084e-03, -5.1103e-05, -3.7172e-03])\n","gradient values before mask reapp. tensor([-1.3575e-03, -2.6903e-04, -2.3249e-03, -4.3232e-04, -1.5436e-03,\n","        -4.3200e-04, -5.6296e-04, -1.1299e-03, -3.5489e-05, -3.8583e-03])\n","gradient values before mask reapp. tensor([-1.4027e-03, -2.7882e-04, -2.3956e-03, -4.3766e-04, -1.5549e-03,\n","        -4.5329e-04, -5.8714e-04, -1.1438e-03, -1.6763e-05, -3.9852e-03])\n","gradient values before mask reapp. tensor([-1.4421e-03, -2.8761e-04, -2.4556e-03, -4.3976e-04, -1.5534e-03,\n","        -4.7387e-04, -6.0984e-04, -1.1492e-03,  5.2691e-06, -4.0958e-03])\n","gradient values before mask reapp. tensor([-1.4750e-03, -2.9526e-04, -2.5033e-03, -4.3830e-04, -1.5378e-03,\n","        -4.9354e-04, -6.3076e-04, -1.1452e-03,  3.0772e-05, -4.1876e-03])\n","gradient values before mask reapp. tensor([-1.5008e-03, -3.0164e-04, -2.5376e-03, -4.3303e-04, -1.5073e-03,\n","        -5.1210e-04, -6.4964e-04, -1.1313e-03,  5.9835e-05, -4.2589e-03])\n","gradient values before mask reapp. tensor([-1.5188e-03, -3.0664e-04, -2.5576e-03, -4.2376e-04, -1.4611e-03,\n","        -5.2938e-04, -6.6625e-04, -1.1069e-03,  9.2485e-05, -4.3079e-03])\n","gradient values before mask reapp. tensor([-0.0015, -0.0003, -0.0026, -0.0004, -0.0014, -0.0005, -0.0007, -0.0011,\n","         0.0001, -0.0043])\n","gradient values before mask reapp. tensor([-0.0015, -0.0003, -0.0026, -0.0004, -0.0013, -0.0006, -0.0007, -0.0010,\n","         0.0002, -0.0043])\n","gradient values before mask reapp. tensor([-0.0015, -0.0003, -0.0025, -0.0004, -0.0012, -0.0006, -0.0007, -0.0010,\n","         0.0002, -0.0043])\n","gradient values before mask reapp. tensor([-0.0015, -0.0003, -0.0025, -0.0003, -0.0011, -0.0006, -0.0007, -0.0009,\n","         0.0003, -0.0043])\n","gradient values before mask reapp. tensor([-0.0015, -0.0003, -0.0024, -0.0003, -0.0010, -0.0006, -0.0007, -0.0008,\n","         0.0003, -0.0042])\n","gradient values before mask reapp. tensor([-0.0015, -0.0003, -0.0024, -0.0003, -0.0009, -0.0006, -0.0007, -0.0007,\n","         0.0004, -0.0041])\n","gradient values before mask reapp. tensor([-0.0014, -0.0003, -0.0023, -0.0003, -0.0007, -0.0006, -0.0007, -0.0007,\n","         0.0004, -0.0040])\n","gradient values before mask reapp. tensor([-0.0014, -0.0003, -0.0022, -0.0002, -0.0006, -0.0006, -0.0007, -0.0006,\n","         0.0005, -0.0039])\n","gradient values before mask reapp. tensor([-0.0013, -0.0003, -0.0021, -0.0002, -0.0004, -0.0006, -0.0007, -0.0005,\n","         0.0005, -0.0038])\n","gradient values before mask reapp. tensor([-0.0013, -0.0003, -0.0020, -0.0001, -0.0003, -0.0006, -0.0007, -0.0004,\n","         0.0006, -0.0036])\n","gradient values before mask reapp. tensor([-0.0012, -0.0003, -0.0019, -0.0001, -0.0001, -0.0006, -0.0007, -0.0003,\n","         0.0006, -0.0035])\n","gradient values before mask reapp. tensor([-1.1884e-03, -2.6629e-04, -1.8133e-03, -6.8771e-05,  2.7481e-05,\n","        -6.1879e-04, -6.8407e-04, -1.7657e-04,  6.5503e-04, -3.3403e-03])\n","gradient values before mask reapp. tensor([-1.1389e-03, -2.5864e-04, -1.7143e-03, -3.2839e-05,  1.7404e-04,\n","        -6.1895e-04, -6.7629e-04, -8.2457e-05,  7.0129e-04, -3.1979e-03])\n","gradient values before mask reapp. tensor([-1.0904e-03, -2.5113e-04, -1.6179e-03,  1.7832e-06,  3.1512e-04,\n","        -6.1871e-04, -6.6838e-04,  8.2151e-06,  7.4539e-04, -3.0586e-03])\n","gradient values before mask reapp. tensor([-1.0436e-03, -2.4387e-04, -1.5251e-03,  3.4795e-05,  4.4958e-04,\n","        -6.1822e-04, -6.6054e-04,  9.4665e-05,  7.8711e-04, -2.9244e-03])\n","gradient values before mask reapp. tensor([-9.9903e-04, -2.3695e-04, -1.4369e-03,  6.6007e-05,  5.7671e-04,\n","        -6.1759e-04, -6.5297e-04,  1.7640e-04,  8.2637e-04, -2.7966e-03])\n","gradient values before mask reapp. tensor([-9.5698e-04, -2.3044e-04, -1.3539e-03,  9.5276e-05,  6.9596e-04,\n","        -6.1692e-04, -6.4580e-04,  2.5304e-04,  8.6310e-04, -2.6763e-03])\n","gradient values before mask reapp. tensor([-0.0009, -0.0002, -0.0013,  0.0001,  0.0008, -0.0006, -0.0006,  0.0003,\n","         0.0009, -0.0026])\n","gradient values before mask reapp. tensor([-0.0009, -0.0002, -0.0012,  0.0001,  0.0009, -0.0006, -0.0006,  0.0004,\n","         0.0009, -0.0025])\n","gradient values before mask reapp. tensor([-0.0008, -0.0002, -0.0011,  0.0002,  0.0010, -0.0006, -0.0006,  0.0005,\n","         0.0010, -0.0024])\n","gradient values before mask reapp. tensor([-0.0008, -0.0002, -0.0011,  0.0002,  0.0011, -0.0006, -0.0006,  0.0005,\n","         0.0010, -0.0023])\n","gradient values before mask reapp. tensor([-0.0008, -0.0002, -0.0010,  0.0002,  0.0012, -0.0006, -0.0006,  0.0006,\n","         0.0010, -0.0022])\n","gradient values before mask reapp. tensor([-0.0008, -0.0002, -0.0010,  0.0002,  0.0012, -0.0006, -0.0006,  0.0006,\n","         0.0010, -0.0021])\n","gradient values before mask reapp. tensor([-0.0007, -0.0002, -0.0009,  0.0002,  0.0013, -0.0006, -0.0006,  0.0007,\n","         0.0011, -0.0021])\n","gradient values before mask reapp. tensor([-0.0007, -0.0002, -0.0009,  0.0003,  0.0014, -0.0006, -0.0006,  0.0007,\n","         0.0011, -0.0020])\n","gradient values before mask reapp. tensor([-0.0007, -0.0002, -0.0009,  0.0003,  0.0014, -0.0006, -0.0006,  0.0007,\n","         0.0011, -0.0020])\n","gradient values before mask reapp. tensor([-0.0007, -0.0002, -0.0008,  0.0003,  0.0015, -0.0006, -0.0006,  0.0008,\n","         0.0011, -0.0019])\n","gradient values before mask reapp. tensor([-0.0007, -0.0002, -0.0008,  0.0003,  0.0015, -0.0006, -0.0006,  0.0008,\n","         0.0011, -0.0019])\n","gradient values before mask reapp. tensor([-0.0007, -0.0002, -0.0008,  0.0003,  0.0016, -0.0006, -0.0006,  0.0008,\n","         0.0011, -0.0018])\n","gradient values before mask reapp. tensor([-0.0006, -0.0002, -0.0007,  0.0003,  0.0016, -0.0006, -0.0006,  0.0008,\n","         0.0012, -0.0018])\n","gradient values before mask reapp. tensor([-0.0006, -0.0002, -0.0007,  0.0003,  0.0017, -0.0006, -0.0006,  0.0009,\n","         0.0012, -0.0018])\n","gradient values before mask reapp. tensor([-0.0006, -0.0002, -0.0007,  0.0003,  0.0017, -0.0006, -0.0006,  0.0009,\n","         0.0012, -0.0017])\n","gradient values before mask reapp. tensor([-0.0006, -0.0002, -0.0007,  0.0003,  0.0017, -0.0006, -0.0006,  0.0009,\n","         0.0012, -0.0017])\n","gradient values before mask reapp. tensor([-0.0006, -0.0002, -0.0007,  0.0004,  0.0018, -0.0006, -0.0006,  0.0009,\n","         0.0012, -0.0017])\n","gradient values before mask reapp. tensor([-0.0006, -0.0002, -0.0006,  0.0004,  0.0018, -0.0006, -0.0006,  0.0010,\n","         0.0012, -0.0017])\n","gradient values before mask reapp. tensor([-0.0006, -0.0002, -0.0006,  0.0004,  0.0018, -0.0006, -0.0006,  0.0010,\n","         0.0012, -0.0017])\n","gradient values before mask reapp. tensor([-0.0006, -0.0002, -0.0006,  0.0004,  0.0019, -0.0006, -0.0006,  0.0010,\n","         0.0013, -0.0016])\n","gradient values before mask reapp. tensor([-0.0006, -0.0002, -0.0006,  0.0004,  0.0019, -0.0006, -0.0006,  0.0010,\n","         0.0013, -0.0016])\n","gradient values before mask reapp. tensor([-0.0006, -0.0002, -0.0006,  0.0004,  0.0019, -0.0006, -0.0006,  0.0010,\n","         0.0013, -0.0016])\n","gradient values before mask reapp. tensor([-0.0006, -0.0002, -0.0006,  0.0004,  0.0020, -0.0006, -0.0006,  0.0010,\n","         0.0013, -0.0016])\n","gradient values before mask reapp. tensor([-0.0006, -0.0002, -0.0006,  0.0004,  0.0020, -0.0007, -0.0006,  0.0011,\n","         0.0013, -0.0016])\n","gradient values before mask reapp. tensor([-0.0006, -0.0002, -0.0006,  0.0004,  0.0020, -0.0007, -0.0006,  0.0011,\n","         0.0013, -0.0016])\n","gradient values before mask reapp. tensor([-0.0006, -0.0002, -0.0006,  0.0004,  0.0020, -0.0007, -0.0006,  0.0011,\n","         0.0013, -0.0016])\n","gradient values before mask reapp. tensor([-0.0006, -0.0002, -0.0006,  0.0004,  0.0021, -0.0007, -0.0006,  0.0011,\n","         0.0013, -0.0016])\n","gradient values before mask reapp. tensor([-0.0006, -0.0002, -0.0006,  0.0004,  0.0021, -0.0007, -0.0006,  0.0011,\n","         0.0013, -0.0016])\n","gradient values before mask reapp. tensor([-0.0006, -0.0002, -0.0005,  0.0004,  0.0021, -0.0007, -0.0006,  0.0011,\n","         0.0014, -0.0016])\n","gradient values before mask reapp. tensor([-0.0006, -0.0002, -0.0005,  0.0004,  0.0021, -0.0007, -0.0006,  0.0011,\n","         0.0014, -0.0016])\n","gradient values before mask reapp. tensor([-0.0006, -0.0002, -0.0005,  0.0004,  0.0021, -0.0007, -0.0006,  0.0011,\n","         0.0014, -0.0016])\n","gradient values before mask reapp. tensor([-0.0005, -0.0002, -0.0005,  0.0004,  0.0022, -0.0007, -0.0006,  0.0012,\n","         0.0014, -0.0016])\n","gradient values before mask reapp. tensor([-0.0005, -0.0002, -0.0005,  0.0004,  0.0022, -0.0007, -0.0006,  0.0012,\n","         0.0014, -0.0016])\n","gradient values before mask reapp. tensor([-0.0005, -0.0002, -0.0005,  0.0004,  0.0022, -0.0007, -0.0006,  0.0012,\n","         0.0014, -0.0016])\n","gradient values before mask reapp. tensor([-0.0005, -0.0002, -0.0005,  0.0005,  0.0022, -0.0007, -0.0007,  0.0012,\n","         0.0014, -0.0016])\n","gradient values before mask reapp. tensor([-0.0005, -0.0002, -0.0005,  0.0005,  0.0023, -0.0007, -0.0007,  0.0012,\n","         0.0014, -0.0016])\n","gradient values before mask reapp. tensor([-0.0005, -0.0002, -0.0005,  0.0005,  0.0023, -0.0007, -0.0007,  0.0012,\n","         0.0014, -0.0016])\n","gradient values before mask reapp. tensor([-0.0005, -0.0002, -0.0005,  0.0005,  0.0023, -0.0007, -0.0007,  0.0012,\n","         0.0014, -0.0016])\n","gradient values before mask reapp. tensor([-0.0005, -0.0002, -0.0005,  0.0005,  0.0023, -0.0007, -0.0007,  0.0012,\n","         0.0015, -0.0016])\n","gradient values before mask reapp. tensor([-0.0005, -0.0002, -0.0005,  0.0005,  0.0023, -0.0007, -0.0007,  0.0012,\n","         0.0015, -0.0016])\n","gradient values before mask reapp. tensor([-0.0005, -0.0002, -0.0005,  0.0005,  0.0024, -0.0007, -0.0007,  0.0012,\n","         0.0015, -0.0016])\n","gradient values before mask reapp. tensor([-0.0005, -0.0002, -0.0005,  0.0005,  0.0024, -0.0007, -0.0007,  0.0013,\n","         0.0015, -0.0016])\n","gradient values before mask reapp. tensor([-0.0005, -0.0002, -0.0005,  0.0005,  0.0024, -0.0007, -0.0007,  0.0013,\n","         0.0015, -0.0016])\n","gradient values before mask reapp. tensor([-0.0005, -0.0002, -0.0005,  0.0005,  0.0024, -0.0007, -0.0007,  0.0013,\n","         0.0015, -0.0016])\n","gradient values before mask reapp. tensor([-0.0005, -0.0002, -0.0005,  0.0005,  0.0024, -0.0007, -0.0007,  0.0013,\n","         0.0015, -0.0016])\n","gradient values before mask reapp. tensor([-0.0005, -0.0002, -0.0005,  0.0005,  0.0024, -0.0007, -0.0007,  0.0013,\n","         0.0015, -0.0016])\n","gradient values before mask reapp. tensor([-0.0005, -0.0002, -0.0005,  0.0005,  0.0025, -0.0007, -0.0007,  0.0013,\n","         0.0015, -0.0016])\n","gradient values before mask reapp. tensor([-0.0005, -0.0002, -0.0005,  0.0005,  0.0025, -0.0008, -0.0007,  0.0013,\n","         0.0015, -0.0016])\n","gradient values before mask reapp. tensor([-0.0005, -0.0002, -0.0005,  0.0005,  0.0025, -0.0008, -0.0007,  0.0013,\n","         0.0015, -0.0016])\n","gradient values before mask reapp. tensor([-0.0005, -0.0002, -0.0005,  0.0005,  0.0025, -0.0008, -0.0007,  0.0013,\n","         0.0016, -0.0016])\n","gradient values before mask reapp. tensor([-0.0005, -0.0002, -0.0005,  0.0005,  0.0025, -0.0008, -0.0007,  0.0013,\n","         0.0016, -0.0017])\n","gradient values before mask reapp. tensor([-0.0005, -0.0002, -0.0005,  0.0005,  0.0025, -0.0008, -0.0007,  0.0013,\n","         0.0016, -0.0017])\n","gradient values before mask reapp. tensor([-0.0005, -0.0002, -0.0005,  0.0005,  0.0025, -0.0008, -0.0007,  0.0013,\n","         0.0016, -0.0017])\n","gradient values before mask reapp. tensor([-0.0005, -0.0002, -0.0005,  0.0005,  0.0026, -0.0008, -0.0007,  0.0013,\n","         0.0016, -0.0017])\n","gradient values before mask reapp. tensor([-0.0005, -0.0002, -0.0005,  0.0005,  0.0026, -0.0008, -0.0007,  0.0013,\n","         0.0016, -0.0017])\n","gradient values before mask reapp. tensor([-0.0005, -0.0002, -0.0005,  0.0005,  0.0026, -0.0008, -0.0007,  0.0013,\n","         0.0016, -0.0017])\n","gradient values before mask reapp. tensor([-0.0005, -0.0002, -0.0005,  0.0005,  0.0026, -0.0008, -0.0008,  0.0013,\n","         0.0016, -0.0017])\n","gradient values before mask reapp. tensor([-0.0005, -0.0002, -0.0005,  0.0005,  0.0026, -0.0008, -0.0008,  0.0013,\n","         0.0016, -0.0017])\n","gradient values before mask reapp. tensor([-0.0005, -0.0002, -0.0005,  0.0005,  0.0026, -0.0008, -0.0008,  0.0013,\n","         0.0016, -0.0018])\n","gradient values before mask reapp. tensor([-0.0005, -0.0002, -0.0006,  0.0005,  0.0026, -0.0008, -0.0008,  0.0013,\n","         0.0016, -0.0018])\n","gradient values before mask reapp. tensor([-0.0005, -0.0002, -0.0006,  0.0005,  0.0026, -0.0008, -0.0008,  0.0013,\n","         0.0016, -0.0018])\n","gradient values before mask reapp. tensor([-0.0005, -0.0002, -0.0006,  0.0005,  0.0026, -0.0008, -0.0008,  0.0013,\n","         0.0016, -0.0018])\n","gradient values before mask reapp. tensor([-0.0006, -0.0003, -0.0006,  0.0005,  0.0026, -0.0008, -0.0008,  0.0013,\n","         0.0016, -0.0018])\n","gradient values before mask reapp. tensor([-0.0006, -0.0003, -0.0006,  0.0005,  0.0026, -0.0008, -0.0008,  0.0013,\n","         0.0016, -0.0018])\n","gradient values before mask reapp. tensor([-0.0006, -0.0003, -0.0006,  0.0005,  0.0026, -0.0008, -0.0008,  0.0013,\n","         0.0016, -0.0018])\n","gradient values before mask reapp. tensor([-0.0006, -0.0003, -0.0006,  0.0005,  0.0026, -0.0008, -0.0008,  0.0013,\n","         0.0016, -0.0018])\n","gradient values before mask reapp. tensor([-0.0006, -0.0003, -0.0006,  0.0005,  0.0026, -0.0008, -0.0008,  0.0013,\n","         0.0016, -0.0019])\n","gradient values before mask reapp. tensor([-0.0005, -0.0003, -0.0006,  0.0005,  0.0026, -0.0008, -0.0008,  0.0013,\n","         0.0016, -0.0019])\n","gradient values before mask reapp. tensor([-0.0005, -0.0003, -0.0006,  0.0005,  0.0026, -0.0008, -0.0008,  0.0013,\n","         0.0016, -0.0019])\n","gradient values before mask reapp. tensor([-0.0005, -0.0003, -0.0006,  0.0005,  0.0026, -0.0008, -0.0008,  0.0013,\n","         0.0016, -0.0019])\n","gradient values before mask reapp. tensor([-0.0005, -0.0003, -0.0006,  0.0005,  0.0026, -0.0008, -0.0008,  0.0013,\n","         0.0016, -0.0019])\n","gradient values before mask reapp. tensor([-0.0005, -0.0003, -0.0006,  0.0005,  0.0026, -0.0008, -0.0008,  0.0013,\n","         0.0016, -0.0019])\n","gradient values before mask reapp. tensor([-0.0005, -0.0003, -0.0006,  0.0005,  0.0026, -0.0008, -0.0008,  0.0013,\n","         0.0016, -0.0019])\n","gradient values before mask reapp. tensor([-0.0005, -0.0003, -0.0006,  0.0005,  0.0026, -0.0008, -0.0008,  0.0012,\n","         0.0016, -0.0019])\n","gradient values before mask reapp. tensor([-0.0005, -0.0003, -0.0006,  0.0005,  0.0026, -0.0008, -0.0008,  0.0012,\n","         0.0016, -0.0019])\n","gradient values before mask reapp. tensor([-0.0005, -0.0003, -0.0006,  0.0005,  0.0026, -0.0008, -0.0008,  0.0012,\n","         0.0016, -0.0019])\n","gradient values before mask reapp. tensor([-0.0005, -0.0003, -0.0006,  0.0005,  0.0026, -0.0008, -0.0008,  0.0012,\n","         0.0016, -0.0019])\n","gradient values before mask reapp. tensor([-0.0007, -0.0003, -0.0010,  0.0004,  0.0021, -0.0009, -0.0008,  0.0009,\n","         0.0015, -0.0024])\n","gradient values before mask reapp. tensor([-0.0007, -0.0003, -0.0010,  0.0004,  0.0021, -0.0009, -0.0008,  0.0009,\n","         0.0015, -0.0024])\n","gradient values before mask reapp. tensor([-0.0009, -0.0004, -0.0013,  0.0003,  0.0017, -0.0009, -0.0009,  0.0005,\n","         0.0013, -0.0027])\n","gradient values before mask reapp. tensor([-0.0009, -0.0004, -0.0013,  0.0003,  0.0017, -0.0009, -0.0009,  0.0005,\n","         0.0013, -0.0027])\n","gradient values before mask reapp. tensor([-0.0008, -0.0004, -0.0013,  0.0003,  0.0017, -0.0009, -0.0009,  0.0005,\n","         0.0013, -0.0027])\n","gradient values before mask reapp. tensor([-0.0008, -0.0004, -0.0012,  0.0003,  0.0017, -0.0009, -0.0009,  0.0005,\n","         0.0013, -0.0027])\n","gradient values before mask reapp. tensor([-9.3553e-04, -4.0705e-04, -1.5073e-03,  1.3810e-04,  1.3120e-03,\n","        -8.7428e-04, -8.9314e-04,  7.7956e-05,  1.1448e-03, -3.0492e-03])\n","gradient values before mask reapp. tensor([-0.0008, -0.0004, -0.0012,  0.0003,  0.0017, -0.0009, -0.0009,  0.0005,\n","         0.0013, -0.0026])\n","gradient values before mask reapp. tensor([-0.0008, -0.0004, -0.0012,  0.0003,  0.0017, -0.0008, -0.0009,  0.0005,\n","         0.0013, -0.0026])\n","gradient values before mask reapp. tensor([-8.7568e-04, -4.0715e-04, -1.4388e-03,  1.4266e-04,  1.3501e-03,\n","        -8.6333e-04, -8.8388e-04,  9.0377e-05,  1.1375e-03, -2.9455e-03])\n","gradient values before mask reapp. tensor([-0.0009, -0.0004, -0.0014,  0.0001,  0.0014, -0.0009, -0.0009,  0.0001,\n","         0.0011, -0.0029])\n","gradient values before mask reapp. tensor([-0.0007, -0.0004, -0.0011,  0.0003,  0.0018, -0.0008, -0.0008,  0.0005,\n","         0.0013, -0.0024])\n","gradient values before mask reapp. tensor([-0.0008, -0.0004, -0.0013,  0.0002,  0.0015, -0.0008, -0.0009,  0.0002,\n","         0.0011, -0.0027])\n","gradient values before mask reapp. tensor([-0.0007, -0.0004, -0.0012,  0.0002,  0.0015, -0.0008, -0.0009,  0.0002,\n","         0.0011, -0.0026])\n","gradient values before mask reapp. tensor([-0.0007, -0.0004, -0.0012,  0.0002,  0.0015, -0.0008, -0.0008,  0.0002,\n","         0.0011, -0.0026])\n","gradient values before mask reapp. tensor([-0.0007, -0.0004, -0.0011,  0.0002,  0.0016, -0.0008, -0.0008,  0.0002,\n","         0.0011, -0.0025])\n","gradient values before mask reapp. tensor([-7.9398e-04, -4.1461e-04, -1.4036e-03,  1.1060e-04,  1.1883e-03,\n","        -8.2041e-04, -8.3881e-04, -5.2988e-05,  1.0428e-03, -2.8206e-03])\n","gradient values before mask reapp. tensor([-0.0004, -0.0003, -0.0007,  0.0004,  0.0020, -0.0008, -0.0008,  0.0007,\n","         0.0013, -0.0019])\n","gradient values before mask reapp. tensor([-9.0980e-04, -4.3054e-04, -1.5592e-03,  5.8631e-05,  8.6852e-04,\n","        -8.0476e-04, -8.2495e-04, -2.6283e-04,  9.5371e-04, -3.0225e-03])\n","gradient values before mask reapp. tensor([-6.1641e-04, -3.9290e-04, -1.1231e-03,  1.6825e-04,  1.4254e-03,\n","        -7.8348e-04, -7.8971e-04,  9.5710e-05,  1.0707e-03, -2.3792e-03])\n","gradient values before mask reapp. tensor([-0.0006, -0.0004, -0.0011,  0.0002,  0.0015, -0.0008, -0.0008,  0.0001,\n","         0.0011, -0.0023])\n","gradient values before mask reapp. tensor([-0.0005, -0.0004, -0.0009,  0.0002,  0.0016, -0.0008, -0.0008,  0.0002,\n","         0.0011, -0.0021])\n","gradient values before mask reapp. tensor([-6.6742e-04, -4.0018e-04, -1.1768e-03,  1.3789e-04,  1.1933e-03,\n","        -7.5427e-04, -7.5825e-04, -5.5207e-05,  9.9273e-04, -2.4216e-03])\n","gradient values before mask reapp. tensor([-0.0004, -0.0004, -0.0007,  0.0002,  0.0017, -0.0007, -0.0007,  0.0003,\n","         0.0011, -0.0018])\n","gradient values before mask reapp. tensor([-5.1636e-04, -3.7927e-04, -9.2993e-04,  1.9205e-04,  1.4105e-03,\n","        -7.2277e-04, -7.1443e-04,  8.4980e-05,  1.0230e-03, -2.0324e-03])\n","gradient values before mask reapp. tensor([-0.0004, -0.0004, -0.0008,  0.0002,  0.0015, -0.0007, -0.0007,  0.0001,\n","         0.0010, -0.0019])\n","gradient values before mask reapp. tensor([-0.0005, -0.0004, -0.0010,  0.0002,  0.0012, -0.0007, -0.0007, -0.0001,\n","         0.0009, -0.0019])\n","gradient values before mask reapp. tensor([-4.5965e-04, -3.8032e-04, -8.4272e-04,  2.1217e-04,  1.3058e-03,\n","        -6.8314e-04, -6.6511e-04, -4.5323e-05,  9.0893e-04, -1.7460e-03])\n","gradient values before mask reapp. tensor([-3.8605e-04, -3.6992e-04, -7.2224e-04,  2.3838e-04,  1.4111e-03,\n","        -6.6754e-04, -6.4345e-04,  2.3089e-05,  9.2339e-04, -1.5559e-03])\n","gradient values before mask reapp. tensor([-0.0005, -0.0004, -0.0009,  0.0001,  0.0011, -0.0007, -0.0007, -0.0003,\n","         0.0008, -0.0018])\n","gradient values before mask reapp. tensor([-0.0004, -0.0004, -0.0008,  0.0001,  0.0012, -0.0007, -0.0006, -0.0003,\n","         0.0008, -0.0017])\n","gradient values before mask reapp. tensor([-0.0003, -0.0004, -0.0007,  0.0001,  0.0013, -0.0007, -0.0006, -0.0002,\n","         0.0008, -0.0015])\n","gradient values before mask reapp. tensor([-4.7597e-04, -3.9938e-04, -9.1060e-04,  8.8896e-05,  9.6075e-04,\n","        -6.4305e-04, -6.2257e-04, -4.0878e-04,  7.2740e-04, -1.7915e-03])\n","gradient values before mask reapp. tensor([-0.0002, -0.0004, -0.0005,  0.0002,  0.0014, -0.0006, -0.0006, -0.0001,\n","         0.0008, -0.0013])\n","gradient values before mask reapp. tensor([-0.0004, -0.0004, -0.0008,  0.0001,  0.0011, -0.0006, -0.0006, -0.0003,\n","         0.0007, -0.0016])\n","gradient values before mask reapp. tensor([-0.0003, -0.0004, -0.0007,  0.0001,  0.0011, -0.0006, -0.0006, -0.0003,\n","         0.0007, -0.0014])\n","gradient values before mask reapp. tensor([-0.0003, -0.0004, -0.0006,  0.0001,  0.0012, -0.0006, -0.0006, -0.0002,\n","         0.0008, -0.0013])\n","gradient values before mask reapp. tensor([-0.0002, -0.0004, -0.0006,  0.0002,  0.0012, -0.0006, -0.0006, -0.0002,\n","         0.0008, -0.0012])\n","gradient values before mask reapp. tensor([-0.0002, -0.0004, -0.0005,  0.0002,  0.0013, -0.0006, -0.0006, -0.0002,\n","         0.0008, -0.0012])\n","gradient values before mask reapp. tensor([-0.0002, -0.0004, -0.0005,  0.0002,  0.0013, -0.0006, -0.0005, -0.0002,\n","         0.0008, -0.0011])\n","gradient values before mask reapp. tensor([-0.0002, -0.0004, -0.0005,  0.0002,  0.0013, -0.0006, -0.0005, -0.0002,\n","         0.0007, -0.0011])\n","gradient values before mask reapp. tensor([-0.0001, -0.0004, -0.0004,  0.0002,  0.0013, -0.0006, -0.0005, -0.0002,\n","         0.0007, -0.0011])\n","gradient values before mask reapp. tensor([-0.0001, -0.0004, -0.0004,  0.0002,  0.0013, -0.0006, -0.0005, -0.0002,\n","         0.0007, -0.0011])\n","gradient values before mask reapp. tensor([-0.0001, -0.0004, -0.0004,  0.0002,  0.0013, -0.0006, -0.0005, -0.0002,\n","         0.0007, -0.0010])\n","gradient values before mask reapp. tensor([-0.0001, -0.0004, -0.0004,  0.0002,  0.0013, -0.0006, -0.0005, -0.0002,\n","         0.0007, -0.0010])\n","gradient values before mask reapp. tensor([-9.7950e-05, -3.6076e-04, -4.1306e-04,  1.5715e-04,  1.2869e-03,\n","        -5.5477e-04, -5.3737e-04, -1.5987e-04,  7.1916e-04, -1.0355e-03])\n","gradient values before mask reapp. tensor([-8.7329e-05, -3.6089e-04, -4.0905e-04,  1.5362e-04,  1.2782e-03,\n","        -5.5157e-04, -5.3705e-04, -1.6142e-04,  7.1206e-04, -1.0323e-03])\n","gradient values before mask reapp. tensor([-7.7864e-05, -3.6123e-04, -4.0743e-04,  1.4941e-04,  1.2669e-03,\n","        -5.4857e-04, -5.3715e-04, -1.6447e-04,  7.0436e-04, -1.0329e-03])\n","gradient values before mask reapp. tensor([-6.4069e-05, -3.6074e-04, -3.9733e-04,  1.4746e-04,  1.2640e-03,\n","        -5.4465e-04, -5.3561e-04, -1.6230e-04,  6.9832e-04, -1.0198e-03])\n","gradient values before mask reapp. tensor([-5.3209e-05, -3.6078e-04, -3.9282e-04,  1.4402e-04,  1.2555e-03,\n","        -5.4133e-04, -5.3514e-04, -1.6356e-04,  6.9118e-04, -1.0157e-03])\n","gradient values before mask reapp. tensor([-4.2856e-05, -3.6087e-04, -3.8927e-04,  1.4038e-04,  1.2460e-03,\n","        -5.3806e-04, -5.3475e-04, -1.6537e-04,  6.8381e-04, -1.0130e-03])\n","gradient values before mask reapp. tensor([-3.1821e-05, -3.6083e-04, -3.8431e-04,  1.3707e-04,  1.2378e-03,\n","        -5.3465e-04, -5.3413e-04, -1.6634e-04,  6.7671e-04, -1.0081e-03])\n","gradient values before mask reapp. tensor([-1.9832e-05, -3.6057e-04, -3.7749e-04,  1.3432e-04,  1.2315e-03,\n","        -5.3100e-04, -5.3308e-04, -1.6613e-04,  6.6995e-04, -1.0000e-03])\n","gradient values before mask reapp. tensor([-9.7163e-06, -3.6064e-04, -3.7439e-04,  1.3054e-04,  1.2213e-03,\n","        -5.2770e-04, -5.3269e-04, -1.6822e-04,  6.6237e-04, -9.9797e-04])\n","gradient values before mask reapp. tensor([ 6.6270e-07, -3.6064e-04, -3.7045e-04,  1.2704e-04,  1.2120e-03,\n","        -5.2434e-04, -5.3216e-04, -1.6975e-04,  6.5505e-04, -9.9455e-04])\n","gradient values before mask reapp. tensor([ 1.1836e-05, -3.6046e-04, -3.6493e-04,  1.2397e-04,  1.2043e-03,\n","        -5.2081e-04, -5.3130e-04, -1.7029e-04,  6.4803e-04, -9.8850e-04])\n","gradient values before mask reapp. tensor([ 2.5354e-05, -3.5984e-04, -3.5519e-04,  1.2198e-04,  1.2004e-03,\n","        -5.1672e-04, -5.2954e-04, -1.6829e-04,  6.4164e-04, -9.7553e-04])\n","gradient values before mask reapp. tensor([ 3.4200e-05, -3.6001e-04, -3.5383e-04,  1.1790e-04,  1.1887e-03,\n","        -5.1362e-04, -5.2941e-04, -1.7133e-04,  6.3386e-04, -9.7607e-04])\n","gradient values before mask reapp. tensor([ 4.7834e-05, -3.5933e-04, -3.4364e-04,  1.1607e-04,  1.1852e-03,\n","        -5.0949e-04, -5.2753e-04, -1.6900e-04,  6.2760e-04, -9.6232e-04])\n","gradient values before mask reapp. tensor([ 5.6638e-05, -3.5947e-04, -3.4238e-04,  1.1196e-04,  1.1732e-03,\n","        -5.0635e-04, -5.2734e-04, -1.7209e-04,  6.1972e-04, -9.6293e-04])\n","gradient values before mask reapp. tensor([ 6.6990e-05, -3.5930e-04, -3.3802e-04,  1.0872e-04,  1.1642e-03,\n","        -5.0286e-04, -5.2652e-04, -1.7324e-04,  6.1246e-04, -9.5844e-04])\n","gradient values before mask reapp. tensor([ 7.9697e-05, -3.5868e-04, -3.2932e-04,  1.0659e-04,  1.1593e-03,\n","        -4.9885e-04, -5.2482e-04, -1.7175e-04,  6.0592e-04, -9.4688e-04])\n","gradient values before mask reapp. tensor([ 8.6752e-05, -3.5904e-04, -3.3104e-04,  1.0183e-04,  1.1443e-03,\n","        -4.9599e-04, -5.2506e-04, -1.7655e-04,  5.9752e-04, -9.5203e-04])\n","gradient values before mask reapp. tensor([ 9.7822e-05, -3.5867e-04, -3.2506e-04,  9.9050e-05,  1.1369e-03,\n","        -4.9231e-04, -5.2389e-04, -1.7668e-04,  5.9057e-04, -9.4486e-04])\n","gradient values before mask reapp. tensor([ 1.1567e-04, -3.5705e-04, -3.0638e-04,  9.9590e-05,  1.1417e-03,\n","        -4.8718e-04, -5.2020e-04, -1.6904e-04,  5.8590e-04, -9.1701e-04])\n","gradient values before mask reapp. tensor([ 1.2133e-04, -3.5758e-04, -3.1025e-04,  9.4347e-05,  1.1248e-03,\n","        -4.8461e-04, -5.2086e-04, -1.7510e-04,  5.7722e-04, -9.2562e-04])\n","gradient values before mask reapp. tensor([ 1.3898e-04, -3.5593e-04, -2.9159e-04,  9.4999e-05,  1.1297e-03,\n","        -4.7949e-04, -5.1710e-04, -1.6738e-04,  5.7265e-04, -8.9765e-04])\n","gradient values before mask reapp. tensor([ 1.4451e-04, -3.5642e-04, -2.9574e-04,  8.9744e-05,  1.1123e-03,\n","        -4.7687e-04, -5.1766e-04, -1.7355e-04,  5.6384e-04, -9.0645e-04])\n","gradient values before mask reapp. tensor([ 1.6066e-04, -3.5499e-04, -2.7958e-04,  8.9811e-05,  1.1149e-03,\n","        -4.7205e-04, -5.1437e-04, -1.6729e-04,  5.5889e-04, -8.8248e-04])\n","gradient values before mask reapp. tensor([ 1.6793e-04, -3.5511e-04, -2.8009e-04,  8.5581e-05,  1.1013e-03,\n","        -4.6906e-04, -5.1422e-04, -1.7118e-04,  5.5086e-04, -8.8535e-04])\n","gradient values before mask reapp. tensor([ 1.8218e-04, -3.5393e-04, -2.6723e-04,  8.4910e-05,  1.1007e-03,\n","        -4.6459e-04, -5.1145e-04, -1.6684e-04,  5.4537e-04, -8.6646e-04])\n","gradient values before mask reapp. tensor([ 1.9069e-04, -3.5376e-04, -2.6506e-04,  8.1482e-05,  1.0898e-03,\n","        -4.6131e-04, -5.1073e-04, -1.6902e-04,  5.3792e-04, -8.6485e-04])\n","gradient values before mask reapp. tensor([ 2.0027e-04, -3.5337e-04, -2.6059e-04,  7.8680e-05,  1.0813e-03,\n","        -4.5784e-04, -5.0964e-04, -1.6979e-04,  5.3100e-04, -8.5958e-04])\n","gradient values before mask reapp. tensor([ 2.1581e-04, -3.5189e-04, -2.4472e-04,  7.8867e-05,  1.0839e-03,\n","        -4.5313e-04, -5.0636e-04, -1.6360e-04,  5.2623e-04, -8.3589e-04])\n","gradient values before mask reapp. tensor([ 1.3635e-04, -3.7035e-04, -5.0990e-04,  8.1618e-06,  7.3464e-04,\n","        -4.5157e-04, -5.1254e-04, -3.1058e-04,  4.3302e-04, -1.2128e-03])\n","gradient values before mask reapp. tensor([ 1.5125e-04, -3.6883e-04, -4.9339e-04,  8.7031e-06,  7.3925e-04,\n","        -4.4718e-04, -5.0958e-04, -3.0404e-04,  4.2905e-04, -1.1884e-03])\n","gradient values before mask reapp. tensor([ 1.7302e-04, -3.6610e-04, -4.6435e-04,  1.2415e-05,  7.5569e-04,\n","        -4.4132e-04, -5.0416e-04, -2.8990e-04,  4.2722e-04, -1.1438e-03])\n","gradient values before mask reapp. tensor([ 1.8397e-04, -3.6522e-04, -4.5482e-04,  1.1237e-05,  7.5367e-04,\n","        -4.3774e-04, -5.0251e-04, -2.8754e-04,  4.2211e-04, -1.1306e-03])\n","gradient values before mask reapp. tensor([ 2.0713e-04, -3.6213e-04, -4.2275e-04,  1.5936e-05,  7.7328e-04,\n","        -4.3156e-04, -4.9637e-04, -2.7139e-04,  4.2098e-04, -1.0808e-03])\n","gradient values before mask reapp. tensor([ 2.1803e-04, -3.6120e-04, -4.1295e-04,  1.4942e-05,  7.7178e-04,\n","        -4.2800e-04, -4.9464e-04, -2.6876e-04,  4.1608e-04, -1.0671e-03])\n","gradient values before mask reapp. tensor([ 2.3298e-04, -3.5952e-04, -3.9577e-04,  1.5866e-05,  7.7714e-04,\n","        -4.2352e-04, -4.9136e-04, -2.6161e-04,  4.1239e-04, -1.0413e-03])\n","gradient values before mask reapp. tensor([ 2.5890e-04, -3.5580e-04, -3.5751e-04,  2.2437e-05,  8.0344e-04,\n","        -4.1681e-04, -4.8403e-04, -2.4151e-04,  4.1282e-04, -9.8127e-04])\n","gradient values before mask reapp. tensor([ 2.7287e-04, -3.5420e-04, -3.4158e-04,  2.3215e-05,  8.0794e-04,\n","        -4.1254e-04, -4.8094e-04, -2.3498e-04,  4.0913e-04, -9.5728e-04])\n","gradient values before mask reapp. tensor([ 2.8203e-04, -3.5347e-04, -3.3400e-04,  2.1792e-05,  8.0497e-04,\n","        -4.0941e-04, -4.7975e-04, -2.3358e-04,  4.0421e-04, -9.4729e-04])\n","gradient values before mask reapp. tensor([ 3.1236e-04, -3.4887e-04, -2.8755e-04,  3.0649e-05,  8.3893e-04,\n","        -4.0165e-04, -4.7052e-04, -2.0830e-04,  4.0607e-04, -8.7348e-04])\n","gradient values before mask reapp. tensor([ 2.2008e-04, -3.6884e-04, -5.6095e-04, -4.1666e-05,  4.9334e-04,\n","        -4.0489e-04, -4.8374e-04, -3.6188e-04,  3.1713e-04, -1.2698e-03])\n","gradient values before mask reapp. tensor([ 3.5729e-04, -3.4238e-04, -2.2242e-04,  4.1293e-05,  8.8113e-04,\n","        -3.8959e-04, -4.5774e-04, -1.7453e-04,  4.0540e-04, -7.7125e-04])\n","gradient values before mask reapp. tensor([ 2.6858e-04, -3.6162e-04, -4.8753e-04, -2.8795e-05,  5.4487e-04,\n","        -3.9232e-04, -4.6995e-04, -3.2327e-04,  3.1859e-04, -1.1548e-03])\n","gradient values before mask reapp. tensor([ 2.8212e-04, -3.5984e-04, -4.6985e-04, -2.7151e-05,  5.5289e-04,\n","        -3.8835e-04, -4.6685e-04, -3.1543e-04,  3.1625e-04, -1.1282e-03])\n","gradient values before mask reapp. tensor([ 3.0373e-04, -3.5657e-04, -4.3733e-04, -2.1524e-05,  5.7507e-04,\n","        -3.8261e-04, -4.6064e-04, -2.9842e-04,  3.1655e-04, -1.0771e-03])\n","gradient values before mask reapp. tensor([ 3.2465e-04, -3.5348e-04, -4.0622e-04, -1.6416e-05,  5.9582e-04,\n","        -3.7705e-04, -4.5484e-04, -2.8242e-04,  3.1651e-04, -1.0286e-03])\n","gradient values before mask reapp. tensor([ 3.3555e-04, -3.5205e-04, -3.9284e-04, -1.5556e-05,  6.0012e-04,\n","        -3.7362e-04, -4.5245e-04, -2.7699e-04,  3.1371e-04, -1.0085e-03])\n","gradient values before mask reapp. tensor([ 3.5549e-04, -3.4902e-04, -3.6288e-04, -1.0523e-05,  6.2014e-04,\n","        -3.6825e-04, -4.4674e-04, -2.6143e-04,  3.1374e-04, -9.6164e-04])\n","gradient values before mask reapp. tensor([ 3.7037e-04, -3.4678e-04, -3.4178e-04, -7.5337e-06,  6.3219e-04,\n","        -3.6399e-04, -4.4272e-04, -2.5113e-04,  3.1247e-04, -9.2883e-04])\n","gradient values before mask reapp. tensor([ 3.7868e-04, -3.4583e-04, -3.3299e-04, -7.9534e-06,  6.3215e-04,\n","        -3.6113e-04, -4.4133e-04, -2.4852e-04,  3.0891e-04, -9.1645e-04])\n","gradient values before mask reapp. tensor([ 3.8706e-04, -3.4476e-04, -3.2363e-04, -8.0244e-06,  6.3301e-04,\n","        -3.5827e-04, -4.3970e-04, -2.4537e-04,  3.0565e-04, -9.0285e-04])\n","gradient values before mask reapp. tensor([ 3.9383e-04, -3.4389e-04, -3.1700e-04, -8.5991e-06,  6.3155e-04,\n","        -3.5573e-04, -4.3852e-04, -2.4380e-04,  3.0204e-04, -8.9337e-04])\n","gradient values before mask reapp. tensor([ 4.0230e-04, -3.4283e-04, -3.0748e-04, -8.7205e-06,  6.3238e-04,\n","        -3.5283e-04, -4.3690e-04, -2.4060e-04,  2.9875e-04, -8.7965e-04])\n","gradient values before mask reapp. tensor([ 4.0512e-04, -3.4274e-04, -3.0821e-04, -1.1422e-05,  6.2366e-04,\n","        -3.5115e-04, -4.3734e-04, -2.4364e-04,  2.9375e-04, -8.8256e-04])\n","gradient values before mask reapp. tensor([ 4.1356e-04, -3.4155e-04, -2.9830e-04, -1.1137e-05,  6.2521e-04,\n","        -3.4823e-04, -4.3543e-04, -2.3998e-04,  2.9074e-04, -8.6769e-04])\n","gradient values before mask reapp. tensor([ 4.1971e-04, -3.4070e-04, -2.9228e-04, -1.1691e-05,  6.2353e-04,\n","        -3.4583e-04, -4.3429e-04, -2.3861e-04,  2.8725e-04, -8.5898e-04])\n","gradient values before mask reapp. tensor([ 4.2574e-04, -3.3999e-04, -2.8681e-04, -1.2697e-05,  6.2079e-04,\n","        -3.4345e-04, -4.3343e-04, -2.3775e-04,  2.8344e-04, -8.5168e-04])\n","gradient values before mask reapp. tensor([ 4.2711e-04, -3.4009e-04, -2.8983e-04, -1.5881e-05,  6.1010e-04,\n","        -3.4208e-04, -4.3425e-04, -2.4207e-04,  2.7818e-04, -8.5817e-04])\n","gradient values before mask reapp. tensor([ 4.3409e-04, -3.3905e-04, -2.8214e-04, -1.5956e-05,  6.0981e-04,\n","        -3.3943e-04, -4.3268e-04, -2.3961e-04,  2.7497e-04, -8.4660e-04])\n","gradient values before mask reapp. tensor([ 4.4038e-04, -3.3818e-04, -2.7562e-04, -1.6410e-05,  6.0862e-04,\n","        -3.3702e-04, -4.3146e-04, -2.3788e-04,  2.7164e-04, -8.3722e-04])\n","gradient values before mask reapp. tensor([ 4.4341e-04, -3.3791e-04, -2.7528e-04, -1.8607e-05,  6.0117e-04,\n","        -3.3524e-04, -4.3152e-04, -2.4004e-04,  2.6704e-04, -8.3803e-04])\n","gradient values before mask reapp. tensor([ 4.4758e-04, -3.3729e-04, -2.7230e-04, -1.9716e-05,  5.9681e-04,\n","        -3.3322e-04, -4.3083e-04, -2.4030e-04,  2.6324e-04, -8.3392e-04])\n","gradient values before mask reapp. tensor([ 4.5232e-04, -3.3669e-04, -2.6870e-04, -2.1013e-05,  5.9262e-04,\n","        -3.3111e-04, -4.3022e-04, -2.4043e-04,  2.5930e-04, -8.2937e-04])\n","gradient values before mask reapp. tensor([ 4.5704e-04, -3.3601e-04, -2.6464e-04, -2.1917e-05,  5.8930e-04,\n","        -3.2899e-04, -4.2939e-04, -2.4005e-04,  2.5571e-04, -8.2373e-04])\n","gradient values before mask reapp. tensor([ 4.6000e-04, -3.3569e-04, -2.6409e-04, -2.3914e-05,  5.8220e-04,\n","        -3.2722e-04, -4.2931e-04, -2.4194e-04,  2.5129e-04, -8.2400e-04])\n","gradient values before mask reapp. tensor([ 4.6792e-04, -3.3433e-04, -2.5387e-04, -2.3015e-05,  5.8506e-04,\n","        -3.2441e-04, -4.2712e-04, -2.3767e-04,  2.4891e-04, -8.0795e-04])\n","gradient values before mask reapp. tensor([ 4.7232e-04, -3.3372e-04, -2.5038e-04, -2.4164e-05,  5.8104e-04,\n","        -3.2236e-04, -4.2646e-04, -2.3768e-04,  2.4517e-04, -8.0342e-04])\n","gradient values before mask reapp. tensor([ 4.7066e-04, -3.3416e-04, -2.5799e-04, -2.8153e-05,  5.6635e-04,\n","        -3.2155e-04, -4.2794e-04, -2.4446e-04,  2.3945e-04, -8.1678e-04])\n","gradient values before mask reapp. tensor([ 4.8055e-04, -3.3242e-04, -2.4384e-04, -2.6164e-05,  5.7319e-04,\n","        -3.1836e-04, -4.2496e-04, -2.3768e-04,  2.3792e-04, -7.9435e-04])\n","gradient values before mask reapp. tensor([ 4.8057e-04, -3.3255e-04, -2.4820e-04, -2.9234e-05,  5.6177e-04,\n","        -3.1723e-04, -4.2580e-04, -2.4242e-04,  2.3288e-04, -8.0240e-04])\n","gradient values before mask reapp. tensor([ 4.8588e-04, -3.3161e-04, -2.4239e-04, -2.9409e-05,  5.6049e-04,\n","        -3.1496e-04, -4.2445e-04, -2.4073e-04,  2.2986e-04, -7.9349e-04])\n","gradient values before mask reapp. tensor([ 4.8722e-04, -3.3147e-04, -2.4417e-04, -3.1761e-05,  5.5170e-04,\n","        -3.1355e-04, -4.2477e-04, -2.4386e-04,  2.2535e-04, -7.9730e-04])\n","gradient values before mask reapp. tensor([ 4.9316e-04, -3.3038e-04, -2.3706e-04, -3.1509e-05,  5.5179e-04,\n","        -3.1115e-04, -4.2312e-04, -2.4132e-04,  2.2262e-04, -7.8614e-04])\n","gradient values before mask reapp. tensor([ 4.9366e-04, -3.3038e-04, -2.4020e-04, -3.4189e-05,  5.4177e-04,\n","        -3.0993e-04, -4.2368e-04, -2.4519e-04,  2.1795e-04, -7.9217e-04])\n","gradient values before mask reapp. tensor([ 5.0136e-04, -3.2888e-04, -2.2961e-04, -3.2872e-05,  5.4533e-04,\n","        -3.0711e-04, -4.2121e-04, -2.4042e-04,  2.1592e-04, -7.7505e-04])\n","gradient values before mask reapp. tensor([ 5.0363e-04, -3.2851e-04, -2.2932e-04, -3.4541e-05,  5.3871e-04,\n","        -3.0550e-04, -4.2104e-04, -2.4214e-04,  2.1193e-04, -7.7529e-04])\n","gradient values before mask reapp. tensor([ 5.0670e-04, -3.2793e-04, -2.2724e-04, -3.5591e-05,  5.3406e-04,\n","        -3.0373e-04, -4.2040e-04, -2.4262e-04,  2.0841e-04, -7.7242e-04])\n","gradient values before mask reapp. tensor([ 5.0824e-04, -3.2758e-04, -2.2794e-04, -3.7310e-05,  5.2681e-04,\n","        -3.0224e-04, -4.2031e-04, -2.4481e-04,  2.0441e-04, -7.7394e-04])\n","gradient values before mask reapp. tensor([ 5.1290e-04, -3.2676e-04, -2.2281e-04, -3.7632e-05,  5.2519e-04,\n","        -3.0018e-04, -4.1914e-04, -2.4338e-04,  2.0151e-04, -7.6634e-04])\n","gradient values before mask reapp. tensor([ 5.1433e-04, -3.2636e-04, -2.2366e-04, -3.9241e-05,  5.1774e-04,\n","        -2.9866e-04, -4.1895e-04, -2.4562e-04,  1.9748e-04, -7.6774e-04])\n","gradient values before mask reapp. tensor([ 5.2454e-04, -3.2441e-04, -2.0791e-04, -3.6510e-05,  5.2670e-04,\n","        -2.9540e-04, -4.1549e-04, -2.3751e-04,  1.9666e-04, -7.4238e-04])\n","gradient values before mask reapp. tensor([ 5.1902e-04, -3.2531e-04, -2.2152e-04, -4.1587e-05,  5.0692e-04,\n","        -2.9538e-04, -4.1796e-04, -2.4760e-04,  1.9036e-04, -7.6489e-04])\n","gradient values before mask reapp. tensor([ 5.2757e-04, -3.2363e-04, -2.0861e-04, -3.9502e-05,  5.1338e-04,\n","        -2.9249e-04, -4.1504e-04, -2.4116e-04,  1.8916e-04, -7.4403e-04])\n","gradient values before mask reapp. tensor([ 5.2372e-04, -3.2421e-04, -2.1900e-04, -4.3710e-05,  4.9677e-04,\n","        -2.9212e-04, -4.1685e-04, -2.4923e-04,  1.8348e-04, -7.6129e-04])\n","gradient values before mask reapp. tensor([ 5.3420e-04, -3.2214e-04, -2.0245e-04, -4.0588e-05,  5.0675e-04,\n","        -2.8879e-04, -4.1314e-04, -2.4051e-04,  1.8297e-04, -7.3434e-04])\n","gradient values before mask reapp. tensor([ 5.3305e-04, -3.2224e-04, -2.0770e-04, -4.3407e-05,  4.9520e-04,\n","        -2.8788e-04, -4.1390e-04, -2.4535e-04,  1.7831e-04, -7.4322e-04])\n","gradient values before mask reapp. tensor([ 5.4039e-04, -3.2068e-04, -1.9674e-04, -4.1680e-05,  4.9990e-04,\n","        -2.8518e-04, -4.1128e-04, -2.4002e-04,  1.7685e-04, -7.2525e-04])\n","gradient values before mask reapp. tensor([ 5.3884e-04, -3.2081e-04, -2.0243e-04, -4.4524e-05,  4.8826e-04,\n","        -2.8440e-04, -4.1212e-04, -2.4503e-04,  1.7228e-04, -7.3481e-04])\n","gradient values before mask reapp. tensor([ 5.4420e-04, -3.1961e-04, -1.9490e-04, -4.3678e-05,  4.8980e-04,\n","        -2.8218e-04, -4.1017e-04, -2.4171e-04,  1.7033e-04, -7.2250e-04])\n","gradient values before mask reapp. tensor([ 5.4421e-04, -3.1943e-04, -1.9776e-04, -4.5721e-05,  4.8076e-04,\n","        -2.8099e-04, -4.1041e-04, -2.4502e-04,  1.6621e-04, -7.2727e-04])\n","gradient values before mask reapp. tensor([ 5.4812e-04, -3.1850e-04, -1.9297e-04, -4.5589e-05,  4.7960e-04,\n","        -2.7908e-04, -4.0904e-04, -2.4341e-04,  1.6375e-04, -7.1946e-04])\n","gradient values before mask reapp. tensor([ 5.4880e-04, -3.1808e-04, -1.9404e-04, -4.6911e-05,  4.7276e-04,\n","        -2.7775e-04, -4.0877e-04, -2.4539e-04,  1.6022e-04, -7.2092e-04])\n","gradient values before mask reapp. tensor([ 5.4906e-04, -3.1789e-04, -1.9607e-04, -4.8750e-05,  4.6488e-04,\n","        -2.7665e-04, -4.0888e-04, -2.4804e-04,  1.5648e-04, -7.2461e-04])\n","gradient values before mask reapp. tensor([ 5.5584e-04, -3.1632e-04, -1.8582e-04, -4.7022e-05,  4.6899e-04,\n","        -2.7400e-04, -4.0625e-04, -2.4302e-04,  1.5501e-04, -7.0743e-04])\n","gradient values before mask reapp. tensor([ 5.5908e-04, -3.1552e-04, -1.8209e-04, -4.7198e-05,  4.6684e-04,\n","        -2.7225e-04, -4.0512e-04, -2.4202e-04,  1.5242e-04, -7.0147e-04])\n","gradient values before mask reapp. tensor([ 5.5976e-04, -3.1502e-04, -1.8278e-04, -4.8242e-05,  4.6070e-04,\n","        -2.7092e-04, -4.0470e-04, -2.4363e-04,  1.4915e-04, -7.0209e-04])\n","gradient values before mask reapp. tensor([ 5.5902e-04, -3.1489e-04, -1.8644e-04, -5.0304e-05,  4.5129e-04,\n","        -2.6993e-04, -4.0498e-04, -2.4719e-04,  1.4518e-04, -7.0796e-04])\n","gradient values before mask reapp. tensor([ 5.6732e-04, -3.1304e-04, -1.7286e-04, -4.7561e-05,  4.5919e-04,\n","        -2.6709e-04, -4.0170e-04, -2.3992e-04,  1.4464e-04, -6.8542e-04])\n","gradient values before mask reapp. tensor([ 5.6365e-04, -3.1341e-04, -1.8179e-04, -5.0956e-05,  4.4484e-04,\n","        -2.6671e-04, -4.0304e-04, -2.4669e-04,  1.3979e-04, -6.9981e-04])\n","gradient values before mask reapp. tensor([ 5.7177e-04, -3.1167e-04, -1.6877e-04, -4.8612e-05,  4.5173e-04,\n","        -2.6388e-04, -3.9998e-04, -2.3991e-04,  1.3896e-04, -6.7856e-04])\n","gradient values before mask reapp. tensor([ 5.7026e-04, -3.1152e-04, -1.7318e-04, -5.0449e-05,  4.4231e-04,\n","        -2.6307e-04, -4.0023e-04, -2.4364e-04,  1.3523e-04, -6.8507e-04])\n","gradient values before mask reapp. tensor([ 5.7526e-04, -3.1034e-04, -1.6576e-04, -4.9536e-05,  4.4403e-04,\n","        -2.6095e-04, -3.9832e-04, -2.4025e-04,  1.3351e-04, -6.7299e-04])\n","gradient values before mask reapp. tensor([ 5.8505e-04, -3.0807e-04, -1.4916e-04, -4.5720e-05,  4.5484e-04,\n","        -2.5765e-04, -3.9420e-04, -2.3100e-04,  1.3357e-04, -6.4487e-04])\n","gradient values before mask reapp. tensor([ 5.8291e-04, -3.0816e-04, -1.5463e-04, -4.8087e-05,  4.4449e-04,\n","        -2.5711e-04, -3.9487e-04, -2.3541e-04,  1.2975e-04, -6.5377e-04])\n","gradient values before mask reapp. tensor([ 5.8226e-04, -3.0783e-04, -1.5717e-04, -4.9440e-05,  4.3698e-04,\n","        -2.5611e-04, -3.9478e-04, -2.3796e-04,  1.2644e-04, -6.5730e-04])\n","gradient values before mask reapp. tensor([ 5.7952e-04, -3.0802e-04, -1.6387e-04, -5.2163e-05,  4.2524e-04,\n","        -2.5563e-04, -3.9569e-04, -2.4318e-04,  1.2229e-04, -6.6818e-04])\n","gradient values before mask reapp. tensor([ 5.8497e-04, -3.0648e-04, -1.5492e-04, -5.0268e-05,  4.2898e-04,\n","        -2.5329e-04, -3.9308e-04, -2.3850e-04,  1.2116e-04, -6.5248e-04])\n","gradient values before mask reapp. tensor([ 5.8791e-04, -3.0565e-04, -1.5087e-04, -5.0096e-05,  4.2790e-04,\n","        -2.5169e-04, -3.9184e-04, -2.3702e-04,  1.1912e-04, -6.4586e-04])\n","gradient values before mask reapp. tensor([ 5.8504e-04, -3.0575e-04, -1.5767e-04, -5.2662e-05,  4.1603e-04,\n","        -2.5111e-04, -3.9263e-04, -2.4226e-04,  1.1495e-04, -6.5644e-04])\n","gradient values before mask reapp. tensor([ 5.9141e-04, -3.0412e-04, -1.4678e-04, -5.0315e-05,  4.2200e-04,\n","        -2.4874e-04, -3.8974e-04, -2.3629e-04,  1.1438e-04, -6.3796e-04])\n","gradient values before mask reapp. tensor([ 5.9134e-04, -3.0369e-04, -1.4804e-04, -5.1319e-05,  4.1585e-04,\n","        -2.4763e-04, -3.8941e-04, -2.3801e-04,  1.1142e-04, -6.3946e-04])\n","gradient values before mask reapp. tensor([ 5.8467e-04, -3.0442e-04, -1.6158e-04, -5.5494e-05,  3.9780e-04,\n","        -2.4790e-04, -3.9149e-04, -2.4725e-04,  1.0622e-04, -6.6085e-04])\n","gradient values before mask reapp. tensor([ 5.9648e-04, -3.0194e-04, -1.4075e-04, -5.0802e-05,  4.1315e-04,\n","        -2.4445e-04, -3.8678e-04, -2.3528e-04,  1.0738e-04, -6.2675e-04])\n","gradient values before mask reapp. tensor([ 5.9289e-04, -3.0196e-04, -1.4805e-04, -5.3007e-05,  4.0167e-04,\n","        -2.4403e-04, -3.8744e-04, -2.4048e-04,  1.0358e-04, -6.3741e-04])\n","gradient values before mask reapp. tensor([ 6.0548e-04, -2.9930e-04, -1.2603e-04, -4.7942e-05,  4.1779e-04,\n","        -2.4029e-04, -3.8240e-04, -2.2785e-04,  1.0478e-04, -6.0106e-04])\n","gradient values before mask reapp. tensor([ 6.0159e-04, -2.9952e-04, -1.3401e-04, -5.0603e-05,  4.0548e-04,\n","        -2.4004e-04, -3.8340e-04, -2.3356e-04,  1.0081e-04, -6.1350e-04])\n","gradient values before mask reapp. tensor([ 6.0110e-04, -2.9898e-04, -1.3543e-04, -5.1243e-05,  3.9975e-04,\n","        -2.3899e-04, -3.8284e-04, -2.3506e-04,  9.8147e-05, -6.1458e-04])\n","gradient values before mask reapp. tensor([ 6.0462e-04, -2.9794e-04, -1.2959e-04, -5.0313e-05,  4.0102e-04,\n","        -2.3733e-04, -3.8113e-04, -2.3219e-04,  9.6827e-05, -6.0474e-04])\n","gradient values before mask reapp. tensor([ 5.9835e-04, -2.9859e-04, -1.4211e-04, -5.4224e-05,  3.8407e-04,\n","        -2.3751e-04, -3.8304e-04, -2.4077e-04,  9.1919e-05, -6.2455e-04])\n","gradient values before mask reapp. tensor([ 6.0392e-04, -2.9692e-04, -1.3199e-04, -5.1692e-05,  3.8985e-04,\n","        -2.3525e-04, -3.8010e-04, -2.3501e-04,  9.1559e-05, -6.0671e-04])\n","gradient values before mask reapp. tensor([ 6.0730e-04, -2.9589e-04, -1.2644e-04, -5.0899e-05,  3.9064e-04,\n","        -2.3353e-04, -3.7843e-04, -2.3237e-04,  9.0108e-05, -5.9733e-04])\n","gradient values before mask reapp. tensor([ 6.0765e-04, -2.9530e-04, -1.2668e-04, -5.1461e-05,  3.8555e-04,\n","        -2.3229e-04, -3.7777e-04, -2.3334e-04,  8.7431e-05, -5.9688e-04])\n","gradient values before mask reapp. tensor([ 6.1421e-04, -2.9355e-04, -1.1456e-04, -4.8548e-05,  3.9339e-04,\n","        -2.2995e-04, -3.7460e-04, -2.2634e-04,  8.7548e-05, -5.7628e-04])\n","gradient values before mask reapp. tensor([ 6.0505e-04, -2.9467e-04, -1.3211e-04, -5.3620e-05,  3.7197e-04,\n","        -2.3079e-04, -3.7747e-04, -2.3787e-04,  8.1958e-05, -6.0413e-04])\n","gradient values before mask reapp. tensor([ 6.2202e-04, -2.9096e-04, -1.0074e-04, -4.5530e-05,  3.9825e-04,\n","        -2.2614e-04, -3.7025e-04, -2.1898e-04,  8.5488e-05, -5.5175e-04])\n","gradient values before mask reapp. tensor([ 6.1207e-04, -2.9223e-04, -1.1945e-04, -5.0851e-05,  3.7614e-04,\n","        -2.2724e-04, -3.7341e-04, -2.3113e-04,  7.9922e-05, -5.8160e-04])\n","gradient values before mask reapp. tensor([ 6.1664e-04, -2.9091e-04, -1.1159e-04, -4.9292e-05,  3.7909e-04,\n","        -2.2520e-04, -3.7115e-04, -2.2700e-04,  7.8885e-05, -5.6811e-04])\n","gradient values before mask reapp. tensor([ 6.1667e-04, -2.9022e-04, -1.1114e-04, -4.9222e-05,  3.7602e-04,\n","        -2.2420e-04, -3.7020e-04, -2.2704e-04,  7.7097e-05, -5.6615e-04])\n","gradient values before mask reapp. tensor([ 6.1962e-04, -2.8919e-04, -1.0616e-04, -4.8389e-05,  3.7648e-04,\n","        -2.2255e-04, -3.6857e-04, -2.2465e-04,  7.5686e-05, -5.5743e-04])\n","gradient values before mask reapp. tensor([ 6.1948e-04, -2.8853e-04, -1.0646e-04, -4.8601e-05,  3.7213e-04,\n","        -2.2145e-04, -3.6777e-04, -2.2532e-04,  7.3459e-05, -5.5661e-04])\n","gradient values before mask reapp. tensor([ 6.1940e-04, -2.8806e-04, -1.0665e-04, -4.9049e-05,  3.6803e-04,\n","        -2.2057e-04, -3.6719e-04, -2.2593e-04,  7.1381e-05, -5.5641e-04])\n","gradient values before mask reapp. tensor([ 6.2866e-04, -2.8568e-04, -8.9158e-05, -4.4430e-05,  3.8139e-04,\n","        -2.1757e-04, -3.6274e-04, -2.1546e-04,  7.2671e-05, -5.2649e-04])\n","gradient values before mask reapp. tensor([ 6.2341e-04, -2.8608e-04, -9.9233e-05, -4.7513e-05,  3.6723e-04,\n","        -2.1757e-04, -3.6412e-04, -2.2235e-04,  6.8513e-05, -5.4217e-04])\n","gradient values before mask reapp. tensor([ 6.2353e-04, -2.8536e-04, -9.8561e-05, -4.7343e-05,  3.6442e-04,\n","        -2.1654e-04, -3.6311e-04, -2.2221e-04,  6.6811e-05, -5.3978e-04])\n","gradient values before mask reapp. tensor([ 6.2359e-04, -2.8482e-04, -9.8509e-05, -4.7758e-05,  3.6037e-04,\n","        -2.1554e-04, -3.6244e-04, -2.2271e-04,  6.4702e-05, -5.3913e-04])\n","gradient values before mask reapp. tensor([ 6.3383e-04, -2.8225e-04, -7.8651e-05, -4.2361e-05,  3.7668e-04,\n","        -2.1249e-04, -3.5749e-04, -2.1052e-04,  6.6795e-05, -5.0535e-04])\n","gradient values before mask reapp. tensor([ 6.2376e-04, -2.8343e-04, -9.7166e-05, -4.7423e-05,  3.5492e-04,\n","        -2.1355e-04, -3.6050e-04, -2.2243e-04,  6.1413e-05, -5.3450e-04])\n","gradient values before mask reapp. tensor([ 6.2800e-04, -2.8206e-04, -8.9269e-05, -4.5636e-05,  3.5850e-04,\n","        -2.1161e-04, -3.5816e-04, -2.1806e-04,  6.0743e-05, -5.2075e-04])\n","gradient values before mask reapp. tensor([ 6.2529e-04, -2.8192e-04, -9.4012e-05, -4.7038e-05,  3.5020e-04,\n","        -2.1119e-04, -3.5834e-04, -2.2135e-04,  5.7970e-05, -5.2747e-04])\n","gradient values before mask reapp. tensor([ 6.3108e-04, -2.8014e-04, -8.2403e-05, -4.3849e-05,  3.5841e-04,\n","        -2.0903e-04, -3.5508e-04, -2.1431e-04,  5.8512e-05, -5.0718e-04])\n","gradient values before mask reapp. tensor([ 6.2436e-04, -2.8065e-04, -9.4422e-05, -4.7093e-05,  3.4322e-04,\n","        -2.0939e-04, -3.5669e-04, -2.2207e-04,  5.4485e-05, -5.2558e-04])\n","gradient values before mask reapp. tensor([ 6.3700e-04, -2.7788e-04, -7.0976e-05, -4.1272e-05,  3.6189e-04,\n","        -2.0579e-04, -3.5128e-04, -2.0807e-04,  5.6707e-05, -4.8674e-04])\n","gradient values before mask reapp. tensor([ 6.3016e-04, -2.7845e-04, -8.2918e-05, -4.4470e-05,  3.4717e-04,\n","        -2.0634e-04, -3.5296e-04, -2.1567e-04,  5.2925e-05, -5.0525e-04])\n","gradient values before mask reapp. tensor([ 6.3350e-04, -2.7707e-04, -7.6099e-05, -4.2570e-05,  3.5021e-04,\n","        -2.0452e-04, -3.5061e-04, -2.1172e-04,  5.2328e-05, -4.9256e-04])\n","gradient values before mask reapp. tensor([ 6.2838e-04, -2.7738e-04, -8.4977e-05, -4.5010e-05,  3.3841e-04,\n","        -2.0473e-04, -3.5169e-04, -2.1745e-04,  4.9084e-05, -5.0618e-04])\n","gradient values before mask reapp. tensor([ 6.2806e-04, -2.7674e-04, -8.5140e-05, -4.5180e-05,  3.3438e-04,\n","        -2.0366e-04, -3.5087e-04, -2.1793e-04,  4.7086e-05, -5.0525e-04])\n","gradient values before mask reapp. tensor([ 6.4095e-04, -2.7366e-04, -5.9969e-05, -3.8221e-05,  3.5631e-04,\n","        -2.0015e-04, -3.4482e-04, -2.0227e-04,  5.0450e-05, -4.6274e-04])\n","gradient values before mask reapp. tensor([ 6.3030e-04, -2.7493e-04, -7.9212e-05, -4.3463e-05,  3.3409e-04,\n","        -2.0138e-04, -3.4797e-04, -2.1451e-04,  4.5127e-05, -4.9317e-04])\n","gradient values before mask reapp. tensor([ 6.3465e-04, -2.7350e-04, -7.0422e-05, -4.1143e-05,  3.3944e-04,\n","        -1.9956e-04, -3.4541e-04, -2.0929e-04,  4.5145e-05, -4.7774e-04])\n","gradient values before mask reapp. tensor([ 6.3221e-04, -2.7323e-04, -7.4612e-05, -4.2390e-05,  3.3144e-04,\n","        -1.9893e-04, -3.4544e-04, -2.1232e-04,  4.2370e-05, -4.8341e-04])\n","gradient values before mask reapp. tensor([ 6.3925e-04, -2.7137e-04, -6.0592e-05, -3.8695e-05,  3.4213e-04,\n","        -1.9669e-04, -3.4185e-04, -2.0372e-04,  4.3522e-05, -4.5970e-04])\n","gradient values before mask reapp. tensor([ 6.2964e-04, -2.7216e-04, -7.6992e-05, -4.2638e-05,  3.2356e-04,\n","        -1.9762e-04, -3.4411e-04, -2.1382e-04,  3.9167e-05, -4.8456e-04])\n","gradient values before mask reapp. tensor([ 6.3544e-04, -2.7046e-04, -6.5651e-05, -3.9645e-05,  3.3113e-04,\n","        -1.9545e-04, -3.4100e-04, -2.0708e-04,  3.9525e-05, -4.6491e-04])\n","gradient values before mask reapp. tensor([ 6.3262e-04, -2.7027e-04, -6.9862e-05, -4.0745e-05,  3.2399e-04,\n","        -1.9511e-04, -3.4105e-04, -2.0981e-04,  3.7258e-05, -4.7071e-04])\n","gradient values before mask reapp. tensor([ 6.3657e-04, -2.6892e-04, -6.2086e-05, -3.8798e-05,  3.2788e-04,\n","        -1.9328e-04, -3.3870e-04, -2.0534e-04,  3.6857e-05, -4.5701e-04])\n","gradient values before mask reapp. tensor([ 6.3357e-04, -2.6875e-04, -6.6472e-05, -3.9843e-05,  3.2085e-04,\n","        -1.9305e-04, -3.3876e-04, -2.0809e-04,  3.4705e-05, -4.6300e-04])\n","gradient values before mask reapp. tensor([ 6.3684e-04, -2.6725e-04, -5.8999e-05, -3.7462e-05,  3.2538e-04,\n","        -1.9130e-04, -3.3613e-04, -2.0339e-04,  3.4729e-05, -4.4889e-04])\n","gradient values before mask reapp. tensor([ 6.4234e-04, -2.6584e-04, -4.7785e-05, -3.4681e-05,  3.3372e-04,\n","        -1.8960e-04, -3.3334e-04, -1.9651e-04,  3.5599e-05, -4.3037e-04])\n","gradient values before mask reapp. tensor([ 6.3153e-04, -2.6682e-04, -6.6449e-05, -3.9278e-05,  3.1273e-04,\n","        -1.9073e-04, -3.3608e-04, -2.0810e-04,  3.0748e-05, -4.5895e-04])\n","gradient values before mask reapp. tensor([ 6.3837e-04, -2.6502e-04, -5.3480e-05, -3.6087e-05,  3.2138e-04,\n","        -1.8831e-04, -3.3275e-04, -2.0051e-04,  3.1171e-05, -4.3701e-04])\n","gradient values before mask reapp. tensor([ 6.3321e-04, -2.6517e-04, -6.1589e-05, -3.7982e-05,  3.1110e-04,\n","        -1.8852e-04, -3.3351e-04, -2.0545e-04,  2.8536e-05, -4.4888e-04])\n","gradient values before mask reapp. tensor([ 6.3875e-04, -2.6351e-04, -5.0599e-05, -3.5159e-05,  3.1820e-04,\n","        -1.8637e-04, -3.3049e-04, -1.9892e-04,  2.8810e-05, -4.2995e-04])\n","gradient values before mask reapp. tensor([ 6.3394e-04, -2.6336e-04, -5.7383e-05, -3.6235e-05,  3.0987e-04,\n","        -1.8642e-04, -3.3069e-04, -2.0274e-04,  2.6739e-05, -4.3882e-04])\n","gradient values before mask reapp. tensor([ 6.5186e-04, -2.5966e-04, -2.3357e-05, -2.7458e-05,  3.3977e-04,\n","        -1.8198e-04, -3.2318e-04, -1.8186e-04,  3.1523e-05, -3.8292e-04])\n","gradient values before mask reapp. tensor([ 6.3523e-04, -2.6179e-04, -5.2968e-05, -3.5066e-05,  3.0813e-04,\n","        -1.8436e-04, -3.2825e-04, -2.0027e-04,  2.4661e-05, -4.2961e-04])\n","gradient values before mask reapp. tensor([ 6.4832e-04, -2.5885e-04, -2.7502e-05, -2.8385e-05,  3.3000e-04,\n","        -1.8092e-04, -3.2238e-04, -1.8456e-04,  2.8026e-05, -3.8742e-04])\n","gradient values before mask reapp. tensor([ 6.3930e-04, -2.5970e-04, -4.2846e-05, -3.2246e-05,  3.1256e-04,\n","        -1.8188e-04, -3.2464e-04, -1.9404e-04,  2.4010e-05, -4.1112e-04])\n","gradient values before mask reapp. tensor([ 6.4364e-04, -2.5817e-04, -3.3738e-05, -2.9658e-05,  3.1837e-04,\n","        -1.8001e-04, -3.2191e-04, -1.8850e-04,  2.4217e-05, -3.9490e-04])\n","gradient values before mask reapp. tensor([ 6.4339e-04, -2.5723e-04, -3.2041e-05, -2.8603e-05,  3.1805e-04,\n","        -1.7911e-04, -3.2044e-04, -1.8712e-04,  2.3636e-05, -3.9013e-04])\n","gradient values before mask reapp. tensor([ 6.4409e-04, -2.5639e-04, -2.9248e-05, -2.7627e-05,  3.1845e-04,\n","        -1.7818e-04, -3.1905e-04, -1.8528e-04,  2.3093e-05, -3.8439e-04])\n","gradient values before mask reapp. tensor([ 6.4611e-04, -2.5535e-04, -2.4606e-05, -2.6448e-05,  3.1960e-04,\n","        -1.7677e-04, -3.1733e-04, -1.8264e-04,  2.2341e-05, -3.7581e-04])\n","gradient values before mask reapp. tensor([ 6.4369e-04, -2.5498e-04, -2.7422e-05, -2.6859e-05,  3.1457e-04,\n","        -1.7641e-04, -3.1699e-04, -1.8424e-04,  2.0774e-05, -3.7895e-04])\n","gradient values before mask reapp. tensor([ 6.4453e-04, -2.5428e-04, -2.4595e-05, -2.6166e-05,  3.1487e-04,\n","        -1.7557e-04, -3.1578e-04, -1.8248e-04,  2.0199e-05, -3.7377e-04])\n","gradient values before mask reapp. tensor([ 6.4341e-04, -2.5358e-04, -2.5369e-05, -2.6016e-05,  3.1109e-04,\n","        -1.7468e-04, -3.1492e-04, -1.8302e-04,  1.8588e-05, -3.7319e-04])\n","gradient values before mask reapp. tensor([ 6.4873e-04, -2.5209e-04, -1.3708e-05, -2.2932e-05,  3.2054e-04,\n","        -1.7308e-04, -3.1193e-04, -1.7557e-04,  2.0000e-05, -3.5381e-04])\n","gradient values before mask reapp. tensor([ 6.4100e-04, -2.5228e-04, -2.5747e-05, -2.5254e-05,  3.0694e-04,\n","        -1.7354e-04, -3.1305e-04, -1.8265e-04,  1.6877e-05, -3.7075e-04])\n","gradient values before mask reapp. tensor([ 6.5335e-04, -2.4945e-04, -1.6069e-06, -1.8761e-05,  3.2760e-04,\n","        -1.7021e-04, -3.0741e-04, -1.6772e-04,  2.0043e-05, -3.3047e-04])\n","gradient values before mask reapp. tensor([ 6.3968e-04, -2.5104e-04, -2.4966e-05, -2.4590e-05,  3.0295e-04,\n","        -1.7216e-04, -3.1123e-04, -1.8196e-04,  1.4895e-05, -3.6708e-04])\n","gradient values before mask reapp. tensor([ 6.4690e-04, -2.4909e-04, -1.0511e-05, -2.0720e-05,  3.1398e-04,\n","        -1.6979e-04, -3.0753e-04, -1.7312e-04,  1.6158e-05, -3.4253e-04])\n","gradient values before mask reapp. tensor([ 6.4723e-04, -2.4842e-04, -8.1646e-06, -2.0003e-05,  3.1430e-04,\n","        -1.6909e-04, -3.0637e-04, -1.7148e-04,  1.5769e-05, -3.3795e-04])\n","gradient values before mask reapp. tensor([ 6.4198e-04, -2.4851e-04, -1.6398e-05, -2.1861e-05,  3.0371e-04,\n","        -1.6923e-04, -3.0711e-04, -1.7655e-04,  1.3053e-05, -3.4985e-04])\n","gradient values before mask reapp. tensor([ 6.4557e-04, -2.4713e-04, -8.1950e-06, -1.9487e-05,  3.0910e-04,\n","        -1.6762e-04, -3.0461e-04, -1.7140e-04,  1.3409e-05, -3.3528e-04])\n","gradient values before mask reapp. tensor([ 6.4933e-04, -2.4551e-04,  1.1115e-06, -1.6439e-05,  3.1644e-04,\n","        -1.6600e-04, -3.0165e-04, -1.6523e-04,  1.4418e-05, -3.1832e-04])\n","gradient values before mask reapp. tensor([ 6.4311e-04, -2.4582e-04, -8.7101e-06, -1.8683e-05,  3.0468e-04,\n","        -1.6641e-04, -3.0277e-04, -1.7118e-04,  1.1637e-05, -3.3290e-04])\n","gradient values before mask reapp. tensor([ 6.4530e-04, -2.4477e-04, -3.1077e-06, -1.7129e-05,  3.0768e-04,\n","        -1.6521e-04, -3.0088e-04, -1.6763e-04,  1.1585e-05, -3.2291e-04])\n","gradient values before mask reapp. tensor([ 6.2620e-04, -2.4977e-04, -5.1236e-05, -2.4341e-05,  2.2701e-04,\n","        -1.6420e-04, -3.0849e-04, -2.0312e-04, -1.7840e-05, -3.9157e-04])\n","gradient values before mask reapp. tensor([ 6.1693e-04, -2.5054e-04, -6.6327e-05, -2.8225e-05,  2.1097e-04,\n","        -1.6534e-04, -3.1072e-04, -2.1220e-04, -2.1052e-05, -4.1509e-04])\n","gradient values before mask reapp. tensor([ 6.3795e-04, -2.4605e-04, -2.5480e-05, -1.6909e-05,  2.4835e-04,\n","        -1.6016e-04, -3.0148e-04, -1.8665e-04, -1.4570e-05, -3.4690e-04])\n","gradient values before mask reapp. tensor([ 6.2245e-04, -2.4794e-04, -5.1550e-05, -2.3667e-05,  2.2256e-04,\n","        -1.6286e-04, -3.0601e-04, -2.0226e-04, -1.9282e-05, -3.8864e-04])\n","gradient values before mask reapp. tensor([ 6.1973e-04, -2.4747e-04, -5.4491e-05, -2.4120e-05,  2.1807e-04,\n","        -1.6253e-04, -3.0564e-04, -2.0381e-04, -2.0441e-05, -3.9187e-04])\n","gradient values before mask reapp. tensor([ 6.2963e-04, -2.4525e-04, -3.4413e-05, -1.8914e-05,  2.3565e-04,\n","        -1.6000e-04, -3.0104e-04, -1.9120e-04, -1.7469e-05, -3.5897e-04])\n","gradient values before mask reapp. tensor([ 6.1856e-04, -2.4611e-04, -5.2517e-05, -2.3289e-05,  2.1697e-04,\n","        -1.6137e-04, -3.0365e-04, -2.0202e-04, -2.1136e-05, -3.8664e-04])\n","gradient values before mask reapp. tensor([ 6.3345e-04, -2.4269e-04, -2.2840e-05, -1.5146e-05,  2.4354e-04,\n","        -1.5752e-04, -2.9676e-04, -1.8339e-04, -1.6602e-05, -3.3714e-04])\n","gradient values before mask reapp. tensor([ 6.2050e-04, -2.4401e-04, -4.4178e-05, -2.0475e-05,  2.2232e-04,\n","        -1.5945e-04, -3.0012e-04, -1.9604e-04, -2.0517e-05, -3.7047e-04])\n","gradient values before mask reapp. tensor([ 6.3078e-04, -2.4164e-04, -2.3665e-05, -1.5083e-05,  2.3989e-04,\n","        -1.5673e-04, -2.9541e-04, -1.8332e-04, -1.7702e-05, -3.3661e-04])\n","gradient values before mask reapp. tensor([ 6.1777e-04, -2.4286e-04, -4.4831e-05, -2.0204e-05,  2.1908e-04,\n","        -1.5867e-04, -2.9865e-04, -1.9577e-04, -2.1449e-05, -3.6941e-04])\n","gradient values before mask reapp. tensor([ 6.3778e-04, -2.3897e-04, -6.6542e-06, -1.0262e-05,  2.5326e-04,\n","        -1.5397e-04, -2.9045e-04, -1.7222e-04, -1.5700e-05, -3.0704e-04])\n","gradient values before mask reapp. tensor([ 6.2284e-04, -2.4014e-04, -3.0264e-05, -1.5342e-05,  2.3106e-04,\n","        -1.5622e-04, -2.9379e-04, -1.8574e-04, -1.9403e-05, -3.4268e-04])\n","gradient values before mask reapp. tensor([ 6.2898e-04, -2.3840e-04, -1.7147e-05, -1.1856e-05,  2.4163e-04,\n","        -1.5428e-04, -2.9044e-04, -1.7747e-04, -1.7853e-05, -3.2066e-04])\n","gradient values before mask reapp. tensor([ 6.2775e-04, -2.3782e-04, -1.7071e-05, -1.1468e-05,  2.4073e-04,\n","        -1.5389e-04, -2.8961e-04, -1.7699e-04, -1.8071e-05, -3.1932e-04])\n","gradient values before mask reapp. tensor([ 6.2672e-04, -2.3718e-04, -1.6854e-05, -1.1360e-05,  2.3924e-04,\n","        -1.5336e-04, -2.8878e-04, -1.7662e-04, -1.8630e-05, -3.1806e-04])\n","gradient values before mask reapp. tensor([ 6.1986e-04, -2.3748e-04, -2.7001e-05, -1.3598e-05,  2.2872e-04,\n","        -1.5409e-04, -2.8992e-04, -1.8237e-04, -2.0562e-05, -3.3314e-04])\n","gradient values before mask reapp. tensor([ 6.3763e-04, -2.3398e-04,  7.2883e-06, -4.6766e-06,  2.5957e-04,\n","        -1.4992e-04, -2.8252e-04, -1.6112e-04, -1.5270e-05, -2.7717e-04])\n","gradient values before mask reapp. tensor([ 6.1583e-04, -2.3659e-04, -2.9646e-05, -1.3881e-05,  2.2402e-04,\n","        -1.5371e-04, -2.8892e-04, -1.8319e-04, -2.1552e-05, -3.3558e-04])\n","gradient values before mask reapp. tensor([ 6.1749e-04, -2.3562e-04, -2.4930e-05, -1.2776e-05,  2.2637e-04,\n","        -1.5262e-04, -2.8728e-04, -1.8020e-04, -2.1572e-05, -3.2733e-04])\n","gradient values before mask reapp. tensor([ 6.3068e-04, -2.3258e-04,  1.7846e-06, -5.2616e-06,  2.5073e-04,\n","        -1.4926e-04, -2.8106e-04, -1.6327e-04, -1.7228e-05, -2.8259e-04])\n","gradient values before mask reapp. tensor([ 6.1430e-04, -2.3447e-04, -2.5947e-05, -1.2345e-05,  2.2315e-04,\n","        -1.5185e-04, -2.8574e-04, -1.7995e-04, -2.2362e-05, -3.2644e-04])\n","gradient values before mask reapp. tensor([ 6.3136e-04, -2.3084e-04,  7.4342e-06, -3.2624e-06,  2.5345e-04,\n","        -1.4771e-04, -2.7828e-04, -1.5911e-04, -1.7089e-05, -2.7113e-04])\n","gradient values before mask reapp. tensor([ 6.1528e-04, -2.3272e-04, -1.9344e-05, -1.0195e-05,  2.2727e-04,\n","        -1.5046e-04, -2.8286e-04, -1.7505e-04, -2.1758e-05, -3.1387e-04])\n","gradient values before mask reapp. tensor([ 6.2892e-04, -2.2942e-04,  8.6943e-06, -1.8477e-06,  2.5353e-04,\n","        -1.4695e-04, -2.7611e-04, -1.5702e-04, -1.6903e-05, -2.6616e-04])\n","gradient values before mask reapp. tensor([ 6.0552e-04, -2.3432e-04, -4.2396e-05, -1.1398e-05,  1.8019e-04,\n","        -1.4814e-04, -2.8467e-04, -1.9241e-04, -4.0568e-05, -3.4224e-04])\n","gradient values before mask reapp. tensor([ 6.0397e-04, -2.3383e-04, -4.2858e-05, -1.1428e-05,  1.7900e-04,\n","        -1.4791e-04, -2.8406e-04, -1.9225e-04, -4.0697e-05, -3.4228e-04])\n","gradient values before mask reapp. tensor([ 6.2170e-04, -2.2817e-04,  2.5056e-06, -2.7787e-06,  2.4411e-04,\n","        -1.4643e-04, -2.7492e-04, -1.5966e-04, -1.8935e-05, -2.7304e-04])\n","gradient values before mask reapp. tensor([ 6.1043e-04, -2.3119e-04, -2.6301e-05, -6.7181e-06,  1.9266e-04,\n","        -1.4535e-04, -2.7923e-04, -1.8127e-04, -3.8310e-05, -3.1354e-04])\n","gradient values before mask reapp. tensor([ 5.9484e-04, -2.3279e-04, -5.1827e-05, -1.3226e-05,  1.6862e-04,\n","        -1.4797e-04, -2.8348e-04, -1.9628e-04, -4.2185e-05, -3.5394e-04])\n","gradient values before mask reapp. tensor([ 6.1314e-04, -2.2917e-04, -1.6541e-05, -3.8092e-06,  2.0011e-04,\n","        -1.4361e-04, -2.7577e-04, -1.7441e-04, -3.6940e-05, -2.9594e-04])\n","gradient values before mask reapp. tensor([ 5.9090e-04, -2.3184e-04, -5.3892e-05, -1.3546e-05,  1.6519e-04,\n","        -1.4763e-04, -2.8238e-04, -1.9659e-04, -4.2615e-05, -3.5570e-04])\n","gradient values before mask reapp. tensor([ 6.1081e-04, -2.2785e-04, -1.5727e-05, -3.1356e-06,  1.9950e-04,\n","        -1.4286e-04, -2.7400e-04, -1.7295e-04, -3.6884e-05, -2.9250e-04])\n","gradient values before mask reapp. tensor([ 5.9600e-04, -2.2944e-04, -3.9913e-05, -9.5596e-06,  1.7641e-04,\n","        -1.4538e-04, -2.7812e-04, -1.8722e-04, -4.0649e-05, -3.3131e-04])\n","gradient values before mask reapp. tensor([ 6.0920e-04, -2.2638e-04, -1.3520e-05, -2.1992e-06,  1.9993e-04,\n","        -1.4189e-04, -2.7193e-04, -1.7066e-04, -3.6698e-05, -2.8694e-04])\n","gradient values before mask reapp. tensor([ 5.9722e-04, -2.2769e-04, -3.2921e-05, -7.5615e-06,  1.8115e-04,\n","        -1.4394e-04, -2.7526e-04, -1.8211e-04, -3.9785e-05, -3.1843e-04])\n","gradient values before mask reapp. tensor([ 6.1083e-04, -2.2457e-04, -5.6735e-06,  2.5429e-07,  2.0577e-04,\n","        -1.4044e-04, -2.6890e-04, -1.6495e-04, -3.5541e-05, -2.7247e-04])\n","gradient values before mask reapp. tensor([ 5.9770e-04, -2.2594e-04, -2.6871e-05, -5.4880e-06,  1.8536e-04,\n","        -1.4265e-04, -2.7247e-04, -1.7742e-04, -3.8888e-05, -3.0661e-04])\n","gradient values before mask reapp. tensor([ 6.1108e-04, -2.2253e-04,  9.4796e-07,  3.2434e-06,  2.1144e-04,\n","        -1.3906e-04, -2.6552e-04, -1.5941e-04, -3.4138e-05, -2.5844e-04])\n","gradient values before mask reapp. tensor([ 5.9575e-04, -2.2458e-04, -2.4963e-05, -4.2990e-06,  1.8624e-04,\n","        -1.4190e-04, -2.7043e-04, -1.7508e-04, -3.8425e-05, -3.0127e-04])\n","gradient values before mask reapp. tensor([ 6.0568e-04, -2.2215e-04, -4.5137e-06,  1.5141e-06,  2.0452e-04,\n","        -1.3923e-04, -2.6551e-04, -1.6209e-04, -3.5272e-05, -2.6672e-04])\n","gradient values before mask reapp. tensor([ 5.9519e-04, -2.2306e-04, -2.1013e-05, -2.9458e-06,  1.8835e-04,\n","        -1.4087e-04, -2.6815e-04, -1.7176e-04, -3.7946e-05, -2.9315e-04])\n","gradient values before mask reapp. tensor([ 6.0271e-04, -2.2096e-04, -4.7205e-06,  1.7740e-06,  2.0279e-04,\n","        -1.3862e-04, -2.6399e-04, -1.6127e-04, -3.5412e-05, -2.6527e-04])\n","gradient values before mask reapp. tensor([ 5.9186e-04, -2.2211e-04, -2.2103e-05, -2.9524e-06,  1.8599e-04,\n","        -1.4048e-04, -2.6695e-04, -1.7146e-04, -3.8127e-05, -2.9343e-04])\n","gradient values before mask reapp. tensor([ 5.9960e-04, -2.1983e-04, -5.2505e-06,  2.0900e-06,  2.0100e-04,\n","        -1.3813e-04, -2.6257e-04, -1.6061e-04, -3.5505e-05, -2.6426e-04])\n","gradient values before mask reapp. tensor([ 5.9767e-04, -2.1945e-04, -6.1951e-06,  1.8331e-06,  1.9936e-04,\n","        -1.3804e-04, -2.6211e-04, -1.6069e-04, -3.5684e-05, -2.6539e-04])\n","gradient values before mask reapp. tensor([ 5.9444e-04, -2.1886e-04, -8.7767e-06,  1.9698e-06,  1.9696e-04,\n","        -1.3802e-04, -2.6149e-04, -1.6145e-04, -3.5811e-05, -2.6757e-04])\n","gradient values before mask reapp. tensor([ 6.0026e-04, -2.1721e-04,  4.2208e-06,  5.6174e-06,  2.0829e-04,\n","        -1.3628e-04, -2.5819e-04, -1.5303e-04, -3.3803e-05, -2.4562e-04])\n","gradient values before mask reapp. tensor([ 5.9279e-04, -2.1750e-04, -6.4218e-06,  3.1705e-06,  1.9805e-04,\n","        -1.3723e-04, -2.5945e-04, -1.5892e-04, -3.5335e-05, -2.6170e-04])\n","gradient values before mask reapp. tensor([ 5.9866e-04, -2.1613e-04,  6.2266e-06,  6.0302e-06,  2.0849e-04,\n","        -1.3564e-04, -2.5650e-04, -1.5089e-04, -3.3677e-05, -2.4154e-04])\n","gradient values before mask reapp. tensor([ 5.8135e-04, -2.1788e-04, -2.1953e-05, -6.5970e-07,  1.8260e-04,\n","        -1.3862e-04, -2.6115e-04, -1.6733e-04, -3.7633e-05, -2.8558e-04])\n","gradient values before mask reapp. tensor([ 5.9752e-04, -2.1474e-04,  9.1578e-06,  7.0501e-06,  2.0964e-04,\n","        -1.3472e-04, -2.5444e-04, -1.4819e-04, -3.3359e-05, -2.3518e-04])\n","gradient values before mask reapp. tensor([ 5.7679e-04, -2.1693e-04, -2.4845e-05, -9.7830e-07,  1.7871e-04,\n","        -1.3830e-04, -2.6009e-04, -1.6800e-04, -3.8035e-05, -2.8828e-04])\n","gradient values before mask reapp. tensor([ 5.9822e-04, -2.1307e-04,  1.5459e-05,  8.8656e-06,  2.1381e-04,\n","        -1.3341e-04, -2.5171e-04, -1.4344e-04, -3.2569e-05, -2.2346e-04])\n","gradient values before mask reapp. tensor([ 5.7653e-04, -2.1554e-04, -2.0594e-05,  1.6992e-07,  1.8092e-04,\n","        -1.3738e-04, -2.5795e-04, -1.6460e-04, -3.7625e-05, -2.8029e-04])\n","gradient values before mask reapp. tensor([ 5.9200e-04, -2.1230e-04,  9.4913e-06,  7.8549e-06,  2.0704e-04,\n","        -1.3348e-04, -2.5127e-04, -1.4605e-04, -3.3471e-05, -2.3103e-04])\n","gradient values before mask reapp. tensor([ 5.8366e-04, -2.1290e-04, -2.7528e-06,  4.9061e-06,  1.9557e-04,\n","        -1.3467e-04, -2.5291e-04, -1.5283e-04, -3.5138e-05, -2.4992e-04])\n","gradient values before mask reapp. tensor([ 5.8296e-04, -2.1220e-04, -1.5287e-06,  5.4062e-06,  1.9590e-04,\n","        -1.3432e-04, -2.5197e-04, -1.5165e-04, -3.5023e-05, -2.4720e-04])\n","gradient values before mask reapp. tensor([ 5.8471e-04, -2.1115e-04,  4.1376e-06,  7.0517e-06,  2.0043e-04,\n","        -1.3335e-04, -2.5009e-04, -1.4772e-04, -3.4187e-05, -2.3709e-04])\n","gradient values before mask reapp. tensor([ 5.8670e-04, -2.0979e-04,  1.1061e-05,  9.6452e-06,  2.0679e-04,\n","        -1.3227e-04, -2.4761e-04, -1.4264e-04, -3.2840e-05, -2.2401e-04])\n","gradient values before mask reapp. tensor([ 5.7935e-04, -2.1055e-04, -2.0766e-07,  6.1582e-06,  1.9534e-04,\n","        -1.3343e-04, -2.4946e-04, -1.4919e-04, -3.4776e-05, -2.4276e-04])\n","gradient values before mask reapp. tensor([ 5.7711e-04, -2.0971e-04, -9.6711e-07,  6.9999e-06,  1.9476e-04,\n","        -1.3313e-04, -2.4845e-04, -1.4885e-04, -3.4520e-05, -2.4162e-04])\n","gradient values before mask reapp. tensor([ 5.8075e-04, -2.0864e-04,  7.3353e-06,  8.5262e-06,  2.0072e-04,\n","        -1.3195e-04, -2.4644e-04, -1.4372e-04, -3.3774e-05, -2.2865e-04])\n","gradient values before mask reapp. tensor([ 5.7933e-04, -2.0796e-04,  7.7515e-06,  9.1817e-06,  2.0089e-04,\n","        -1.3166e-04, -2.4543e-04, -1.4276e-04, -3.3516e-05, -2.2654e-04])\n","gradient values before mask reapp. tensor([ 5.7220e-04, -2.0841e-04, -2.7260e-06,  6.2426e-06,  1.9030e-04,\n","        -1.3261e-04, -2.4691e-04, -1.4876e-04, -3.5242e-05, -2.4330e-04])\n","gradient values before mask reapp. tensor([ 5.7565e-04, -2.0698e-04,  6.1863e-06,  9.0139e-06,  1.9803e-04,\n","        -1.3130e-04, -2.4427e-04, -1.4276e-04, -3.3832e-05, -2.2754e-04])\n","gradient values before mask reapp. tensor([ 5.7895e-04, -2.0597e-04,  1.3970e-05,  1.0534e-05,  2.0372e-04,\n","        -1.3013e-04, -2.4233e-04, -1.3787e-04, -3.3022e-05, -2.1524e-04])\n","gradient values before mask reapp. tensor([ 5.6703e-04, -2.0683e-04, -4.1672e-06,  6.6408e-06,  1.8737e-04,\n","        -1.3202e-04, -2.4486e-04, -1.4800e-04, -3.5340e-05, -2.4275e-04])\n","gradient values before mask reapp. tensor([ 5.7386e-04, -2.0522e-04,  9.8862e-06,  9.7544e-06,  1.9863e-04,\n","        -1.3008e-04, -2.4167e-04, -1.3937e-04, -3.3680e-05, -2.2028e-04])\n","gradient values before mask reapp. tensor([ 5.6786e-04, -2.0516e-04,  2.4577e-06,  8.7420e-06,  1.9219e-04,\n","        -1.3067e-04, -2.4203e-04, -1.4294e-04, -3.4325e-05, -2.3025e-04])\n","gradient values before mask reapp. tensor([ 5.6890e-04, -2.0437e-04,  6.1956e-06,  9.2255e-06,  1.9407e-04,\n","        -1.2996e-04, -2.4083e-04, -1.4057e-04, -3.4214e-05, -2.2437e-04])\n","gradient values before mask reapp. tensor([ 5.6334e-04, -2.0426e-04, -5.7270e-07,  8.2878e-06,  1.8807e-04,\n","        -1.3045e-04, -2.4112e-04, -1.4381e-04, -3.4826e-05, -2.3343e-04])\n","gradient values before mask reapp. tensor([ 5.6738e-04, -2.0292e-04,  8.7494e-06,  1.0361e-05,  1.9514e-04,\n","        -1.2903e-04, -2.3872e-04, -1.3797e-04, -3.3822e-05, -2.1823e-04])\n","gradient values before mask reapp. tensor([ 5.6837e-04, -2.0188e-04,  1.3355e-05,  1.2011e-05,  1.9893e-04,\n","        -1.2830e-04, -2.3695e-04, -1.3455e-04, -3.3064e-05, -2.0952e-04])\n","gradient values before mask reapp. tensor([ 5.6568e-04, -2.0175e-04,  1.0569e-05,  1.0906e-05,  1.9520e-04,\n","        -1.2838e-04, -2.3704e-04, -1.3600e-04, -3.3710e-05, -2.1416e-04])\n","gradient values before mask reapp. tensor([ 5.6071e-04, -2.0167e-04,  4.7356e-06,  1.0180e-05,  1.9024e-04,\n","        -1.2881e-04, -2.3718e-04, -1.3863e-04, -3.4121e-05, -2.2182e-04])\n","gradient values before mask reapp. tensor([ 5.6839e-04, -1.9957e-04,  2.0961e-05,  1.4548e-05,  2.0409e-04,\n","        -1.2652e-04, -2.3318e-04, -1.2842e-04, -3.1867e-05, -1.9455e-04])\n","gradient values before mask reapp. tensor([ 5.6107e-04, -2.0020e-04,  1.0032e-05,  1.1164e-05,  1.9279e-04,\n","        -1.2772e-04, -2.3494e-04, -1.3478e-04, -3.3844e-05, -2.1272e-04])\n","gradient values before mask reapp. tensor([ 5.7712e-04, -1.9687e-04,  4.1369e-05,  2.0086e-05,  2.2154e-04,\n","        -1.2366e-04, -2.2781e-04, -1.1508e-04, -2.8815e-05, -1.6007e-04])\n","gradient values before mask reapp. tensor([ 5.5426e-04, -1.9980e-04,  3.2552e-06,  1.0000e-05,  1.8600e-04,\n","        -1.2815e-04, -2.3477e-04, -1.3762e-04, -3.4558e-05, -2.2186e-04])\n","gradient values before mask reapp. tensor([ 5.5918e-04, -1.9832e-04,  1.3879e-05,  1.2580e-05,  1.9445e-04,\n","        -1.2642e-04, -2.3207e-04, -1.3102e-04, -3.3238e-05, -2.0423e-04])\n","gradient values before mask reapp. tensor([ 5.5316e-04, -1.9833e-04,  6.3183e-06,  1.1131e-05,  1.8735e-04,\n","        -1.2716e-04, -2.3261e-04, -1.3482e-04, -3.4201e-05, -2.1509e-04])\n","gradient values before mask reapp. tensor([ 5.5822e-04, -1.9686e-04,  1.7342e-05,  1.3793e-05,  1.9623e-04,\n","        -1.2546e-04, -2.2987e-04, -1.2794e-04, -3.2787e-05, -1.9690e-04])\n","gradient values before mask reapp. tensor([ 5.4992e-04, -1.9725e-04,  5.6467e-06,  1.1393e-05,  1.8558e-04,\n","        -1.2669e-04, -2.3122e-04, -1.3420e-04, -3.4255e-05, -2.1434e-04])\n","gradient values before mask reapp. tensor([ 5.5851e-04, -1.9523e-04,  2.2857e-05,  1.5522e-05,  1.9980e-04,\n","        -1.2427e-04, -2.2732e-04, -1.2368e-04, -3.2082e-05, -1.8634e-04])\n","gradient values before mask reapp. tensor([ 5.4771e-04, -1.9622e-04,  6.4835e-06,  1.1738e-05,  1.8497e-04,\n","        -1.2610e-04, -2.2972e-04, -1.3275e-04, -3.4188e-05, -2.1177e-04])\n","gradient values before mask reapp. tensor([ 5.5855e-04, -1.9366e-04,  2.7957e-05,  1.7091e-05,  2.0297e-04,\n","        -1.2314e-04, -2.2485e-04, -1.1966e-04, -3.1445e-05, -1.7652e-04])\n","gradient values before mask reapp. tensor([ 5.3729e-04, -1.9669e-04, -7.7586e-06,  7.4645e-06,  1.6994e-04,\n","        -1.2727e-04, -2.3147e-04, -1.4069e-04, -3.6636e-05, -2.3478e-04])\n","gradient values before mask reapp. tensor([ 5.6081e-04, -1.9166e-04,  3.7244e-05,  2.0294e-05,  2.1076e-04,\n","        -1.2143e-04, -2.2134e-04, -1.1287e-04, -2.9823e-05, -1.5896e-04])\n","gradient values before mask reapp. tensor([ 5.3934e-04, -1.9461e-04,  1.2516e-06,  1.0641e-05,  1.7731e-04,\n","        -1.2564e-04, -2.2801e-04, -1.3412e-04, -3.5149e-05, -2.1760e-04])\n","gradient values before mask reapp. tensor([ 5.5382e-04, -1.9126e-04,  2.9709e-05,  1.8603e-05,  2.0263e-04,\n","        -1.2181e-04, -2.2141e-04, -1.1646e-04, -3.0948e-05, -1.6969e-04])\n","gradient values before mask reapp. tensor([ 5.4670e-04, -1.9192e-04,  1.9011e-05,  1.5015e-05,  1.9118e-04,\n","        -1.2301e-04, -2.2324e-04, -1.2278e-04, -3.3053e-05, -1.8799e-04])\n","gradient values before mask reapp. tensor([ 5.5876e-04, -1.8932e-04,  4.2809e-05,  2.1544e-05,  2.1245e-04,\n","        -1.1977e-04, -2.1779e-04, -1.0788e-04, -2.9375e-05, -1.4830e-04])\n","gradient values before mask reapp. tensor([ 5.4013e-04, -1.9166e-04,  1.2097e-05,  1.3236e-05,  1.8348e-04,\n","        -1.2342e-04, -2.2337e-04, -1.2604e-04, -3.4106e-05, -1.9832e-04])\n","gradient values before mask reapp. tensor([ 5.6171e-04, -1.8717e-04,  5.3673e-05,  2.5371e-05,  2.2190e-04,\n","        -1.1791e-04, -2.1388e-04, -9.9997e-05, -2.7328e-05, -1.2788e-04])\n","gradient values before mask reapp. tensor([ 5.3146e-04, -1.9153e-04,  2.0557e-06,  1.1114e-05,  1.7338e-04,\n","        -1.2419e-04, -2.2382e-04, -1.3090e-04, -3.5355e-05, -2.1281e-04])\n","gradient values before mask reapp. tensor([ 5.5439e-04, -1.8676e-04,  4.6057e-05,  2.3888e-05,  2.1390e-04,\n","        -1.1831e-04, -2.1379e-04, -1.0339e-04, -2.8278e-05, -1.3833e-04])\n","gradient values before mask reapp. tensor([ 5.3745e-04, -1.8857e-04,  1.9052e-05,  1.6896e-05,  1.8849e-04,\n","        -1.2155e-04, -2.1836e-04, -1.1909e-04, -3.2382e-05, -1.8163e-04])\n","gradient values before mask reapp. tensor([ 5.3472e-04, -1.8889e-04,  1.5136e-05,  1.4868e-05,  1.8320e-04,\n","        -1.2159e-04, -2.1902e-04, -1.2148e-04, -3.3330e-05, -1.8925e-04])\n","gradient values before mask reapp. tensor([ 5.4840e-04, -1.8484e-04,  4.4600e-05,  2.4907e-05,  2.1145e-04,\n","        -1.1778e-04, -2.1124e-04, -1.0222e-04, -2.8138e-05, -1.3647e-04])\n","gradient values before mask reapp. tensor([ 5.2508e-04, -1.8902e-04,  2.9491e-06,  1.1976e-05,  1.7107e-04,\n","        -1.2264e-04, -2.2006e-04, -1.2778e-04, -3.5032e-05, -2.0763e-04])\n","gradient values before mask reapp. tensor([ 5.4270e-04, -1.8432e-04,  3.9127e-05,  2.3446e-05,  2.0484e-04,\n","        -1.1797e-04, -2.1105e-04, -1.0473e-04, -2.9148e-05, -1.4436e-04])\n","gradient values before mask reapp. tensor([ 5.3070e-04, -1.8630e-04,  1.8556e-05,  1.7048e-05,  1.8467e-04,\n","        -1.2019e-04, -2.1517e-04, -1.1712e-04, -3.2485e-05, -1.7937e-04])\n","gradient values before mask reapp. tensor([ 5.3606e-04, -1.8393e-04,  3.2178e-05,  2.1857e-05,  1.9726e-04,\n","        -1.1835e-04, -2.1110e-04, -1.0801e-04, -3.0179e-05, -1.5433e-04])\n","gradient values before mask reapp. tensor([ 5.2815e-04, -1.8567e-04,  1.7945e-05,  1.5939e-05,  1.8149e-04,\n","        -1.1990e-04, -2.1450e-04, -1.1708e-04, -3.3204e-05, -1.8109e-04])\n","gradient values before mask reapp. tensor([ 5.3595e-04, -1.8270e-04,  3.6308e-05,  2.2619e-05,  1.9910e-04,\n","        -1.1735e-04, -2.0917e-04, -1.0483e-04, -2.9878e-05, -1.4716e-04])\n","gradient values before mask reapp. tensor([ 5.2085e-04, -1.8488e-04,  1.0958e-05,  1.5449e-05,  1.7498e-04,\n","        -1.2027e-04, -2.1398e-04, -1.1990e-04, -3.3787e-05, -1.8909e-04])\n","gradient values before mask reapp. tensor([ 5.2672e-04, -1.8266e-04,  2.5135e-05,  2.0586e-05,  1.8870e-04,\n","        -1.1816e-04, -2.0978e-04, -1.1027e-04, -3.1029e-05, -1.6292e-04])\n","gradient values before mask reapp. tensor([ 5.1506e-04, -1.8468e-04,  4.6705e-06,  1.3245e-05,  1.6718e-04,\n","        -1.2051e-04, -2.1425e-04, -1.2311e-04, -3.5081e-05, -1.9929e-04])\n","gradient values before mask reapp. tensor([ 5.3061e-04, -1.8048e-04,  3.6758e-05,  2.3576e-05,  1.9739e-04,\n","        -1.1615e-04, -2.0610e-04, -1.0252e-04, -2.9655e-05, -1.4283e-04])\n","gradient values before mask reapp. tensor([ 5.2279e-04, -1.8159e-04,  2.3909e-05,  1.9124e-05,  1.8378e-04,\n","        -1.1758e-04, -2.0868e-04, -1.1038e-04, -3.2127e-05, -1.6534e-04])\n","gradient values before mask reapp. tensor([ 5.2612e-04, -1.7976e-04,  3.3541e-05,  2.3127e-05,  1.9340e-04,\n","        -1.1606e-04, -2.0542e-04, -1.0353e-04, -3.0022e-05, -1.4652e-04])\n","gradient values before mask reapp. tensor([ 5.1275e-04, -1.8215e-04,  1.0121e-05,  1.4977e-05,  1.6932e-04,\n","        -1.1884e-04, -2.1048e-04, -1.1804e-04, -3.4458e-05, -1.8786e-04])\n","gradient values before mask reapp. tensor([ 5.2361e-04, -1.7883e-04,  3.3459e-05,  2.2706e-05,  1.9121e-04,\n","        -1.1557e-04, -2.0431e-04, -1.0296e-04, -3.0468e-05, -1.4624e-04])\n","gradient values before mask reapp. tensor([ 5.1118e-04, -1.8108e-04,  1.1795e-05,  1.5254e-05,  1.6912e-04,\n","        -1.1811e-04, -2.0895e-04, -1.1627e-04, -3.4437e-05, -1.8438e-04])\n","gradient values before mask reapp. tensor([ 5.2575e-04, -1.7695e-04,  4.2079e-05,  2.5110e-05,  1.9755e-04,\n","        -1.1399e-04, -2.0122e-04, -9.6927e-05, -2.9346e-05, -1.3082e-04])\n","gradient values before mask reapp. tensor([ 5.0872e-04, -1.8005e-04,  1.2187e-05,  1.5608e-05,  1.6831e-04,\n","        -1.1755e-04, -2.0753e-04, -1.1512e-04, -3.4351e-05, -1.8231e-04])\n","gradient values before mask reapp. tensor([ 5.2107e-04, -1.7639e-04,  3.8117e-05,  2.3731e-05,  1.9195e-04,\n","        -1.1397e-04, -2.0088e-04, -9.8677e-05, -3.0312e-05, -1.3676e-04])\n","gradient values before mask reapp. tensor([ 5.1655e-04, -1.7694e-04,  3.1383e-05,  2.1528e-05,  1.8488e-04,\n","        -1.1460e-04, -2.0204e-04, -1.0254e-04, -3.1391e-05, -1.4833e-04])\n","gradient values before mask reapp. tensor([ 5.2226e-04, -1.7456e-04,  4.5434e-05,  2.6397e-05,  1.9782e-04,\n","        -1.1259e-04, -1.9791e-04, -9.3190e-05, -2.8986e-05, -1.2272e-04])\n","gradient values before mask reapp. tensor([ 5.0156e-04, -1.7838e-04,  8.8370e-06,  1.4981e-05,  1.6249e-04,\n","        -1.1699e-04, -2.0563e-04, -1.1544e-04, -3.4994e-05, -1.8537e-04])\n","gradient values before mask reapp. tensor([ 5.2409e-04, -1.7292e-04,  5.3102e-05,  2.8228e-05,  2.0295e-04,\n","        -1.1113e-04, -1.9520e-04, -8.7872e-05, -2.8141e-05, -1.0951e-04])\n","gradient values before mask reapp. tensor([ 4.9512e-04, -1.7809e-04,  1.9948e-06,  1.3227e-05,  1.5489e-04,\n","        -1.1737e-04, -2.0577e-04, -1.1871e-04, -3.6057e-05, -1.9556e-04])\n","gradient values before mask reapp. tensor([ 5.2435e-04, -1.7128e-04,  5.8544e-05,  3.0042e-05,  2.0666e-04,\n","        -1.0995e-04, -1.9269e-04, -8.3684e-05, -2.7353e-05, -9.8923e-05])\n","gradient values before mask reapp. tensor([ 4.9454e-04, -1.7664e-04,  5.9812e-06,  1.4760e-05,  1.5754e-04,\n","        -1.1633e-04, -2.0350e-04, -1.1527e-04, -3.5339e-05, -1.8724e-04])\n","gradient values before mask reapp. tensor([ 5.2356e-04, -1.7002e-04,  6.1696e-05,  3.0993e-05,  2.0814e-04,\n","        -1.0907e-04, -1.9082e-04, -8.0998e-05, -2.6967e-05, -9.2560e-05])\n","gradient values before mask reapp. tensor([ 4.8253e-04, -1.7684e-04, -1.0167e-05,  1.1009e-05,  1.4169e-04,\n","        -1.1783e-04, -2.0521e-04, -1.2406e-04, -3.7746e-05, -2.1160e-04])\n","gradient values before mask reapp. tensor([ 5.1409e-04, -1.7014e-04,  4.9643e-05,  2.8239e-05,  1.9634e-04,\n","        -1.0994e-04, -1.9178e-04, -8.7196e-05, -2.8571e-05, -1.1047e-04])\n","gradient values before mask reapp. tensor([ 4.9501e-04, -1.7354e-04,  1.6102e-05,  1.7137e-05,  1.6279e-04,\n","        -1.1410e-04, -1.9899e-04, -1.0785e-04, -3.4618e-05, -1.6898e-04])\n","gradient values before mask reapp. tensor([ 5.1968e-04, -1.6805e-04,  6.3833e-05,  3.1817e-05,  2.0766e-04,\n","        -1.0773e-04, -1.8788e-04, -7.7922e-05, -2.6614e-05, -8.6747e-05])\n","gradient values before mask reapp. tensor([ 4.9196e-04, -1.7260e-04,  1.5461e-05,  1.7275e-05,  1.6107e-04,\n","        -1.1374e-04, -1.9784e-04, -1.0735e-04, -3.4654e-05, -1.6866e-04])\n","gradient values before mask reapp. tensor([ 5.1647e-04, -1.6722e-04,  6.2758e-05,  3.1761e-05,  2.0553e-04,\n","        -1.0744e-04, -1.8688e-04, -7.7712e-05, -2.6716e-05, -8.7306e-05])\n","gradient values before mask reapp. tensor([ 4.9128e-04, -1.7129e-04,  1.8928e-05,  1.8383e-05,  1.6294e-04,\n","        -1.1285e-04, -1.9588e-04, -1.0442e-04, -3.4167e-05, -1.6172e-04])\n","gradient values before mask reapp. tensor([ 5.1032e-04, -1.6686e-04,  5.6326e-05,  2.9926e-05,  1.9795e-04,\n","        -1.0779e-04, -1.8702e-04, -8.0881e-05, -2.7909e-05, -9.7094e-05])\n","gradient values before mask reapp. tensor([ 4.9005e-04, -1.7015e-04,  2.1226e-05,  1.8934e-05,  1.6343e-04,\n","        -1.1209e-04, -1.9424e-04, -1.0227e-04, -3.3997e-05, -1.5713e-04])\n","gradient values before mask reapp. tensor([ 5.1120e-04, -1.6545e-04,  6.2317e-05,  3.1435e-05,  2.0186e-04,\n","        -1.0659e-04, -1.8469e-04, -7.6501e-05, -2.7145e-05, -8.6607e-05])\n","gradient values before mask reapp. tensor([ 4.8723e-04, -1.6927e-04,  2.0826e-05,  1.8950e-05,  1.6178e-04,\n","        -1.1171e-04, -1.9312e-04, -1.0169e-04, -3.4072e-05, -1.5673e-04])\n","gradient values before mask reapp. tensor([ 5.0089e-04, -1.6548e-04,  4.9065e-05,  2.8342e-05,  1.8861e-04,\n","        -1.0780e-04, -1.8594e-04, -8.3602e-05, -2.9116e-05, -1.0654e-04])\n","gradient values before mask reapp. tensor([ 4.8050e-04, -1.6893e-04,  1.3756e-05,  1.7662e-05,  1.5473e-04,\n","        -1.1203e-04, -1.9309e-04, -1.0485e-04, -3.4821e-05, -1.6635e-04])\n","gradient values before mask reapp. tensor([ 5.0504e-04, -1.6330e-04,  6.1162e-05,  3.1750e-05,  1.9819e-04,\n","        -1.0577e-04, -1.8218e-04, -7.5491e-05, -2.7436e-05, -8.5372e-05])\n","gradient values before mask reapp. tensor([ 4.6882e-04, -1.6908e-04, -1.8428e-06,  1.4040e-05,  1.3934e-04,\n","        -1.1347e-04, -1.9472e-04, -1.1335e-04, -3.7166e-05, -1.8985e-04])\n","gradient values before mask reapp. tensor([ 4.9518e-04, -1.6361e-04,  4.8256e-05,  2.8695e-05,  1.8570e-04,\n","        -1.0676e-04, -1.8339e-04, -8.2180e-05, -2.9109e-05, -1.0490e-04])\n","gradient values before mask reapp. tensor([ 4.7937e-04, -1.6598e-04,  2.1347e-05,  1.9988e-05,  1.5857e-04,\n","        -1.1005e-04, -1.8886e-04, -9.8668e-05, -3.4054e-05, -1.5121e-04])\n","gradient values before mask reapp. tensor([ 4.9619e-04, -1.6202e-04,  5.4674e-05,  3.0538e-05,  1.9016e-04,\n","        -1.0549e-04, -1.8086e-04, -7.7524e-05, -2.8241e-05, -9.3214e-05])\n","gradient values before mask reapp. tensor([ 4.7785e-04, -1.6492e-04,  2.3077e-05,  2.0462e-05,  1.5872e-04,\n","        -1.0941e-04, -1.8739e-04, -9.6887e-05, -3.3889e-05, -1.4750e-04])\n","gradient values before mask reapp. tensor([ 5.0255e-04, -1.5959e-04,  7.0637e-05,  3.5048e-05,  2.0347e-04,\n","        -1.0309e-04, -1.7644e-04, -6.7040e-05, -2.5835e-05, -6.5951e-05])\n","gradient values before mask reapp. tensor([ 4.7398e-04, -1.6430e-04,  2.0582e-05,  1.9861e-05,  1.5516e-04,\n","        -1.0930e-04, -1.8680e-04, -9.7637e-05, -3.4278e-05, -1.5067e-04])\n","gradient values before mask reapp. tensor([ 4.9646e-04, -1.5928e-04,  6.4233e-05,  3.3210e-05,  1.9598e-04,\n","        -1.0350e-04, -1.7665e-04, -7.0228e-05, -2.6987e-05, -7.5829e-05])\n","gradient values before mask reapp. tensor([ 4.7891e-04, -1.6205e-04,  3.4037e-05,  2.3827e-05,  1.6627e-04,\n","        -1.0719e-04, -1.8283e-04, -8.8647e-05, -3.2206e-05, -1.2729e-04])\n","gradient values before mask reapp. tensor([ 4.8574e-04, -1.5970e-04,  4.9720e-05,  2.9640e-05,  1.8173e-04,\n","        -1.0492e-04, -1.7841e-04, -7.8164e-05, -2.9045e-05, -9.8320e-05])\n","gradient values before mask reapp. tensor([ 4.7248e-04, -1.6197e-04,  2.6788e-05,  2.1479e-05,  1.5786e-04,\n","        -1.0771e-04, -1.8334e-04, -9.2392e-05, -3.3552e-05, -1.3903e-04])\n","gradient values before mask reapp. tensor([ 4.8219e-04, -1.5827e-04,  4.9086e-05,  3.0448e-05,  1.8037e-04,\n","        -1.0449e-04, -1.7680e-04, -7.7465e-05, -2.8985e-05, -9.6560e-05])\n","gradient values before mask reapp. tensor([ 4.4466e-04, -1.6447e-04, -1.6702e-05,  1.1062e-05,  1.1800e-04,\n","        -1.1250e-04, -1.9013e-04, -1.1731e-04, -3.9666e-05, -2.0684e-04])\n","gradient values before mask reapp. tensor([ 5.1950e-04, -1.5195e-04,  1.1745e-04,  4.6886e-05,  2.3954e-04,\n","        -9.5435e-05, -1.6286e-04, -3.6154e-05, -1.9633e-05,  1.2971e-05])\n","gradient values before mask reapp. tensor([ 4.3830e-04, -1.6433e-04, -2.3746e-05,  9.4129e-06,  1.1056e-04,\n","        -1.1303e-04, -1.9052e-04, -1.2077e-04, -4.0571e-05, -2.1747e-04])\n","gradient values before mask reapp. tensor([ 4.9433e-04, -1.5386e-04,  7.8931e-05,  3.8142e-05,  2.0442e-04,\n","        -9.9749e-05, -1.6864e-04, -5.8070e-05, -2.4878e-05, -4.6371e-05])\n","gradient values before mask reapp. tensor([ 4.4611e-04, -1.6158e-04, -5.3656e-06,  1.4212e-05,  1.2553e-04,\n","        -1.1021e-04, -1.8558e-04, -1.0901e-04, -3.8159e-05, -1.8640e-04])\n","gradient values before mask reapp. tensor([ 4.9369e-04, -1.5256e-04,  8.2253e-05,  3.9166e-05,  2.0609e-04,\n","        -9.8850e-05, -1.6675e-04, -5.5309e-05, -2.4482e-05, -3.9765e-05])\n","gradient values before mask reapp. tensor([ 4.5703e-04, -1.5895e-04,  1.7272e-05,  1.9611e-05,  1.4407e-04,\n","        -1.0698e-04, -1.8038e-04, -9.4994e-05, -3.5168e-05, -1.4978e-04])\n","gradient values before mask reapp. tensor([ 4.7346e-04, -1.5452e-04,  5.1185e-05,  3.2041e-05,  1.7818e-04,\n","        -1.0220e-04, -1.7151e-04, -7.2702e-05, -2.8296e-05, -8.8077e-05])\n","gradient values before mask reapp. tensor([ 4.6363e-04, -1.5658e-04,  3.3335e-05,  2.3794e-05,  1.5709e-04,\n","        -1.0451e-04, -1.7605e-04, -8.4614e-05, -3.2969e-05, -1.2276e-04])\n","gradient values before mask reapp. tensor([ 4.7631e-04, -1.5287e-04,  6.0400e-05,  3.4381e-05,  1.8504e-04,\n","        -1.0068e-04, -1.6869e-04, -6.6513e-05, -2.7054e-05, -7.2503e-05])\n","gradient values before mask reapp. tensor([ 4.6082e-04, -1.5587e-04,  3.2530e-05,  2.3640e-05,  1.5513e-04,\n","        -1.0424e-04, -1.7522e-04, -8.4380e-05, -3.3063e-05, -1.2337e-04])\n","gradient values before mask reapp. tensor([ 4.5217e-04, -1.5514e-04,  2.2365e-05,  2.3932e-05,  1.4820e-04,\n","        -1.0506e-04, -1.7513e-04, -8.8957e-05, -3.3303e-05, -1.3399e-04])\n","gradient values before mask reapp. tensor([ 4.6989e-04, -1.5313e-04,  5.2640e-05,  2.8466e-05,  1.7120e-04,\n","        -1.0123e-04, -1.7019e-04, -7.1782e-05, -3.0607e-05, -9.0310e-05])\n","gradient values before mask reapp. tensor([ 4.4977e-04, -1.5422e-04,  2.2605e-05,  2.4376e-05,  1.4768e-04,\n","        -1.0448e-04, -1.7380e-04, -8.7859e-05, -3.3064e-05, -1.3205e-04])\n","gradient values before mask reapp. tensor([ 4.6140e-04, -1.5425e-04,  4.0221e-05,  2.3386e-05,  1.5718e-04,\n","        -1.0240e-04, -1.7242e-04, -7.9035e-05, -3.3124e-05, -1.1298e-04])\n","gradient values before mask reapp. tensor([ 4.5330e-04, -1.5212e-04,  3.3613e-05,  2.7656e-05,  1.5655e-04,\n","        -1.0261e-04, -1.7025e-04, -8.0374e-05, -3.1431e-05, -1.1241e-04])\n","gradient values before mask reapp. tensor([ 4.6272e-04, -1.5297e-04,  4.6546e-05,  2.4826e-05,  1.6141e-04,\n","        -1.0121e-04, -1.7023e-04, -7.4568e-05, -3.2309e-05, -1.0236e-04])\n","gradient values before mask reapp. tensor([ 4.5829e-04, -1.5000e-04,  4.6773e-05,  3.1517e-05,  1.6749e-04,\n","        -1.0055e-04, -1.6650e-04, -7.1689e-05, -2.9379e-05, -8.9594e-05])\n","gradient values before mask reapp. tensor([ 4.3612e-04, -1.5502e-04,  5.5613e-06,  1.5584e-05,  1.2423e-04,\n","        -1.0580e-04, -1.7642e-04, -9.7952e-05, -3.7875e-05, -1.6535e-04])\n","gradient values before mask reapp. tensor([ 4.7194e-04, -1.4637e-04,  7.5292e-05,  3.8884e-05,  1.9153e-04,\n","        -9.6453e-05, -1.5961e-04, -5.3885e-05, -2.5538e-05, -4.2212e-05])\n","gradient values before mask reapp. tensor([ 4.3524e-04, -1.5387e-04,  8.3057e-06,  1.6469e-05,  1.2552e-04,\n","        -1.0504e-04, -1.7475e-04, -9.5544e-05, -3.7473e-05, -1.5987e-04])\n","gradient values before mask reapp. tensor([ 4.6944e-04, -1.4537e-04,  7.5327e-05,  3.9158e-05,  1.9041e-04,\n","        -9.6036e-05, -1.5842e-04, -5.3113e-05, -2.5535e-05, -4.0910e-05])\n","gradient values before mask reapp. tensor([ 4.2311e-04, -1.5416e-04, -8.3721e-06,  1.2738e-05,  1.0954e-04,\n","        -1.0665e-04, -1.7668e-04, -1.0472e-04, -3.9828e-05, -1.8501e-04])\n","gradient values before mask reapp. tensor([ 4.8360e-04, -1.4295e-04,  1.0253e-04,  4.5096e-05,  2.1300e-04,\n","        -9.2202e-05, -1.5278e-04, -3.6440e-05, -2.1842e-05,  1.6499e-06])\n","gradient values before mask reapp. tensor([ 4.1974e-04, -1.5377e-04, -1.0887e-05,  1.1895e-05,  1.0581e-04,\n","        -1.0658e-04, -1.7646e-04, -1.0578e-04, -4.0273e-05, -1.8886e-04])\n","gradient values before mask reapp. tensor([ 4.4016e-04, -1.4781e-04,  3.1643e-05,  2.8115e-05,  1.4910e-04,\n","        -1.0043e-04, -1.6490e-04, -7.7681e-05, -3.1593e-05, -1.0994e-04])\n","gradient values before mask reapp. tensor([ 4.5825e-04, -1.4668e-04,  6.0585e-05,  2.9483e-05,  1.6771e-04,\n","        -9.7102e-05, -1.6150e-04, -6.2505e-05, -3.0599e-05, -7.3307e-05])\n","gradient values before mask reapp. tensor([ 4.3761e-04, -1.4693e-04,  3.1398e-05,  2.8001e-05,  1.4733e-04,\n","        -1.0019e-04, -1.6401e-04, -7.7281e-05, -3.1800e-05, -1.0975e-04])\n","gradient values before mask reapp. tensor([ 4.5119e-04, -1.4697e-04,  5.1816e-05,  2.7087e-05,  1.5878e-04,\n","        -9.7835e-05, -1.6243e-04, -6.7054e-05, -3.1727e-05, -8.7301e-05])\n","gradient values before mask reapp. tensor([ 4.4133e-04, -1.4514e-04,  4.2098e-05,  3.0448e-05,  1.5511e-04,\n","        -9.8548e-05, -1.6100e-04, -7.0337e-05, -3.0559e-05, -9.2236e-05])\n","gradient values before mask reapp. tensor([ 4.5890e-04, -1.4452e-04,  6.9834e-05,  3.2207e-05,  1.7434e-04,\n","        -9.5183e-05, -1.5772e-04, -5.5318e-05, -2.8833e-05, -5.6724e-05])\n","gradient values before mask reapp. tensor([ 4.3994e-04, -1.4420e-04,  4.3706e-05,  3.0793e-05,  1.5507e-04,\n","        -9.8058e-05, -1.5980e-04, -6.8792e-05, -3.0433e-05, -8.9197e-05])\n","gradient values before mask reapp. tensor([ 4.1606e-04, -1.4863e-04,  1.2628e-06,  1.6931e-05,  1.1339e-04,\n","        -1.0312e-04, -1.6879e-04, -9.4774e-05, -3.7885e-05, -1.6253e-04])\n","gradient values before mask reapp. tensor([ 4.5234e-04, -1.4103e-04,  6.9737e-05,  3.7647e-05,  1.7742e-04,\n","        -9.4057e-05, -1.5332e-04, -5.2218e-05, -2.6653e-05, -4.5638e-05])\n","gradient values before mask reapp. tensor([ 4.2275e-04, -1.4650e-04,  1.6709e-05,  2.0597e-05,  1.2556e-04,\n","        -1.0077e-04, -1.6492e-04, -8.5078e-05, -3.5921e-05, -1.3724e-04])\n","gradient values before mask reapp. tensor([ 4.5711e-04, -1.3914e-04,  8.1994e-05,  4.0805e-05,  1.8708e-04,\n","        -9.2135e-05, -1.5001e-04, -4.4315e-05, -2.4951e-05, -2.5139e-05])\n","gradient values before mask reapp. tensor([ 4.2243e-04, -1.4553e-04,  2.0007e-05,  2.1355e-05,  1.2722e-04,\n","        -1.0005e-04, -1.6345e-04, -8.2500e-05, -3.5468e-05, -1.3154e-04])\n","gradient values before mask reapp. tensor([ 4.5581e-04, -1.3807e-04,  8.4004e-05,  4.1616e-05,  1.8783e-04,\n","        -9.1562e-05, -1.4857e-04, -4.2383e-05, -2.4577e-05, -2.0839e-05])\n","gradient values before mask reapp. tensor([ 4.2644e-04, -1.4394e-04,  3.0839e-05,  2.3746e-05,  1.3529e-04,\n","        -9.8414e-05, -1.6056e-04, -7.5484e-05, -3.4102e-05, -1.1413e-04])\n","gradient values before mask reapp. tensor([ 4.5017e-04, -1.3807e-04,  7.7901e-05,  3.9931e-05,  1.8125e-04,\n","        -9.2039e-05, -1.4899e-04, -4.5332e-05, -2.5335e-05, -3.0567e-05])\n","gradient values before mask reapp. tensor([ 4.2962e-04, -1.4243e-04,  4.0313e-05,  2.6152e-05,  1.4259e-04,\n","        -9.6893e-05, -1.5784e-04, -6.9151e-05, -3.2710e-05, -9.8331e-05])\n","gradient values before mask reapp. tensor([ 4.2397e-04, -1.4036e-04,  3.7148e-05,  3.0824e-05,  1.4471e-04,\n","        -9.6606e-05, -1.5531e-04, -6.8552e-05, -3.0627e-05, -9.3286e-05])\n","gradient values before mask reapp. tensor([ 4.2082e-04, -1.4171e-04,  3.0390e-05,  2.4356e-05,  1.3255e-04,\n","        -9.7497e-05, -1.5798e-04, -7.4132e-05, -3.4256e-05, -1.1157e-04])\n","gradient values before mask reapp. tensor([ 4.3592e-04, -1.3714e-04,  6.2078e-05,  3.6759e-05,  1.6490e-04,\n","        -9.2941e-05, -1.4937e-04, -5.3240e-05, -2.7639e-05, -5.2422e-05])\n","gradient values before mask reapp. tensor([ 4.2095e-04, -1.4065e-04,  3.4163e-05,  2.5101e-05,  1.3439e-04,\n","        -9.6588e-05, -1.5641e-04, -7.1392e-05, -3.3891e-05, -1.0514e-04])\n","gradient values before mask reapp. tensor([ 4.4038e-04, -1.3514e-04,  7.4095e-05,  3.9962e-05,  1.7435e-04,\n","        -9.1046e-05, -1.4596e-04, -4.5408e-05, -2.6018e-05, -3.2025e-05])\n","gradient values before mask reapp. tensor([ 4.0890e-04, -1.4122e-04,  1.7184e-05,  2.1317e-05,  1.1845e-04,\n","        -9.8373e-05, -1.5867e-04, -8.0805e-05, -3.6091e-05, -1.3117e-04])\n","gradient values before mask reapp. tensor([ 4.3997e-04, -1.3409e-04,  7.7007e-05,  4.0524e-05,  1.7537e-04,\n","        -9.0348e-05, -1.4459e-04, -4.3234e-05, -2.5826e-05, -2.7002e-05])\n","gradient values before mask reapp. tensor([ 3.9500e-04, -1.4149e-04, -2.0482e-06,  1.7390e-05,  1.0071e-04,\n","        -1.0023e-04, -1.6078e-04, -9.1317e-05, -3.8639e-05, -1.5939e-04])\n","gradient values before mask reapp. tensor([ 4.2846e-04, -1.3460e-04,  6.1078e-05,  3.7047e-05,  1.6075e-04,\n","        -9.1667e-05, -1.4632e-04, -5.1693e-05, -2.7752e-05, -5.0839e-05])\n","gradient values before mask reapp. tensor([ 4.0776e-04, -1.3905e-04,  2.3124e-05,  2.2820e-05,  1.2141e-04,\n","        -9.6529e-05, -1.5528e-04, -7.5766e-05, -3.5357e-05, -1.1973e-04])\n","gradient values before mask reapp. tensor([ 4.3745e-04, -1.3209e-04,  8.0475e-05,  4.1603e-05,  1.7624e-04,\n","        -8.8860e-05, -1.4174e-04, -3.9745e-05, -2.5354e-05, -1.9341e-05])\n","gradient values before mask reapp. tensor([ 4.0530e-04, -1.3860e-04,  2.2073e-05,  2.2445e-05,  1.1923e-04,\n","        -9.6404e-05, -1.5491e-04, -7.5961e-05, -3.5462e-05, -1.2140e-04])\n","gradient values before mask reapp. tensor([ 4.2827e-04, -1.3247e-04,  6.8384e-05,  3.9121e-05,  1.6509e-04,\n","        -9.0058e-05, -1.4313e-04, -4.6087e-05, -2.6587e-05, -3.7689e-05])\n","gradient values before mask reapp. tensor([ 4.2372e-04, -1.3505e-04,  5.7597e-05,  3.0887e-05,  1.4923e-04,\n","        -9.1735e-05, -1.4749e-04, -5.4346e-05, -3.0638e-05, -6.4819e-05])\n","gradient values before mask reapp. tensor([ 4.1220e-04, -1.3447e-04,  4.2651e-05,  3.0387e-05,  1.3809e-04,\n","        -9.3262e-05, -1.4829e-04, -6.1877e-05, -3.1538e-05, -8.2567e-05])\n","gradient values before mask reapp. tensor([ 4.0035e-04, -1.3645e-04,  2.2409e-05,  2.3259e-05,  1.1731e-04,\n","        -9.5625e-05, -1.5252e-04, -7.4339e-05, -3.5416e-05, -1.1811e-04])\n","gradient values before mask reapp. tensor([ 4.3171e-04, -1.3003e-04,  8.1226e-05,  4.0382e-05,  1.7149e-04,\n","        -8.7872e-05, -1.3949e-04, -3.8089e-05, -2.6160e-05, -1.8753e-05])\n","gradient values before mask reapp. tensor([ 3.7720e-04, -1.4039e-04, -1.7139e-05,  1.0569e-05,  7.8522e-05,\n","        -1.0029e-04, -1.6070e-04, -9.8299e-05, -4.2008e-05, -1.8616e-04])\n","gradient values before mask reapp. tensor([ 4.1956e-04, -1.3070e-04,  6.3957e-05,  3.6299e-05,  1.5532e-04,\n","        -8.9350e-05, -1.4161e-04, -4.7521e-05, -2.8434e-05, -4.5101e-05])\n","gradient values before mask reapp. tensor([ 4.1092e-04, -1.3452e-04,  4.5087e-05,  2.5457e-05,  1.3213e-04,\n","        -9.2085e-05, -1.4797e-04, -6.0706e-05, -3.3597e-05, -8.6617e-05])\n","gradient values before mask reapp. tensor([ 4.1703e-04, -1.2994e-04,  6.3510e-05,  3.6597e-05,  1.5406e-04,\n","        -8.9235e-05, -1.4087e-04, -4.7161e-05, -2.8283e-05, -4.4965e-05])\n","gradient values before mask reapp. tensor([ 3.7638e-04, -1.3823e-04, -1.0221e-05,  1.3104e-05,  8.3564e-05,\n","        -9.8503e-05, -1.5709e-04, -9.2333e-05, -4.0441e-05, -1.7240e-04])\n","gradient values before mask reapp. tensor([ 4.4613e-04, -1.2454e-04,  1.1793e-04,  4.9428e-05,  2.0020e-04,\n","        -8.2129e-05, -1.2968e-04, -1.4429e-05, -2.1231e-05,  4.1916e-05])\n","gradient values before mask reapp. tensor([ 3.5647e-04, -1.3996e-04, -4.0882e-05,  5.5870e-06,  5.4865e-05,\n","        -1.0217e-04, -1.6216e-04, -1.1012e-04, -4.4811e-05, -2.2105e-04])\n","gradient values before mask reapp. tensor([ 4.3353e-04, -1.2553e-04,  9.9819e-05,  4.5599e-05,  1.8418e-04,\n","        -8.3839e-05, -1.3203e-04, -2.4081e-05, -2.3085e-05,  1.4397e-05])\n","gradient values before mask reapp. tensor([ 3.7636e-04, -1.3573e-04, -2.2864e-06,  1.4928e-05,  8.7421e-05,\n","        -9.6907e-05, -1.5378e-04, -8.6697e-05, -3.9774e-05, -1.5854e-04])\n","gradient values before mask reapp. tensor([ 4.2573e-04, -1.2585e-04,  8.9495e-05,  4.2550e-05,  1.7326e-04,\n","        -8.4849e-05, -1.3346e-04, -2.9912e-05, -2.4754e-05, -2.5369e-06])\n","gradient values before mask reapp. tensor([ 3.7490e-04, -1.3524e-04, -1.4971e-06,  1.4959e-05,  8.7087e-05,\n","        -9.6465e-05, -1.5295e-04, -8.5579e-05, -3.9531e-05, -1.5726e-04])\n","gradient values before mask reapp. tensor([ 4.0460e-04, -1.2717e-04,  5.8005e-05,  3.5924e-05,  1.4515e-04,\n","        -8.8253e-05, -1.3781e-04, -4.7521e-05, -2.8729e-05, -4.9931e-05])\n","gradient values before mask reapp. tensor([ 4.0245e-04, -1.3024e-04,  4.9970e-05,  2.7274e-05,  1.3111e-04,\n","        -8.9709e-05, -1.4237e-04, -5.4480e-05, -3.2610e-05, -7.4991e-05])\n","gradient values before mask reapp. tensor([ 4.0833e-04, -1.2550e-04,  6.8421e-05,  3.8732e-05,  1.5335e-04,\n","        -8.6787e-05, -1.3502e-04, -4.0746e-05, -2.7176e-05, -3.2631e-05])\n","gradient values before mask reapp. tensor([ 3.8281e-04, -1.3181e-04,  2.0109e-05,  2.0892e-05,  1.0432e-04,\n","        -9.3231e-05, -1.4703e-04, -7.1424e-05, -3.6262e-05, -1.2102e-04])\n","gradient values before mask reapp. tensor([ 3.8842e-04, -1.2722e-04,  3.8160e-05,  3.2280e-05,  1.2674e-04,\n","        -8.9956e-05, -1.3940e-04, -5.7510e-05, -3.0673e-05, -7.8705e-05])\n","gradient values before mask reapp. tensor([ 3.8950e-04, -1.2982e-04,  3.5435e-05,  2.4710e-05,  1.1697e-04,\n","        -9.0742e-05, -1.4308e-04, -6.1559e-05, -3.4037e-05, -9.5591e-05])\n","gradient values before mask reapp. tensor([ 4.0248e-04, -1.2404e-04,  6.6159e-05,  3.8785e-05,  1.4966e-04,\n","        -8.6098e-05, -1.3330e-04, -4.0564e-05, -2.7182e-05, -3.3775e-05])\n","gradient values before mask reapp. tensor([ 3.6052e-04, -1.3267e-04, -1.0213e-05,  1.4651e-05,  7.6782e-05,\n","        -9.6045e-05, -1.5043e-04, -8.7574e-05, -3.9653e-05, -1.6610e-04])\n","gradient values before mask reapp. tensor([ 4.3552e-04, -1.1811e-04,  1.2728e-04,  5.3233e-05,  2.0175e-04,\n","        -7.8146e-05, -1.2086e-04, -3.8692e-06, -1.9211e-05,  6.3761e-05])\n","gradient values before mask reapp. tensor([ 3.6084e-04, -1.3177e-04, -6.0438e-06,  1.6055e-05,  7.9919e-05,\n","        -9.5487e-05, -1.4906e-04, -8.4489e-05, -3.8672e-05, -1.5904e-04])\n","gradient values before mask reapp. tensor([ 4.3030e-04, -1.1829e-04,  1.2119e-04,  5.1878e-05,  1.9566e-04,\n","        -7.8780e-05, -1.2161e-04, -6.9813e-06, -1.9694e-05,  5.3993e-05])\n","gradient values before mask reapp. tensor([ 2.9872e-04, -1.3886e-04, -1.0820e-04, -6.8657e-06, -9.5490e-06,\n","        -1.0765e-04, -1.6655e-04, -1.4369e-04, -5.1767e-05, -3.1784e-04])\n","gradient values before mask reapp. tensor([ 4.5292e-04, -1.1374e-04,  1.6390e-04,  6.1394e-05,  2.3073e-04,\n","        -7.2696e-05, -1.1247e-04,  1.8648e-05, -1.4716e-05,  1.2222e-04])\n","gradient values before mask reapp. tensor([ 3.1010e-04, -1.3605e-04, -8.4769e-05, -1.2585e-06,  9.7292e-06,\n","        -1.0422e-04, -1.6113e-04, -1.2925e-04, -4.8725e-05, -2.7973e-04])\n","gradient values before mask reapp. tensor([ 4.6621e-04, -1.1091e-04,  1.9062e-04,  6.7892e-05,  2.5338e-04,\n","        -6.9065e-05, -1.0660e-04,  3.5155e-05, -1.0936e-05,  1.6523e-04])\n","gradient values before mask reapp. tensor([ 3.1628e-04, -1.3406e-04, -7.0235e-05,  2.6289e-06,  2.1662e-05,\n","        -1.0234e-04, -1.5768e-04, -1.2013e-04, -4.6561e-05, -2.5591e-04])\n","gradient values before mask reapp. tensor([ 4.2023e-04, -1.1591e-04,  1.1567e-04,  5.0721e-05,  1.8683e-04,\n","        -7.8099e-05, -1.1950e-04, -8.4877e-06, -2.0855e-05,  4.8161e-05])\n","gradient values before mask reapp. tensor([ 3.2134e-04, -1.3209e-04, -5.7786e-05,  5.3584e-06,  3.0879e-05,\n","        -1.0027e-04, -1.5432e-04, -1.1231e-04, -4.5281e-05, -2.3544e-04])\n","gradient values before mask reapp. tensor([ 4.0129e-04, -1.1787e-04,  8.6401e-05,  4.3896e-05,  1.6084e-04,\n","        -8.1044e-05, -1.2391e-04, -2.4754e-05, -2.4369e-05,  2.6610e-06])\n","gradient values before mask reapp. tensor([ 3.6846e-04, -1.2483e-04,  2.5991e-05,  2.4290e-05,  1.0210e-04,\n","        -8.9501e-05, -1.3834e-04, -6.2735e-05, -3.4576e-05, -1.0385e-04])\n","gradient values before mask reapp. tensor([ 3.6616e-04, -1.2154e-04,  2.9888e-05,  3.0896e-05,  1.1047e-04,\n","        -8.7715e-05, -1.3346e-04, -5.7520e-05, -3.1787e-05, -8.5517e-05])\n","gradient values before mask reapp. tensor([ 4.0039e-04, -1.1956e-04,  8.4378e-05,  3.8043e-05,  1.5219e-04,\n","        -8.2008e-05, -1.2681e-04, -2.7684e-05, -2.6674e-05, -1.1430e-05])\n","gradient values before mask reapp. tensor([ 3.6543e-04, -1.2051e-04,  3.2432e-05,  3.1811e-05,  1.1164e-04,\n","        -8.7355e-05, -1.3231e-04, -5.5565e-05, -3.1344e-05, -8.0954e-05])\n","gradient values before mask reapp. tensor([ 3.6574e-04, -1.2338e-04,  2.8555e-05,  2.8252e-05,  1.0627e-04,\n","        -8.9352e-05, -1.3656e-04, -5.9460e-05, -3.1781e-05, -9.6199e-05])\n","gradient values before mask reapp. tensor([ 3.4453e-04, -1.2338e-04, -1.3336e-06,  2.6425e-05,  8.4841e-05,\n","        -9.2299e-05, -1.3893e-04, -7.4741e-05, -3.3455e-05, -1.3323e-04])\n","gradient values before mask reapp. tensor([ 3.6810e-04, -1.2091e-04,  3.7902e-05,  2.8466e-05,  1.1028e-04,\n","        -8.6710e-05, -1.3264e-04, -5.3439e-05, -3.2590e-05, -8.0343e-05])\n","gradient values before mask reapp. tensor([ 3.7949e-04, -1.1734e-04,  6.4145e-05,  5.3473e-05,  1.5599e-04,\n","        -8.5931e-05, -1.2593e-04, -3.2868e-05, -1.6482e-05, -1.7796e-05])\n","gradient values before mask reapp. tensor([ 3.6466e-04, -1.2327e-04,  3.1150e-05,  2.7271e-05,  1.0603e-04,\n","        -8.8753e-05, -1.3598e-04, -5.7376e-05, -3.1339e-05, -9.5216e-05])\n","gradient values before mask reapp. tensor([ 3.8326e-04, -1.1563e-04,  7.2738e-05,  4.2635e-05,  1.4566e-04,\n","        -8.1935e-05, -1.2318e-04, -3.0227e-05, -2.4698e-05, -1.5471e-05])\n","gradient values before mask reapp. tensor([ 3.2898e-04, -1.2639e-04, -2.5117e-05,  1.7512e-05,  5.9371e-05,\n","        -9.5750e-05, -1.4501e-04, -8.9270e-05, -3.6902e-05, -1.7899e-04])\n","gradient values before mask reapp. tensor([ 3.7751e-04, -1.1507e-04,  6.7209e-05,  4.2813e-05,  1.4153e-04,\n","        -8.2062e-05, -1.2276e-04, -3.2249e-05, -2.4550e-05, -2.1282e-05])\n","gradient values before mask reapp. tensor([ 3.6325e-04, -1.2053e-04,  3.7153e-05,  3.0563e-05,  1.1045e-04,\n","        -8.7290e-05, -1.3254e-04, -5.2368e-05, -2.9887e-05, -8.1568e-05])\n","gradient values before mask reapp. tensor([ 3.7320e-04, -1.1467e-04,  6.3558e-05,  4.2530e-05,  1.3798e-04,\n","        -8.2309e-05, -1.2262e-04, -3.3677e-05, -2.4597e-05, -2.6017e-05])\n","gradient values before mask reapp. tensor([ 3.7380e-04, -1.1824e-04,  5.8719e-05,  3.5100e-05,  1.2774e-04,\n","        -8.4253e-05, -1.2783e-04, -3.9157e-05, -2.7242e-05, -4.7734e-05])\n","gradient values before mask reapp. tensor([ 3.6682e-04, -1.1489e-04,  5.5176e-05,  4.0435e-05,  1.2920e-04,\n","        -8.3460e-05, -1.2412e-04, -3.8631e-05, -2.5718e-05, -3.9990e-05])\n","gradient values before mask reapp. tensor([ 3.2239e-04, -1.2384e-04, -2.4672e-05,  1.9855e-05,  5.9054e-05,\n","        -9.4688e-05, -1.4187e-04, -8.6585e-05, -3.5508e-05, -1.7352e-04])\n","gradient values before mask reapp. tensor([ 3.7379e-04, -1.1268e-04,  7.1178e-05,  4.4887e-05,  1.4309e-04,\n","        -8.0702e-05, -1.1974e-04, -2.8162e-05, -2.3208e-05, -1.2409e-05])\n","gradient values before mask reapp. tensor([ 3.4687e-04, -1.1928e-04,  2.1026e-05,  2.9548e-05,  9.6449e-05,\n","        -8.8458e-05, -1.3248e-04, -5.9360e-05, -3.0299e-05, -1.0164e-04])\n","gradient values before mask reapp. tensor([ 3.7592e-04, -1.1137e-04,  7.8507e-05,  4.6821e-05,  1.4875e-04,\n","        -7.9463e-05, -1.1751e-04, -2.3179e-05, -2.2056e-05, -5.4242e-08])\n","gradient values before mask reapp. tensor([ 3.6902e-04, -1.1605e-04,  6.0730e-05,  3.6606e-05,  1.2748e-04,\n","        -8.3190e-05, -1.2527e-04, -3.6283e-05, -2.6201e-05, -4.2292e-05])\n","gradient values before mask reapp. tensor([ 3.5277e-04, -1.1338e-04,  4.2646e-05,  4.0238e-05,  1.1830e-04,\n","        -8.4021e-05, -1.2339e-04, -4.3541e-05, -2.5698e-05, -5.4330e-05])\n","gradient values before mask reapp. tensor([ 3.3677e-04, -1.1891e-04,  9.9213e-06,  2.7689e-05,  8.5164e-05,\n","        -8.9542e-05, -1.3348e-04, -6.5080e-05, -3.1257e-05, -1.1831e-04])\n","gradient values before mask reapp. tensor([ 3.3986e-04, -1.1435e-04,  2.3929e-05,  3.6941e-05,  1.0275e-04,\n","        -8.6018e-05, -1.2598e-04, -5.3602e-05, -2.7203e-05, -8.2131e-05])\n","gradient values before mask reapp. tensor([ 3.7304e-04, -1.1292e-04,  7.5344e-05,  4.1135e-05,  1.3895e-04,\n","        -8.0580e-05, -1.2050e-04, -2.6413e-05, -2.3905e-05, -1.6169e-05])\n","gradient values before mask reapp. tensor([ 3.4467e-04, -1.1246e-04,  3.5982e-05,  4.0062e-05,  1.1228e-04,\n","        -8.4140e-05, -1.2278e-04, -4.5920e-05, -2.5578e-05, -6.2024e-05])\n","gradient values before mask reapp. tensor([ 3.9118e-04, -1.1030e-04,  1.0840e-04,  4.6960e-05,  1.6490e-04,\n","        -7.6169e-05, -1.1440e-04, -6.9668e-06, -2.0351e-05,  3.3140e-05])\n","gradient values before mask reapp. tensor([ 3.4320e-04, -1.1202e-04,  3.6057e-05,  3.9924e-05,  1.1092e-04,\n","        -8.4050e-05, -1.2254e-04, -4.5723e-05, -2.5587e-05, -6.2447e-05])\n","gradient values before mask reapp. tensor([ 2.9986e-04, -1.2179e-04, -4.3913e-05,  1.7319e-05,  3.8529e-05,\n","        -9.5753e-05, -1.4166e-04, -9.4728e-05, -3.6231e-05, -2.0064e-04])\n","gradient values before mask reapp. tensor([ 4.0566e-04, -1.0227e-04,  1.4651e-04,  6.2510e-05,  2.0205e-04,\n","        -6.9245e-05, -1.0114e-04,  1.9138e-05, -1.3405e-05,  1.0955e-04])\n","gradient values before mask reapp. tensor([ 2.7592e-04, -1.2380e-04, -8.0699e-05,  1.0791e-05,  7.8585e-06,\n","        -1.0024e-04, -1.4740e-04, -1.1533e-04, -3.9752e-05, -2.5564e-04])\n","gradient values before mask reapp. tensor([ 4.2824e-04, -9.7741e-05,  1.8893e-04,  7.2005e-05,  2.3669e-04,\n","        -6.3328e-05, -9.2201e-05,  4.4473e-05, -8.5220e-06,  1.7704e-04])\n","gradient values before mask reapp. tensor([ 2.4886e-04, -1.2656e-04, -1.2327e-04,  3.0285e-06, -2.7353e-05,\n","        -1.0533e-04, -1.5424e-04, -1.3914e-04, -4.3727e-05, -3.1975e-04])\n","gradient values before mask reapp. tensor([ 4.3639e-04, -9.6321e-05,  2.0546e-04,  7.4892e-05,  2.4962e-04,\n","        -6.0894e-05, -8.8803e-05,  5.4593e-05, -6.4863e-06,  2.0189e-04])\n","gradient values before mask reapp. tensor([ 2.7475e-04, -1.2225e-04, -7.6173e-05,  1.2014e-05,  9.9284e-06,\n","        -9.9286e-05, -1.4539e-04, -1.1178e-04, -3.8886e-05, -2.4795e-04])\n","gradient values before mask reapp. tensor([ 4.0069e-04, -1.0053e-04,  1.4786e-04,  6.3557e-05,  2.0160e-04,\n","        -6.8119e-05, -9.8753e-05,  2.1837e-05, -1.2247e-05,  1.1347e-04])\n","gradient values before mask reapp. tensor([ 3.1154e-04, -1.1660e-04, -1.1128e-05,  2.4544e-05,  6.1902e-05,\n","        -9.0779e-05, -1.3336e-04, -7.4088e-05, -3.2155e-05, -1.4870e-04])\n","gradient values before mask reapp. tensor([ 3.3171e-04, -1.0828e-04,  3.4814e-05,  4.2627e-05,  1.0842e-04,\n","        -8.2407e-05, -1.1812e-04, -4.2795e-05, -2.3697e-05, -5.7668e-05])\n","gradient values before mask reapp. tensor([ 3.6550e-04, -1.0801e-04,  8.4912e-05,  4.4392e-05,  1.4133e-04,\n","        -7.7766e-05, -1.1449e-04, -1.7438e-05, -2.1406e-05,  1.2992e-06])\n","gradient values before mask reapp. tensor([ 3.0234e-04, -1.1377e-04, -1.6960e-05,  2.8325e-05,  6.0379e-05,\n","        -9.0112e-05, -1.3028e-04, -7.4767e-05, -3.0825e-05, -1.4651e-04])\n","gradient values before mask reapp. tensor([ 3.3290e-04, -1.1109e-04,  3.3375e-05,  3.5339e-05,  9.9073e-05,\n","        -8.3949e-05, -1.2268e-04, -4.6421e-05, -2.6294e-05, -7.5463e-05])\n","gradient values before mask reapp. tensor([ 3.5305e-04, -1.0438e-04,  7.6028e-05,  5.0274e-05,  1.4027e-04,\n","        -7.6588e-05, -1.1001e-04, -1.8353e-05, -1.9143e-05,  4.7386e-06])\n","gradient values before mask reapp. tensor([ 3.4112e-04, -1.0906e-04,  5.0905e-05,  3.8998e-05,  1.1289e-04,\n","        -8.1483e-05, -1.1879e-04, -3.5714e-05, -2.4188e-05, -4.7908e-05])\n","gradient values before mask reapp. tensor([ 3.6337e-04, -1.0190e-04,  9.7367e-05,  5.5050e-05,  1.5753e-04,\n","        -7.3491e-05, -1.0517e-04, -5.2422e-06, -1.6492e-05,  3.8853e-05])\n","gradient values before mask reapp. tensor([ 3.0246e-04, -1.1425e-04, -1.3607e-05,  2.5355e-05,  5.7533e-05,\n","        -8.9903e-05, -1.3100e-04, -7.3342e-05, -3.1304e-05, -1.4952e-04])\n","gradient values before mask reapp. tensor([ 3.1610e-04, -1.0726e-04,  2.0762e-05,  4.1087e-05,  9.5026e-05,\n","        -8.2738e-05, -1.1783e-04, -4.8380e-05, -2.3741e-05, -7.6473e-05])\n","gradient values before mask reapp. tensor([ 3.7394e-04, -1.0308e-04,  1.1288e-04,  5.1449e-05,  1.6237e-04,\n","        -7.2928e-05, -1.0632e-04,  1.1410e-06, -1.7209e-05,  4.7946e-05])\n","gradient values before mask reapp. tensor([ 2.9546e-04, -1.1107e-04, -1.5141e-05,  2.9919e-05,  5.9730e-05,\n","        -8.8768e-05, -1.2704e-04, -7.1390e-05, -2.9452e-05, -1.4067e-04])\n","gradient values before mask reapp. tensor([ 3.0457e-04, -1.1372e-04, -6.2671e-06,  2.5289e-05,  6.0921e-05,\n","        -8.8585e-05, -1.2971e-04, -6.8756e-05, -3.0509e-05, -1.4142e-04])\n","gradient values before mask reapp. tensor([ 3.2193e-04, -1.0615e-04,  3.3786e-05,  4.0650e-05,  1.0021e-04,\n","        -8.1841e-05, -1.1684e-04, -4.2155e-05, -2.3729e-05, -6.2978e-05])\n","gradient values before mask reapp. tensor([ 3.1273e-04, -1.1097e-04,  1.2982e-05,  3.0698e-05,  7.8166e-05,\n","        -8.5371e-05, -1.2426e-04, -5.6040e-05, -2.7444e-05, -1.0775e-04])\n","gradient values before mask reapp. tensor([ 3.8521e-04, -9.5965e-05,  1.4584e-04,  6.3963e-05,  1.9249e-04,\n","        -6.6897e-05, -9.5078e-05,  2.3504e-05, -1.1455e-05,  1.1212e-04])\n","gradient values before mask reapp. tensor([ 2.1215e-04, -1.2397e-04, -1.5540e-04, -2.2844e-06, -6.1339e-05,\n","        -1.0693e-04, -1.5451e-04, -1.5301e-04, -4.4936e-05, -3.6661e-04])\n","gradient values before mask reapp. tensor([ 4.6360e-04, -8.3809e-05,  2.8373e-04,  9.2445e-05,  3.0647e-04,\n","        -4.8399e-05, -6.8366e-05,  1.0447e-04,  3.7619e-06,  3.2713e-04])\n","gradient values before mask reapp. tensor([ 2.1374e-04, -1.2239e-04, -1.4842e-04, -1.8239e-07, -5.6023e-05,\n","        -1.0586e-04, -1.5223e-04, -1.4829e-04, -4.3893e-05, -3.5424e-04])\n","gradient values before mask reapp. tensor([ 4.4550e-04, -8.5422e-05,  2.5614e-04,  8.7334e-05,  2.8307e-04,\n","        -5.1725e-05, -7.2748e-05,  8.9056e-05,  1.1358e-06,  2.8530e-04])\n","gradient values before mask reapp. tensor([ 1.9976e-04, -1.2322e-04, -1.6844e-04, -3.1147e-06, -7.2252e-05,\n","        -1.0789e-04, -1.5468e-04, -1.5883e-04, -4.5310e-05, -3.8287e-04])\n","gradient values before mask reapp. tensor([ 4.5700e-04, -8.3379e-05,  2.7843e-04,  9.1564e-05,  3.0067e-04,\n","        -4.8544e-05, -6.8241e-05,  1.0248e-04,  3.7392e-06,  3.1928e-04])\n","gradient values before mask reapp. tensor([ 2.1380e-04, -1.1977e-04, -1.4004e-04,  3.3243e-06, -4.9251e-05,\n","        -1.0407e-04, -1.4843e-04, -1.4179e-04, -4.2044e-05, -3.3720e-04])\n","gradient values before mask reapp. tensor([ 4.1216e-04, -8.7958e-05,  2.0682e-04,  7.8795e-05,  2.4232e-04,\n","        -5.7359e-05, -7.9850e-05,  6.2118e-05, -3.0863e-06,  2.1233e-04])\n","gradient values before mask reapp. tensor([ 2.1574e-04, -1.1879e-04, -1.3423e-04,  4.5128e-06, -4.5489e-05,\n","        -1.0305e-04, -1.4698e-04, -1.3819e-04, -4.1361e-05, -3.2825e-04])\n","gradient values before mask reapp. tensor([ 3.8260e-04, -9.1881e-05,  1.5817e-04,  6.8458e-05,  2.0097e-04,\n","        -6.3435e-05, -8.8779e-05,  3.4092e-05, -8.2129e-06,  1.3593e-04])\n","gradient values before mask reapp. tensor([ 2.9666e-04, -1.0651e-04,  7.1953e-06,  3.2737e-05,  7.0007e-05,\n","        -8.4581e-05, -1.2042e-04, -5.5983e-05, -2.6425e-05, -1.0993e-04])\n","gradient values before mask reapp. tensor([ 3.3739e-04, -9.6462e-05,  8.5472e-05,  5.5146e-05,  1.4072e-04,\n","        -7.2681e-05, -1.0101e-04, -7.4459e-06, -1.5605e-05,  2.6303e-05])\n","gradient values before mask reapp. tensor([ 2.5805e-04, -1.1168e-04, -5.6724e-05,  1.9620e-05,  1.6543e-05,\n","        -9.2476e-05, -1.3194e-04, -9.2589e-05, -3.2945e-05, -2.0931e-04])\n","gradient values before mask reapp. tensor([ 4.1701e-04, -8.5586e-05,  2.2260e-04,  8.1520e-05,  2.5256e-04,\n","        -5.4504e-05, -7.5885e-05,  7.2223e-05, -1.0338e-06,  2.3586e-04])\n","gradient values before mask reapp. tensor([ 2.2981e-04, -1.1416e-04, -1.0103e-04,  1.1257e-05, -2.1310e-05,\n","        -9.8317e-05, -1.3947e-04, -1.1809e-04, -3.7728e-05, -2.7688e-04])\n","gradient values before mask reapp. tensor([ 3.8748e-04, -8.8185e-05,  1.7630e-04,  7.3414e-05,  2.1419e-04,\n","        -6.0171e-05, -8.3263e-05,  4.6092e-05, -5.5423e-06,  1.6676e-04])\n","gradient values before mask reapp. tensor([ 2.2218e-04, -1.1432e-04, -1.1100e-04,  9.9173e-06, -2.9555e-05,\n","        -9.9091e-05, -1.4044e-04, -1.2320e-04, -3.8311e-05, -2.9070e-04])\n","gradient values before mask reapp. tensor([ 3.8325e-04, -8.9786e-05,  1.6888e-04,  6.8814e-05,  2.0457e-04,\n","        -6.1666e-05, -8.6272e-05,  4.0758e-05, -7.2873e-06,  1.4877e-04])\n","gradient values before mask reapp. tensor([ 2.5687e-04, -1.1165e-04, -5.4056e-05,  1.6821e-05,  1.2827e-05,\n","        -9.2303e-05, -1.3258e-04, -9.1689e-05, -3.3538e-05, -2.1254e-04])\n","gradient values before mask reapp. tensor([ 2.8184e-04, -1.0180e-04,  8.3908e-07,  3.7400e-05,  6.6459e-05,\n","        -8.2988e-05, -1.1551e-04, -5.5607e-05, -2.4406e-05, -1.0620e-04])\n","gradient values before mask reapp. tensor([ 3.4644e-04, -9.6787e-05,  1.0521e-04,  5.1225e-05,  1.4624e-04,\n","        -7.0685e-05, -1.0064e-04,  2.4557e-06, -1.5461e-05,  3.9477e-05])\n","gradient values before mask reapp. tensor([ 3.0151e-04, -9.7388e-05,  3.8894e-05,  4.6171e-05,  9.7687e-05,\n","        -7.7728e-05, -1.0723e-04, -3.2800e-05, -2.0007e-05, -4.4943e-05])\n","gradient values before mask reapp. tensor([ 3.5485e-04, -9.5494e-05,  1.2103e-04,  5.3692e-05,  1.5751e-04,\n","        -6.8487e-05, -9.7892e-05,  1.1636e-05, -1.3911e-05,  6.1984e-05])\n","gradient values before mask reapp. tensor([ 2.6260e-04, -1.0295e-04, -2.5974e-05,  3.2175e-05,  4.2638e-05,\n","        -8.6117e-05, -1.1947e-04, -7.0348e-05, -2.6919e-05, -1.4730e-04])\n","gradient values before mask reapp. tensor([ 3.4057e-04, -9.6393e-05,  1.0068e-04,  5.0160e-05,  1.4081e-04,\n","        -7.0816e-05, -1.0065e-04,  6.3240e-07, -1.5594e-05,  3.2159e-05])\n","gradient values before mask reapp. tensor([ 3.0878e-04, -9.5533e-05,  5.5889e-05,  4.9008e-05,  1.0962e-04,\n","        -7.5089e-05, -1.0368e-04, -2.2443e-05, -1.8002e-05, -1.9931e-05])\n","gradient values before mask reapp. tensor([ 2.3991e-04, -1.0907e-04, -6.7587e-05,  1.7108e-05,  1.0064e-06,\n","        -9.2614e-05, -1.3103e-04, -9.6675e-05, -3.3400e-05, -2.2656e-04])\n","gradient values before mask reapp. tensor([ 3.9940e-04, -8.4363e-05,  2.1007e-04,  7.6806e-05,  2.3431e-04,\n","        -5.5031e-05, -7.6565e-05,  6.6549e-05, -2.0947e-06,  2.1187e-04])\n","gradient values before mask reapp. tensor([ 2.0955e-04, -1.1193e-04, -1.1575e-04,  8.4110e-06, -3.9238e-05,\n","        -9.8631e-05, -1.3902e-04, -1.2415e-04, -3.8253e-05, -2.9902e-04])\n","gradient values before mask reapp. tensor([ 3.2250e-04, -9.3387e-05,  8.3229e-05,  5.2923e-05,  1.2989e-04,\n","        -7.1052e-05, -9.8560e-05, -6.0838e-06, -1.4995e-05,  1.9143e-05])\n","gradient values before mask reapp. tensor([ 3.5845e-04, -8.9556e-05,  1.4359e-04,  6.1806e-05,  1.7602e-04,\n","        -6.4068e-05, -8.9269e-05,  2.7756e-05, -9.7855e-06,  1.0516e-04])\n","gradient values before mask reapp. tensor([ 2.6121e-04, -1.0180e-04, -2.0208e-05,  3.1362e-05,  4.2177e-05,\n","        -8.4618e-05, -1.1814e-04, -6.6439e-05, -2.6355e-05, -1.4301e-04])\n","gradient values before mask reapp. tensor([ 2.8177e-04, -9.9288e-05,  1.5635e-05,  3.6333e-05,  6.9173e-05,\n","        -8.0686e-05, -1.1253e-04, -4.6333e-05, -2.3407e-05, -9.2322e-05])\n","gradient values before mask reapp. tensor([ 3.5169e-04, -8.9414e-05,  1.3553e-04,  6.0194e-05,  1.6778e-04,\n","        -6.4862e-05, -9.0415e-05,  2.3069e-05, -1.0664e-05,  9.2869e-05])\n","gradient values before mask reapp. tensor([ 2.3115e-04, -1.0882e-04, -7.3836e-05,  1.4168e-05, -8.9944e-06,\n","        -9.2702e-05, -1.3171e-04, -9.9546e-05, -3.3942e-05, -2.4012e-04])\n","gradient values before mask reapp. tensor([ 2.8505e-04, -9.5677e-05,  2.8960e-05,  4.2432e-05,  8.2116e-05,\n","        -7.7876e-05, -1.0716e-04, -3.6841e-05, -2.0655e-05, -6.3787e-05])\n","gradient values before mask reapp. tensor([ 3.0873e-04, -9.6770e-05,  6.2619e-05,  4.1933e-05,  1.0335e-04,\n","        -7.4629e-05, -1.0554e-04, -1.9738e-05, -1.9168e-05, -2.8095e-05])\n","gradient values before mask reapp. tensor([ 3.0732e-04, -9.1443e-05,  7.0709e-05,  5.2160e-05,  1.1715e-04,\n","        -7.1639e-05, -9.8035e-05, -1.1349e-05, -1.5356e-05,  3.3711e-06])\n","gradient values before mask reapp. tensor([ 2.8842e-04, -9.8298e-05,  3.2587e-05,  3.7041e-05,  7.9365e-05,\n","        -7.8046e-05, -1.0966e-04, -3.5956e-05, -2.1553e-05, -7.1631e-05])\n","gradient values before mask reapp. tensor([ 3.5290e-04, -8.3578e-05,  1.5270e-04,  6.9550e-05,  1.8455e-04,\n","        -6.0694e-05, -8.1830e-05,  3.6792e-05, -6.3408e-06,  1.3217e-04])\n","gradient values before mask reapp. tensor([ 2.3847e-04, -1.0441e-04, -5.0416e-05,  2.0120e-05,  8.4571e-06,\n","        -8.9081e-05, -1.2512e-04, -8.4468e-05, -3.0853e-05, -2.0116e-04])\n","gradient values before mask reapp. tensor([ 2.8541e-04, -9.2166e-05,  4.0673e-05,  4.7526e-05,  9.2102e-05,\n","        -7.4838e-05, -1.0171e-04, -2.7465e-05, -1.7779e-05, -3.9712e-05])\n","gradient values before mask reapp. tensor([ 3.4680e-04, -8.9491e-05,  1.3661e-04,  5.6409e-05,  1.6223e-04,\n","        -6.4357e-05, -9.0474e-05,  2.4523e-05, -1.0756e-05,  8.5821e-05])\n","gradient values before mask reapp. tensor([ 3.1873e-04, -8.7549e-05,  9.8071e-05,  5.7871e-05,  1.3637e-04,\n","        -6.7504e-05, -9.1909e-05,  5.1733e-06, -1.2322e-05,  4.5471e-05])\n","gradient values before mask reapp. tensor([ 1.5792e-04, -1.1371e-04, -1.8100e-04, -5.3579e-06, -1.0004e-04,\n","        -1.0556e-04, -1.4777e-04, -1.5908e-04, -4.4127e-05, -4.0101e-04])\n","gradient values before mask reapp. tensor([ 4.3991e-04, -7.0073e-05,  3.0851e-04,  1.0025e-04,  3.1089e-04,\n","        -3.9330e-05, -5.1904e-05,  1.2849e-04,  1.0841e-05,  3.7172e-04])\n","gradient values before mask reapp. tensor([ 1.7167e-04, -1.1054e-04, -1.5372e-04,  1.1772e-06, -7.7691e-05,\n","        -1.0158e-04, -1.4164e-04, -1.4243e-04, -4.0733e-05, -3.5687e-04])\n","gradient values before mask reapp. tensor([ 3.7756e-04, -7.9736e-05,  2.0168e-04,  7.5462e-05,  2.1827e-04,\n","        -5.4179e-05, -7.3717e-05,  6.4996e-05, -1.8579e-06,  1.9925e-04])\n","gradient values before mask reapp. tensor([ 1.9527e-04, -1.0931e-04, -1.1564e-04,  4.6047e-06, -5.0654e-05,\n","        -9.7148e-05, -1.3712e-04, -1.2174e-04, -3.7861e-05, -3.0734e-04])\n","gradient values before mask reapp. tensor([ 2.7998e-04, -9.0830e-05,  4.1897e-05,  4.6346e-05,  8.8685e-05,\n","        -7.4264e-05, -1.0063e-04, -2.5847e-05, -1.7507e-05, -4.0700e-05])\n","gradient values before mask reapp. tensor([ 3.6890e-04, -8.3697e-05,  1.8604e-04,  6.6362e-05,  2.0014e-04,\n","        -5.6961e-05, -7.9436e-05,  5.4975e-05, -4.6728e-06,  1.6236e-04])\n","gradient values before mask reapp. tensor([ 2.6824e-04, -9.1847e-05,  2.3425e-05,  4.2525e-05,  7.1137e-05,\n","        -7.6661e-05, -1.0421e-04, -3.6873e-05, -1.9817e-05, -7.0475e-05])\n","gradient values before mask reapp. tensor([ 1.8378e-04, -1.0837e-04, -1.2668e-04,  4.1621e-06, -5.9013e-05,\n","        -9.7707e-05, -1.3672e-04, -1.2620e-04, -3.7850e-05, -3.1997e-04])\n","gradient values before mask reapp. tensor([ 4.0715e-04, -7.1806e-05,  2.6392e-04,  9.1057e-05,  2.7003e-04,\n","        -4.4590e-05, -5.8726e-05,  1.0375e-04,  6.4098e-06,  3.0202e-04])\n","gradient values before mask reapp. tensor([ 1.6775e-04, -1.0974e-04, -1.5070e-04, -4.8491e-07, -7.9625e-05,\n","        -1.0075e-04, -1.4062e-04, -1.3973e-04, -4.0223e-05, -3.5669e-04])\n","gradient values before mask reapp. tensor([ 4.0051e-04, -7.2121e-05,  2.5614e-04,  8.9726e-05,  2.6393e-04,\n","        -4.5128e-05, -5.9268e-05,  1.0027e-04,  6.2410e-06,  2.9087e-04])\n","gradient values before mask reapp. tensor([ 2.1864e-04, -1.0024e-04, -5.8736e-05,  2.0262e-05, -3.5733e-06,\n","        -8.8272e-05, -1.2186e-04, -8.5517e-05, -2.9974e-05, -2.1012e-04])\n","gradient values before mask reapp. tensor([ 3.0762e-04, -8.3514e-05,  1.0164e-04,  6.0040e-05,  1.3625e-04,\n","        -6.4934e-05, -8.6681e-05,  1.1333e-05, -9.7782e-06,  5.4732e-05])\n","gradient values before mask reapp. tensor([ 2.4868e-04, -9.5240e-05, -4.6371e-06,  3.1281e-05,  4.0505e-05,\n","        -8.0903e-05, -1.1133e-04, -5.3783e-05, -2.4044e-05, -1.2603e-04])\n","gradient values before mask reapp. tensor([ 2.6243e-04, -9.0716e-05,  2.3692e-05,  4.1292e-05,  6.7356e-05,\n","        -7.5897e-05, -1.0314e-04, -3.5481e-05, -1.9438e-05, -7.2881e-05])\n","gradient values before mask reapp. tensor([ 2.6611e-04, -9.5984e-05,  2.2746e-05,  3.1756e-05,  6.0127e-05,\n","        -7.7455e-05, -1.0866e-04, -3.8329e-05, -2.1586e-05, -9.4061e-05])\n","gradient values before mask reapp. tensor([ 3.4568e-04, -7.7151e-05,  1.7132e-04,  7.2819e-05,  1.9030e-04,\n","        -5.6095e-05, -7.4007e-05,  5.1433e-05, -2.8748e-06,  1.5966e-04])\n","gradient values before mask reapp. tensor([ 1.6497e-04, -1.0810e-04, -1.4522e-04, -7.4396e-07, -7.9390e-05,\n","        -9.9481e-05, -1.3875e-04, -1.3556e-04, -3.9449e-05, -3.5120e-04])\n","gradient values before mask reapp. tensor([ 3.9225e-04, -7.1582e-05,  2.5156e-04,  8.6955e-05,  2.5538e-04,\n","        -4.5310e-05, -5.9675e-05,  9.8287e-05,  5.7537e-06,  2.7978e-04])\n","gradient values before mask reapp. tensor([ 2.2737e-04, -9.8383e-05, -3.5803e-05,  2.1704e-05,  1.0026e-05,\n","        -8.4904e-05, -1.1794e-04, -7.1750e-05, -2.7687e-05, -1.8145e-04])\n","gradient values before mask reapp. tensor([ 2.8710e-04, -8.4598e-05,  7.6059e-05,  5.2888e-05,  1.0971e-04,\n","        -6.8109e-05, -9.1210e-05, -3.1508e-06, -1.2782e-05,  1.0611e-05])\n","gradient values before mask reapp. tensor([ 2.3928e-04, -9.3994e-05, -8.7755e-06,  3.0264e-05,  3.4508e-05,\n","        -8.0505e-05, -1.1019e-04, -5.4221e-05, -2.3566e-05, -1.3262e-04])\n","gradient values before mask reapp. tensor([ 3.2992e-04, -7.7697e-05,  1.5335e-04,  6.9194e-05,  1.7443e-04,\n","        -5.7384e-05, -7.5576e-05,  4.3053e-05, -3.6688e-06,  1.3216e-04])\n","gradient values before mask reapp. tensor([ 2.8314e-04, -8.7866e-05,  6.8545e-05,  4.5252e-05,  9.8045e-05,\n","        -7.0043e-05, -9.5565e-05, -8.6329e-06, -1.4886e-05, -1.4013e-05])\n","gradient values before mask reapp. tensor([ 2.7689e-04, -8.7375e-05,  5.8757e-05,  4.4910e-05,  8.9236e-05,\n","        -7.1116e-05, -9.7042e-05, -1.4909e-05, -1.6110e-05, -2.6263e-05])\n","gradient values before mask reapp. tensor([ 1.6383e-04, -1.0582e-04, -1.3618e-04,  7.7449e-07, -7.5223e-05,\n","        -9.7428e-05, -1.3553e-04, -1.2875e-04, -3.7840e-05, -3.3813e-04])\n","gradient values before mask reapp. tensor([ 3.2166e-04, -7.7950e-05,  1.4323e-04,  6.5897e-05,  1.6267e-04,\n","        -5.8855e-05, -7.7805e-05,  3.6690e-05, -5.2949e-06,  1.1374e-04])\n","gradient values before mask reapp. tensor([ 2.5457e-04, -9.1999e-05,  2.3649e-05,  3.3733e-05,  5.7946e-05,\n","        -7.5966e-05, -1.0443e-04, -3.4530e-05, -1.9892e-05, -8.8568e-05])\n","gradient values before mask reapp. tensor([ 3.8287e-04, -7.0373e-05,  2.4826e-04,  8.4954e-05,  2.4751e-04,\n","        -4.5045e-05, -5.9154e-05,  9.7700e-05,  5.7852e-06,  2.7151e-04])\n","gradient values before mask reapp. tensor([ 1.4324e-04, -1.0619e-04, -1.6355e-04, -3.0867e-06, -9.8056e-05,\n","        -1.0043e-04, -1.3868e-04, -1.4332e-04, -3.9971e-05, -3.7673e-04])\n","gradient values before mask reapp. tensor([ 3.5002e-04, -7.1747e-05,  1.9944e-04,  7.9135e-05,  2.0973e-04,\n","        -5.0379e-05, -6.5019e-05,  7.1440e-05,  2.0115e-06,  2.0459e-04])\n","gradient values before mask reapp. tensor([ 2.2452e-04, -9.4102e-05, -2.2029e-05,  2.5487e-05,  1.7890e-05,\n","        -8.1589e-05, -1.1192e-04, -6.0642e-05, -2.4725e-05, -1.5816e-04])\n","gradient values before mask reapp. tensor([ 3.0128e-04, -7.7487e-05,  1.2047e-04,  6.4763e-05,  1.4614e-04,\n","        -5.9836e-05, -7.8019e-05,  2.7150e-05, -5.1956e-06,  8.6170e-05])\n","gradient values before mask reapp. tensor([ 2.9883e-04, -8.5491e-05,  1.0394e-04,  4.7066e-05,  1.1885e-04,\n","        -6.5601e-05, -9.0575e-05,  1.1504e-05, -1.2065e-05,  2.9099e-05])\n","gradient values before mask reapp. tensor([ 2.2082e-04, -9.0111e-05, -1.8962e-05,  3.2878e-05,  2.5308e-05,\n","        -7.9136e-05, -1.0667e-04, -5.5987e-05, -2.1841e-05, -1.3851e-04])\n","gradient values before mask reapp. tensor([ 1.7558e-04, -1.0297e-04, -1.0542e-04,  3.1798e-06, -5.6858e-05,\n","        -9.3289e-05, -1.3024e-04, -1.1050e-04, -3.4969e-05, -2.9886e-04])\n","gradient values before mask reapp. tensor([ 2.4086e-04, -8.3280e-05,  2.5603e-05,  4.7791e-05,  6.8344e-05,\n","        -7.1327e-05, -9.3208e-05, -2.6084e-05, -1.4163e-05, -5.5867e-05])\n","gradient values before mask reapp. tensor([ 3.7253e-04, -7.4281e-05,  2.3589e-04,  7.2688e-05,  2.2657e-04,\n","        -4.7938e-05, -6.5366e-05,  8.9204e-05,  2.4253e-06,  2.3154e-04])\n","gradient values before mask reapp. tensor([ 2.9542e-04, -7.6563e-05,  1.1773e-04,  6.3318e-05,  1.3947e-04,\n","        -6.0121e-05, -7.8322e-05,  2.5707e-05, -5.7927e-06,  7.9074e-05])\n","gradient values before mask reapp. tensor([ 9.3403e-05, -1.0912e-04, -2.3210e-04, -1.6325e-05, -1.5740e-04,\n","        -1.0839e-04, -1.4851e-04, -1.8052e-04, -4.6069e-05, -4.8122e-04])\n","gradient values before mask reapp. tensor([ 4.4628e-04, -5.3667e-05,  3.8038e-04,  1.1767e-04,  3.5755e-04,\n","        -2.5101e-05, -2.7888e-05,  1.7942e-04,  2.2956e-05,  4.8891e-04])\n","gradient values before mask reapp. tensor([ 7.6296e-05, -1.1109e-04, -2.5903e-04, -2.1755e-05, -1.8026e-04,\n","        -1.1157e-04, -1.5314e-04, -1.9571e-04, -4.8672e-05, -5.2302e-04])\n","gradient values before mask reapp. tensor([ 5.1126e-04, -4.8317e-05,  4.8719e-04,  1.3225e-04,  4.4027e-04,\n","        -1.2165e-05, -1.2116e-05,  2.3934e-04,  3.2651e-05,  6.3966e-04])\n","gradient values before mask reapp. tensor([ 8.3926e-05, -1.1637e-04, -2.5642e-04, -3.1786e-05, -1.8863e-04,\n","        -1.1303e-04, -1.5993e-04, -1.9847e-04, -5.1764e-05, -5.4312e-04])\n","gradient values before mask reapp. tensor([ 2.7942e-04, -7.4127e-05,  1.0419e-04,  6.4491e-05,  1.3019e-04,\n","        -6.0481e-05, -7.6665e-05,  2.0783e-05, -5.3258e-06,  6.7314e-05])\n","gradient values before mask reapp. tensor([ 2.1925e-04, -9.3740e-05, -1.6647e-05,  1.9762e-05,  1.1417e-05,\n","        -8.1153e-05, -1.1235e-04, -5.7472e-05, -2.5261e-05, -1.6468e-04])\n","gradient values before mask reapp. tensor([ 3.2093e-04, -6.7668e-05,  1.7832e-04,  7.9895e-05,  1.9214e-04,\n","        -5.0196e-05, -6.1994e-05,  6.4763e-05,  3.2962e-06,  1.8353e-04])\n","gradient values before mask reapp. tensor([ 2.9074e-04, -8.5951e-05,  1.0440e-04,  4.0153e-05,  1.0876e-04,\n","        -6.5494e-05, -9.1723e-05,  1.2454e-05, -1.2789e-05,  1.4277e-05])\n","gradient values before mask reapp. tensor([ 3.3162e-04, -6.7160e-05,  1.9540e-04,  8.1802e-05,  2.0344e-04,\n","        -4.7739e-05, -6.0003e-05,  7.4192e-05,  4.7588e-06,  2.0533e-04])\n","gradient values before mask reapp. tensor([ 7.7847e-05, -1.1052e-04, -2.4943e-04, -2.4481e-05, -1.8033e-04,\n","        -1.1088e-04, -1.5305e-04, -1.9094e-04, -4.8974e-05, -5.1907e-04])\n","gradient values before mask reapp. tensor([ 3.2064e-04, -6.8627e-05,  1.7880e-04,  7.6193e-05,  1.8724e-04,\n","        -5.0592e-05, -6.3992e-05,  6.3765e-05,  2.1561e-06,  1.7555e-04])\n","gradient values before mask reapp. tensor([ 2.0530e-04, -9.7450e-05, -3.7551e-05,  9.9661e-06, -1.1752e-05,\n","        -8.4127e-05, -1.1846e-04, -7.0048e-05, -2.8280e-05, -2.0914e-04])\n","gradient values before mask reapp. tensor([ 3.6641e-04, -6.0244e-05,  2.6194e-04,  9.5863e-05,  2.5765e-04,\n","        -3.8648e-05, -4.6332e-05,  1.1377e-04,  1.2328e-05,  3.0997e-04])\n","gradient values before mask reapp. tensor([ 8.5298e-05, -1.1019e-04, -2.3351e-04, -2.4293e-05, -1.7031e-04,\n","        -1.0881e-04, -1.5096e-04, -1.8145e-04, -4.7461e-05, -5.0098e-04])\n","gradient values before mask reapp. tensor([ 4.5500e-04, -5.0363e-05,  4.1109e-04,  1.2027e-04,  3.7547e-04,\n","        -2.0181e-05, -2.1756e-05,  1.9876e-04,  2.6620e-05,  5.2839e-04])\n","gradient values before mask reapp. tensor([ 8.2949e-05, -1.0748e-04, -2.3035e-04, -1.9884e-05, -1.6530e-04,\n","        -1.0752e-04, -1.4739e-04, -1.7765e-04, -4.5740e-05, -4.8796e-04])\n","gradient values before mask reapp. tensor([ 4.5946e-04, -4.8476e-05,  4.2362e-04,  1.2423e-04,  3.8756e-04,\n","        -1.7748e-05, -1.7650e-05,  2.0772e-04,  2.9134e-05,  5.5135e-04])\n","gradient values before mask reapp. tensor([ 7.6939e-05, -1.0819e-04, -2.3988e-04, -2.1854e-05, -1.7408e-04,\n","        -1.0833e-04, -1.4929e-04, -1.8333e-04, -4.6658e-05, -5.0299e-04])\n","gradient values before mask reapp. tensor([ 3.4515e-04, -6.6432e-05,  2.2485e-04,  7.8488e-05,  2.1546e-04,\n","        -4.5613e-05, -5.8764e-05,  8.8758e-05,  5.0597e-06,  2.3087e-04])\n","gradient values before mask reapp. tensor([ 4.7494e-05, -1.1423e-04, -2.9128e-04, -3.6541e-05, -2.2011e-04,\n","        -1.1560e-04, -1.6102e-04, -2.1420e-04, -5.3146e-05, -5.9146e-04])\n","gradient values before mask reapp. tensor([ 4.6375e-04, -4.6462e-05,  4.3593e-04,  1.2576e-04,  3.9487e-04,\n","        -1.6304e-05, -1.5426e-05,  2.1445e-04,  2.9905e-05,  5.6854e-04])\n","gradient values before mask reapp. tensor([ 1.3811e-04, -1.0078e-04, -1.3460e-04, -5.3806e-06, -9.3168e-05,\n","        -9.5239e-05, -1.3218e-04, -1.2361e-04, -3.6977e-05, -3.5096e-04])\n","gradient values before mask reapp. tensor([ 3.2753e-04, -6.3633e-05,  2.0721e-04,  8.2105e-05,  2.0639e-04,\n","        -4.5534e-05, -5.6299e-05,  8.2541e-05,  6.1958e-06,  2.1926e-04])\n","gradient values before mask reapp. tensor([ 1.9595e-04, -9.0817e-05, -3.0730e-05,  1.6701e-05, -7.3604e-06,\n","        -8.1390e-05, -1.1150e-04, -6.2383e-05, -2.5553e-05, -1.8790e-04])\n","gradient values before mask reapp. tensor([ 2.0536e-04, -8.1106e-05, -7.4788e-07,  3.8621e-05,  3.2441e-05,\n","        -7.3001e-05, -9.5813e-05, -3.8847e-05, -1.6442e-05, -1.0573e-04])\n","gradient values before mask reapp. tensor([ 2.8810e-04, -8.2103e-05,  1.2195e-04,  4.0430e-05,  1.1348e-04,\n","        -6.2160e-05, -8.7188e-05,  2.4561e-05, -1.0711e-05,  3.3205e-05])\n","gradient values before mask reapp. tensor([ 2.2873e-04, -7.6677e-05,  4.3995e-05,  4.8824e-05,  7.0426e-05,\n","        -6.6590e-05, -8.5991e-05, -1.1328e-05, -1.0667e-05, -3.3872e-05])\n","gradient values before mask reapp. tensor([ 2.7431e-04, -8.1924e-05,  1.0512e-04,  3.9658e-05,  1.0224e-04,\n","        -6.3548e-05, -8.7756e-05,  1.6904e-05, -1.0977e-05,  1.3456e-05])\n","gradient values before mask reapp. tensor([ 3.2428e-04, -6.4076e-05,  2.0710e-04,  7.9162e-05,  2.0148e-04,\n","        -4.5715e-05, -5.7218e-05,  8.2522e-05,  5.8233e-06,  2.1214e-04])\n","gradient values before mask reapp. tensor([ 7.6840e-05, -1.0645e-04, -2.2498e-04, -2.2944e-05, -1.6827e-04,\n","        -1.0603e-04, -1.4613e-04, -1.7298e-04, -4.4892e-05, -4.8880e-04])\n","gradient values before mask reapp. tensor([ 4.0732e-04, -4.8275e-05,  3.5978e-04,  1.1636e-04,  3.3477e-04,\n","        -2.3519e-05, -2.3321e-05,  1.7558e-04,  2.5386e-05,  4.6321e-04])\n","gradient values before mask reapp. tensor([ 1.9740e-04, -9.1188e-05, -2.0720e-05,  1.3691e-05, -4.9605e-06,\n","        -8.0354e-05, -1.1103e-04, -5.6294e-05, -2.4854e-05, -1.8310e-04])\n","gradient values before mask reapp. tensor([ 2.0596e-04, -8.1154e-05,  9.1027e-06,  3.4476e-05,  3.2052e-05,\n","        -7.2882e-05, -9.5699e-05, -3.3059e-05, -1.6727e-05, -1.0485e-04])\n","gradient values before mask reapp. tensor([ 1.4830e-04, -9.1600e-05, -9.2537e-05,  8.1893e-06, -5.7360e-05,\n","        -8.7817e-05, -1.1811e-04, -9.4631e-05, -2.9770e-05, -2.7398e-04])\n","gradient values before mask reapp. tensor([ 3.8795e-04, -5.8379e-05,  3.1573e-04,  9.0478e-05,  2.7982e-04,\n","        -3.3620e-05, -4.2431e-05,  1.4251e-04,  1.4013e-05,  3.5719e-04])\n","gradient values before mask reapp. tensor([ 1.1650e-04, -9.5084e-05, -1.4449e-04, -1.0478e-06, -9.9953e-05,\n","        -9.3958e-05, -1.2689e-04, -1.2427e-04, -3.4774e-05, -3.5180e-04])\n","gradient values before mask reapp. tensor([ 3.3505e-04, -6.3718e-05,  2.2992e-04,  7.4956e-05,  2.0919e-04,\n","        -4.4671e-05, -5.7030e-05,  9.3123e-05,  5.1707e-06,  2.2848e-04])\n","gradient values before mask reapp. tensor([ 1.7632e-04, -8.5773e-05, -3.9107e-05,  2.1262e-05, -1.1661e-05,\n","        -7.9410e-05, -1.0613e-04, -6.2071e-05, -2.2701e-05, -1.8592e-04])\n","gradient values before mask reapp. tensor([ 4.0900e-04, -5.2804e-05,  3.5941e-04,  1.0260e-04,  3.1891e-04,\n","        -2.6410e-05, -3.1343e-05,  1.7010e-04,  2.0567e-05,  4.3288e-04])\n","gradient values before mask reapp. tensor([ 1.9141e-04, -8.8086e-05, -2.0275e-05,  1.7299e-05, -3.5379e-06,\n","        -7.8347e-05, -1.0789e-04, -5.4399e-05, -2.3153e-05, -1.7381e-04])\n","gradient values before mask reapp. tensor([ 2.6956e-04, -7.0486e-05,  1.2499e-04,  5.6741e-05,  1.2444e-04,\n","        -5.7068e-05, -7.3997e-05,  3.4065e-05, -4.4729e-06,  7.2752e-05])\n","gradient values before mask reapp. tensor([ 9.9985e-05, -9.5846e-05, -1.6680e-04, -5.2384e-06, -1.1904e-04,\n","        -9.5877e-05, -1.3015e-04, -1.3677e-04, -3.6542e-05, -3.8457e-04])\n","gradient values before mask reapp. tensor([ 4.8008e-04, -4.2006e-05,  4.8351e-04,  1.2635e-04,  4.1826e-04,\n","        -1.0158e-05, -8.8907e-06,  2.4130e-04,  3.3045e-05,  6.2202e-04])\n","gradient values before mask reapp. tensor([ 8.6710e-05, -9.8736e-05, -1.9126e-04, -1.2303e-05, -1.4229e-04,\n","        -9.9221e-05, -1.3632e-04, -1.5220e-04, -3.9962e-05, -4.2744e-04])\n","gradient values before mask reapp. tensor([ 3.3660e-04, -6.2314e-05,  2.3955e-04,  7.5242e-05,  2.1469e-04,\n","        -4.2621e-05, -5.5135e-05,  9.8775e-05,  6.3542e-06,  2.4130e-04])\n","gradient values before mask reapp. tensor([ 2.7871e-04, -7.1393e-05,  1.3689e-04,  5.2931e-05,  1.2602e-04,\n","        -5.6390e-05, -7.6179e-05,  3.7278e-05, -5.8680e-06,  7.7604e-05])\n","gradient values before mask reapp. tensor([ 1.0671e-04, -9.2928e-05, -1.5037e-04, -9.3578e-07, -1.0606e-04,\n","        -9.2848e-05, -1.2611e-04, -1.2714e-04, -3.4475e-05, -3.5622e-04])\n","gradient values before mask reapp. tensor([ 3.2111e-04, -6.9642e-05,  2.0691e-04,  5.9058e-05,  1.7969e-04,\n","        -4.8052e-05, -6.6503e-05,  7.7333e-05,  4.3376e-07,  1.6993e-04])\n","gradient values before mask reapp. tensor([ 3.7118e-04, -5.2046e-05,  3.0999e-04,  9.9442e-05,  2.8232e-04,\n","        -2.9288e-05, -3.4761e-05,  1.4503e-04,  1.8479e-05,  3.7228e-04])\n","gradient values before mask reapp. tensor([ 7.3947e-05, -1.0504e-04, -2.1522e-04, -2.8925e-05, -1.7379e-04,\n","        -1.0431e-04, -1.4673e-04, -1.6903e-04, -4.5912e-05, -4.9048e-04])\n","gradient values before mask reapp. tensor([ 4.5486e-04, -3.6489e-05,  4.6166e-04,  1.3594e-04,  4.1245e-04,\n","        -7.4977e-06, -1.9586e-06,  2.3665e-04,  3.7171e-05,  6.1912e-04])\n","gradient values before mask reapp. tensor([ 5.5379e-05, -1.0624e-04, -2.4227e-04, -3.3002e-05, -1.9503e-04,\n","        -1.0740e-04, -1.5035e-04, -1.8365e-04, -4.7959e-05, -5.2885e-04])\n","gradient values before mask reapp. tensor([ 5.1118e-04, -3.4012e-05,  5.5004e-04,  1.4329e-04,  4.7527e-04,\n","         1.7240e-06,  7.6060e-06,  2.8374e-04,  4.3076e-05,  7.3273e-04])\n","gradient values before mask reapp. tensor([-8.1259e-05, -1.3146e-04, -4.8568e-04, -9.1475e-05, -4.0536e-04,\n","        -1.4063e-04, -2.0213e-04, -3.2870e-04, -7.6734e-05, -9.2709e-04])\n","gradient values before mask reapp. tensor([ 4.7097e-04, -3.5198e-05,  4.9184e-04,  1.3686e-04,  4.3159e-04,\n","        -4.8875e-06,  1.1726e-06,  2.5271e-04,  3.8817e-05,  6.5508e-04])\n","gradient values before mask reapp. tensor([-6.4378e-05, -1.2650e-04, -4.5021e-04, -8.1505e-05, -3.7405e-04,\n","        -1.3510e-04, -1.9293e-04, -3.0621e-04, -7.1772e-05, -8.6609e-04])\n","gradient values before mask reapp. tensor([ 5.6463e-04, -1.9090e-05,  6.5821e-04,  1.7434e-04,  5.7167e-04,\n","         1.8188e-05,  3.5071e-05,  3.5132e-04,  5.8008e-05,  9.2066e-04])\n","gradient values before mask reapp. tensor([-5.6417e-05, -1.2404e-04, -4.3327e-04, -7.8159e-05, -3.6214e-04,\n","        -1.3325e-04, -1.8969e-04, -2.9673e-04, -7.0500e-05, -8.4050e-04])\n","gradient values before mask reapp. tensor([ 4.7602e-04, -2.8954e-05,  5.1334e-04,  1.4886e-04,  4.5529e-04,\n","         4.8689e-07,  1.1145e-05,  2.6938e-04,  4.4292e-05,  7.0491e-04])\n","gradient values before mask reapp. tensor([ 1.1055e-04, -9.9563e-05, -1.4528e-04, -2.0629e-05, -1.2696e-04,\n","        -9.5893e-05, -1.3633e-04, -1.2983e-04, -4.0472e-05, -3.9712e-04])\n","gradient values before mask reapp. tensor([ 3.0572e-04, -5.2291e-05,  2.2523e-04,  9.1884e-05,  2.1807e-04,\n","        -3.6508e-05, -4.1339e-05,  1.0319e-04,  1.4514e-05,  2.6149e-04])\n","gradient values before mask reapp. tensor([ 2.8036e-04, -7.6117e-05,  1.4802e-04,  3.7392e-05,  1.1631e-04,\n","        -5.7075e-05, -8.1440e-05,  4.1690e-05, -8.3481e-06,  5.5520e-05])\n","gradient values before mask reapp. tensor([ 1.8656e-04, -7.7421e-05,  5.3861e-06,  3.1339e-05,  1.7623e-05,\n","        -6.9639e-05, -9.4205e-05, -3.3154e-05, -1.5875e-05, -1.1607e-04])\n","gradient values before mask reapp. tensor([ 2.2729e-05, -1.1471e-04, -2.9434e-04, -5.6040e-05, -2.5280e-04,\n","        -1.1539e-04, -1.6607e-04, -2.1627e-04, -5.6379e-05, -6.3804e-04])\n","gradient values before mask reapp. tensor([ 5.1299e-04, -2.5884e-05,  5.7629e-04,  1.5419e-04,  4.9637e-04,\n","         7.1505e-06,  1.8283e-05,  3.0299e-04,  4.8183e-05,  7.8444e-04])\n","gradient values before mask reapp. tensor([-1.0036e-04, -1.2841e-04, -4.9602e-04, -9.2023e-05, -4.1585e-04,\n","        -1.4085e-04, -1.9984e-04, -3.3093e-04, -7.6083e-05, -9.3954e-04])\n","gradient values before mask reapp. tensor([ 6.8687e-04, -1.6685e-06,  8.7745e-04,  2.1443e-04,  7.4706e-04,\n","         4.7398e-05,  7.5388e-05,  4.7997e-04,  8.1651e-05,  1.2503e-03])\n","gradient values before mask reapp. tensor([-1.2847e-04, -1.3353e-04, -5.4597e-04, -1.0473e-04, -4.6196e-04,\n","        -1.4785e-04, -2.1118e-04, -3.6128e-04, -8.2631e-05, -1.0243e-03])\n","gradient values before mask reapp. tensor([ 4.5530e-04, -3.1334e-05,  4.8769e-04,  1.3900e-04,  4.2618e-04,\n","        -3.1393e-06,  5.1268e-06,  2.5457e-04,  4.0818e-05,  6.5410e-04])\n","gradient values before mask reapp. tensor([-6.4046e-05, -1.2113e-04, -4.2767e-04, -7.7787e-05, -3.6203e-04,\n","        -1.3174e-04, -1.8624e-04, -2.9072e-04, -6.8961e-05, -8.3411e-04])\n","gradient values before mask reapp. tensor([ 4.8019e-04, -3.1503e-05,  5.2338e-04,  1.3725e-04,  4.4482e-04,\n","        -1.0409e-06,  5.3423e-06,  2.7025e-04,  4.0500e-05,  6.8915e-04])\n","gradient values before mask reapp. tensor([-7.6592e-05, -1.2831e-04, -4.5744e-04, -9.2879e-05, -3.9499e-04,\n","        -1.3701e-04, -1.9778e-04, -3.1143e-04, -7.4800e-05, -9.0038e-04])\n","gradient values before mask reapp. tensor([ 3.6466e-04, -4.1304e-05,  3.4001e-04,  1.1063e-04,  3.0341e-04,\n","        -2.2218e-05, -2.0966e-05,  1.6911e-04,  2.5266e-05,  4.2909e-04])\n","gradient values before mask reapp. tensor([ 2.4162e-04, -8.0627e-05,  9.4228e-05,  2.1003e-05,  6.2872e-05,\n","        -6.4143e-05, -9.2473e-05,  1.0974e-05, -1.4868e-05, -4.0806e-05])\n","gradient values before mask reapp. tensor([ 2.5574e-04, -5.9702e-05,  1.4970e-04,  6.6678e-05,  1.3966e-04,\n","        -4.8122e-05, -5.9974e-05,  5.6678e-05,  3.1941e-06,  1.2110e-04])\n","gradient values before mask reapp. tensor([ 1.4627e-04, -9.1313e-05, -6.2379e-05, -7.1432e-06, -6.3820e-05,\n","        -8.3805e-05, -1.1898e-04, -7.8470e-05, -3.0256e-05, -2.7493e-04])\n","gradient values before mask reapp. tensor([ 4.2498e-04, -3.5093e-05,  4.4128e-04,  1.2542e-04,  3.7891e-04,\n","        -9.7914e-06, -5.5798e-06,  2.2617e-04,  3.4112e-05,  5.7120e-04])\n","gradient values before mask reapp. tensor([-1.3366e-04, -1.2895e-04, -5.3625e-04, -1.0062e-04, -4.5456e-04,\n","        -1.4528e-04, -2.0542e-04, -3.5255e-04, -7.9983e-05, -1.0039e-03])\n","gradient values before mask reapp. tensor([6.7214e-04, 3.6167e-07, 8.6791e-04, 2.1225e-04, 7.3350e-04, 4.7109e-05,\n","        7.5267e-05, 4.7575e-04, 8.0914e-05, 1.2338e-03])\n","gradient values before mask reapp. tensor([-2.0137e-04, -1.4260e-04, -6.5768e-04, -1.3265e-04, -5.6276e-04,\n","        -1.6259e-04, -2.3283e-04, -4.2572e-04, -9.5306e-05, -1.2093e-03])\n","gradient values before mask reapp. tensor([ 5.5057e-04, -1.7468e-05,  6.5904e-04,  1.6683e-04,  5.5582e-04,\n","         1.8581e-05,  3.3903e-05,  3.5205e-04,  5.6820e-05,  9.0328e-04])\n","gradient values before mask reapp. tensor([-1.6593e-04, -1.4111e-04, -6.0148e-04, -1.2806e-04, -5.2300e-04,\n","        -1.5627e-04, -2.2644e-04, -3.9519e-04, -9.1304e-05, -1.1377e-03])\n","gradient values before mask reapp. tensor([ 4.7647e-04, -1.9302e-05,  5.4999e-04,  1.5786e-04,  4.7688e-04,\n","         7.3742e-06,  2.3181e-05,  2.9500e-04,  4.9948e-05,  7.6318e-04])\n","gradient values before mask reapp. tensor([ 2.9771e-05, -1.0871e-04, -2.5613e-04, -5.3049e-05, -2.3376e-04,\n","        -1.1010e-04, -1.5783e-04, -1.9195e-04, -5.2779e-05, -5.9130e-04])\n","gradient values before mask reapp. tensor([ 3.9462e-04, -3.3842e-05,  4.0479e-04,  1.2247e-04,  3.4940e-04,\n","        -1.2921e-05, -8.2313e-06,  2.0757e-04,  3.1996e-05,  5.2418e-04])\n","gradient values before mask reapp. tensor([ 1.6996e-05, -1.0988e-04, -2.7679e-04, -5.7863e-05, -2.5368e-04,\n","        -1.1298e-04, -1.6217e-04, -2.0465e-04, -5.5745e-05, -6.2565e-04])\n","gradient values before mask reapp. tensor([ 3.6021e-04, -3.8693e-05,  3.4884e-04,  1.1049e-04,  3.0355e-04,\n","        -1.9977e-05, -1.8271e-05,  1.7581e-04,  2.6568e-05,  4.3718e-04])\n","gradient values before mask reapp. tensor([ 1.1308e-04, -9.6680e-05, -1.0917e-04, -2.5132e-05, -1.1417e-04,\n","        -9.0607e-05, -1.3047e-04, -1.0600e-04, -3.7009e-05, -3.6730e-04])\n","gradient values before mask reapp. tensor([ 4.8655e-04, -2.0454e-05,  5.6623e-04,  1.5464e-04,  4.8138e-04,\n","         9.0151e-06,  2.2424e-05,  3.0262e-04,  4.9833e-05,  7.7217e-04])\n","gradient values before mask reapp. tensor([-2.2978e-04, -1.4283e-04, -6.9115e-04, -1.3926e-04, -5.9369e-04,\n","        -1.6600e-04, -2.3684e-04, -4.4314e-04, -9.8089e-05, -1.2611e-03])\n","gradient values before mask reapp. tensor([6.7216e-04, 9.4295e-07, 8.7752e-04, 2.0696e-04, 7.2897e-04, 4.7235e-05,\n","        7.3898e-05, 4.7931e-04, 7.9461e-05, 1.2317e-03])\n","gradient values before mask reapp. tensor([-0.0003, -0.0002, -0.0008, -0.0002, -0.0007, -0.0002, -0.0003, -0.0005,\n","        -0.0001, -0.0015])\n","gradient values before mask reapp. tensor([6.6751e-04, 4.7154e-06, 8.7954e-04, 2.1463e-04, 7.3786e-04, 4.9770e-05,\n","        7.9766e-05, 4.8435e-04, 8.2902e-05, 1.2515e-03])\n","gradient values before mask reapp. tensor([-1.5828e-04, -1.3697e-04, -5.7299e-04, -1.2533e-04, -5.0764e-04,\n","        -1.5248e-04, -2.2063e-04, -3.7757e-04, -8.8829e-05, -1.1018e-03])\n","gradient values before mask reapp. tensor([ 4.4075e-04, -2.2709e-05,  5.0024e-04,  1.4372e-04,  4.2636e-04,\n","         9.8401e-07,  1.2934e-05,  2.6595e-04,  4.3651e-05,  6.7542e-04])\n","gradient values before mask reapp. tensor([-4.8392e-05, -1.1664e-04, -3.7429e-04, -7.9456e-05, -3.3875e-04,\n","        -1.2528e-04, -1.7902e-04, -2.5931e-04, -6.5630e-05, -7.8105e-04])\n","gradient values before mask reapp. tensor([ 5.0810e-04, -1.2617e-05,  6.1805e-04,  1.6819e-04,  5.2438e-04,\n","         1.7200e-05,  3.5730e-05,  3.3532e-04,  5.6961e-05,  8.5929e-04])\n","gradient values before mask reapp. tensor([-4.8401e-05, -1.1648e-04, -3.7339e-04, -8.0285e-05, -3.4070e-04,\n","        -1.2534e-04, -1.7947e-04, -2.5929e-04, -6.6136e-05, -7.8272e-04])\n","gradient values before mask reapp. tensor([ 4.0051e-04, -3.5055e-05,  4.2306e-04,  1.1537e-04,  3.5109e-04,\n","        -1.1451e-05, -9.4773e-06,  2.1630e-04,  3.1696e-05,  5.2894e-04])\n","gradient values before mask reapp. tensor([ 6.4328e-05, -9.7819e-05, -1.7443e-04, -3.7070e-05, -1.7414e-04,\n","        -9.8464e-05, -1.4001e-04, -1.4231e-04, -4.3863e-05, -4.6781e-04])\n","gradient values before mask reapp. tensor([ 2.5382e-04, -5.9515e-05,  1.6829e-04,  5.2294e-05,  1.2745e-04,\n","        -4.8432e-05, -6.3269e-05,  6.4160e-05, -4.0749e-07,  1.0808e-04])\n","gradient values before mask reapp. tensor([ 1.4535e-05, -9.9961e-05, -2.5089e-04, -4.5590e-05, -2.3105e-04,\n","        -1.0659e-04, -1.4941e-04, -1.8436e-04, -4.9744e-05, -5.6942e-04])\n","gradient values before mask reapp. tensor([ 3.7171e-04, -4.1682e-05,  3.7117e-04,  9.3586e-05,  2.9406e-04,\n","        -2.1645e-05, -2.5444e-05,  1.8123e-04,  2.0777e-05,  4.2318e-04])\n","gradient values before mask reapp. tensor([-5.3431e-06, -1.0046e-04, -2.8009e-04, -4.8297e-05, -2.5193e-04,\n","        -1.0921e-04, -1.5236e-04, -1.9994e-04, -5.1518e-05, -6.0644e-04])\n","gradient values before mask reapp. tensor([ 4.8373e-04, -2.7244e-05,  5.6283e-04,  1.3055e-04,  4.5385e-04,\n","         4.3382e-06,  1.0042e-05,  2.9324e-04,  4.2014e-05,  7.1805e-04])\n","gradient values before mask reapp. tensor([ 4.9080e-05, -9.9112e-05, -1.9861e-04, -4.3481e-05, -1.9707e-04,\n","        -1.0078e-04, -1.4508e-04, -1.5760e-04, -4.7201e-05, -5.0745e-04])\n","gradient values before mask reapp. tensor([ 1.5868e-04, -6.9939e-05,  1.0587e-05,  2.4628e-05,  3.4773e-07,\n","        -6.6371e-05, -8.9907e-05, -2.6587e-05, -1.5533e-05, -1.2510e-04])\n","gradient values before mask reapp. tensor([ 2.6739e-04, -6.4961e-05,  1.8367e-04,  3.7629e-05,  1.2377e-04,\n","        -4.9443e-05, -7.0025e-05,  6.7369e-05, -4.3891e-06,  9.4289e-05])\n","gradient values before mask reapp. tensor([ 1.8685e-04, -6.5432e-05,  6.0543e-05,  3.4008e-05,  4.0121e-05,\n","        -5.9923e-05, -8.0767e-05,  2.1614e-06, -1.0605e-05, -4.9322e-05])\n","gradient values before mask reapp. tensor([ 1.7841e-04, -7.6428e-05,  3.1740e-05,  7.9157e-06, -2.7258e-06,\n","        -6.9047e-05, -9.8376e-05, -2.1936e-05, -2.0977e-05, -1.3878e-04])\n","gradient values before mask reapp. tensor([ 2.9249e-04, -5.3232e-05,  2.3839e-04,  6.4678e-05,  1.8335e-04,\n","        -3.7242e-05, -5.0498e-05,  1.0407e-04,  7.1820e-06,  2.1537e-04])\n","gradient values before mask reapp. tensor([ 2.1705e-04, -7.3253e-05,  9.4969e-05,  1.6684e-05,  4.6186e-05,\n","        -6.1012e-05, -8.8962e-05,  1.3593e-05, -1.5138e-05, -4.9393e-05])\n","gradient values before mask reapp. tensor([ 1.3894e-04, -7.7393e-05, -2.8706e-05,  2.7465e-06, -4.8471e-05,\n","        -7.4925e-05, -1.0549e-04, -5.5279e-05, -2.5462e-05, -2.1710e-04])\n","gradient values before mask reapp. tensor([ 1.1624e-04, -8.0809e-05, -6.8036e-05, -4.8380e-06, -7.8806e-05,\n","        -7.9328e-05, -1.1265e-04, -7.8304e-05, -2.9026e-05, -2.7500e-04])\n","gradient values before mask reapp. tensor([ 3.0014e-04, -5.6237e-05,  2.4477e-04,  5.4740e-05,  1.7579e-04,\n","        -3.9083e-05, -5.6271e-05,  1.0252e-04,  3.0245e-06,  2.0050e-04])\n","gradient values before mask reapp. tensor([ 1.5428e-04, -7.5715e-05, -2.2516e-06,  8.0802e-06, -2.4031e-05,\n","        -6.9954e-05, -1.0013e-04, -3.9477e-05, -2.1500e-05, -1.7354e-04])\n","gradient values before mask reapp. tensor([ 3.6952e-04, -4.8017e-05,  3.6186e-04,  7.5071e-05,  2.6946e-04,\n","        -2.3979e-05, -3.6246e-05,  1.6964e-04,  1.4697e-05,  3.7465e-04])\n","gradient values before mask reapp. tensor([-1.5893e-05, -1.0150e-04, -2.9777e-04, -5.4474e-05, -2.7269e-04,\n","        -1.0881e-04, -1.5765e-04, -2.1314e-04, -5.4380e-05, -6.3825e-04])\n","gradient values before mask reapp. tensor([ 3.2145e-04, -5.0125e-05,  2.8798e-04,  6.7653e-05,  2.1578e-04,\n","        -3.1500e-05, -4.5011e-05,  1.2930e-04,  9.5606e-06,  2.7857e-04])\n","gradient values before mask reapp. tensor([ 8.4742e-05, -8.5686e-05, -1.2210e-04, -2.0107e-05, -1.3078e-04,\n","        -8.6718e-05, -1.2519e-04, -1.1203e-04, -3.6946e-05, -3.6876e-04])\n","gradient values before mask reapp. tensor([ 1.2514e-04, -7.5272e-05, -4.5708e-05,  4.9843e-06, -5.7164e-05,\n","        -7.3622e-05, -1.0502e-04, -6.4245e-05, -2.4927e-05, -2.2746e-04])\n","gradient values before mask reapp. tensor([ 3.8319e-04, -4.3449e-05,  3.8877e-04,  8.2879e-05,  2.9229e-04,\n","        -1.9006e-05, -2.9935e-05,  1.8478e-04,  1.7882e-05,  4.2277e-04])\n","gradient values before mask reapp. tensor([ 6.3209e-05, -8.5461e-05, -1.5420e-04, -2.0062e-05, -1.5084e-04,\n","        -8.8197e-05, -1.2731e-04, -1.2875e-04, -3.7737e-05, -4.0272e-04])\n","gradient values before mask reapp. tensor([ 3.9695e-04, -4.4202e-05,  4.0948e-04,  8.1771e-05,  3.0495e-04,\n","        -1.7000e-05, -2.8900e-05,  1.9556e-04,  1.8755e-05,  4.4328e-04])\n","gradient values before mask reapp. tensor([ 5.7863e-05, -8.7572e-05, -1.6652e-04, -2.4402e-05, -1.6359e-04,\n","        -8.9462e-05, -1.3121e-04, -1.3702e-04, -3.9663e-05, -4.2648e-04])\n","gradient values before mask reapp. tensor([ 1.0282e-04, -8.9265e-05, -9.7003e-05, -2.8432e-05, -1.2150e-04,\n","        -8.4905e-05, -1.2729e-04, -1.0049e-04, -3.7788e-05, -3.5913e-04])\n","gradient values before mask reapp. tensor([ 4.1400e-04, -2.3697e-05,  4.6922e-04,  1.2623e-04,  3.8248e-04,\n","        -2.3757e-07,  3.4320e-06,  2.4356e-04,  3.6672e-05,  6.0597e-04])\n","gradient values before mask reapp. tensor([-1.6596e-05, -1.0859e-04, -3.0513e-04, -7.4819e-05, -2.9835e-04,\n","        -1.1282e-04, -1.6917e-04, -2.2341e-04, -6.1450e-05, -6.9129e-04])\n","gradient values before mask reapp. tensor([ 5.2659e-04, -1.1251e-05,  6.5666e-04,  1.5723e-04,  5.3026e-04,\n","         2.2999e-05,  3.3966e-05,  3.4988e-04,  5.4318e-05,  8.8035e-04])\n","gradient values before mask reapp. tensor([-2.1841e-04, -1.3556e-04, -6.4785e-04, -1.4165e-04, -5.8053e-04,\n","        -1.5708e-04, -2.3190e-04, -4.2237e-04, -9.7382e-05, -1.2163e-03])\n","gradient values before mask reapp. tensor([6.9255e-04, 9.8298e-06, 9.3973e-04, 2.0906e-04, 7.6031e-04, 5.9203e-05,\n","        8.4132e-05, 5.1345e-04, 8.3403e-05, 1.3073e-03])\n","gradient values before mask reapp. tensor([-0.0004, -0.0002, -0.0010, -0.0002, -0.0009, -0.0002, -0.0003, -0.0006,\n","        -0.0001, -0.0018])\n","gradient values before mask reapp. tensor([7.4149e-04, 2.4776e-05, 1.0413e-03, 2.4228e-04, 8.5666e-04, 7.5828e-05,\n","        1.1279e-04, 5.7943e-04, 9.9544e-05, 1.4930e-03])\n","gradient values before mask reapp. tensor([-0.0002, -0.0001, -0.0007, -0.0002, -0.0006, -0.0002, -0.0002, -0.0004,\n","        -0.0001, -0.0013])\n","gradient values before mask reapp. tensor([ 4.5049e-04, -1.4260e-05,  5.4520e-04,  1.4688e-04,  4.4870e-04,\n","         1.2413e-05,  2.2201e-05,  2.9167e-04,  4.7907e-05,  7.3453e-04])\n","gradient values before mask reapp. tensor([-2.1395e-06, -1.1006e-04, -2.7793e-04, -7.9259e-05, -2.8705e-04,\n","        -1.1063e-04, -1.6861e-04, -2.0861e-04, -6.0715e-05, -6.7298e-04])\n","gradient values before mask reapp. tensor([ 3.7357e-04, -3.0899e-05,  4.0492e-04,  1.0537e-04,  3.1774e-04,\n","        -1.0169e-05, -1.2855e-05,  2.0394e-04,  2.7409e-05,  4.8743e-04])\n","gradient values before mask reapp. tensor([-1.1429e-04, -1.2764e-04, -4.7181e-04, -1.2196e-04, -4.5217e-04,\n","        -1.3672e-04, -2.0719e-04, -3.2264e-04, -8.2675e-05, -9.8219e-04])\n","gradient values before mask reapp. tensor([ 5.1400e-04, -8.1346e-06,  6.5513e-04,  1.6092e-04,  5.3215e-04,\n","         2.4509e-05,  3.8595e-05,  3.5364e-04,  5.7545e-05,  8.8777e-04])\n","gradient values before mask reapp. tensor([-2.5547e-05, -1.1567e-04, -3.1693e-04, -9.2530e-05, -3.2503e-04,\n","        -1.1654e-04, -1.7837e-04, -2.3157e-04, -6.5827e-05, -7.4640e-04])\n","gradient values before mask reapp. tensor([ 3.9996e-04, -2.3965e-05,  4.6181e-04,  1.2209e-04,  3.7015e-04,\n","        -4.0989e-07,  2.9157e-06,  2.4223e-04,  3.7044e-05,  5.8619e-04])\n","gradient values before mask reapp. tensor([-1.3784e-04, -1.2409e-04, -4.9459e-04, -1.1845e-04, -4.6479e-04,\n","        -1.3836e-04, -2.0474e-04, -3.3131e-04, -8.1965e-05, -9.9923e-04])\n","gradient values before mask reapp. tensor([5.6464e-04, 5.6375e-06, 7.5745e-04, 1.8882e-04, 6.1861e-04, 3.9170e-05,\n","        6.3654e-05, 4.1762e-04, 7.0542e-05, 1.0582e-03])\n","gradient values before mask reapp. tensor([-0.0003, -0.0001, -0.0007, -0.0002, -0.0007, -0.0002, -0.0002, -0.0005,\n","        -0.0001, -0.0014])\n","gradient values before mask reapp. tensor([6.7864e-04, 1.4972e-05, 9.4090e-04, 2.1254e-04, 7.5688e-04, 5.9988e-05,\n","        8.8663e-05, 5.1793e-04, 8.5068e-05, 1.3129e-03])\n","gradient values before mask reapp. tensor([-2.3268e-04, -1.3417e-04, -6.4983e-04, -1.4569e-04, -5.9063e-04,\n","        -1.5749e-04, -2.3116e-04, -4.2058e-04, -9.7186e-05, -1.2298e-03])\n","gradient values before mask reapp. tensor([6.1781e-04, 2.5045e-06, 8.3076e-04, 1.8235e-04, 6.5763e-04, 4.3833e-05,\n","        6.2922e-05, 4.5049e-04, 7.0386e-05, 1.1246e-03])\n","gradient values before mask reapp. tensor([-0.0005, -0.0002, -0.0011, -0.0002, -0.0010, -0.0002, -0.0003, -0.0007,\n","        -0.0001, -0.0019])\n","gradient values before mask reapp. tensor([1.0416e-03, 6.7838e-05, 1.5736e-03, 3.4372e-04, 1.2893e-03, 1.4591e-04,\n","        2.1190e-04, 8.9196e-04, 1.5734e-04, 2.3027e-03])\n","gradient values before mask reapp. tensor([-0.0005, -0.0002, -0.0011, -0.0002, -0.0009, -0.0002, -0.0003, -0.0007,\n","        -0.0001, -0.0019])\n","gradient values before mask reapp. tensor([6.3328e-04, 1.7706e-05, 8.8524e-04, 2.1595e-04, 7.2365e-04, 5.7607e-05,\n","        8.9747e-05, 4.9453e-04, 8.5764e-05, 1.2576e-03])\n","gradient values before mask reapp. tensor([-0.0003, -0.0002, -0.0008, -0.0002, -0.0007, -0.0002, -0.0003, -0.0005,\n","        -0.0001, -0.0015])\n","gradient values before mask reapp. tensor([6.6878e-04, 1.6491e-05, 9.3605e-04, 2.1276e-04, 7.5179e-04, 6.0489e-05,\n","        9.0073e-05, 5.1758e-04, 8.5859e-05, 1.3069e-03])\n","gradient values before mask reapp. tensor([-2.0529e-04, -1.3105e-04, -5.9667e-04, -1.4272e-04, -5.5863e-04,\n","        -1.5223e-04, -2.2425e-04, -3.9032e-04, -9.4166e-05, -1.1682e-03])\n","gradient values before mask reapp. tensor([ 4.5808e-04, -1.5091e-05,  5.7022e-04,  1.3518e-04,  4.4363e-04,\n","         1.1772e-05,  1.8312e-05,  3.0161e-04,  4.4642e-05,  7.3189e-04])\n","gradient values before mask reapp. tensor([-0.0004, -0.0002, -0.0009, -0.0002, -0.0008, -0.0002, -0.0003, -0.0005,\n","        -0.0001, -0.0016])\n","gradient values before mask reapp. tensor([8.2122e-04, 4.4480e-05, 1.2119e-03, 2.7875e-04, 9.9002e-04, 1.0006e-04,\n","        1.4933e-04, 6.8366e-04, 1.2000e-04, 1.7570e-03])\n","gradient values before mask reapp. tensor([-0.0003, -0.0002, -0.0008, -0.0002, -0.0007, -0.0002, -0.0003, -0.0005,\n","        -0.0001, -0.0015])\n","gradient values before mask reapp. tensor([7.0096e-04, 2.6108e-05, 1.0049e-03, 2.3310e-04, 8.1309e-04, 7.1948e-05,\n","        1.0846e-04, 5.6215e-04, 9.6274e-05, 1.4264e-03])\n","gradient values before mask reapp. tensor([-0.0004, -0.0002, -0.0010, -0.0002, -0.0009, -0.0002, -0.0003, -0.0006,\n","        -0.0001, -0.0017])\n","gradient values before mask reapp. tensor([8.5936e-04, 4.7623e-05, 1.2783e-03, 2.8788e-04, 1.0415e-03, 1.0879e-04,\n","        1.6017e-04, 7.2288e-04, 1.2704e-04, 1.8498e-03])\n","gradient values before mask reapp. tensor([-0.0004, -0.0002, -0.0009, -0.0002, -0.0008, -0.0002, -0.0003, -0.0006,\n","        -0.0001, -0.0017])\n","gradient values before mask reapp. tensor([6.2368e-04, 6.1949e-06, 8.5993e-04, 1.8507e-04, 6.7398e-04, 4.8089e-05,\n","        6.9098e-05, 4.6979e-04, 7.3946e-05, 1.1605e-03])\n","gradient values before mask reapp. tensor([-0.0003, -0.0001, -0.0007, -0.0002, -0.0007, -0.0002, -0.0002, -0.0005,\n","        -0.0001, -0.0014])\n","gradient values before mask reapp. tensor([6.4746e-04, 9.9328e-06, 9.0363e-04, 1.9422e-04, 7.1224e-04, 5.4743e-05,\n","        7.8405e-05, 4.9654e-04, 7.9646e-05, 1.2301e-03])\n","gradient values before mask reapp. tensor([-0.0004, -0.0002, -0.0009, -0.0002, -0.0008, -0.0002, -0.0003, -0.0006,\n","        -0.0001, -0.0017])\n","gradient values before mask reapp. tensor([7.9994e-04, 4.0107e-05, 1.1811e-03, 2.6482e-04, 9.5294e-04, 9.4995e-05,\n","        1.4028e-04, 6.6499e-04, 1.1460e-04, 1.6893e-03])\n","gradient values before mask reapp. tensor([-0.0006, -0.0002, -0.0012, -0.0003, -0.0011, -0.0002, -0.0003, -0.0007,\n","        -0.0002, -0.0021])\n","gradient values before mask reapp. tensor([1.0556e-03, 7.6846e-05, 1.6259e-03, 3.5645e-04, 1.3269e-03, 1.5492e-04,\n","        2.2640e-04, 9.2753e-04, 1.6517e-04, 2.3840e-03])\n","gradient values before mask reapp. tensor([-0.0005, -0.0002, -0.0012, -0.0003, -0.0010, -0.0002, -0.0003, -0.0007,\n","        -0.0002, -0.0021])\n","gradient values before mask reapp. tensor([6.9778e-04, 2.0901e-05, 1.0003e-03, 2.1742e-04, 7.9061e-04, 6.8373e-05,\n","        9.9346e-05, 5.5517e-04, 9.1106e-05, 1.3843e-03])\n","gradient values before mask reapp. tensor([-0.0005, -0.0002, -0.0010, -0.0002, -0.0009, -0.0002, -0.0003, -0.0006,\n","        -0.0001, -0.0018])\n","gradient values before mask reapp. tensor([8.9514e-04, 4.7243e-05, 1.3410e-03, 2.8399e-04, 1.0754e-03, 1.1388e-04,\n","        1.6332e-04, 7.5513e-04, 1.2906e-04, 1.9099e-03])\n","gradient values before mask reapp. tensor([-0.0005, -0.0002, -0.0012, -0.0003, -0.0011, -0.0002, -0.0003, -0.0007,\n","        -0.0002, -0.0021])\n","gradient values before mask reapp. tensor([8.3302e-04, 4.7090e-05, 1.2498e-03, 2.7955e-04, 1.0092e-03, 1.0513e-04,\n","        1.5553e-04, 7.0796e-04, 1.2365e-04, 1.7968e-03])\n","gradient values before mask reapp. tensor([-0.0006, -0.0002, -0.0013, -0.0003, -0.0011, -0.0002, -0.0004, -0.0008,\n","        -0.0002, -0.0023])\n","gradient values before mask reapp. tensor([1.0638e-03, 8.0780e-05, 1.6524e-03, 3.6301e-04, 1.3476e-03, 1.5938e-04,\n","        2.3378e-04, 9.4577e-04, 1.6947e-04, 2.4264e-03])\n","gradient values before mask reapp. tensor([-0.0005, -0.0002, -0.0011, -0.0003, -0.0010, -0.0002, -0.0003, -0.0007,\n","        -0.0002, -0.0020])\n","gradient values before mask reapp. tensor([5.3127e-04, 8.6714e-07, 7.2617e-04, 1.6335e-04, 5.5994e-04, 3.2731e-05,\n","        4.9625e-05, 3.9659e-04, 6.1913e-05, 9.6060e-04])\n","gradient values before mask reapp. tensor([-0.0004, -0.0002, -0.0009, -0.0002, -0.0008, -0.0002, -0.0003, -0.0006,\n","        -0.0001, -0.0017])\n","gradient values before mask reapp. tensor([6.7294e-04, 2.7183e-05, 9.8618e-04, 2.2917e-04, 7.9375e-04, 7.1525e-05,\n","        1.0880e-04, 5.5646e-04, 9.7506e-05, 1.3967e-03])\n","gradient values before mask reapp. tensor([-1.6761e-04, -1.2714e-04, -5.0300e-04, -1.4135e-04, -5.0265e-04,\n","        -1.4172e-04, -2.1048e-04, -3.3235e-04, -8.5703e-05, -1.0655e-03])\n","gradient values before mask reapp. tensor([5.1031e-04, 4.7109e-06, 7.0685e-04, 1.7183e-04, 5.5603e-04, 3.4134e-05,\n","        5.5093e-05, 3.9233e-04, 6.5746e-05, 9.5817e-04])\n","gradient values before mask reapp. tensor([-2.3643e-04, -1.3143e-04, -6.1185e-04, -1.5707e-04, -5.9157e-04,\n","        -1.5558e-04, -2.2711e-04, -3.9433e-04, -9.6649e-05, -1.2223e-03])\n","gradient values before mask reapp. tensor([ 3.3186e-04, -2.4742e-05,  3.9615e-04,  1.0087e-04,  2.9319e-04,\n","        -8.6380e-06, -8.2796e-06,  2.0788e-04,  3.0111e-05,  4.6189e-04])\n","gradient values before mask reapp. tensor([ 1.6084e-04, -7.0894e-05,  7.9615e-05, -1.1094e-05, -1.0881e-05,\n","        -6.2894e-05, -9.2608e-05,  1.1700e-05, -1.9334e-05, -1.3512e-04])\n","gradient values before mask reapp. tensor([ 9.6367e-05, -6.6185e-05, -2.0175e-05,  2.8942e-06, -6.4227e-05,\n","        -6.5530e-05, -9.4845e-05, -3.9085e-05, -1.8818e-05, -2.1447e-04])\n","gradient values before mask reapp. tensor([ 2.7172e-04, -5.1284e-05,  2.7674e-04,  3.3870e-05,  1.5536e-04,\n","        -3.5851e-05, -5.2346e-05,  1.2821e-04,  3.1926e-06,  1.8086e-04])\n","gradient values before mask reapp. tensor([-1.2930e-04, -1.0632e-04, -4.1145e-04, -9.7282e-05, -4.0469e-04,\n","        -1.2305e-04, -1.7799e-04, -2.7167e-04, -6.7257e-05, -8.6408e-04])\n","gradient values before mask reapp. tensor([ 5.1223e-04, -1.0607e-05,  6.9927e-04,  1.3109e-04,  5.1613e-04,\n","         2.2880e-05,  3.4034e-05,  3.7802e-04,  5.2676e-05,  8.6277e-04])\n","gradient values before mask reapp. tensor([-2.2963e-04, -1.2342e-04, -5.8940e-04, -1.3692e-04, -5.5592e-04,\n","        -1.4609e-04, -2.1388e-04, -3.7658e-04, -8.7325e-05, -1.1487e-03])\n","gradient values before mask reapp. tensor([5.6334e-04, 1.0135e-06, 7.9262e-04, 1.5761e-04, 5.9876e-04, 3.7168e-05,\n","        5.5826e-05, 4.3432e-04, 6.4870e-05, 1.0239e-03])\n","gradient values before mask reapp. tensor([-2.0796e-04, -1.1850e-04, -5.4895e-04, -1.2686e-04, -5.2069e-04,\n","        -1.4054e-04, -2.0529e-04, -3.5335e-04, -8.2565e-05, -1.0799e-03])\n","gradient values before mask reapp. tensor([ 5.1841e-04, -8.6346e-06,  7.1201e-04,  1.3429e-04,  5.2667e-04,\n","         2.5214e-05,  3.7049e-05,  3.8533e-04,  5.4225e-05,  8.8494e-04])\n","gradient values before mask reapp. tensor([-2.1066e-04, -1.1870e-04, -5.5388e-04, -1.2723e-04, -5.2513e-04,\n","        -1.4034e-04, -2.0580e-04, -3.5584e-04, -8.2846e-05, -1.0871e-03])\n","gradient values before mask reapp. tensor([5.5724e-04, 2.8927e-07, 7.8289e-04, 1.5457e-04, 5.8927e-04, 3.6111e-05,\n","        5.3556e-05, 4.2794e-04, 6.3458e-05, 1.0075e-03])\n","gradient values before mask reapp. tensor([-2.4621e-04, -1.2347e-04, -6.1372e-04, -1.3969e-04, -5.7367e-04,\n","        -1.4829e-04, -2.1725e-04, -3.9161e-04, -8.9221e-05, -1.1775e-03])\n","gradient values before mask reapp. tensor([6.7489e-04, 1.5051e-05, 9.8321e-04, 1.9256e-04, 7.5539e-04, 6.2877e-05,\n","        9.0101e-05, 5.4464e-04, 8.5280e-05, 1.3140e-03])\n","gradient values before mask reapp. tensor([-2.5191e-04, -1.2614e-04, -6.2835e-04, -1.4748e-04, -5.9378e-04,\n","        -1.5143e-04, -2.2360e-04, -4.0293e-04, -9.3543e-05, -1.2132e-03])\n","gradient values before mask reapp. tensor([ 3.9261e-04, -2.2557e-05,  5.0010e-04,  9.6111e-05,  3.5098e-04,\n","        -1.2154e-06, -6.6022e-07,  2.6130e-04,  3.1685e-05,  5.6644e-04])\n","gradient values before mask reapp. tensor([-2.5960e-04, -1.2466e-04, -6.3462e-04, -1.4319e-04, -5.9074e-04,\n","        -1.4987e-04, -2.2023e-04, -4.0304e-04, -9.0843e-05, -1.2082e-03])\n","gradient values before mask reapp. tensor([7.6054e-04, 3.1460e-05, 1.1373e-03, 2.2975e-04, 8.8721e-04, 8.5039e-05,\n","        1.2292e-04, 6.3619e-04, 1.0371e-04, 1.5666e-03])\n","gradient values before mask reapp. tensor([-0.0003, -0.0001, -0.0007, -0.0002, -0.0006, -0.0002, -0.0002, -0.0004,\n","        -0.0001, -0.0013])\n","gradient values before mask reapp. tensor([6.1500e-04, 1.5323e-05, 8.8966e-04, 1.8781e-04, 6.8304e-04, 5.4651e-05,\n","        7.9740e-05, 4.9258e-04, 7.8007e-05, 1.1963e-03])\n","gradient values before mask reapp. tensor([-0.0004, -0.0002, -0.0009, -0.0002, -0.0009, -0.0002, -0.0003, -0.0006,\n","        -0.0001, -0.0017])\n","gradient values before mask reapp. tensor([6.8984e-04, 2.4326e-05, 1.0199e-03, 2.0917e-04, 7.8911e-04, 7.0570e-05,\n","        1.0257e-04, 5.6808e-04, 9.1256e-05, 1.3899e-03])\n","gradient values before mask reapp. tensor([-0.0003, -0.0001, -0.0008, -0.0002, -0.0007, -0.0002, -0.0002, -0.0005,\n","        -0.0001, -0.0014])\n","gradient values before mask reapp. tensor([7.3385e-04, 3.2476e-05, 1.0973e-03, 2.2911e-04, 8.5576e-04, 8.2662e-05,\n","        1.1943e-04, 6.1463e-04, 1.0105e-04, 1.5178e-03])\n","gradient values before mask reapp. tensor([-0.0006, -0.0002, -0.0012, -0.0003, -0.0011, -0.0002, -0.0003, -0.0007,\n","        -0.0002, -0.0021])\n","gradient values before mask reapp. tensor([1.0067e-03, 7.3805e-05, 1.5730e-03, 3.3083e-04, 1.2574e-03, 1.4738e-04,\n","        2.1299e-04, 8.9544e-04, 1.5557e-04, 2.2683e-03])\n","gradient values before mask reapp. tensor([-0.0005, -0.0002, -0.0011, -0.0003, -0.0010, -0.0002, -0.0003, -0.0007,\n","        -0.0002, -0.0020])\n","gradient values before mask reapp. tensor([7.1028e-04, 3.0196e-05, 1.0599e-03, 2.2220e-04, 8.2343e-04, 7.8350e-05,\n","        1.1282e-04, 5.9305e-04, 9.7222e-05, 1.4603e-03])\n","gradient values before mask reapp. tensor([-0.0005, -0.0002, -0.0011, -0.0003, -0.0010, -0.0002, -0.0003, -0.0007,\n","        -0.0001, -0.0019])\n","gradient values before mask reapp. tensor([8.8539e-04, 5.8031e-05, 1.3671e-03, 2.8953e-04, 1.0832e-03, 1.2072e-04,\n","        1.7444e-04, 7.7514e-04, 1.3273e-04, 1.9476e-03])\n","gradient values before mask reapp. tensor([-0.0007, -0.0002, -0.0013, -0.0003, -0.0012, -0.0002, -0.0004, -0.0008,\n","        -0.0002, -0.0024])\n","gradient values before mask reapp. tensor([1.0089e-03, 8.3046e-05, 1.5944e-03, 3.4809e-04, 1.2826e-03, 1.5397e-04,\n","        2.2616e-04, 9.1410e-04, 1.6213e-04, 2.3266e-03])\n","gradient values before mask reapp. tensor([-0.0007, -0.0002, -0.0015, -0.0003, -0.0013, -0.0003, -0.0004, -0.0009,\n","        -0.0002, -0.0026])\n","gradient values before mask reapp. tensor([9.7474e-04, 8.0502e-05, 1.5420e-03, 3.3980e-04, 1.2400e-03, 1.4734e-04,\n","        2.1839e-04, 8.8504e-04, 1.5730e-04, 2.2499e-03])\n","gradient values before mask reapp. tensor([-0.0007, -0.0002, -0.0014, -0.0003, -0.0013, -0.0003, -0.0004, -0.0009,\n","        -0.0002, -0.0026])\n","gradient values before mask reapp. tensor([9.6706e-04, 7.5110e-05, 1.5228e-03, 3.2836e-04, 1.2185e-03, 1.4327e-04,\n","        2.0959e-04, 8.7040e-04, 1.5312e-04, 2.2055e-03])\n","gradient values before mask reapp. tensor([-0.0004, -0.0002, -0.0009, -0.0002, -0.0008, -0.0002, -0.0003, -0.0006,\n","        -0.0001, -0.0017])\n","gradient values before mask reapp. tensor([6.5968e-04, 2.5522e-05, 9.8429e-04, 2.0607e-04, 7.5590e-04, 6.8829e-05,\n","        9.9602e-05, 5.5042e-04, 8.9136e-05, 1.3390e-03])\n","gradient values before mask reapp. tensor([-0.0005, -0.0002, -0.0010, -0.0002, -0.0009, -0.0002, -0.0003, -0.0006,\n","        -0.0001, -0.0019])\n","gradient values before mask reapp. tensor([5.6616e-04, 1.2463e-05, 8.3083e-04, 1.6900e-04, 6.2303e-04, 4.6042e-05,\n","        6.9696e-05, 4.6103e-04, 7.0504e-05, 1.0886e-03])\n","gradient values before mask reapp. tensor([-2.3254e-04, -1.2000e-04, -5.7042e-04, -1.4367e-04, -5.5812e-04,\n","        -1.4296e-04, -2.1184e-04, -3.6599e-04, -8.8003e-05, -1.1424e-03])\n","gradient values before mask reapp. tensor([5.2176e-04, 3.5894e-06, 7.5286e-04, 1.4689e-04, 5.5334e-04, 3.4271e-05,\n","        5.2057e-05, 4.1412e-04, 6.0255e-05, 9.5473e-04])\n","gradient values before mask reapp. tensor([-2.0188e-04, -1.1357e-04, -5.1101e-04, -1.3090e-04, -5.0877e-04,\n","        -1.3582e-04, -1.9911e-04, -3.3025e-04, -8.1404e-05, -1.0481e-03])\n","gradient values before mask reapp. tensor([6.0535e-04, 2.3716e-05, 9.0314e-04, 1.9540e-04, 6.9016e-04, 5.9240e-05,\n","        8.8794e-05, 5.0523e-04, 8.1562e-05, 1.2251e-03])\n","gradient values before mask reapp. tensor([-2.0095e-04, -1.1659e-04, -5.1422e-04, -1.3882e-04, -5.2131e-04,\n","        -1.3768e-04, -2.0393e-04, -3.3406e-04, -8.4765e-05, -1.0730e-03])\n","gradient values before mask reapp. tensor([4.7484e-04, 5.5968e-07, 6.7209e-04, 1.4548e-04, 5.0153e-04, 3.0229e-05,\n","        4.2911e-05, 3.6957e-04, 5.7889e-05, 8.6436e-04])\n","gradient values before mask reapp. tensor([-1.7353e-04, -1.1192e-04, -4.6311e-04, -1.2940e-04, -4.7973e-04,\n","        -1.3128e-04, -1.9398e-04, -3.0379e-04, -7.9402e-05, -9.9535e-04])\n","gradient values before mask reapp. tensor([ 3.4001e-04, -1.8702e-05,  4.4134e-04,  9.4874e-05,  3.0342e-04,\n","        -1.6470e-06, -2.3856e-06,  2.3356e-04,  3.0648e-05,  4.9629e-04])\n","gradient values before mask reapp. tensor([ 7.5093e-05, -7.5898e-05, -3.1988e-05, -4.3332e-05, -1.2391e-04,\n","        -7.4724e-05, -1.1229e-04, -5.1129e-05, -3.3080e-05, -3.3084e-04])\n","gradient values before mask reapp. tensor([ 1.1353e-05, -7.4833e-05, -1.3239e-04, -3.9595e-05, -1.8461e-04,\n","        -8.1077e-05, -1.1961e-04, -1.0529e-04, -3.5831e-05, -4.3008e-04])\n","gradient values before mask reapp. tensor([ 3.3247e-04, -2.9990e-05,  4.2439e-04,  6.3242e-05,  2.6440e-04,\n","        -1.1934e-05, -1.7814e-05,  2.1916e-04,  1.9885e-05,  4.0717e-04])\n","gradient values before mask reapp. tensor([-2.2686e-04, -1.1428e-04, -5.4898e-04, -1.3238e-04, -5.3410e-04,\n","        -1.3687e-04, -2.0282e-04, -3.5080e-04, -8.2297e-05, -1.0911e-03])\n","gradient values before mask reapp. tensor([5.0867e-04, 1.2009e-06, 7.3719e-04, 1.3661e-04, 5.3264e-04, 3.1476e-05,\n","        4.7286e-05, 4.0470e-04, 5.6917e-05, 9.1550e-04])\n","gradient values before mask reapp. tensor([-4.5621e-05, -8.7412e-05, -2.3335e-04, -7.5189e-05, -2.8604e-04,\n","        -9.9082e-05, -1.4592e-04, -1.6819e-04, -5.3000e-05, -6.2233e-04])\n","gradient values before mask reapp. tensor([ 2.8403e-04, -3.0941e-05,  3.4813e-04,  5.9203e-05,  2.1008e-04,\n","        -1.8758e-05, -2.6167e-05,  1.7684e-04,  1.5138e-05,  3.1542e-04])\n","gradient values before mask reapp. tensor([-6.6255e-05, -8.7852e-05, -2.6427e-04, -7.5370e-05, -3.0359e-04,\n","        -1.0105e-04, -1.4803e-04, -1.8424e-04, -5.3337e-05, -6.5365e-04])\n","gradient values before mask reapp. tensor([ 4.4323e-04, -1.6870e-06,  6.2729e-04,  1.2996e-04,  4.5247e-04,\n","         2.2062e-05,  3.3093e-05,  3.4214e-04,  4.9442e-05,  7.7936e-04])\n","gradient values before mask reapp. tensor([-1.4900e-04, -1.0399e-04, -4.1223e-04, -1.1508e-04, -4.3753e-04,\n","        -1.2252e-04, -1.8115e-04, -2.7293e-04, -7.2894e-05, -9.0748e-04])\n","gradient values before mask reapp. tensor([6.5478e-04, 3.1939e-05, 9.9530e-04, 2.1172e-04, 7.6219e-04, 7.3081e-05,\n","        1.0653e-04, 5.5966e-04, 9.1572e-05, 1.3631e-03])\n","gradient values before mask reapp. tensor([-0.0005, -0.0002, -0.0010, -0.0002, -0.0009, -0.0002, -0.0003, -0.0006,\n","        -0.0001, -0.0018])\n","gradient values before mask reapp. tensor([7.8130e-04, 5.3204e-05, 1.2186e-03, 2.6118e-04, 9.4960e-04, 1.0353e-04,\n","        1.5134e-04, 6.9145e-04, 1.1680e-04, 1.7176e-03])\n","gradient values before mask reapp. tensor([-0.0005, -0.0002, -0.0010, -0.0003, -0.0010, -0.0002, -0.0003, -0.0006,\n","        -0.0001, -0.0019])\n","gradient values before mask reapp. tensor([7.7349e-04, 5.3912e-05, 1.2097e-03, 2.6064e-04, 9.4169e-04, 1.0254e-04,\n","        1.5096e-04, 6.8718e-04, 1.1602e-04, 1.7054e-03])\n","gradient values before mask reapp. tensor([-0.0005, -0.0002, -0.0010, -0.0003, -0.0010, -0.0002, -0.0003, -0.0006,\n","        -0.0001, -0.0019])\n","gradient values before mask reapp. tensor([8.4424e-04, 6.2024e-05, 1.3305e-03, 2.8177e-04, 1.0402e-03, 1.1837e-04,\n","        1.7231e-04, 7.5768e-04, 1.2887e-04, 1.8858e-03])\n","gradient values before mask reapp. tensor([-0.0005, -0.0002, -0.0011, -0.0003, -0.0010, -0.0002, -0.0003, -0.0007,\n","        -0.0001, -0.0019])\n","gradient values before mask reapp. tensor([7.5566e-04, 4.0504e-05, 1.1709e-03, 2.3123e-04, 8.9561e-04, 9.3318e-05,\n","        1.3356e-04, 6.6113e-04, 1.0717e-04, 1.6010e-03])\n","gradient values before mask reapp. tensor([-0.0004, -0.0002, -0.0009, -0.0002, -0.0009, -0.0002, -0.0003, -0.0006,\n","        -0.0001, -0.0017])\n","gradient values before mask reapp. tensor([5.6591e-04, 1.4006e-05, 8.4631e-04, 1.6340e-04, 6.2189e-04, 4.9547e-05,\n","        7.1608e-05, 4.7084e-04, 7.0551e-05, 1.0923e-03])\n","gradient values before mask reapp. tensor([-0.0003, -0.0001, -0.0007, -0.0002, -0.0007, -0.0002, -0.0002, -0.0005,\n","        -0.0001, -0.0014])\n","gradient values before mask reapp. tensor([5.3946e-04, 8.3006e-06, 8.0315e-04, 1.4728e-04, 5.8069e-04, 4.1633e-05,\n","        6.1153e-05, 4.4515e-04, 6.3907e-05, 1.0105e-03])\n","gradient values before mask reapp. tensor([-0.0003, -0.0001, -0.0007, -0.0002, -0.0007, -0.0002, -0.0002, -0.0005,\n","        -0.0001, -0.0014])\n","gradient values before mask reapp. tensor([5.5141e-04, 1.5009e-05, 8.2987e-04, 1.6078e-04, 6.0806e-04, 4.6827e-05,\n","        7.0526e-05, 4.6214e-04, 6.8683e-05, 1.0699e-03])\n","gradient values before mask reapp. tensor([-1.9621e-04, -1.0729e-04, -4.8105e-04, -1.2764e-04, -4.9449e-04,\n","        -1.2927e-04, -1.9143e-04, -3.1146e-04, -7.8658e-05, -1.0084e-03])\n","gradient values before mask reapp. tensor([5.7594e-04, 2.4519e-05, 8.7520e-04, 1.8441e-04, 6.5482e-04, 5.7184e-05,\n","        8.5391e-05, 4.9101e-04, 7.7559e-05, 1.1695e-03])\n","gradient values before mask reapp. tensor([-0.0004, -0.0001, -0.0008, -0.0002, -0.0008, -0.0002, -0.0003, -0.0005,\n","        -0.0001, -0.0015])\n","gradient values before mask reapp. tensor([7.7597e-04, 5.7375e-05, 1.2270e-03, 2.6335e-04, 9.5274e-04, 1.0571e-04,\n","        1.5666e-04, 6.9970e-04, 1.1840e-04, 1.7307e-03])\n","gradient values before mask reapp. tensor([-0.0006, -0.0002, -0.0013, -0.0003, -0.0011, -0.0002, -0.0003, -0.0008,\n","        -0.0002, -0.0022])\n","gradient values before mask reapp. tensor([0.0011, 0.0001, 0.0018, 0.0004, 0.0014, 0.0002, 0.0003, 0.0010, 0.0002,\n","        0.0026])\n","gradient values before mask reapp. tensor([-0.0007, -0.0002, -0.0014, -0.0003, -0.0013, -0.0003, -0.0004, -0.0008,\n","        -0.0002, -0.0025])\n","gradient values before mask reapp. tensor([8.7198e-04, 7.1694e-05, 1.3943e-03, 2.9805e-04, 1.0919e-03, 1.2901e-04,\n","        1.8905e-04, 7.9824e-04, 1.3723e-04, 1.9913e-03])\n","gradient values before mask reapp. tensor([-0.0008, -0.0002, -0.0015, -0.0004, -0.0014, -0.0003, -0.0004, -0.0009,\n","        -0.0002, -0.0027])\n","gradient values before mask reapp. tensor([0.0012, 0.0001, 0.0020, 0.0004, 0.0016, 0.0002, 0.0003, 0.0011, 0.0002,\n","        0.0029])\n","gradient values before mask reapp. tensor([-0.0009, -0.0002, -0.0018, -0.0004, -0.0016, -0.0003, -0.0005, -0.0011,\n","        -0.0002, -0.0031])\n","gradient values before mask reapp. tensor([9.2310e-04, 8.5882e-05, 1.4985e-03, 3.2718e-04, 1.1835e-03, 1.4370e-04,\n","        2.1510e-04, 8.6321e-04, 1.5112e-04, 2.1703e-03])\n","gradient values before mask reapp. tensor([-0.0007, -0.0002, -0.0013, -0.0003, -0.0012, -0.0002, -0.0004, -0.0008,\n","        -0.0002, -0.0023])\n","gradient values before mask reapp. tensor([1.0700e-03, 9.9605e-05, 1.7450e-03, 3.6460e-04, 1.3818e-03, 1.7419e-04,\n","        2.5560e-04, 1.0053e-03, 1.7573e-04, 2.5276e-03])\n","gradient values before mask reapp. tensor([-0.0006, -0.0002, -0.0011, -0.0003, -0.0011, -0.0002, -0.0003, -0.0007,\n","        -0.0002, -0.0021])\n","gradient values before mask reapp. tensor([6.7480e-04, 3.5575e-05, 1.0566e-03, 2.0732e-04, 7.9362e-04, 7.8971e-05,\n","        1.1653e-04, 5.9872e-04, 9.5077e-05, 1.4204e-03])\n"]},{"output_type":"display_data","data":{"text/plain":["'50.0% done'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{}},{"output_type":"stream","name":"stdout","text":["sc1 weights:  torch.Size([100, 612])\n","sc2 weights:  torch.Size([1, 100])\n","first ten digits of weight at init tensor([-3.5053e-05, -1.6635e-03, -4.9049e-04,  9.5273e-05,  0.0000e+00,\n","         4.6352e-04,  1.3173e-03, -8.3277e-04, -0.0000e+00, -7.6847e-04],\n","       grad_fn=<SliceBackward0>)\n","gradient values before mask reapp. tensor([-3.4655e-04, -6.7007e-05, -6.0725e-04, -1.2915e-04, -4.7714e-04,\n","        -9.6001e-05, -1.3249e-04, -3.3772e-04, -5.0329e-05, -9.8815e-04])\n","gradient values before mask reapp. tensor([-3.6593e-04, -7.0835e-05, -6.4053e-04, -1.3544e-04, -4.9970e-04,\n","        -1.0208e-04, -1.4045e-04, -3.5416e-04, -5.1097e-05, -1.0432e-03])\n","gradient values before mask reapp. tensor([-3.8697e-04, -7.4995e-05, -6.7661e-04, -1.4223e-04, -5.2399e-04,\n","        -1.0871e-04, -1.4912e-04, -3.7189e-04, -5.1828e-05, -1.1030e-03])\n","gradient values before mask reapp. tensor([-4.0959e-04, -7.9472e-05, -7.1535e-04, -1.4945e-04, -5.4980e-04,\n","        -1.1588e-04, -1.5848e-04, -3.9076e-04, -5.2468e-05, -1.1673e-03])\n","gradient values before mask reapp. tensor([-4.3368e-04, -8.4250e-05, -7.5656e-04, -1.5706e-04, -5.7692e-04,\n","        -1.2359e-04, -1.6851e-04, -4.1065e-04, -5.2963e-05, -1.2358e-03])\n","gradient values before mask reapp. tensor([-4.5915e-04, -8.9309e-05, -8.0004e-04, -1.6500e-04, -6.0512e-04,\n","        -1.3182e-04, -1.7917e-04, -4.3139e-04, -5.3249e-05, -1.3081e-03])\n","gradient values before mask reapp. tensor([-4.8589e-04, -9.4632e-05, -8.4560e-04, -1.7321e-04, -6.3415e-04,\n","        -1.4056e-04, -1.9044e-04, -4.5283e-04, -5.3266e-05, -1.3840e-03])\n","gradient values before mask reapp. tensor([-5.1378e-04, -1.0020e-04, -8.9300e-04, -1.8162e-04, -6.6374e-04,\n","        -1.4980e-04, -2.0228e-04, -4.7478e-04, -5.2946e-05, -1.4632e-03])\n","gradient values before mask reapp. tensor([-5.4268e-04, -1.0598e-04, -9.4199e-04, -1.9015e-04, -6.9362e-04,\n","        -1.5950e-04, -2.1466e-04, -4.9707e-04, -5.2220e-05, -1.5452e-03])\n","gradient values before mask reapp. tensor([-5.7244e-04, -1.1196e-04, -9.9227e-04, -1.9872e-04, -7.2344e-04,\n","        -1.6966e-04, -2.2754e-04, -5.1945e-04, -5.1007e-05, -1.6296e-03])\n","gradient values before mask reapp. tensor([-6.0287e-04, -1.1809e-04, -1.0435e-03, -2.0725e-04, -7.5286e-04,\n","        -1.8023e-04, -2.4086e-04, -5.4170e-04, -4.9225e-05, -1.7159e-03])\n","gradient values before mask reapp. tensor([-6.3377e-04, -1.2434e-04, -1.0953e-03, -2.1562e-04, -7.8146e-04,\n","        -1.9118e-04, -2.5455e-04, -5.6354e-04, -4.6786e-05, -1.8035e-03])\n","gradient values before mask reapp. tensor([-6.6492e-04, -1.3068e-04, -1.1473e-03, -2.2372e-04, -8.0880e-04,\n","        -2.0248e-04, -2.6855e-04, -5.8468e-04, -4.3593e-05, -1.8917e-03])\n","gradient values before mask reapp. tensor([-6.9603e-04, -1.3704e-04, -1.1990e-03, -2.3143e-04, -8.3439e-04,\n","        -2.1406e-04, -2.8278e-04, -6.0478e-04, -3.9542e-05, -1.9797e-03])\n","gradient values before mask reapp. tensor([-7.2684e-04, -1.4338e-04, -1.2498e-03, -2.3860e-04, -8.5771e-04,\n","        -2.2588e-04, -2.9714e-04, -6.2348e-04, -3.4531e-05, -2.0668e-03])\n","gradient values before mask reapp. tensor([-7.5700e-04, -1.4964e-04, -1.2992e-03, -2.4510e-04, -8.7818e-04,\n","        -2.3786e-04, -3.1153e-04, -6.4040e-04, -2.8446e-05, -2.1521e-03])\n","gradient values before mask reapp. tensor([-7.8618e-04, -1.5576e-04, -1.3465e-03, -2.5076e-04, -8.9520e-04,\n","        -2.4994e-04, -3.2583e-04, -6.5512e-04, -2.1178e-05, -2.2345e-03])\n","gradient values before mask reapp. tensor([-8.1401e-04, -1.6166e-04, -1.3911e-03, -2.5541e-04, -9.0814e-04,\n","        -2.6202e-04, -3.3991e-04, -6.6721e-04, -1.2612e-05, -2.3129e-03])\n","gradient values before mask reapp. tensor([-8.4009e-04, -1.6728e-04, -1.4322e-03, -2.5890e-04, -9.1637e-04,\n","        -2.7402e-04, -3.5365e-04, -6.7624e-04, -2.6417e-06, -2.3863e-03])\n","gradient values before mask reapp. tensor([-8.6402e-04, -1.7253e-04, -1.4692e-03, -2.6105e-04, -9.1925e-04,\n","        -2.8585e-04, -3.6690e-04, -6.8176e-04,  8.8312e-06, -2.4535e-03])\n","gradient values before mask reapp. tensor([-8.8541e-04, -1.7735e-04, -1.5013e-03, -2.6170e-04, -9.1617e-04,\n","        -2.9740e-04, -3.7953e-04, -6.8336e-04,  2.1898e-05, -2.5134e-03])\n","gradient values before mask reapp. tensor([-9.0389e-04, -1.8166e-04, -1.5280e-03, -2.6071e-04, -9.0660e-04,\n","        -3.0858e-04, -3.9138e-04, -6.8067e-04,  3.6620e-05, -2.5649e-03])\n","gradient values before mask reapp. tensor([-9.1909e-04, -1.8539e-04, -1.5485e-03, -2.5795e-04, -8.9004e-04,\n","        -3.1928e-04, -4.0233e-04, -6.7332e-04,  5.3051e-05, -2.6071e-03])\n","gradient values before mask reapp. tensor([-9.3070e-04, -1.8849e-04, -1.5623e-03, -2.5331e-04, -8.6613e-04,\n","        -3.2942e-04, -4.1224e-04, -6.6106e-04,  7.1203e-05, -2.6389e-03])\n","gradient values before mask reapp. tensor([-9.3847e-04, -1.9090e-04, -1.5691e-03, -2.4673e-04, -8.3463e-04,\n","        -3.3890e-04, -4.2102e-04, -6.4371e-04,  9.1064e-05, -2.6598e-03])\n","gradient values before mask reapp. tensor([-0.0009, -0.0002, -0.0016, -0.0002, -0.0008, -0.0003, -0.0004, -0.0006,\n","         0.0001, -0.0027])\n","gradient values before mask reapp. tensor([-0.0009, -0.0002, -0.0016, -0.0002, -0.0007, -0.0004, -0.0004, -0.0006,\n","         0.0001, -0.0027])\n","gradient values before mask reapp. tensor([-0.0009, -0.0002, -0.0015, -0.0002, -0.0007, -0.0004, -0.0004, -0.0006,\n","         0.0002, -0.0027])\n","gradient values before mask reapp. tensor([-0.0009, -0.0002, -0.0015, -0.0002, -0.0006, -0.0004, -0.0004, -0.0005,\n","         0.0002, -0.0026])\n","gradient values before mask reapp. tensor([-0.0009, -0.0002, -0.0015, -0.0002, -0.0006, -0.0004, -0.0004, -0.0005,\n","         0.0002, -0.0026])\n","gradient values before mask reapp. tensor([-0.0009, -0.0002, -0.0015, -0.0002, -0.0005, -0.0004, -0.0004, -0.0004,\n","         0.0002, -0.0025])\n","gradient values before mask reapp. tensor([-0.0009, -0.0002, -0.0014, -0.0001, -0.0004, -0.0004, -0.0004, -0.0004,\n","         0.0003, -0.0025])\n","gradient values before mask reapp. tensor([-0.0009, -0.0002, -0.0014, -0.0001, -0.0003, -0.0004, -0.0004, -0.0003,\n","         0.0003, -0.0024])\n","gradient values before mask reapp. tensor([-0.0008, -0.0002, -0.0013, -0.0001, -0.0003, -0.0004, -0.0004, -0.0003,\n","         0.0003, -0.0024])\n","gradient values before mask reapp. tensor([-8.1062e-04, -1.7726e-04, -1.2665e-03, -8.9460e-05, -1.6899e-04,\n","        -3.8912e-04, -4.4036e-04, -2.3089e-04,  3.5335e-04, -2.2831e-03])\n","gradient values before mask reapp. tensor([-7.8369e-04, -1.7319e-04, -1.2118e-03, -6.8818e-05, -8.4333e-05,\n","        -3.9005e-04, -4.3679e-04, -1.7676e-04,  3.8097e-04, -2.2055e-03])\n","gradient values before mask reapp. tensor([-7.5601e-04, -1.6895e-04, -1.1561e-03, -4.8289e-05, -3.5861e-07,\n","        -3.9049e-04, -4.3272e-04, -1.2293e-04,  4.0785e-04, -2.1258e-03])\n","gradient values before mask reapp. tensor([-7.2804e-04, -1.6463e-04, -1.1003e-03, -2.8102e-05,  8.2047e-05,\n","        -3.9051e-04, -4.2828e-04, -6.9997e-05,  4.3379e-04, -2.0454e-03])\n","gradient values before mask reapp. tensor([-7.0017e-04, -1.6028e-04, -1.0450e-03, -8.4481e-06,  1.6214e-04,\n","        -3.9020e-04, -4.2359e-04, -1.8469e-05,  4.5864e-04, -1.9654e-03])\n","gradient values before mask reapp. tensor([-6.7279e-04, -1.5599e-04, -9.9093e-04,  1.0490e-05,  2.3923e-04,\n","        -3.8963e-04, -4.1879e-04,  3.1180e-05,  4.8226e-04, -1.8869e-03])\n","gradient values before mask reapp. tensor([-6.4615e-04, -1.5181e-04, -9.3857e-04,  2.8615e-05,  3.1294e-04,\n","        -3.8886e-04, -4.1395e-04,  7.8698e-05,  5.0461e-04, -1.8106e-03])\n","gradient values before mask reapp. tensor([-6.2051e-04, -1.4777e-04, -8.8840e-04,  4.5814e-05,  3.8284e-04,\n","        -3.8796e-04, -4.0918e-04,  1.2378e-04,  5.2560e-04, -1.7374e-03])\n","gradient values before mask reapp. tensor([-5.9608e-04, -1.4392e-04, -8.4076e-04,  6.2012e-05,  4.4865e-04,\n","        -3.8698e-04, -4.0455e-04,  1.6625e-04,  5.4522e-04, -1.6676e-03])\n","gradient values before mask reapp. tensor([-5.7296e-04, -1.4028e-04, -7.9579e-04,  7.7195e-05,  5.1034e-04,\n","        -3.8597e-04, -4.0011e-04,  2.0605e-04,  5.6350e-04, -1.6017e-03])\n","gradient values before mask reapp. tensor([-5.5122e-04, -1.3687e-04, -7.5363e-04,  9.1348e-05,  5.6786e-04,\n","        -3.8495e-04, -3.9590e-04,  2.4315e-04,  5.8044e-04, -1.5399e-03])\n","gradient values before mask reapp. tensor([-0.0005, -0.0001, -0.0007,  0.0001,  0.0006, -0.0004, -0.0004,  0.0003,\n","         0.0006, -0.0015])\n","gradient values before mask reapp. tensor([-0.0005, -0.0001, -0.0007,  0.0001,  0.0007, -0.0004, -0.0004,  0.0003,\n","         0.0006, -0.0014])\n","gradient values before mask reapp. tensor([-0.0005, -0.0001, -0.0006,  0.0001,  0.0007, -0.0004, -0.0004,  0.0003,\n","         0.0006, -0.0014])\n","gradient values before mask reapp. tensor([-0.0005, -0.0001, -0.0006,  0.0001,  0.0008, -0.0004, -0.0004,  0.0004,\n","         0.0006, -0.0013])\n","gradient values before mask reapp. tensor([-0.0005, -0.0001, -0.0006,  0.0001,  0.0008, -0.0004, -0.0004,  0.0004,\n","         0.0006, -0.0013])\n","gradient values before mask reapp. tensor([-0.0005, -0.0001, -0.0006,  0.0002,  0.0008, -0.0004, -0.0004,  0.0004,\n","         0.0007, -0.0013])\n","gradient values before mask reapp. tensor([-0.0004, -0.0001, -0.0005,  0.0002,  0.0009, -0.0004, -0.0004,  0.0004,\n","         0.0007, -0.0012])\n","gradient values before mask reapp. tensor([-0.0004, -0.0001, -0.0005,  0.0002,  0.0009, -0.0004, -0.0004,  0.0005,\n","         0.0007, -0.0012])\n","gradient values before mask reapp. tensor([-0.0004, -0.0001, -0.0005,  0.0002,  0.0009, -0.0004, -0.0004,  0.0005,\n","         0.0007, -0.0012])\n","gradient values before mask reapp. tensor([-0.0004, -0.0001, -0.0005,  0.0002,  0.0009, -0.0004, -0.0004,  0.0005,\n","         0.0007, -0.0011])\n","gradient values before mask reapp. tensor([-0.0004, -0.0001, -0.0005,  0.0002,  0.0010, -0.0004, -0.0004,  0.0005,\n","         0.0007, -0.0011])\n","gradient values before mask reapp. tensor([-0.0004, -0.0001, -0.0004,  0.0002,  0.0010, -0.0004, -0.0004,  0.0005,\n","         0.0007, -0.0011])\n","gradient values before mask reapp. tensor([-0.0004, -0.0001, -0.0004,  0.0002,  0.0010, -0.0004, -0.0004,  0.0005,\n","         0.0007, -0.0011])\n","gradient values before mask reapp. tensor([-0.0004, -0.0001, -0.0004,  0.0002,  0.0010, -0.0004, -0.0004,  0.0005,\n","         0.0007, -0.0010])\n","gradient values before mask reapp. tensor([-0.0004, -0.0001, -0.0004,  0.0002,  0.0011, -0.0004, -0.0004,  0.0006,\n","         0.0007, -0.0010])\n","gradient values before mask reapp. tensor([-0.0004, -0.0001, -0.0004,  0.0002,  0.0011, -0.0004, -0.0004,  0.0006,\n","         0.0007, -0.0010])\n","gradient values before mask reapp. tensor([-0.0004, -0.0001, -0.0004,  0.0002,  0.0011, -0.0004, -0.0004,  0.0006,\n","         0.0007, -0.0010])\n","gradient values before mask reapp. tensor([-0.0004, -0.0001, -0.0004,  0.0002,  0.0011, -0.0004, -0.0004,  0.0006,\n","         0.0007, -0.0010])\n","gradient values before mask reapp. tensor([-0.0004, -0.0001, -0.0004,  0.0002,  0.0011, -0.0004, -0.0004,  0.0006,\n","         0.0007, -0.0010])\n","gradient values before mask reapp. tensor([-0.0003, -0.0001, -0.0004,  0.0002,  0.0011, -0.0004, -0.0004,  0.0006,\n","         0.0008, -0.0010])\n","gradient values before mask reapp. tensor([-0.0003, -0.0001, -0.0004,  0.0002,  0.0011, -0.0004, -0.0004,  0.0006,\n","         0.0008, -0.0010])\n","gradient values before mask reapp. tensor([-0.0003, -0.0001, -0.0003,  0.0002,  0.0012, -0.0004, -0.0004,  0.0006,\n","         0.0008, -0.0010])\n","gradient values before mask reapp. tensor([-0.0003, -0.0001, -0.0003,  0.0002,  0.0012, -0.0004, -0.0004,  0.0006,\n","         0.0008, -0.0009])\n","gradient values before mask reapp. tensor([-0.0003, -0.0001, -0.0003,  0.0002,  0.0012, -0.0004, -0.0004,  0.0006,\n","         0.0008, -0.0009])\n","gradient values before mask reapp. tensor([-0.0003, -0.0001, -0.0003,  0.0002,  0.0012, -0.0004, -0.0004,  0.0006,\n","         0.0008, -0.0009])\n","gradient values before mask reapp. tensor([-0.0003, -0.0001, -0.0003,  0.0002,  0.0012, -0.0004, -0.0004,  0.0006,\n","         0.0008, -0.0009])\n","gradient values before mask reapp. tensor([-0.0003, -0.0001, -0.0003,  0.0002,  0.0012, -0.0004, -0.0004,  0.0006,\n","         0.0008, -0.0009])\n","gradient values before mask reapp. tensor([-0.0003, -0.0001, -0.0003,  0.0002,  0.0012, -0.0004, -0.0004,  0.0006,\n","         0.0008, -0.0009])\n","gradient values before mask reapp. tensor([-0.0003, -0.0001, -0.0003,  0.0002,  0.0012, -0.0004, -0.0004,  0.0007,\n","         0.0008, -0.0009])\n","gradient values before mask reapp. tensor([-0.0003, -0.0001, -0.0003,  0.0003,  0.0012, -0.0004, -0.0004,  0.0007,\n","         0.0008, -0.0009])\n","gradient values before mask reapp. tensor([-0.0003, -0.0001, -0.0003,  0.0003,  0.0013, -0.0004, -0.0004,  0.0007,\n","         0.0008, -0.0009])\n","gradient values before mask reapp. tensor([-0.0003, -0.0001, -0.0003,  0.0003,  0.0013, -0.0004, -0.0004,  0.0007,\n","         0.0008, -0.0009])\n","gradient values before mask reapp. tensor([-0.0003, -0.0001, -0.0003,  0.0003,  0.0013, -0.0004, -0.0004,  0.0007,\n","         0.0008, -0.0009])\n","gradient values before mask reapp. tensor([-0.0003, -0.0001, -0.0003,  0.0003,  0.0013, -0.0004, -0.0004,  0.0007,\n","         0.0008, -0.0009])\n","gradient values before mask reapp. tensor([-0.0003, -0.0001, -0.0003,  0.0003,  0.0013, -0.0004, -0.0004,  0.0007,\n","         0.0008, -0.0009])\n","gradient values before mask reapp. tensor([-0.0003, -0.0001, -0.0003,  0.0003,  0.0013, -0.0004, -0.0004,  0.0007,\n","         0.0008, -0.0009])\n","gradient values before mask reapp. tensor([-0.0003, -0.0001, -0.0003,  0.0003,  0.0013, -0.0004, -0.0004,  0.0007,\n","         0.0008, -0.0009])\n","gradient values before mask reapp. tensor([-0.0003, -0.0001, -0.0003,  0.0003,  0.0013, -0.0004, -0.0004,  0.0007,\n","         0.0008, -0.0009])\n","gradient values before mask reapp. tensor([-0.0003, -0.0001, -0.0003,  0.0003,  0.0013, -0.0004, -0.0004,  0.0007,\n","         0.0008, -0.0009])\n","gradient values before mask reapp. tensor([-0.0003, -0.0001, -0.0003,  0.0003,  0.0013, -0.0004, -0.0004,  0.0007,\n","         0.0008, -0.0009])\n","gradient values before mask reapp. tensor([-0.0003, -0.0001, -0.0003,  0.0003,  0.0013, -0.0004, -0.0004,  0.0007,\n","         0.0008, -0.0009])\n","gradient values before mask reapp. tensor([-0.0003, -0.0001, -0.0003,  0.0003,  0.0013, -0.0004, -0.0004,  0.0007,\n","         0.0008, -0.0009])\n","gradient values before mask reapp. tensor([-0.0003, -0.0001, -0.0003,  0.0003,  0.0014, -0.0004, -0.0004,  0.0007,\n","         0.0008, -0.0009])\n","gradient values before mask reapp. tensor([-0.0003, -0.0001, -0.0003,  0.0003,  0.0014, -0.0004, -0.0004,  0.0007,\n","         0.0009, -0.0009])\n","gradient values before mask reapp. tensor([-0.0003, -0.0001, -0.0003,  0.0003,  0.0014, -0.0004, -0.0004,  0.0007,\n","         0.0009, -0.0009])\n","gradient values before mask reapp. tensor([-0.0003, -0.0001, -0.0003,  0.0003,  0.0014, -0.0004, -0.0004,  0.0007,\n","         0.0009, -0.0009])\n","gradient values before mask reapp. tensor([-0.0003, -0.0001, -0.0003,  0.0003,  0.0014, -0.0004, -0.0004,  0.0007,\n","         0.0009, -0.0009])\n","gradient values before mask reapp. tensor([-0.0003, -0.0001, -0.0003,  0.0003,  0.0014, -0.0004, -0.0004,  0.0007,\n","         0.0009, -0.0009])\n","gradient values before mask reapp. tensor([-0.0003, -0.0001, -0.0003,  0.0003,  0.0014, -0.0004, -0.0004,  0.0007,\n","         0.0009, -0.0009])\n","gradient values before mask reapp. tensor([-0.0003, -0.0001, -0.0003,  0.0003,  0.0014, -0.0004, -0.0004,  0.0007,\n","         0.0009, -0.0010])\n","gradient values before mask reapp. tensor([-0.0003, -0.0001, -0.0003,  0.0003,  0.0014, -0.0004, -0.0004,  0.0007,\n","         0.0009, -0.0010])\n","gradient values before mask reapp. tensor([-0.0003, -0.0001, -0.0003,  0.0003,  0.0014, -0.0004, -0.0004,  0.0007,\n","         0.0009, -0.0010])\n","gradient values before mask reapp. tensor([-0.0003, -0.0001, -0.0003,  0.0003,  0.0014, -0.0004, -0.0004,  0.0007,\n","         0.0009, -0.0010])\n","gradient values before mask reapp. tensor([-0.0003, -0.0001, -0.0003,  0.0003,  0.0014, -0.0004, -0.0004,  0.0007,\n","         0.0009, -0.0010])\n","gradient values before mask reapp. tensor([-0.0003, -0.0001, -0.0003,  0.0003,  0.0014, -0.0004, -0.0004,  0.0007,\n","         0.0009, -0.0010])\n","gradient values before mask reapp. tensor([-0.0003, -0.0001, -0.0003,  0.0003,  0.0014, -0.0004, -0.0004,  0.0007,\n","         0.0009, -0.0010])\n","gradient values before mask reapp. tensor([-0.0003, -0.0001, -0.0003,  0.0003,  0.0014, -0.0004, -0.0004,  0.0007,\n","         0.0009, -0.0010])\n","gradient values before mask reapp. tensor([-0.0003, -0.0001, -0.0003,  0.0003,  0.0014, -0.0004, -0.0004,  0.0007,\n","         0.0009, -0.0010])\n","gradient values before mask reapp. tensor([-0.0003, -0.0001, -0.0003,  0.0003,  0.0014, -0.0004, -0.0004,  0.0007,\n","         0.0009, -0.0010])\n","gradient values before mask reapp. tensor([-0.0003, -0.0001, -0.0003,  0.0003,  0.0014, -0.0004, -0.0004,  0.0007,\n","         0.0009, -0.0010])\n","gradient values before mask reapp. tensor([-0.0003, -0.0001, -0.0003,  0.0003,  0.0014, -0.0005, -0.0004,  0.0007,\n","         0.0009, -0.0010])\n","gradient values before mask reapp. tensor([-0.0003, -0.0001, -0.0003,  0.0003,  0.0014, -0.0005, -0.0004,  0.0007,\n","         0.0009, -0.0010])\n","gradient values before mask reapp. tensor([-0.0003, -0.0001, -0.0003,  0.0003,  0.0014, -0.0005, -0.0004,  0.0007,\n","         0.0009, -0.0010])\n","gradient values before mask reapp. tensor([-0.0003, -0.0001, -0.0003,  0.0003,  0.0014, -0.0005, -0.0004,  0.0007,\n","         0.0009, -0.0010])\n","gradient values before mask reapp. tensor([-0.0003, -0.0001, -0.0003,  0.0003,  0.0014, -0.0005, -0.0004,  0.0007,\n","         0.0009, -0.0011])\n","gradient values before mask reapp. tensor([-0.0003, -0.0001, -0.0003,  0.0003,  0.0014, -0.0005, -0.0004,  0.0007,\n","         0.0009, -0.0011])\n","gradient values before mask reapp. tensor([-0.0003, -0.0001, -0.0004,  0.0003,  0.0014, -0.0005, -0.0004,  0.0007,\n","         0.0009, -0.0011])\n","gradient values before mask reapp. tensor([-0.0003, -0.0002, -0.0004,  0.0003,  0.0014, -0.0005, -0.0004,  0.0007,\n","         0.0009, -0.0011])\n","gradient values before mask reapp. tensor([-0.0003, -0.0002, -0.0004,  0.0003,  0.0014, -0.0005, -0.0005,  0.0007,\n","         0.0009, -0.0011])\n","gradient values before mask reapp. tensor([-0.0003, -0.0002, -0.0004,  0.0003,  0.0014, -0.0005, -0.0005,  0.0007,\n","         0.0009, -0.0011])\n","gradient values before mask reapp. tensor([-0.0003, -0.0002, -0.0004,  0.0003,  0.0014, -0.0005, -0.0005,  0.0007,\n","         0.0009, -0.0011])\n","gradient values before mask reapp. tensor([-0.0003, -0.0002, -0.0004,  0.0003,  0.0014, -0.0005, -0.0005,  0.0007,\n","         0.0009, -0.0011])\n","gradient values before mask reapp. tensor([-0.0003, -0.0002, -0.0004,  0.0002,  0.0014, -0.0005, -0.0005,  0.0007,\n","         0.0009, -0.0011])\n","gradient values before mask reapp. tensor([-0.0003, -0.0002, -0.0004,  0.0002,  0.0014, -0.0005, -0.0005,  0.0006,\n","         0.0009, -0.0011])\n","gradient values before mask reapp. tensor([-0.0003, -0.0002, -0.0004,  0.0002,  0.0014, -0.0005, -0.0005,  0.0006,\n","         0.0009, -0.0011])\n","gradient values before mask reapp. tensor([-0.0003, -0.0002, -0.0004,  0.0002,  0.0014, -0.0005, -0.0005,  0.0006,\n","         0.0009, -0.0011])\n","gradient values before mask reapp. tensor([-0.0003, -0.0002, -0.0004,  0.0002,  0.0014, -0.0005, -0.0005,  0.0006,\n","         0.0009, -0.0011])\n","gradient values before mask reapp. tensor([-0.0003, -0.0002, -0.0004,  0.0002,  0.0014, -0.0005, -0.0005,  0.0006,\n","         0.0009, -0.0011])\n","gradient values before mask reapp. tensor([-0.0003, -0.0002, -0.0004,  0.0002,  0.0014, -0.0005, -0.0005,  0.0006,\n","         0.0009, -0.0011])\n","gradient values before mask reapp. tensor([-0.0003, -0.0002, -0.0004,  0.0002,  0.0014, -0.0005, -0.0005,  0.0006,\n","         0.0009, -0.0011])\n","gradient values before mask reapp. tensor([-0.0002, -0.0002, -0.0003,  0.0003,  0.0014, -0.0005, -0.0005,  0.0007,\n","         0.0009, -0.0010])\n","gradient values before mask reapp. tensor([-0.0002, -0.0002, -0.0003,  0.0003,  0.0015, -0.0005, -0.0004,  0.0007,\n","         0.0009, -0.0009])\n","gradient values before mask reapp. tensor([-0.0002, -0.0002, -0.0002,  0.0003,  0.0015, -0.0004, -0.0004,  0.0007,\n","         0.0009, -0.0009])\n","gradient values before mask reapp. tensor([-0.0002, -0.0002, -0.0002,  0.0003,  0.0016, -0.0004, -0.0004,  0.0007,\n","         0.0009, -0.0008])\n","gradient values before mask reapp. tensor([-0.0001, -0.0002, -0.0001,  0.0003,  0.0016, -0.0004, -0.0004,  0.0007,\n","         0.0009, -0.0008])\n","gradient values before mask reapp. tensor([-0.0001, -0.0002, -0.0001,  0.0003,  0.0016, -0.0004, -0.0004,  0.0007,\n","         0.0009, -0.0007])\n","gradient values before mask reapp. tensor([-1.0390e-04, -1.5044e-04, -9.3786e-05,  2.9284e-04,  1.6225e-03,\n","        -4.3152e-04, -4.1868e-04,  7.5877e-04,  8.9501e-04, -6.8014e-04])\n","gradient values before mask reapp. tensor([-7.5304e-05, -1.4719e-04, -4.8802e-05,  3.0210e-04,  1.6614e-03,\n","        -4.2591e-04, -4.1107e-04,  7.8228e-04,  8.9985e-04, -6.0949e-04])\n","gradient values before mask reapp. tensor([-4.0761e-05, -1.4285e-04,  7.1270e-06,  3.1426e-04,  1.7115e-03,\n","        -4.1918e-04, -4.0157e-04,  8.1326e-04,  9.0703e-04, -5.2164e-04])\n","gradient values before mask reapp. tensor([-9.8114e-06, -1.3913e-04,  5.6371e-05,  3.2460e-04,  1.7543e-03,\n","        -4.1302e-04, -3.9314e-04,  8.3958e-04,  9.1256e-04, -4.4420e-04])\n","gradient values before mask reapp. tensor([ 1.9163e-05, -1.3572e-04,  1.0205e-04,  3.3410e-04,  1.7931e-03,\n","        -4.0711e-04, -3.8522e-04,  8.6347e-04,  9.1716e-04, -3.7210e-04])\n","gradient values before mask reapp. tensor([ 4.7339e-05, -1.3243e-04,  1.4624e-04,  3.4323e-04,  1.8304e-03,\n","        -4.0136e-04, -3.7761e-04,  8.8663e-04,  9.2148e-04, -3.0250e-04])\n","gradient values before mask reapp. tensor([ 9.8745e-06, -1.4914e-04,  4.2409e-05,  2.6639e-04,  1.6743e-03,\n","        -4.0692e-04, -3.8765e-04,  6.9735e-04,  8.4562e-04, -4.5270e-04])\n","gradient values before mask reapp. tensor([-0.0001, -0.0002, -0.0002,  0.0002,  0.0012, -0.0004, -0.0004,  0.0004,\n","         0.0007, -0.0008])\n","gradient values before mask reapp. tensor([-0.0001, -0.0002, -0.0002,  0.0002,  0.0013, -0.0004, -0.0004,  0.0004,\n","         0.0007, -0.0007])\n","gradient values before mask reapp. tensor([-7.9901e-05, -1.7042e-04, -1.3467e-04,  2.1668e-04,  1.3275e-03,\n","        -3.9452e-04, -3.7533e-04,  4.2177e-04,  7.1068e-04, -5.9975e-04])\n","gradient values before mask reapp. tensor([-2.4485e-04, -2.0326e-04, -4.2289e-04,  9.1113e-05,  9.0990e-04,\n","        -4.0394e-04, -3.9418e-04,  6.4198e-05,  5.7569e-04, -1.0159e-03])\n","gradient values before mask reapp. tensor([-2.0928e-04, -1.9856e-04, -3.6541e-04,  1.0347e-04,  9.6033e-04,\n","        -3.9666e-04, -3.8415e-04,  9.6304e-05,  5.8256e-04, -9.2548e-04])\n","gradient values before mask reapp. tensor([-0.0002, -0.0002, -0.0003,  0.0001,  0.0010, -0.0004, -0.0004,  0.0001,\n","         0.0006, -0.0009])\n","gradient values before mask reapp. tensor([-2.3838e-04, -2.0558e-04, -4.4115e-04,  7.4709e-05,  8.1047e-04,\n","        -3.8782e-04, -3.7396e-04, -1.1723e-05,  5.3455e-04, -1.0034e-03])\n","gradient values before mask reapp. tensor([-2.1255e-04, -2.0254e-04, -4.0185e-04,  8.2322e-05,  8.4280e-04,\n","        -3.8243e-04, -3.6727e-04,  9.3187e-06,  5.3788e-04, -9.4227e-04])\n","gradient values before mask reapp. tensor([-2.8311e-04, -2.1820e-04, -5.2253e-04,  5.5953e-05,  6.2760e-04,\n","        -3.8080e-04, -3.6897e-04, -1.6731e-04,  4.4795e-04, -1.0445e-03])\n","gradient values before mask reapp. tensor([-2.3994e-04, -2.1200e-04, -4.5073e-04,  7.1956e-05,  6.9177e-04,\n","        -3.7185e-04, -3.5615e-04, -1.2616e-04,  4.5740e-04, -9.3114e-04])\n","gradient values before mask reapp. tensor([-2.0771e-04, -2.0772e-04, -3.9934e-04,  8.2684e-05,  7.3596e-04,\n","        -3.6509e-04, -3.4714e-04, -9.7413e-05,  4.6305e-04, -8.5064e-04])\n","gradient values before mask reapp. tensor([-1.7518e-04, -2.0336e-04, -3.4731e-04,  9.3589e-05,  7.8074e-04,\n","        -3.5825e-04, -3.3798e-04, -6.8243e-05,  4.6882e-04, -7.6906e-04])\n","gradient values before mask reapp. tensor([-1.6370e-04, -2.0276e-04, -3.3484e-04,  9.4233e-05,  7.8694e-04,\n","        -3.5573e-04, -3.3630e-04, -6.3099e-05,  4.6727e-04, -7.5135e-04])\n","gradient values before mask reapp. tensor([-1.2625e-04, -1.9747e-04, -2.7349e-04,  1.0755e-04,  8.4069e-04,\n","        -3.4783e-04, -3.2532e-04, -2.8234e-05,  4.7470e-04, -6.5467e-04])\n","gradient values before mask reapp. tensor([-1.0019e-04, -1.9419e-04, -2.3348e-04,  1.1536e-04,  8.7364e-04,\n","        -3.4226e-04, -3.1837e-04, -6.3072e-06,  4.7820e-04, -5.9241e-04])\n","gradient values before mask reapp. tensor([-7.1006e-05, -1.9032e-04, -1.8748e-04,  1.2474e-04,  9.1240e-04,\n","        -3.3601e-04, -3.1024e-04,  1.9280e-05,  4.8281e-04, -5.2041e-04])\n","gradient values before mask reapp. tensor([-4.9463e-05, -1.8780e-04, -1.5576e-04,  1.3043e-04,  9.3722e-04,\n","        -3.3132e-04, -3.0478e-04,  3.6194e-05,  4.8478e-04, -4.7141e-04])\n","gradient values before mask reapp. tensor([-1.5142e-04, -2.0097e-04, -3.0253e-04,  8.9059e-05,  7.0918e-04,\n","        -3.3048e-04, -3.0790e-04, -1.1004e-04,  4.2960e-04, -6.7964e-04])\n","gradient values before mask reapp. tensor([-1.3839e-04, -1.9996e-04, -2.8688e-04,  9.0597e-05,  7.1846e-04,\n","        -3.2756e-04, -3.0551e-04, -1.0274e-04,  4.2864e-04, -6.5661e-04])\n","gradient values before mask reapp. tensor([-1.2774e-04, -1.9935e-04, -2.7571e-04,  9.0972e-05,  7.2330e-04,\n","        -3.2510e-04, -3.0395e-04, -9.8158e-05,  4.2680e-04, -6.4079e-04])\n","gradient values before mask reapp. tensor([-1.1821e-04, -1.9893e-04, -2.6661e-04,  9.0803e-05,  7.2607e-04,\n","        -3.2286e-04, -3.0276e-04, -9.4829e-05,  4.2456e-04, -6.2829e-04])\n","gradient values before mask reapp. tensor([-1.0995e-04, -1.9873e-04, -2.5992e-04,  9.0003e-05,  7.2641e-04,\n","        -3.2085e-04, -3.0201e-04, -9.2972e-05,  4.2184e-04, -6.1967e-04])\n","gradient values before mask reapp. tensor([-1.0270e-04, -1.9870e-04, -2.5515e-04,  8.8700e-05,  7.2482e-04,\n","        -3.1904e-04, -3.0160e-04, -9.2276e-05,  4.1874e-04, -6.1411e-04])\n","gradient values before mask reapp. tensor([-9.6386e-05, -1.9882e-04, -2.5213e-04,  8.6931e-05,  7.2145e-04,\n","        -3.1740e-04, -3.0151e-04, -9.2659e-05,  4.1527e-04, -6.1139e-04])\n","gradient values before mask reapp. tensor([-9.0074e-05, -1.9894e-04, -2.4914e-04,  8.5155e-05,  7.1799e-04,\n","        -3.1574e-04, -3.0140e-04, -9.3052e-05,  4.1176e-04, -6.0867e-04])\n","gradient values before mask reapp. tensor([-8.4065e-05, -1.9910e-04, -2.4673e-04,  8.3218e-05,  7.1388e-04,\n","        -3.1412e-04, -3.0138e-04, -9.3807e-05,  4.0811e-04, -6.0687e-04])\n","gradient values before mask reapp. tensor([-7.8476e-05, -1.9932e-04, -2.4510e-04,  8.1073e-05,  7.0895e-04,\n","        -3.1257e-04, -3.0150e-04, -9.5042e-05,  4.0428e-04, -6.0632e-04])\n","gradient values before mask reapp. tensor([-7.2730e-05, -1.9951e-04, -2.4321e-04,  7.8988e-05,  7.0420e-04,\n","        -3.1096e-04, -3.0154e-04, -9.6119e-05,  4.0046e-04, -6.0531e-04])\n","gradient values before mask reapp. tensor([-6.6985e-05, -1.9968e-04, -2.4131e-04,  7.6905e-05,  6.9940e-04,\n","        -3.0934e-04, -3.0156e-04, -9.7192e-05,  3.9661e-04, -6.0427e-04])\n","gradient values before mask reapp. tensor([-6.1904e-05, -1.9997e-04, -2.4068e-04,  7.4487e-05,  6.9329e-04,\n","        -3.0783e-04, -3.0181e-04, -9.9047e-05,  3.9249e-04, -6.0525e-04])\n","gradient values before mask reapp. tensor([-5.6187e-05, -2.0012e-04, -2.3884e-04,  7.2380e-05,  6.8831e-04,\n","        -3.0618e-04, -3.0180e-04, -1.0016e-04,  3.8857e-04, -6.0426e-04])\n","gradient values before mask reapp. tensor([-4.9578e-05, -2.0011e-04, -2.3531e-04,  7.0722e-05,  6.8492e-04,\n","        -3.0432e-04, -3.0145e-04, -1.0024e-04,  3.8494e-04, -6.0049e-04])\n","gradient values before mask reapp. tensor([-4.4222e-05, -2.0030e-04, -2.3413e-04,  6.8449e-05,  6.7920e-04,\n","        -3.0270e-04, -3.0153e-04, -1.0175e-04,  3.8086e-04, -6.0050e-04])\n","gradient values before mask reapp. tensor([-3.9213e-05, -2.0055e-04, -2.3359e-04,  6.6014e-05,  6.7280e-04,\n","        -3.0115e-04, -3.0172e-04, -1.0365e-04,  3.7663e-04, -6.0154e-04])\n","gradient values before mask reapp. tensor([-3.3162e-05, -2.0060e-04, -2.3110e-04,  6.4076e-05,  6.6822e-04,\n","        -2.9935e-04, -3.0151e-04, -1.0437e-04,  3.7272e-04, -5.9938e-04])\n","gradient values before mask reapp. tensor([-2.7820e-05, -2.0076e-04, -2.2991e-04,  6.1823e-05,  6.6237e-04,\n","        -2.9769e-04, -3.0153e-04, -1.0586e-04,  3.6858e-04, -5.9928e-04])\n","gradient values before mask reapp. tensor([-2.1912e-05, -2.0080e-04, -2.2762e-04,  5.9841e-05,  6.5753e-04,\n","        -2.9589e-04, -3.0132e-04, -1.0669e-04,  3.6461e-04, -5.9741e-04])\n","gradient values before mask reapp. tensor([-1.6667e-05, -2.0096e-04, -2.2656e-04,  5.7560e-05,  6.5147e-04,\n","        -2.9421e-04, -3.0133e-04, -1.0826e-04,  3.6040e-04, -5.9748e-04])\n","gradient values before mask reapp. tensor([-1.1029e-05, -2.0102e-04, -2.2477e-04,  5.5464e-05,  6.4606e-04,\n","        -2.9244e-04, -3.0118e-04, -1.0938e-04,  3.5630e-04, -5.9634e-04])\n","gradient values before mask reapp. tensor([-6.1408e-06, -2.0121e-04, -2.2431e-04,  5.3045e-05,  6.3937e-04,\n","        -2.9080e-04, -3.0126e-04, -1.1130e-04,  3.5196e-04, -5.9731e-04])\n","gradient values before mask reapp. tensor([ 8.7903e-07, -2.0100e-04, -2.1983e-04,  5.1666e-05,  6.3653e-04,\n","        -2.8871e-04, -3.0055e-04, -1.1076e-04,  3.4834e-04, -5.9176e-04])\n","gradient values before mask reapp. tensor([ 5.5667e-06, -2.0119e-04, -2.1972e-04,  4.9174e-05,  6.2943e-04,\n","        -2.8709e-04, -3.0066e-04, -1.1288e-04,  3.4391e-04, -5.9321e-04])\n","gradient values before mask reapp. tensor([ 1.2108e-05, -2.0103e-04, -2.1605e-04,  4.7612e-05,  6.2577e-04,\n","        -2.8507e-04, -3.0008e-04, -1.1282e-04,  3.4013e-04, -5.8891e-04])\n","gradient values before mask reapp. tensor([-5.1951e-05, -2.1548e-04, -4.1267e-04, -4.5926e-06,  3.7548e-04,\n","        -2.8679e-04, -3.0861e-04, -2.2286e-04,  2.7528e-04, -8.7303e-04])\n","gradient values before mask reapp. tensor([ 2.2662e-05, -2.0113e-04, -2.1341e-04,  4.3314e-05,  6.1380e-04,\n","        -2.8152e-04, -2.9974e-04, -1.1554e-04,  3.3168e-04, -5.8777e-04])\n","gradient values before mask reapp. tensor([-3.8400e-05, -2.1496e-04, -4.0268e-04, -6.9887e-06,  3.7187e-04,\n","        -2.8285e-04, -3.0752e-04, -2.2136e-04,  2.6876e-04, -8.6077e-04])\n","gradient values before mask reapp. tensor([ 3.4897e-05, -2.0086e-04, -2.0735e-04,  3.9957e-05,  6.0513e-04,\n","        -2.7756e-04, -2.9867e-04, -1.1611e-04,  3.2387e-04, -5.8096e-04])\n","gradient values before mask reapp. tensor([-2.4906e-05, -2.1438e-04, -3.9253e-04, -9.2816e-06,  3.6842e-04,\n","        -2.7886e-04, -3.0633e-04, -2.1970e-04,  2.6229e-04, -8.4813e-04])\n","gradient values before mask reapp. tensor([-1.9250e-05, -2.1426e-04, -3.8934e-04, -1.0880e-05,  3.6491e-04,\n","        -2.7709e-04, -3.0609e-04, -2.1999e-04,  2.5875e-04, -8.4482e-04])\n","gradient values before mask reapp. tensor([ 5.5316e-05, -1.9994e-04, -1.9394e-04,  3.6185e-05,  5.9631e-04,\n","        -2.7110e-04, -2.9610e-04, -1.1424e-04,  3.1299e-04, -5.6349e-04])\n","gradient values before mask reapp. tensor([-3.8774e-06, -2.1324e-04, -3.7538e-04, -1.2052e-05,  3.6512e-04,\n","        -2.7265e-04, -3.0403e-04, -2.1591e-04,  2.5299e-04, -8.2574e-04])\n","gradient values before mask reapp. tensor([ 6.7929e-05, -1.9942e-04, -1.8652e-04,  3.3399e-05,  5.8903e-04,\n","        -2.6696e-04, -2.9460e-04, -1.1383e-04,  3.0552e-04, -5.5411e-04])\n","gradient values before mask reapp. tensor([ 1.3958e-05, -2.1170e-04, -3.5650e-04, -1.1858e-05,  3.7013e-04,\n","        -2.6764e-04, -3.0095e-04, -2.0877e-04,  2.4819e-04, -7.9854e-04])\n","gradient values before mask reapp. tensor([ 2.0885e-05, -2.1126e-04, -3.5058e-04, -1.2636e-05,  3.6930e-04,\n","        -2.6555e-04, -3.0007e-04, -2.0729e-04,  2.4521e-04, -7.9063e-04])\n","gradient values before mask reapp. tensor([ 8.9732e-05, -1.9798e-04, -1.6929e-04,  3.0971e-05,  5.8421e-04,\n","        -2.6010e-04, -2.9106e-04, -1.0936e-04,  2.9560e-04, -5.2992e-04])\n","gradient values before mask reapp. tensor([ 4.0994e-05, -2.0920e-04, -3.2702e-04, -1.1082e-05,  3.7895e-04,\n","        -2.6001e-04, -2.9597e-04, -1.9718e-04,  2.4135e-04, -7.5559e-04])\n","gradient values before mask reapp. tensor([ 4.8627e-05, -2.0857e-04, -3.1951e-04, -1.1352e-05,  3.7977e-04,\n","        -2.5776e-04, -2.9472e-04, -1.9465e-04,  2.3875e-04, -7.4496e-04])\n","gradient values before mask reapp. tensor([ 6.2549e-05, -2.0679e-04, -3.0037e-04, -8.5775e-06,  3.9173e-04,\n","        -2.5414e-04, -2.9115e-04, -1.8504e-04,  2.3818e-04, -7.1533e-04])\n","gradient values before mask reapp. tensor([ 1.2873e-04, -1.9398e-04, -1.2622e-04,  3.3350e-05,  5.9788e-04,\n","        -2.4880e-04, -2.8232e-04, -9.0887e-05,  2.8647e-04, -4.6468e-04])\n","gradient values before mask reapp. tensor([ 8.1869e-05, -2.0469e-04, -2.7728e-04, -6.8626e-06,  4.0139e-04,\n","        -2.4874e-04, -2.8700e-04, -1.7494e-04,  2.3458e-04, -6.8075e-04])\n","gradient values before mask reapp. tensor([ 8.7125e-05, -2.0440e-04, -2.7383e-04, -8.0469e-06,  3.9847e-04,\n","        -2.4695e-04, -2.8649e-04, -1.7481e-04,  2.3136e-04, -6.7648e-04])\n","gradient values before mask reapp. tensor([ 1.0073e-04, -2.0259e-04, -2.5473e-04, -5.1621e-06,  4.1064e-04,\n","        -2.4339e-04, -2.8287e-04, -1.6508e-04,  2.3097e-04, -6.4682e-04])\n","gradient values before mask reapp. tensor([ 1.1076e-04, -2.0140e-04, -2.4211e-04, -3.8992e-06,  4.1670e-04,\n","        -2.4060e-04, -2.8055e-04, -1.5932e-04,  2.2949e-04, -6.2764e-04])\n","gradient values before mask reapp. tensor([ 1.2821e-04, -1.9886e-04, -2.1569e-04,  9.6359e-07,  4.3602e-04,\n","        -2.3622e-04, -2.7546e-04, -1.4507e-04,  2.3049e-04, -5.8599e-04])\n","gradient values before mask reapp. tensor([ 1.4111e-04, -1.9710e-04, -1.9740e-04,  3.8093e-06,  4.4776e-04,\n","        -2.3283e-04, -2.7197e-04, -1.3570e-04,  2.3019e-04, -5.5749e-04])\n","gradient values before mask reapp. tensor([ 1.4389e-04, -1.9713e-04, -1.9774e-04,  1.7964e-06,  4.4162e-04,\n","        -2.3157e-04, -2.7219e-04, -1.3775e-04,  2.2656e-04, -5.5928e-04])\n","gradient values before mask reapp. tensor([ 1.5635e-04, -1.9541e-04, -1.8006e-04,  4.5721e-06,  4.5291e-04,\n","        -2.2827e-04, -2.6879e-04, -1.2871e-04,  2.2624e-04, -5.3168e-04])\n","gradient values before mask reapp. tensor([ 1.7239e-04, -1.9302e-04, -1.5580e-04,  9.0205e-06,  4.7035e-04,\n","        -2.2416e-04, -2.6402e-04, -1.1564e-04,  2.2700e-04, -4.9331e-04])\n","gradient values before mask reapp. tensor([ 1.6950e-04, -1.9401e-04, -1.6605e-04,  4.5887e-06,  4.5515e-04,\n","        -2.2415e-04, -2.6622e-04, -1.2360e-04,  2.2189e-04, -5.1115e-04])\n","gradient values before mask reapp. tensor([ 1.7729e-04, -1.9307e-04, -1.5684e-04,  5.2337e-06,  4.5835e-04,\n","        -2.2181e-04, -2.6443e-04, -1.1967e-04,  2.2009e-04, -4.9715e-04])\n","gradient values before mask reapp. tensor([ 1.9586e-04, -1.9018e-04, -1.2756e-04,  1.1104e-05,  4.8083e-04,\n","        -2.1716e-04, -2.5863e-04, -1.0343e-04,  2.2191e-04, -4.5053e-04])\n","gradient values before mask reapp. tensor([ 2.0214e-04, -1.8946e-04, -1.2082e-04,  1.1194e-05,  4.8185e-04,\n","        -2.1514e-04, -2.5728e-04, -1.0091e-04,  2.1981e-04, -4.4046e-04])\n","gradient values before mask reapp. tensor([ 2.0711e-04, -1.8897e-04, -1.1626e-04,  1.0783e-05,  4.8102e-04,\n","        -2.1345e-04, -2.5642e-04, -9.9671e-05,  2.1746e-04, -4.3397e-04])\n","gradient values before mask reapp. tensor([ 2.2051e-04, -1.8694e-04, -9.6298e-05,  1.4336e-05,  4.9467e-04,\n","        -2.0988e-04, -2.5241e-04, -8.9045e-05,  2.1770e-04, -4.0233e-04])\n","gradient values before mask reapp. tensor([ 2.2389e-04, -1.8669e-04, -9.4441e-05,  1.3317e-05,  4.9143e-04,\n","        -2.0853e-04, -2.5205e-04, -8.9392e-05,  2.1499e-04, -4.0013e-04])\n","gradient values before mask reapp. tensor([ 2.3255e-04, -1.8546e-04, -8.2935e-05,  1.4750e-05,  4.9716e-04,\n","        -2.0597e-04, -2.4969e-04, -8.3857e-05,  2.1384e-04, -3.8215e-04])\n","gradient values before mask reapp. tensor([ 2.4012e-04, -1.8442e-04, -7.3162e-05,  1.5842e-05,  5.0157e-04,\n","        -2.0371e-04, -2.4771e-04, -7.9306e-05,  2.1259e-04, -3.6699e-04])\n","gradient values before mask reapp. tensor([ 2.4456e-04, -1.8392e-04, -6.9265e-05,  1.5385e-05,  5.0017e-04,\n","        -2.0206e-04, -2.4685e-04, -7.8359e-05,  2.1020e-04, -3.6131e-04])\n","gradient values before mask reapp. tensor([ 2.0284e-04, -1.9303e-04, -1.9796e-04, -1.8534e-05,  3.3474e-04,\n","        -2.0261e-04, -2.5150e-04, -1.5002e-04,  1.6705e-04, -5.4594e-04])\n","gradient values before mask reapp. tensor([ 2.0733e-04, -1.9247e-04, -1.9322e-04, -1.8723e-05,  3.3471e-04,\n","        -2.0104e-04, -2.5070e-04, -1.4861e-04,  1.6509e-04, -5.3913e-04])\n","gradient values before mask reapp. tensor([ 2.1072e-04, -1.9212e-04, -1.9031e-04, -1.9305e-05,  3.3318e-04,\n","        -1.9976e-04, -2.5027e-04, -1.4824e-04,  1.6296e-04, -5.3527e-04])\n","gradient values before mask reapp. tensor([ 2.1459e-04, -1.9165e-04, -1.8659e-04, -1.9719e-05,  3.3221e-04,\n","        -1.9832e-04, -2.4966e-04, -1.4742e-04,  1.6086e-04, -5.3009e-04])\n","gradient values before mask reapp. tensor([ 2.2081e-04, -1.9075e-04, -1.7836e-04, -1.8908e-05,  3.3575e-04,\n","        -1.9640e-04, -2.4810e-04, -1.4375e-04,  1.5967e-04, -5.1749e-04])\n","gradient values before mask reapp. tensor([ 2.1903e-04, -1.9128e-04, -1.8485e-04, -2.1863e-05,  3.2526e-04,\n","        -1.9620e-04, -2.4955e-04, -1.4913e-04,  1.5591e-04, -5.2886e-04])\n","gradient values before mask reapp. tensor([ 2.2601e-04, -1.9021e-04, -1.7510e-04, -2.0629e-05,  3.3028e-04,\n","        -1.9411e-04, -2.4766e-04, -1.4449e-04,  1.5501e-04, -5.1373e-04])\n","gradient values before mask reapp. tensor([ 2.2670e-04, -1.9027e-04, -1.7696e-04, -2.2404e-05,  3.2414e-04,\n","        -1.9334e-04, -2.4813e-04, -1.4701e-04,  1.5204e-04, -5.1753e-04])\n","gradient values before mask reapp. tensor([ 2.3029e-04, -1.8979e-04, -1.7341e-04, -2.2737e-05,  3.2324e-04,\n","        -1.9196e-04, -2.4748e-04, -1.4616e-04,  1.5006e-04, -5.1245e-04])\n","gradient values before mask reapp. tensor([ 2.3195e-04, -1.8965e-04, -1.7324e-04, -2.3872e-05,  3.1934e-04,\n","        -1.9104e-04, -2.4753e-04, -1.4733e-04,  1.4762e-04, -5.1286e-04])\n","gradient values before mask reapp. tensor([ 2.3370e-04, -1.8948e-04, -1.7299e-04, -2.5040e-05,  3.1528e-04,\n","        -1.9003e-04, -2.4753e-04, -1.4850e-04,  1.4507e-04, -5.1313e-04])\n","gradient values before mask reapp. tensor([ 2.3785e-04, -1.8887e-04, -1.6828e-04, -2.5035e-05,  3.1553e-04,\n","        -1.8852e-04, -2.4661e-04, -1.4690e-04,  1.4333e-04, -5.0609e-04])\n","gradient values before mask reapp. tensor([ 2.4106e-04, -1.8844e-04, -1.6513e-04, -2.5355e-05,  3.1451e-04,\n","        -1.8726e-04, -2.4603e-04, -1.4621e-04,  1.4145e-04, -5.0159e-04])\n","gradient values before mask reapp. tensor([ 2.4163e-04, -1.8844e-04, -1.6686e-04, -2.6923e-05,  3.0874e-04,\n","        -1.8651e-04, -2.4638e-04, -1.4851e-04,  1.3867e-04, -5.0494e-04])\n","gradient values before mask reapp. tensor([ 2.4482e-04, -1.8797e-04, -1.6373e-04, -2.7267e-05,  3.0758e-04,\n","        -1.8520e-04, -2.4576e-04, -1.4782e-04,  1.3672e-04, -5.0041e-04])\n","gradient values before mask reapp. tensor([ 2.4807e-04, -1.8748e-04, -1.6037e-04, -2.7476e-05,  3.0679e-04,\n","        -1.8389e-04, -2.4507e-04, -1.4695e-04,  1.3490e-04, -4.9544e-04])\n","gradient values before mask reapp. tensor([ 2.4850e-04, -1.8749e-04, -1.6215e-04, -2.8984e-05,  3.0112e-04,\n","        -1.8318e-04, -2.4542e-04, -1.4922e-04,  1.3221e-04, -4.9881e-04])\n","gradient values before mask reapp. tensor([ 2.5191e-04, -1.8697e-04, -1.5848e-04, -2.9138e-05,  3.0061e-04,\n","        -1.8185e-04, -2.4468e-04, -1.4815e-04,  1.3044e-04, -4.9336e-04])\n","gradient values before mask reapp. tensor([ 2.5441e-04, -1.8656e-04, -1.5635e-04, -2.9614e-05,  2.9862e-04,\n","        -1.8066e-04, -2.4417e-04, -1.4798e-04,  1.2842e-04, -4.9028e-04])\n","gradient values before mask reapp. tensor([ 2.5509e-04, -1.8652e-04, -1.5752e-04, -3.0912e-05,  2.9374e-04,\n","        -1.7995e-04, -2.4442e-04, -1.4981e-04,  1.2595e-04, -4.9267e-04])\n","gradient values before mask reapp. tensor([ 2.5880e-04, -1.8587e-04, -1.5305e-04, -3.0756e-05,  2.9401e-04,\n","        -1.7848e-04, -2.4342e-04, -1.4819e-04,  1.2436e-04, -4.8572e-04])\n","gradient values before mask reapp. tensor([ 2.6027e-04, -1.8565e-04, -1.5277e-04, -3.1693e-05,  2.9038e-04,\n","        -1.7755e-04, -2.4331e-04, -1.4913e-04,  1.2208e-04, -4.8566e-04])\n","gradient values before mask reapp. tensor([ 2.6258e-04, -1.8527e-04, -1.5078e-04, -3.2111e-05,  2.8851e-04,\n","        -1.7645e-04, -2.4285e-04, -1.4898e-04,  1.2018e-04, -4.8277e-04])\n","gradient values before mask reapp. tensor([ 2.6366e-04, -1.8508e-04, -1.5104e-04, -3.3129e-05,  2.8439e-04,\n","        -1.7557e-04, -2.4280e-04, -1.5020e-04,  1.1785e-04, -4.8350e-04])\n","gradient values before mask reapp. tensor([ 2.6762e-04, -1.8439e-04, -1.4598e-04, -3.2742e-05,  2.8547e-04,\n","        -1.7411e-04, -2.4170e-04, -1.4815e-04,  1.1650e-04, -4.7557e-04])\n","gradient values before mask reapp. tensor([ 2.6975e-04, -1.8399e-04, -1.4415e-04, -3.3167e-05,  2.8346e-04,\n","        -1.7301e-04, -2.4121e-04, -1.4805e-04,  1.1460e-04, -4.7284e-04])\n","gradient values before mask reapp. tensor([ 2.7088e-04, -1.8378e-04, -1.4417e-04, -3.4062e-05,  2.7974e-04,\n","        -1.7214e-04, -2.4110e-04, -1.4906e-04,  1.1240e-04, -4.7313e-04])\n","gradient values before mask reapp. tensor([ 2.7558e-04, -1.8292e-04, -1.3753e-04, -3.3178e-05,  2.8245e-04,\n","        -1.7052e-04, -2.3964e-04, -1.4596e-04,  1.1143e-04, -4.6254e-04])\n","gradient values before mask reapp. tensor([ 2.7393e-04, -1.8318e-04, -1.4256e-04, -3.5350e-05,  2.7396e-04,\n","        -1.7023e-04, -2.4053e-04, -1.5004e-04,  1.0837e-04, -4.7094e-04])\n","gradient values before mask reapp. tensor([ 2.7710e-04, -1.8258e-04, -1.3865e-04, -3.5155e-05,  2.7413e-04,\n","        -1.6894e-04, -2.3960e-04, -1.4857e-04,  1.0696e-04, -4.6477e-04])\n","gradient values before mask reapp. tensor([ 2.7764e-04, -1.8243e-04, -1.3956e-04, -3.6201e-05,  2.6963e-04,\n","        -1.6817e-04, -2.3962e-04, -1.5008e-04,  1.0466e-04, -4.6638e-04])\n","gradient values before mask reapp. tensor([ 2.8089e-04, -1.8180e-04, -1.3542e-04, -3.5930e-05,  2.7006e-04,\n","        -1.6686e-04, -2.3865e-04, -1.4847e-04,  1.0331e-04, -4.5982e-04])\n","gradient values before mask reapp. tensor([ 2.8010e-04, -1.8189e-04, -1.3875e-04, -3.7592e-05,  2.6329e-04,\n","        -1.6640e-04, -2.3917e-04, -1.5145e-04,  1.0063e-04, -4.6540e-04])\n","gradient values before mask reapp. tensor([ 2.8536e-04, -1.8086e-04, -1.3073e-04, -3.6228e-05,  2.6752e-04,\n","        -1.6464e-04, -2.3735e-04, -1.4738e-04,  1.0003e-04, -4.5237e-04])\n","gradient values before mask reapp. tensor([ 2.8534e-04, -1.8079e-04, -1.3252e-04, -3.7460e-05,  2.6227e-04,\n","        -1.6401e-04, -2.3754e-04, -1.4937e-04,  9.7659e-05, -4.5539e-04])\n","gradient values before mask reapp. tensor([ 2.8804e-04, -1.8022e-04, -1.2918e-04, -3.7301e-05,  2.6210e-04,\n","        -1.6282e-04, -2.3669e-04, -1.4817e-04,  9.6276e-05, -4.5002e-04])\n","gradient values before mask reapp. tensor([ 2.8796e-04, -1.8015e-04, -1.3102e-04, -3.8511e-05,  2.5686e-04,\n","        -1.6220e-04, -2.3687e-04, -1.5017e-04,  9.3929e-05, -4.5309e-04])\n","gradient values before mask reapp. tensor([ 2.9238e-04, -1.7923e-04, -1.2432e-04, -3.7398e-05,  2.6001e-04,\n","        -1.6063e-04, -2.3528e-04, -1.4683e-04,  9.3216e-05, -4.4210e-04])\n","gradient values before mask reapp. tensor([ 2.9233e-04, -1.7913e-04, -1.2597e-04, -3.8515e-05,  2.5504e-04,\n","        -1.5999e-04, -2.3540e-04, -1.4867e-04,  9.0956e-05, -4.4479e-04])\n","gradient values before mask reapp. tensor([ 2.9460e-04, -1.7862e-04, -1.2328e-04, -3.8477e-05,  2.5436e-04,\n","        -1.5891e-04, -2.3466e-04, -1.4781e-04,  8.9537e-05, -4.4044e-04])\n","gradient values before mask reapp. tensor([ 2.9527e-04, -1.7836e-04, -1.2347e-04, -3.9165e-05,  2.5085e-04,\n","        -1.5811e-04, -2.3446e-04, -1.4871e-04,  8.7582e-05, -4.4068e-04])\n","gradient values before mask reapp. tensor([ 2.9847e-04, -1.7765e-04, -1.1889e-04, -3.8563e-05,  2.5207e-04,\n","        -1.5683e-04, -2.3330e-04, -1.4663e-04,  8.6568e-05, -4.3315e-04])\n","gradient values before mask reapp. tensor([ 2.9905e-04, -1.7739e-04, -1.1918e-04, -3.9245e-05,  2.4852e-04,\n","        -1.5605e-04, -2.3310e-04, -1.4757e-04,  8.4635e-05, -4.3352e-04])\n","gradient values before mask reapp. tensor([ 3.0144e-04, -1.7683e-04, -1.1604e-04, -3.9004e-05,  2.4844e-04,\n","        -1.5495e-04, -2.3223e-04, -1.4634e-04,  8.3410e-05, -4.2833e-04])\n","gradient values before mask reapp. tensor([ 3.0154e-04, -1.7665e-04, -1.1715e-04, -3.9866e-05,  2.4417e-04,\n","        -1.5428e-04, -2.3219e-04, -1.4776e-04,  8.1368e-05, -4.3000e-04])\n","gradient values before mask reapp. tensor([ 3.0484e-04, -1.7590e-04, -1.1232e-04, -3.9156e-05,  2.4566e-04,\n","        -1.5295e-04, -2.3095e-04, -1.4550e-04,  8.0424e-05, -4.2199e-04])\n","gradient values before mask reapp. tensor([ 3.0602e-04, -1.7548e-04, -1.1118e-04, -3.9337e-05,  2.4367e-04,\n","        -1.5204e-04, -2.3039e-04, -1.4543e-04,  7.8884e-05, -4.1985e-04])\n","gradient values before mask reapp. tensor([ 3.0851e-04, -1.7486e-04, -1.0764e-04, -3.8921e-05,  2.4409e-04,\n","        -1.5091e-04, -2.2941e-04, -1.4391e-04,  7.7813e-05, -4.1394e-04])\n","gradient values before mask reapp. tensor([ 3.0691e-04, -1.7497e-04, -1.1171e-04, -4.0493e-05,  2.3715e-04,\n","        -1.5062e-04, -2.2995e-04, -1.4707e-04,  7.5351e-05, -4.2039e-04])\n","gradient values before mask reapp. tensor([ 3.1100e-04, -1.7405e-04, -1.0517e-04, -3.9272e-05,  2.4046e-04,\n","        -1.4915e-04, -2.2835e-04, -1.4367e-04,  7.4837e-05, -4.0956e-04])\n","gradient values before mask reapp. tensor([ 3.1001e-04, -1.7403e-04, -1.0804e-04, -4.0489e-05,  2.3473e-04,\n","        -1.4873e-04, -2.2863e-04, -1.4608e-04,  7.2624e-05, -4.1398e-04])\n","gradient values before mask reapp. tensor([ 3.1224e-04, -1.7342e-04, -1.0485e-04, -4.0097e-05,  2.3486e-04,\n","        -1.4763e-04, -2.2767e-04, -1.4471e-04,  7.1535e-05, -4.0851e-04])\n","gradient values before mask reapp. tensor([ 3.1271e-04, -1.7310e-04, -1.0485e-04, -4.0503e-05,  2.3197e-04,\n","        -1.4690e-04, -2.2732e-04, -1.4527e-04,  6.9906e-05, -4.0817e-04])\n","gradient values before mask reapp. tensor([ 3.1533e-04, -1.7242e-04, -1.0083e-04, -3.9869e-05,  2.3305e-04,\n","        -1.4575e-04, -2.2620e-04, -1.4336e-04,  6.9052e-05, -4.0139e-04])\n","gradient values before mask reapp. tensor([ 3.1516e-04, -1.7223e-04, -1.0202e-04, -4.0591e-05,  2.2901e-04,\n","        -1.4515e-04, -2.2612e-04, -1.4467e-04,  6.7206e-05, -4.0301e-04])\n","gradient values before mask reapp. tensor([ 3.1816e-04, -1.7144e-04, -9.7228e-05, -3.9719e-05,  2.3078e-04,\n","        -1.4389e-04, -2.2480e-04, -1.4226e-04,  6.6479e-05, -3.9486e-04])\n","gradient values before mask reapp. tensor([ 3.1754e-04, -1.7131e-04, -9.9084e-05, -4.0559e-05,  2.2623e-04,\n","        -1.4340e-04, -2.2482e-04, -1.4392e-04,  6.4599e-05, -3.9750e-04])\n","gradient values before mask reapp. tensor([ 3.2017e-04, -1.7061e-04, -9.4932e-05, -3.9854e-05,  2.2752e-04,\n","        -1.4226e-04, -2.2367e-04, -1.4188e-04,  6.3827e-05, -3.9048e-04])\n","gradient values before mask reapp. tensor([ 3.2002e-04, -1.7037e-04, -9.5864e-05, -4.0417e-05,  2.2390e-04,\n","        -1.4166e-04, -2.2349e-04, -1.4295e-04,  6.2139e-05, -3.9157e-04])\n","gradient values before mask reapp. tensor([ 3.2136e-04, -1.6989e-04, -9.4032e-05, -4.0284e-05,  2.2296e-04,\n","        -1.4077e-04, -2.2277e-04, -1.4232e-04,  6.0960e-05, -3.8824e-04])\n","gradient values before mask reapp. tensor([ 3.2158e-04, -1.6958e-04, -9.4265e-05, -4.0669e-05,  2.2001e-04,\n","        -1.4010e-04, -2.2245e-04, -1.4296e-04,  5.9406e-05, -3.8821e-04])\n","gradient values before mask reapp. tensor([ 3.2482e-04, -1.6875e-04, -8.8789e-05, -3.9540e-05,  2.2273e-04,\n","        -1.3884e-04, -2.2099e-04, -1.4002e-04,  5.8978e-05, -3.7893e-04])\n","gradient values before mask reapp. tensor([ 3.2369e-04, -1.6869e-04, -9.1459e-05, -4.0539e-05,  2.1752e-04,\n","        -1.3846e-04, -2.2117e-04, -1.4214e-04,  5.7030e-05, -3.8287e-04])\n","gradient values before mask reapp. tensor([ 3.2516e-04, -1.6812e-04, -8.9184e-05, -4.0187e-05,  2.1711e-04,\n","        -1.3752e-04, -2.2029e-04, -1.4116e-04,  5.6007e-05, -3.7863e-04])\n","gradient values before mask reapp. tensor([ 3.2711e-04, -1.6752e-04, -8.6044e-05, -3.9657e-05,  2.1765e-04,\n","        -1.3655e-04, -2.1932e-04, -1.3965e-04,  5.5200e-05, -3.7319e-04])\n","gradient values before mask reapp. tensor([ 3.2759e-04, -1.6712e-04, -8.5538e-05, -3.9756e-05,  2.1557e-04,\n","        -1.3581e-04, -2.1881e-04, -1.3975e-04,  5.3885e-05, -3.7182e-04])\n","gradient values before mask reapp. tensor([ 3.2741e-04, -1.6686e-04, -8.6294e-05, -4.0191e-05,  2.1233e-04,\n","        -1.3524e-04, -2.1856e-04, -1.4063e-04,  5.2367e-05, -3.7256e-04])\n","gradient values before mask reapp. tensor([ 3.3049e-04, -1.6603e-04, -8.0907e-05, -3.9019e-05,  2.1511e-04,\n","        -1.3403e-04, -2.1710e-04, -1.3767e-04,  5.2025e-05, -3.6338e-04])\n","gradient values before mask reapp. tensor([ 3.2982e-04, -1.6584e-04, -8.2445e-05, -3.9613e-05,  2.1119e-04,\n","        -1.3355e-04, -2.1699e-04, -1.3899e-04,  5.0414e-05, -3.6533e-04])\n","gradient values before mask reapp. tensor([ 3.3075e-04, -1.6533e-04, -8.0967e-05, -3.9386e-05,  2.1020e-04,\n","        -1.3273e-04, -2.1625e-04, -1.3843e-04,  4.9368e-05, -3.6231e-04])\n","gradient values before mask reapp. tensor([ 3.3314e-04, -1.6462e-04, -7.6719e-05, -3.8473e-05,  2.1201e-04,\n","        -1.3168e-04, -2.1501e-04, -1.3613e-04,  4.8900e-05, -3.5496e-04])\n","gradient values before mask reapp. tensor([ 3.3284e-04, -1.6434e-04, -7.7494e-05, -3.8843e-05,  2.0887e-04,\n","        -1.3113e-04, -2.1474e-04, -1.3695e-04,  4.7464e-05, -3.5564e-04])\n","gradient values before mask reapp. tensor([ 3.3280e-04, -1.6404e-04, -7.7854e-05, -3.9115e-05,  2.0613e-04,\n","        -1.3054e-04, -2.1440e-04, -1.3753e-04,  4.6098e-05, -3.5567e-04])\n","gradient values before mask reapp. tensor([ 3.3233e-04, -1.6381e-04, -7.8936e-05, -3.9567e-05,  2.0274e-04,\n","        -1.3004e-04, -2.1420e-04, -1.3853e-04,  4.4636e-05, -3.5688e-04])\n","gradient values before mask reapp. tensor([ 3.3776e-04, -1.6251e-04, -6.8861e-05, -3.7064e-05,  2.1030e-04,\n","        -1.2836e-04, -2.1174e-04, -1.3257e-04,  4.5306e-05, -3.3998e-04])\n","gradient values before mask reapp. tensor([ 3.3569e-04, -1.6255e-04, -7.2801e-05, -3.8234e-05,  2.0426e-04,\n","        -1.2822e-04, -2.1212e-04, -1.3530e-04,  4.3387e-05, -3.4583e-04])\n","gradient values before mask reapp. tensor([ 3.3589e-04, -1.6217e-04, -7.2508e-05, -3.8265e-05,  2.0228e-04,\n","        -1.2757e-04, -2.1162e-04, -1.3541e-04,  4.2226e-05, -3.4471e-04])\n","gradient values before mask reapp. tensor([ 3.3614e-04, -1.6178e-04, -7.2117e-05, -3.8286e-05,  2.0037e-04,\n","        -1.2691e-04, -2.1110e-04, -1.3547e-04,  4.1076e-05, -3.4346e-04])\n","gradient values before mask reapp. tensor([ 3.3652e-04, -1.6135e-04, -7.1396e-05, -3.8190e-05,  1.9885e-04,\n","        -1.2623e-04, -2.1050e-04, -1.3528e-04,  4.0031e-05, -3.4164e-04])\n","gradient values before mask reapp. tensor([ 3.3885e-04, -1.6066e-04, -6.7094e-05, -3.7211e-05,  2.0099e-04,\n","        -1.2527e-04, -2.0926e-04, -1.3286e-04,  3.9738e-05, -3.3425e-04])\n","gradient values before mask reapp. tensor([ 3.3855e-04, -1.6035e-04, -6.7618e-05, -3.7434e-05,  1.9830e-04,\n","        -1.2473e-04, -2.0891e-04, -1.3344e-04,  3.8487e-05, -3.3447e-04])\n","gradient values before mask reapp. tensor([ 3.4047e-04, -1.5962e-04, -6.3954e-05, -3.6486e-05,  1.9973e-04,\n","        -1.2372e-04, -2.0768e-04, -1.3140e-04,  3.8030e-05, -3.2772e-04])\n","gradient values before mask reapp. tensor([ 3.3998e-04, -1.5934e-04, -6.4761e-05, -3.6764e-05,  1.9682e-04,\n","        -1.2323e-04, -2.0739e-04, -1.3213e-04,  3.6762e-05, -3.2838e-04])\n","gradient values before mask reapp. tensor([ 3.3994e-04, -1.5897e-04, -6.4702e-05, -3.6812e-05,  1.9475e-04,\n","        -1.2265e-04, -2.0692e-04, -1.3232e-04,  3.5661e-05, -3.2762e-04])\n","gradient values before mask reapp. tensor([ 3.4088e-04, -1.5845e-04, -6.2808e-05, -3.6360e-05,  1.9457e-04,\n","        -1.2190e-04, -2.0609e-04, -1.3135e-04,  3.4951e-05, -3.2390e-04])\n","gradient values before mask reapp. tensor([ 3.4019e-04, -1.5820e-04, -6.3915e-05, -3.6689e-05,  1.9146e-04,\n","        -1.2146e-04, -2.0585e-04, -1.3223e-04,  3.3678e-05, -3.2503e-04])\n","gradient values before mask reapp. tensor([ 3.4151e-04, -1.5762e-04, -6.1319e-05, -3.6069e-05,  1.9193e-04,\n","        -1.2065e-04, -2.0488e-04, -1.3083e-04,  3.3093e-05, -3.2022e-04])\n","gradient values before mask reapp. tensor([ 3.4241e-04, -1.5705e-04, -5.9365e-05, -3.5531e-05,  1.9186e-04,\n","        -1.1987e-04, -2.0399e-04, -1.2978e-04,  3.2426e-05, -3.1625e-04])\n","gradient values before mask reapp. tensor([ 3.4294e-04, -1.5660e-04, -5.8135e-05, -3.5235e-05,  1.9112e-04,\n","        -1.1922e-04, -2.0329e-04, -1.2919e-04,  3.1654e-05, -3.1363e-04])\n","gradient values before mask reapp. tensor([ 3.4279e-04, -1.5625e-04, -5.8201e-05, -3.5252e-05,  1.8909e-04,\n","        -1.1868e-04, -2.0284e-04, -1.2940e-04,  3.0617e-05, -3.1302e-04])\n","gradient values before mask reapp. tensor([ 3.4272e-04, -1.5586e-04, -5.7999e-05, -3.5185e-05,  1.8736e-04,\n","        -1.1812e-04, -2.0230e-04, -1.2942e-04,  2.9664e-05, -3.1194e-04])\n","gradient values before mask reapp. tensor([ 3.4727e-04, -1.5471e-04, -4.9173e-05, -3.2904e-05,  1.9409e-04,\n","        -1.1670e-04, -2.0009e-04, -1.2408e-04,  3.0368e-05, -2.9708e-04])\n","gradient values before mask reapp. tensor([ 3.1897e-04, -1.6206e-04, -1.1801e-04, -4.5071e-05,  8.8645e-05,\n","        -1.1716e-04, -2.1205e-04, -1.7361e-04, -5.9578e-06, -3.9872e-04])\n","gradient values before mask reapp. tensor([ 3.4384e-04, -1.5455e-04, -5.4817e-05, -3.4325e-05,  1.8496e-04,\n","        -1.1632e-04, -2.0029e-04, -1.2782e-04,  2.7452e-05, -3.0483e-04])\n","gradient values before mask reapp. tensor([ 3.4561e-04, -1.5379e-04, -5.1044e-05, -3.3256e-05,  1.8672e-04,\n","        -1.1534e-04, -1.9899e-04, -1.2559e-04,  2.7189e-05, -2.9782e-04])\n","gradient values before mask reapp. tensor([ 3.4454e-04, -1.5360e-04, -5.2696e-05, -3.3673e-05,  1.8327e-04,\n","        -1.1502e-04, -1.9887e-04, -1.2675e-04,  2.5940e-05, -2.9983e-04])\n","gradient values before mask reapp. tensor([ 3.1939e-04, -1.6023e-04, -1.1478e-04, -4.4345e-05,  8.6341e-05,\n","        -1.1507e-04, -2.0951e-04, -1.7173e-04, -7.9289e-06, -3.9091e-04])\n","gradient values before mask reapp. tensor([ 3.4685e-04, -1.5243e-04, -4.7570e-05, -3.2268e-05,  1.8469e-04,\n","        -1.1350e-04, -1.9689e-04, -1.2378e-04,  2.5087e-05, -2.9015e-04])\n","gradient values before mask reapp. tensor([ 3.4614e-04, -1.5214e-04, -4.8385e-05, -3.2411e-05,  1.8213e-04,\n","        -1.1309e-04, -1.9657e-04, -1.2437e-04,  2.4052e-05, -2.9070e-04])\n","gradient values before mask reapp. tensor([ 3.4759e-04, -1.5145e-04, -4.5199e-05, -3.1483e-05,  1.8341e-04,\n","        -1.1221e-04, -1.9540e-04, -1.2249e-04,  2.3729e-05, -2.8468e-04])\n","gradient values before mask reapp. tensor([ 3.2274e-04, -1.5789e-04, -1.0582e-04, -4.2016e-05,  8.9710e-05,\n","        -1.1244e-04, -2.0582e-04, -1.6621e-04, -8.7473e-06, -3.7384e-04])\n","gradient values before mask reapp. tensor([ 3.4685e-04, -1.5077e-04, -4.5473e-05, -3.1384e-05,  1.7983e-04,\n","        -1.1132e-04, -1.9448e-04, -1.2276e-04,  2.2028e-05, -2.8364e-04])\n","gradient values before mask reapp. tensor([ 3.4716e-04, -1.5029e-04, -4.4347e-05, -3.0991e-05,  1.7920e-04,\n","        -1.1070e-04, -1.9375e-04, -1.2213e-04,  2.1378e-05, -2.8099e-04])\n","gradient values before mask reapp. tensor([ 3.4738e-04, -1.4983e-04, -4.3394e-05, -3.0652e-05,  1.7841e-04,\n","        -1.1010e-04, -1.9305e-04, -1.2161e-04,  2.0704e-05, -2.7865e-04])\n","gradient values before mask reapp. tensor([ 3.2737e-04, -1.5532e-04, -9.4191e-05, -3.8858e-05,  9.5918e-05,\n","        -1.0960e-04, -2.0157e-04, -1.5891e-04, -8.9188e-06, -3.5235e-04])\n","gradient values before mask reapp. tensor([ 3.4815e-04, -1.4890e-04, -4.0720e-05, -2.9778e-05,  1.7782e-04,\n","        -1.0895e-04, -1.9156e-04, -1.2001e-04,  1.9642e-05, -2.7291e-04])\n","gradient values before mask reapp. tensor([ 3.4707e-04, -1.4867e-04, -4.2096e-05, -3.0029e-05,  1.7486e-04,\n","        -1.0864e-04, -1.9134e-04, -1.2090e-04,  1.8593e-05, -2.7437e-04])\n","gradient values before mask reapp. tensor([ 3.4763e-04, -1.4813e-04, -4.0405e-05, -2.9464e-05,  1.7486e-04,\n","        -1.0797e-04, -1.9048e-04, -1.1989e-04,  1.8103e-05, -2.7079e-04])\n","gradient values before mask reapp. tensor([ 3.2619e-04, -1.5372e-04, -9.3123e-05, -3.8427e-05,  9.2257e-05,\n","        -1.0795e-04, -1.9943e-04, -1.5806e-04, -1.0801e-05, -3.4794e-04])\n","gradient values before mask reapp. tensor([ 3.5031e-04, -1.4686e-04, -3.4156e-05, -2.7639e-05,  1.7776e-04,\n","        -1.0643e-04, -1.8826e-04, -1.1606e-04,  1.7725e-05, -2.5923e-04])\n","gradient values before mask reapp. tensor([ 3.4931e-04, -1.4660e-04, -3.5239e-05, -2.7778e-05,  1.7519e-04,\n","        -1.0610e-04, -1.8797e-04, -1.1672e-04,  1.6798e-05, -2.6017e-04])\n","gradient values before mask reapp. tensor([ 3.2773e-04, -1.5210e-04, -8.7531e-05, -3.6737e-05,  9.4332e-05,\n","        -1.0628e-04, -1.9685e-04, -1.5436e-04, -1.1218e-05, -3.3686e-04])\n","gradient values before mask reapp. tensor([ 3.4779e-04, -1.4599e-04, -3.6606e-05, -2.7809e-05,  1.7089e-04,\n","        -1.0539e-04, -1.8721e-04, -1.1754e-04,  1.5111e-05, -2.6072e-04])\n","gradient values before mask reapp. tensor([ 3.4875e-04, -1.4537e-04, -3.4043e-05, -2.6971e-05,  1.7184e-04,\n","        -1.0464e-04, -1.8616e-04, -1.1594e-04,  1.4850e-05, -2.5567e-04])\n","gradient values before mask reapp. tensor([ 3.2995e-04, -1.5034e-04, -8.0731e-05, -3.4726e-05,  9.7471e-05,\n","        -1.0443e-04, -1.9401e-04, -1.4994e-04, -1.1462e-05, -3.2373e-04])\n","gradient values before mask reapp. tensor([ 3.4829e-04, -1.4462e-04, -3.3417e-05, -2.6552e-05,  1.6949e-04,\n","        -1.0375e-04, -1.8506e-04, -1.1553e-04,  1.3562e-05, -2.5318e-04])\n","gradient values before mask reapp. tensor([ 3.4851e-04, -1.4413e-04, -3.2188e-05, -2.6054e-05,  1.6921e-04,\n","        -1.0317e-04, -1.8428e-04, -1.1474e-04,  1.3094e-05, -2.5031e-04])\n","gradient values before mask reapp. tensor([ 3.3206e-04, -1.4862e-04, -7.3930e-05, -3.2676e-05,  1.0082e-04,\n","        -1.0266e-04, -1.9119e-04, -1.4543e-04, -1.1578e-05, -3.1068e-04])\n","gradient values before mask reapp. tensor([ 3.4715e-04, -1.4354e-04, -3.3143e-05, -2.6035e-05,  1.6544e-04,\n","        -1.0248e-04, -1.8351e-04, -1.1528e-04,  1.1586e-05, -2.5040e-04])\n","gradient values before mask reapp. tensor([ 3.5050e-04, -1.4250e-04, -2.6078e-05, -2.4021e-05,  1.7083e-04,\n","        -1.0129e-04, -1.8157e-04, -1.1086e-04,  1.2209e-05, -2.3811e-04])\n","gradient values before mask reapp. tensor([ 3.2955e-04, -1.4765e-04, -7.5523e-05, -3.2799e-05,  9.6316e-05,\n","        -1.0182e-04, -1.9004e-04, -1.4607e-04, -1.3065e-05, -3.1116e-04])\n","gradient values before mask reapp. tensor([ 3.5028e-04, -1.4167e-04, -2.4865e-05, -2.3368e-05,  1.6915e-04,\n","        -1.0032e-04, -1.8031e-04, -1.1005e-04,  1.1095e-05, -2.3451e-04])\n","gradient values before mask reapp. tensor([ 3.3408e-04, -1.4595e-04, -6.5088e-05, -2.9818e-05,  1.0425e-04,\n","        -1.0001e-04, -1.8696e-04, -1.3938e-04, -1.2057e-05, -2.9282e-04])\n","gradient values before mask reapp. tensor([ 3.4901e-04, -1.4100e-04, -2.5294e-05, -2.3070e-05,  1.6625e-04,\n","        -9.9630e-05, -1.7936e-04, -1.1011e-04,  9.8888e-06, -2.3356e-04])\n","gradient values before mask reapp. tensor([ 3.4883e-04, -1.4059e-04, -2.4741e-05, -2.2753e-05,  1.6541e-04,\n","        -9.9169e-05, -1.7874e-04, -1.0971e-04,  9.3624e-06, -2.3188e-04])\n","gradient values before mask reapp. tensor([ 3.3705e-04, -1.4400e-04, -5.6399e-05, -2.7103e-05,  1.0963e-04,\n","        -9.8031e-05, -1.8369e-04, -1.3361e-04, -1.1699e-05, -2.7643e-04])\n","gradient values before mask reapp. tensor([ 3.3005e-04, -1.4477e-04, -6.8209e-05, -3.0116e-05,  9.7641e-05,\n","        -9.9099e-05, -1.8562e-04, -1.4072e-04, -1.4007e-05, -2.9502e-04])\n","gradient values before mask reapp. tensor([ 3.5419e-04, -1.3831e-04, -1.1992e-05, -1.8850e-05,  1.7379e-04,\n","        -9.6600e-05, -1.7464e-04, -1.0160e-04,  9.9129e-06, -2.0873e-04])\n","gradient values before mask reapp. tensor([ 3.3414e-04, -1.4308e-04, -5.8380e-05, -2.7199e-05,  1.0505e-04,\n","        -9.7324e-05, -1.8260e-04, -1.3435e-04, -1.3056e-05, -2.7748e-04])\n","gradient values before mask reapp. tensor([ 3.4726e-04, -1.3868e-04, -2.2900e-05, -2.1311e-05,  1.6087e-04,\n","        -9.7140e-05, -1.7586e-04, -1.0813e-04,  6.8741e-06, -2.2495e-04])\n","gradient values before mask reapp. tensor([ 3.4824e-04, -1.3805e-04, -2.0118e-05, -2.0383e-05,  1.6220e-04,\n","        -9.6426e-05, -1.7478e-04, -1.0634e-04,  6.7703e-06, -2.1958e-04])\n","gradient values before mask reapp. tensor([ 3.3520e-04, -1.4153e-04, -5.3187e-05, -2.5440e-05,  1.0725e-04,\n","        -9.5827e-05, -1.8010e-04, -1.3071e-04, -1.3207e-05, -2.6697e-04])\n","gradient values before mask reapp. tensor([ 3.3450e-04, -1.4113e-04, -5.3150e-05, -2.5218e-05,  1.0652e-04,\n","        -9.5522e-05, -1.7955e-04, -1.3046e-04, -1.3456e-05, -2.6608e-04])\n","gradient values before mask reapp. tensor([ 3.4876e-04, -1.3661e-04, -1.6133e-05, -1.8715e-05,  1.6238e-04,\n","        -9.4897e-05, -1.7245e-04, -1.0355e-04,  5.8826e-06, -2.1067e-04])\n","gradient values before mask reapp. tensor([ 3.3167e-04, -1.4074e-04, -5.6204e-05, -2.5791e-05,  1.0187e-04,\n","        -9.5305e-05, -1.7924e-04, -1.3203e-04, -1.4632e-05, -2.6979e-04])\n","gradient values before mask reapp. tensor([ 3.5117e-04, -1.3536e-04, -9.6657e-06, -1.6666e-05,  1.6633e-04,\n","        -9.3550e-05, -1.7020e-04, -9.9318e-05,  6.0785e-06, -1.9877e-04])\n","gradient values before mask reapp. tensor([ 3.3406e-04, -1.3935e-04, -4.9355e-05, -2.3631e-05,  1.0667e-04,\n","        -9.3928e-05, -1.7685e-04, -1.2745e-04, -1.4061e-05, -2.5712e-04])\n","gradient values before mask reapp. tensor([ 3.4648e-04, -1.3527e-04, -1.6367e-05, -1.7981e-05,  1.5738e-04,\n","        -9.3536e-05, -1.7051e-04, -1.0326e-04,  3.7648e-06, -2.0797e-04])\n","gradient values before mask reapp. tensor([ 3.3628e-04, -1.3811e-04, -4.2964e-05, -2.1680e-05,  1.1112e-04,\n","        -9.2708e-05, -1.7464e-04, -1.2315e-04, -1.3523e-05, -2.4551e-04])\n","gradient values before mask reapp. tensor([ 3.3483e-04, -1.3781e-04, -4.4354e-05, -2.1834e-05,  1.0892e-04,\n","        -9.2502e-05, -1.7436e-04, -1.2383e-04, -1.4087e-05, -2.4685e-04])\n","gradient values before mask reapp. tensor([ 3.4548e-04, -1.3410e-04, -1.4942e-05, -1.6939e-05,  1.5539e-04,\n","        -9.2380e-05, -1.6871e-04, -1.0197e-04,  2.5945e-06, -2.0326e-04])\n","gradient values before mask reapp. tensor([ 3.3534e-04, -1.3680e-04, -4.0962e-05, -2.0586e-05,  1.1059e-04,\n","        -9.1607e-05, -1.7270e-04, -1.2132e-04, -1.4028e-05, -2.3996e-04])\n","gradient values before mask reapp. tensor([ 3.3171e-04, -1.3699e-04, -4.6438e-05, -2.1885e-05,  1.0475e-04,\n","        -9.2012e-05, -1.7336e-04, -1.2447e-04, -1.5166e-05, -2.4827e-04])\n","gradient values before mask reapp. tensor([ 3.4739e-04, -1.3242e-04, -8.1801e-06, -1.4499e-05,  1.5852e-04,\n","        -9.0624e-05, -1.6583e-04, -9.7386e-05,  2.3926e-06, -1.8989e-04])\n","gradient values before mask reapp. tensor([ 3.3392e-04, -1.3561e-04, -3.9834e-05, -1.9751e-05,  1.0933e-04,\n","        -9.0639e-05, -1.7098e-04, -1.2002e-04, -1.4618e-05, -2.3591e-04])\n","gradient values before mask reapp. tensor([ 3.3223e-04, -1.3547e-04, -4.1850e-05, -2.0145e-05,  1.0662e-04,\n","        -9.0616e-05, -1.7094e-04, -1.2109e-04, -1.5243e-05, -2.3859e-04])\n","gradient values before mask reapp. tensor([ 3.4902e-04, -1.3085e-04, -1.7810e-06, -1.2183e-05,  1.6161e-04,\n","        -8.9024e-05, -1.6310e-04, -9.2954e-05,  2.3055e-06, -1.7729e-04])\n","gradient values before mask reapp. tensor([ 3.3076e-04, -1.3482e-04, -4.2013e-05, -1.9857e-05,  1.0507e-04,\n","        -9.0166e-05, -1.7003e-04, -1.2075e-04, -1.5705e-05, -2.3755e-04])\n","gradient values before mask reapp. tensor([ 3.3229e-04, -1.3406e-04, -3.7946e-05, -1.8605e-05,  1.0807e-04,\n","        -8.9396e-05, -1.6870e-04, -1.1806e-04, -1.5302e-05, -2.3017e-04])\n","gradient values before mask reapp. tensor([ 3.4503e-04, -1.3013e-04, -5.7793e-06, -1.2498e-05,  1.5435e-04,\n","        -8.8405e-05, -1.6233e-04, -9.5007e-05,  1.4292e-07, -1.8121e-04])\n","gradient values before mask reapp. tensor([ 3.3463e-04, -1.3282e-04, -3.1197e-05, -1.6506e-05,  1.1308e-04,\n","        -8.8198e-05, -1.6645e-04, -1.1348e-04, -1.4571e-05, -2.1799e-04])\n","gradient values before mask reapp. tensor([ 3.3350e-04, -1.3245e-04, -3.1922e-05, -1.6464e-05,  1.1154e-04,\n","        -8.7934e-05, -1.6603e-04, -1.1372e-04, -1.4994e-05, -2.1825e-04])\n","gradient values before mask reapp. tensor([ 3.3404e-04, -1.3186e-04, -2.9603e-05, -1.5622e-05,  1.1306e-04,\n","        -8.7399e-05, -1.6505e-04, -1.1206e-04, -1.4806e-05, -2.1367e-04])\n","gradient values before mask reapp. tensor([ 3.3351e-04, -1.3150e-04, -2.9348e-05, -1.5386e-05,  1.1253e-04,\n","        -8.7117e-05, -1.6452e-04, -1.1170e-04, -1.5010e-05, -2.1259e-04])\n","gradient values before mask reapp. tensor([ 3.4627e-04, -1.2768e-04,  2.4057e-06, -9.1529e-06,  1.5733e-04,\n","        -8.6029e-05, -1.5820e-04, -8.9073e-05, -3.1083e-07, -1.6406e-04])\n","gradient values before mask reapp. tensor([ 3.3435e-04, -1.3044e-04, -2.5173e-05, -1.3885e-05,  1.1517e-04,\n","        -8.6196e-05, -1.6273e-04, -1.0865e-04, -1.4673e-05, -2.0445e-04])\n","gradient values before mask reapp. tensor([ 3.3455e-04, -1.2990e-04, -2.3405e-05, -1.3192e-05,  1.1619e-04,\n","        -8.5733e-05, -1.6186e-04, -1.0732e-04, -1.4553e-05, -2.0078e-04])\n","gradient values before mask reapp. tensor([ 3.3526e-04, -1.2931e-04, -2.0832e-05, -1.2313e-05,  1.1787e-04,\n","        -8.5169e-05, -1.6085e-04, -1.0552e-04, -1.4355e-05, -1.9586e-04])\n","gradient values before mask reapp. tensor([ 3.3343e-04, -1.2916e-04, -2.2867e-05, -1.2641e-05,  1.1535e-04,\n","        -8.5183e-05, -1.6079e-04, -1.0653e-04, -1.4855e-05, -1.9848e-04])\n","gradient values before mask reapp. tensor([ 3.3845e-04, -1.2782e-04, -1.2301e-05, -9.6639e-06,  1.2459e-04,\n","        -8.3722e-05, -1.5816e-04, -9.9809e-05, -1.3292e-05, -1.8057e-04])\n","gradient values before mask reapp. tensor([ 3.2938e-04, -1.2893e-04, -2.7553e-05, -1.3497e-05,  1.0976e-04,\n","        -8.5283e-05, -1.6078e-04, -1.0889e-04, -1.5936e-05, -2.0477e-04])\n","gradient values before mask reapp. tensor([ 3.3905e-04, -1.2684e-04, -8.6236e-06, -8.3398e-06,  1.2681e-04,\n","        -8.2871e-05, -1.5651e-04, -9.7087e-05, -1.3013e-05, -1.7332e-04])\n","gradient values before mask reapp. tensor([ 3.3075e-04, -1.2777e-04, -2.2349e-05, -1.1716e-05,  1.1338e-04,\n","        -8.4245e-05, -1.5879e-04, -1.0522e-04, -1.5405e-05, -1.9494e-04])\n","gradient values before mask reapp. tensor([ 3.3732e-04, -1.2617e-04, -9.0472e-06, -8.0171e-06,  1.2516e-04,\n","        -8.2458e-05, -1.5561e-04, -9.6842e-05, -1.3415e-05, -1.7256e-04])\n","gradient values before mask reapp. tensor([ 3.2869e-04, -1.2718e-04, -2.3365e-05, -1.1585e-05,  1.1122e-04,\n","        -8.3910e-05, -1.5803e-04, -1.0532e-04, -1.5881e-05, -1.9521e-04])\n","gradient values before mask reapp. tensor([ 3.3531e-04, -1.2567e-04, -1.0080e-05, -7.9529e-06,  1.2305e-04,\n","        -8.2204e-05, -1.5495e-04, -9.6978e-05, -1.3858e-05, -1.7308e-04])\n","gradient values before mask reapp. tensor([ 3.3202e-04, -1.2568e-04, -1.4641e-05, -8.8897e-06,  1.1811e-04,\n","        -8.2447e-05, -1.5533e-04, -9.9518e-05, -1.4795e-05, -1.7964e-04])\n","gradient values before mask reapp. tensor([ 3.3487e-04, -1.2476e-04, -8.0519e-06, -6.9527e-06,  1.2374e-04,\n","        -8.1502e-05, -1.5354e-04, -9.5211e-05, -1.3822e-05, -1.6828e-04])\n","gradient values before mask reapp. tensor([ 3.2998e-04, -1.2511e-04, -1.5642e-05, -8.7613e-06,  1.1599e-04,\n","        -8.2127e-05, -1.5458e-04, -9.9618e-05, -1.5251e-05, -1.7993e-04])\n","gradient values before mask reapp. tensor([ 3.3539e-04, -1.2378e-04, -4.3885e-06, -5.6681e-06,  1.2605e-04,\n","        -8.0685e-05, -1.5189e-04, -9.2452e-05, -1.3491e-05, -1.6111e-04])\n","gradient values before mask reapp. tensor([ 3.3177e-04, -1.2384e-04, -9.4612e-06, -6.6476e-06,  1.2079e-04,\n","        -8.1012e-05, -1.5236e-04, -9.5265e-05, -1.4419e-05, -1.6839e-04])\n","gradient values before mask reapp. tensor([ 3.3529e-04, -1.2282e-04, -1.7172e-06, -4.5152e-06,  1.2738e-04,\n","        -7.9918e-05, -1.5035e-04, -9.0282e-05, -1.3327e-05, -1.5529e-04])\n","gradient values before mask reapp. tensor([ 3.2897e-04, -1.2337e-04, -1.1612e-05, -6.6992e-06,  1.1779e-04,\n","        -8.0861e-05, -1.5180e-04, -9.5962e-05, -1.4915e-05, -1.7041e-04])\n","gradient values before mask reapp. tensor([ 3.3444e-04, -1.2193e-04, -1.4258e-07, -3.4694e-06,  1.2794e-04,\n","        -7.9297e-05, -1.4893e-04, -8.8631e-05, -1.3171e-05, -1.5094e-04])\n","gradient values before mask reapp. tensor([ 3.2851e-04, -1.2243e-04, -9.3676e-06, -5.4795e-06,  1.1896e-04,\n","        -8.0154e-05, -1.5024e-04, -9.3906e-05, -1.4664e-05, -1.6499e-04])\n","gradient values before mask reapp. tensor([ 3.3736e-04, -1.2045e-04,  8.3726e-06, -7.1650e-07,  1.3498e-04,\n","        -7.7900e-05, -1.4614e-04, -8.2725e-05, -1.1874e-05, -1.3550e-04])\n","gradient values before mask reapp. tensor([ 3.2708e-04, -1.2173e-04, -8.8671e-06, -4.8210e-06,  1.1865e-04,\n","        -7.9782e-05, -1.4915e-04, -9.2907e-05, -1.4627e-05, -1.6274e-04])\n","gradient values before mask reapp. tensor([ 3.3309e-04, -1.2024e-04,  3.5034e-06, -1.5227e-06,  1.2948e-04,\n","        -7.8114e-05, -1.4617e-04, -8.5101e-05, -1.2822e-05, -1.4208e-04])\n","gradient values before mask reapp. tensor([ 3.2822e-04, -1.2062e-04, -4.1141e-06, -3.2724e-06,  1.2180e-04,\n","        -7.8776e-05, -1.4726e-04, -8.9525e-05, -1.4190e-05, -1.5377e-04])\n","gradient values before mask reapp. tensor([ 3.2929e-04, -1.1998e-04, -6.3250e-07, -2.1943e-06,  1.2456e-04,\n","        -7.8221e-05, -1.4610e-04, -8.7096e-05, -1.3714e-05, -1.4754e-04])\n","gradient values before mask reapp. tensor([ 3.3000e-04, -1.1938e-04,  2.0925e-06, -1.3018e-06,  1.2653e-04,\n","        -7.7677e-05, -1.4506e-04, -8.5165e-05, -1.3401e-05, -1.4242e-04])\n","gradient values before mask reapp. tensor([ 3.2662e-04, -1.1956e-04, -2.7598e-06, -2.3710e-06,  1.2154e-04,\n","        -7.8102e-05, -1.4564e-04, -8.7871e-05, -1.4256e-05, -1.4979e-04])\n","gradient values before mask reapp. tensor([ 3.2953e-04, -1.1857e-04,  3.9407e-06, -4.5343e-07,  1.2714e-04,\n","        -7.7068e-05, -1.4380e-04, -8.3536e-05, -1.3338e-05, -1.3819e-04])\n","gradient values before mask reapp. tensor([ 3.2804e-04, -1.1839e-04,  2.5707e-06, -6.5826e-07,  1.2535e-04,\n","        -7.7051e-05, -1.4364e-04, -8.4115e-05, -1.3662e-05, -1.3986e-04])\n","gradient values before mask reapp. tensor([ 3.2589e-04, -1.1830e-04,  1.2298e-07, -1.0651e-06,  1.2266e-04,\n","        -7.7174e-05, -1.4369e-04, -8.5315e-05, -1.4095e-05, -1.4320e-04])\n","gradient values before mask reapp. tensor([ 3.2931e-04, -1.1722e-04,  7.7976e-06,  1.1201e-06,  1.2923e-04,\n","        -7.6034e-05, -1.4164e-04, -8.0367e-05, -1.2985e-05, -1.3001e-04])\n","gradient values before mask reapp. tensor([ 3.2893e-04, -1.1695e-04,  8.4033e-06,  1.3101e-06,  1.2934e-04,\n","        -7.5864e-05, -1.4117e-04, -7.9731e-05, -1.2950e-05, -1.2875e-04])\n","gradient values before mask reapp. tensor([ 3.2088e-04, -1.1774e-04, -4.6463e-06, -1.5922e-06,  1.1689e-04,\n","        -7.7110e-05, -1.4321e-04, -8.7335e-05, -1.5031e-05, -1.4884e-04])\n","gradient values before mask reapp. tensor([ 3.3105e-04, -1.1564e-04,  1.4950e-05,  3.3905e-06,  1.3422e-04,\n","        -7.4640e-05, -1.3892e-04, -7.5266e-05, -1.2193e-05, -1.1679e-04])\n","gradient values before mask reapp. tensor([ 3.2419e-04, -1.1631e-04,  4.0682e-06,  8.8866e-07,  1.2386e-04,\n","        -7.5741e-05, -1.4062e-04, -8.1551e-05, -1.3880e-05, -1.3368e-04])\n","gradient values before mask reapp. tensor([ 3.2997e-04, -1.1498e-04,  1.5913e-05,  3.9416e-06,  1.3434e-04,\n","        -7.4245e-05, -1.3788e-04, -7.4083e-05, -1.2078e-05, -1.1420e-04])\n","gradient values before mask reapp. tensor([ 3.2130e-04, -1.1589e-04,  1.6546e-06,  6.3878e-07,  1.2072e-04,\n","        -7.5646e-05, -1.4019e-04, -8.2456e-05, -1.4391e-05, -1.3637e-04])\n","gradient values before mask reapp. tensor([ 3.2936e-04, -1.1414e-04,  1.7584e-05,  4.7347e-06,  1.3482e-04,\n","        -7.3649e-05, -1.3663e-04, -7.2557e-05, -1.2030e-05, -1.1022e-04])\n","gradient values before mask reapp. tensor([ 3.2379e-04, -1.1457e-04,  9.1134e-06,  2.9197e-06,  1.2676e-04,\n","        -7.4470e-05, -1.3783e-04, -7.7349e-05, -1.3298e-05, -1.2313e-04])\n","gradient values before mask reapp. tensor([ 3.3022e-04, -1.1317e-04,  2.1985e-05,  6.1462e-06,  1.3815e-04,\n","        -7.2846e-05, -1.3492e-04, -6.9282e-05, -1.1363e-05, -1.0209e-04])\n","gradient values before mask reapp. tensor([ 3.1922e-04, -1.1445e-04,  3.6804e-06,  1.8700e-06,  1.2091e-04,\n","        -7.4773e-05, -1.3803e-04, -8.0073e-05, -1.4230e-05, -1.3079e-04])\n","gradient values before mask reapp. tensor([ 3.2684e-04, -1.1282e-04,  1.8690e-05,  5.6629e-06,  1.3414e-04,\n","        -7.2883e-05, -1.3468e-04, -7.0756e-05, -1.2046e-05, -1.0623e-04])\n","gradient values before mask reapp. tensor([ 3.1870e-04, -1.1363e-04,  5.5216e-06,  2.7007e-06,  1.2166e-04,\n","        -7.4155e-05, -1.3675e-04, -7.8409e-05, -1.4095e-05, -1.2656e-04])\n","gradient values before mask reapp. tensor([ 3.2660e-04, -1.1190e-04,  2.1199e-05,  6.7319e-06,  1.3557e-04,\n","        -7.2206e-05, -1.3325e-04, -6.8666e-05, -1.1755e-05, -1.0083e-04])\n","gradient values before mask reapp. tensor([ 3.2320e-04, -1.1200e-04,  1.6700e-05,  5.8297e-06,  1.3123e-04,\n","        -7.2637e-05, -1.3369e-04, -7.1025e-05, -1.2355e-05, -1.0748e-04])\n","gradient values before mask reapp. tensor([ 3.2378e-04, -1.1144e-04,  1.9266e-05,  6.6726e-06,  1.3321e-04,\n","        -7.2165e-05, -1.3271e-04, -6.9150e-05, -1.1962e-05, -1.0268e-04])\n","gradient values before mask reapp. tensor([ 3.2553e-04, -1.1075e-04,  2.4024e-05,  8.0277e-06,  1.3744e-04,\n","        -7.1522e-05, -1.3133e-04, -6.5870e-05, -1.1092e-05, -9.4517e-05])\n","gradient values before mask reapp. tensor([ 3.1733e-04, -1.1154e-04,  1.0810e-05,  5.0797e-06,  1.2489e-04,\n","        -7.2794e-05, -1.3337e-04, -7.3547e-05, -1.3169e-05, -1.1481e-04])\n","gradient values before mask reapp. tensor([ 3.2567e-04, -1.0972e-04,  2.7403e-05,  9.3582e-06,  1.3980e-04,\n","        -7.0768e-05, -1.2966e-04, -6.3176e-05, -1.0586e-05, -8.7581e-05])\n","gradient values before mask reapp. tensor([ 3.1270e-04, -1.1139e-04,  5.5510e-06,  4.2478e-06,  1.1953e-04,\n","        -7.3125e-05, -1.3348e-04, -7.6045e-05, -1.3871e-05, -1.2195e-04])\n","gradient values before mask reapp. tensor([ 3.2675e-04, -1.0851e-04,  3.2581e-05,  1.1318e-05,  1.4398e-04,\n","        -6.9786e-05, -1.2756e-04, -5.9302e-05, -9.6796e-06, -7.7481e-05])\n","gradient values before mask reapp. tensor([ 3.2022e-04, -1.0915e-04,  2.2560e-05,  9.1103e-06,  1.3478e-04,\n","        -7.0911e-05, -1.2908e-04, -6.4918e-05, -1.0990e-05, -9.2966e-05])\n","gradient values before mask reapp. tensor([ 3.2577e-04, -1.0776e-04,  3.4344e-05,  1.2341e-05,  1.4552e-04,\n","        -6.9383e-05, -1.2620e-04, -5.7298e-05, -8.9850e-06, -7.3193e-05])\n","gradient values before mask reapp. tensor([ 3.1137e-04, -1.0966e-04,  9.9665e-06,  6.5341e-06,  1.2291e-04,\n","        -7.2090e-05, -1.3055e-04, -7.1713e-05, -1.2674e-05, -1.1177e-04])\n","gradient values before mask reapp. tensor([ 3.2302e-04, -1.0732e-04,  3.2357e-05,  1.2147e-05,  1.4295e-04,\n","        -6.9335e-05, -1.2572e-04, -5.7896e-05, -9.3067e-06, -7.5343e-05])\n","gradient values before mask reapp. tensor([ 3.0904e-04, -1.0919e-04,  8.5973e-06,  6.4432e-06,  1.2085e-04,\n","        -7.1943e-05, -1.2999e-04, -7.1975e-05, -1.2938e-05, -1.1300e-04])\n","gradient values before mask reapp. tensor([ 3.2097e-04, -1.0678e-04,  3.1467e-05,  1.2176e-05,  1.4128e-04,\n","        -6.9126e-05, -1.2507e-04, -5.7910e-05, -9.5372e-06, -7.5772e-05])\n","gradient values before mask reapp. tensor([ 3.0570e-04, -1.0887e-04,  5.4066e-06,  5.9043e-06,  1.1714e-04,\n","        -7.1997e-05, -1.2978e-04, -7.3346e-05, -1.3483e-05, -1.1714e-04])\n","gradient values before mask reapp. tensor([ 3.1931e-04, -1.0617e-04,  3.1251e-05,  1.2415e-05,  1.4021e-04,\n","        -6.8816e-05, -1.2427e-04, -5.7519e-05, -9.6697e-06, -7.5064e-05])\n","gradient values before mask reapp. tensor([ 3.1349e-04, -1.0687e-04,  2.2081e-05,  1.0018e-05,  1.3158e-04,\n","        -6.9897e-05, -1.2586e-04, -6.2799e-05, -1.0985e-05, -8.9920e-05])\n","gradient values before mask reapp. tensor([ 3.0755e-04, -1.0730e-04,  1.2911e-05,  8.0342e-06,  1.2273e-04,\n","        -7.0696e-05, -1.2711e-04, -6.8030e-05, -1.2465e-05, -1.0377e-04])\n","gradient values before mask reapp. tensor([ 3.1392e-04, -1.0591e-04,  2.5614e-05,  1.1157e-05,  1.3389e-04,\n","        -6.9133e-05, -1.2431e-04, -6.0148e-05, -1.0581e-05, -8.3171e-05])\n","gradient values before mask reapp. tensor([ 3.0404e-04, -1.0706e-04,  9.3052e-06,  7.3434e-06,  1.1860e-04,\n","        -7.0829e-05, -1.2704e-04, -6.9692e-05, -1.3089e-05, -1.0872e-04])\n","gradient values before mask reapp. tensor([ 3.0906e-04, -1.0643e-04,  1.6050e-05,  1.0005e-05,  1.1626e-04,\n","        -6.8519e-05, -1.2513e-04, -6.6949e-05, -1.7050e-05, -9.5866e-05])\n","gradient values before mask reapp. tensor([ 2.9836e-04, -1.0771e-04, -1.5155e-06,  5.7948e-06,  1.0045e-04,\n","        -7.0471e-05, -1.2814e-04, -7.7126e-05, -1.9366e-05, -1.2361e-04])\n","gradient values before mask reapp. tensor([ 3.0822e-04, -1.0569e-04,  1.7355e-05,  1.0557e-05,  1.1674e-04,\n","        -6.8073e-05, -1.2405e-04, -6.5614e-05, -1.6859e-05, -9.2810e-05])\n","gradient values before mask reapp. tensor([ 3.0004e-04, -1.0665e-04,  4.1884e-06,  7.3319e-06,  1.0475e-04,\n","        -6.9588e-05, -1.2631e-04, -7.3208e-05, -1.8619e-05, -1.1377e-04])\n","gradient values before mask reapp. tensor([ 3.0759e-04, -1.0508e-04,  1.8807e-05,  1.0986e-05,  1.1731e-04,\n","        -6.7651e-05, -1.2309e-04, -6.4240e-05, -1.6645e-05, -8.9910e-05])\n","gradient values before mask reapp. tensor([ 2.9704e-04, -1.0630e-04,  1.6543e-06,  6.8882e-06,  1.0183e-04,\n","        -6.9629e-05, -1.2602e-04, -7.4165e-05, -1.8940e-05, -1.1699e-04])\n","gradient values before mask reapp. tensor([ 3.0525e-04, -1.0460e-04,  1.7453e-05,  1.0820e-05,  1.1540e-04,\n","        -6.7550e-05, -1.2256e-04, -6.4510e-05, -1.6838e-05, -9.1242e-05])\n","gradient values before mask reapp. tensor([ 2.9501e-04, -1.0580e-04,  7.8919e-07,  6.8424e-06,  1.0038e-04,\n","        -6.9455e-05, -1.2541e-04, -7.4140e-05, -1.9049e-05, -1.1755e-04])\n","gradient values before mask reapp. tensor([ 3.0432e-04, -1.0390e-04,  1.8548e-05,  1.1272e-05,  1.1564e-04,\n","        -6.7141e-05, -1.2156e-04, -6.3327e-05, -1.6698e-05, -8.8622e-05])\n","gradient values before mask reapp. tensor([ 2.9367e-04, -1.0517e-04,  1.1901e-06,  7.1468e-06,  1.0008e-04,\n","        -6.9119e-05, -1.2453e-04, -7.3342e-05, -1.8969e-05, -1.1600e-04])\n","gradient values before mask reapp. tensor([ 3.0294e-04, -1.0327e-04,  1.8887e-05,  1.1549e-05,  1.1525e-04,\n","        -6.6825e-05, -1.2070e-04, -6.2585e-05, -1.6650e-05, -8.7190e-05])\n","gradient values before mask reapp. tensor([ 2.8945e-04, -1.0505e-04, -3.6070e-06,  6.1680e-06,  9.5239e-05,\n","        -6.9473e-05, -1.2473e-04, -7.5665e-05, -1.9557e-05, -1.2292e-04])\n","gradient values before mask reapp. tensor([ 3.0409e-04, -1.0220e-04,  2.3716e-05,  1.3027e-05,  1.1892e-04,\n","        -6.5941e-05, -1.1893e-04, -5.9141e-05, -1.5951e-05, -7.8380e-05])\n","gradient values before mask reapp. tensor([ 2.8961e-04, -1.0417e-04, -5.4707e-07,  7.1139e-06,  9.7261e-05,\n","        -6.8788e-05, -1.2331e-04, -7.3283e-05, -1.9142e-05, -1.1706e-04])\n","gradient values before mask reapp. tensor([ 3.0319e-04, -1.0151e-04,  2.4863e-05,  1.3492e-05,  1.1924e-04,\n","        -6.5534e-05, -1.1793e-04, -5.7925e-05, -1.5789e-05, -7.5699e-05])\n","gradient values before mask reapp. tensor([ 2.9616e-04, -1.0230e-04,  1.3704e-05,  1.0683e-05,  1.0893e-04,\n","        -6.6830e-05, -1.1982e-04, -6.4357e-05, -1.7332e-05, -9.3545e-05])\n","gradient values before mask reapp. tensor([ 3.0270e-04, -1.0108e-04,  2.6252e-05,  1.3722e-05,  1.1973e-04,\n","        -6.5161e-05, -1.1714e-04, -5.6636e-05, -1.5573e-05, -7.3370e-05])\n","gradient values before mask reapp. tensor([ 2.9277e-04, -1.0200e-04,  1.0634e-05,  1.0206e-05,  1.0571e-04,\n","        -6.6998e-05, -1.1961e-04, -6.5555e-05, -1.7650e-05, -9.7558e-05])\n","gradient values before mask reapp. tensor([ 2.9885e-04, -1.0086e-04,  2.2293e-05,  1.2965e-05,  1.1564e-04,\n","        -6.5429e-05, -1.1713e-04, -5.8405e-05, -1.6053e-05, -7.8892e-05])\n","gradient values before mask reapp. tensor([ 2.8709e-04, -1.0216e-04,  3.2074e-06,  8.4547e-06,  9.8420e-05,\n","        -6.7707e-05, -1.2040e-04, -6.9493e-05, -1.8654e-05, -1.0894e-04])\n","gradient values before mask reapp. tensor([ 2.9870e-04, -1.0008e-04,  2.4713e-05,  1.3716e-05,  1.1707e-04,\n","        -6.4864e-05, -1.1590e-04, -5.6441e-05, -1.5727e-05, -7.4224e-05])\n","gradient values before mask reapp. tensor([ 2.8635e-04, -1.0145e-04,  4.6061e-06,  8.9485e-06,  9.8941e-05,\n","        -6.7255e-05, -1.1935e-04, -6.8139e-05, -1.8479e-05, -1.0587e-04])\n","gradient values before mask reapp. tensor([ 2.9702e-04, -9.9502e-05,  2.4565e-05,  1.3892e-05,  1.1633e-04,\n","        -6.4632e-05, -1.1513e-04, -5.5957e-05, -1.5710e-05, -7.3580e-05])\n","gradient values before mask reapp. tensor([ 2.8474e-04, -1.0088e-04,  4.5442e-06,  9.1360e-06,  9.8271e-05,\n","        -6.7015e-05, -1.1858e-04, -6.7610e-05, -1.8450e-05, -1.0512e-04])\n","gradient values before mask reapp. tensor([ 2.9634e-04, -9.8806e-05,  2.6031e-05,  1.4415e-05,  1.1693e-04,\n","        -6.4185e-05, -1.1410e-04, -5.4567e-05, -1.5506e-05, -7.0431e-05])\n","gradient values before mask reapp. tensor([ 2.8343e-04, -1.0029e-04,  4.8976e-06,  9.3154e-06,  9.7817e-05,\n","        -6.6710e-05, -1.1777e-04, -6.6896e-05, -1.8436e-05, -1.0385e-04])\n","gradient values before mask reapp. tensor([ 2.8964e-04, -9.8955e-05,  1.7048e-05,  1.2383e-05,  1.0825e-04,\n","        -6.5038e-05, -1.1504e-04, -5.9400e-05, -1.6772e-05, -8.3937e-05])\n","gradient values before mask reapp. tensor([ 2.7859e-04, -1.0024e-04, -8.9492e-07,  8.1837e-06,  9.2260e-05,\n","        -6.7102e-05, -1.1806e-04, -6.9715e-05, -1.9102e-05, -1.1209e-04])\n","gradient values before mask reapp. tensor([ 2.9349e-04, -9.7480e-05,  2.6565e-05,  1.4984e-05,  1.1604e-04,\n","        -6.3555e-05, -1.1236e-04, -5.3184e-05, -1.5457e-05, -6.7626e-05])\n","gradient values before mask reapp. tensor([ 2.7911e-04, -9.9341e-05,  2.6790e-06,  9.2468e-06,  9.4756e-05,\n","        -6.6388e-05, -1.1661e-04, -6.7067e-05, -1.8606e-05, -1.0551e-04])\n","gradient values before mask reapp. tensor([ 2.9414e-04, -9.6575e-05,  3.0359e-05,  1.6074e-05,  1.1870e-04,\n","        -6.2818e-05, -1.1088e-04, -5.0415e-05, -1.4943e-05, -6.0749e-05])\n","gradient values before mask reapp. tensor([ 2.7809e-04, -9.8712e-05,  3.5303e-06,  9.5927e-06,  9.4807e-05,\n","        -6.6032e-05, -1.1572e-04, -6.6060e-05, -1.8493e-05, -1.0341e-04])\n","gradient values before mask reapp. tensor([ 2.9413e-04, -9.5769e-05,  3.3024e-05,  1.6930e-05,  1.2043e-04,\n","        -6.2230e-05, -1.0960e-04, -4.8293e-05, -1.4550e-05, -5.5624e-05])\n","gradient values before mask reapp. tensor([ 2.7830e-04, -9.7853e-05,  6.6329e-06,  1.0539e-05,  9.6894e-05,\n","        -6.5383e-05, -1.1433e-04, -6.3670e-05, -1.8061e-05, -9.7578e-05])\n","gradient values before mask reapp. tensor([ 2.9095e-04, -9.5531e-05,  2.9946e-05,  1.6168e-05,  1.1686e-04,\n","        -6.2364e-05, -1.0954e-04, -4.9685e-05, -1.5038e-05, -6.0075e-05])\n","gradient values before mask reapp. tensor([ 2.7675e-04, -9.7307e-05,  6.5694e-06,  1.0707e-05,  9.6223e-05,\n","        -6.5151e-05, -1.1362e-04, -6.3184e-05, -1.8030e-05, -9.6895e-05])\n","gradient values before mask reapp. tensor([ 2.9170e-04, -9.4572e-05,  3.4030e-05,  1.7455e-05,  1.1993e-04,\n","        -6.1598e-05, -1.0795e-04, -4.6682e-05, -1.4409e-05, -5.2536e-05])\n","gradient values before mask reapp. tensor([ 2.7469e-04, -9.6904e-05,  5.3918e-06,  1.0379e-05,  9.4284e-05,\n","        -6.5036e-05, -1.1320e-04, -6.3471e-05, -1.8289e-05, -9.8317e-05])\n","gradient values before mask reapp. tensor([ 2.8900e-04, -9.4299e-05,  3.1693e-05,  1.6826e-05,  1.1698e-04,\n","        -6.1644e-05, -1.0778e-04, -4.7663e-05, -1.4820e-05, -5.5889e-05])\n","gradient values before mask reapp. tensor([ 2.7449e-04, -9.6144e-05,  7.6776e-06,  1.1107e-05,  9.5638e-05,\n","        -6.4507e-05, -1.1203e-04, -6.1603e-05, -1.7965e-05, -9.3883e-05])\n","gradient values before mask reapp. tensor([ 2.8935e-04, -9.3420e-05,  3.5038e-05,  1.7885e-05,  1.1936e-04,\n","        -6.0968e-05, -1.0636e-04, -4.5125e-05, -1.4315e-05, -4.9598e-05])\n","gradient values before mask reapp. tensor([ 2.7376e-04, -9.5458e-05,  9.1014e-06,  1.1654e-05,  9.6286e-05,\n","        -6.4092e-05, -1.1101e-04, -6.0221e-05, -1.7731e-05, -9.0793e-05])\n","gradient values before mask reapp. tensor([ 2.8714e-04, -9.2995e-05,  3.3768e-05,  1.7708e-05,  1.1756e-04,\n","        -6.0889e-05, -1.0590e-04, -4.5376e-05, -1.4473e-05, -5.0944e-05])\n","gradient values before mask reapp. tensor([ 2.7345e-04, -9.4710e-05,  1.1200e-05,  1.2306e-05,  9.7437e-05,\n","        -6.3578e-05, -1.0987e-04, -5.8468e-05, -1.7451e-05, -8.6693e-05])\n","gradient values before mask reapp. tensor([ 2.8585e-04, -9.2411e-05,  3.4169e-05,  1.7980e-05,  1.1729e-04,\n","        -6.0597e-05, -1.0509e-04, -4.4615e-05, -1.4385e-05, -4.9537e-05])\n","gradient values before mask reapp. tensor([ 2.7197e-04, -9.4188e-05,  1.1164e-05,  1.2366e-05,  9.6656e-05,\n","        -6.3341e-05, -1.0919e-04, -5.8019e-05, -1.7490e-05, -8.6124e-05])\n","gradient values before mask reapp. tensor([ 2.8501e-04, -9.1778e-05,  3.5272e-05,  1.8350e-05,  1.1756e-04,\n","        -6.0203e-05, -1.0417e-04, -4.3472e-05, -1.4248e-05, -4.7084e-05])\n","gradient values before mask reapp. tensor([ 2.7065e-04, -9.3640e-05,  1.1415e-05,  1.2546e-05,  9.6195e-05,\n","        -6.3077e-05, -1.0845e-04, -5.7385e-05, -1.7450e-05, -8.5064e-05])\n","gradient values before mask reapp. tensor([ 2.8343e-04, -9.1302e-05,  3.4968e-05,  1.8303e-05,  1.1649e-04,\n","        -6.0001e-05, -1.0358e-04, -4.3212e-05, -1.4342e-05, -4.7047e-05])\n","gradient values before mask reapp. tensor([ 2.6988e-04, -9.2939e-05,  1.2786e-05,  1.3106e-05,  9.6826e-05,\n","        -6.2660e-05, -1.0742e-04, -5.6028e-05, -1.7215e-05, -8.1987e-05])\n","gradient values before mask reapp. tensor([ 2.8283e-04, -9.0613e-05,  3.6570e-05,  1.8887e-05,  1.1730e-04,\n","        -5.9566e-05, -1.0254e-04, -4.1733e-05, -1.4079e-05, -4.3707e-05])\n","gradient values before mask reapp. tensor([ 2.6902e-04, -9.2278e-05,  1.3953e-05,  1.3581e-05,  9.7249e-05,\n","        -6.2275e-05, -1.0646e-04, -5.4809e-05, -1.7019e-05, -7.9317e-05])\n","gradient values before mask reapp. tensor([ 2.8171e-04, -9.0054e-05,  3.7089e-05,  1.9092e-05,  1.1702e-04,\n","        -5.9259e-05, -1.0178e-04, -4.0970e-05, -1.4033e-05, -4.2262e-05])\n","gradient values before mask reapp. tensor([ 2.6695e-04, -9.1854e-05,  1.2883e-05,  1.3419e-05,  9.5621e-05,\n","        -6.2177e-05, -1.0599e-04, -5.4966e-05, -1.7163e-05, -8.0397e-05])\n","gradient values before mask reapp. tensor([ 2.8089e-04, -8.9419e-05,  3.8249e-05,  1.9512e-05,  1.1739e-04,\n","        -5.8873e-05, -1.0085e-04, -3.9781e-05, -1.3860e-05, -3.9696e-05])\n","gradient values before mask reapp. tensor([ 2.6449e-04, -9.1538e-05,  1.1005e-05,  1.2977e-05,  9.3185e-05,\n","        -6.2182e-05, -1.0573e-04, -5.5651e-05, -1.7459e-05, -8.2928e-05])\n","gradient values before mask reapp. tensor([ 2.8181e-04, -8.8452e-05,  4.2604e-05,  2.0858e-05,  1.2073e-04,\n","        -5.8080e-05, -9.9226e-05, -3.6628e-05, -1.3187e-05, -3.1756e-05])\n","gradient values before mask reapp. tensor([ 2.5385e-04, -9.2109e-05, -5.6963e-06,  1.9907e-07,  6.6235e-05,\n","        -6.2110e-05, -1.0777e-04, -6.6994e-05, -2.6212e-05, -1.1675e-04])\n","gradient values before mask reapp. tensor([ 2.7883e-04, -8.8205e-05,  3.9868e-05,  2.0249e-05,  1.1760e-04,\n","        -5.8203e-05, -9.9112e-05, -3.7788e-05, -1.3562e-05, -3.5620e-05])\n","gradient values before mask reapp. tensor([ 2.5043e-04, -9.2033e-05, -9.5055e-06, -6.2027e-07,  6.2254e-05,\n","        -6.2407e-05, -1.0801e-04, -6.8893e-05, -2.6661e-05, -1.2242e-04])\n","gradient values before mask reapp. tensor([ 2.6772e-04, -8.8941e-05,  2.1962e-05,  6.4522e-06,  8.8693e-05,\n","        -5.8142e-05, -1.0149e-04, -5.0098e-05, -2.2964e-05, -7.2155e-05])\n","gradient values before mask reapp. tensor([ 2.5121e-04, -9.1122e-05, -5.4865e-06,  6.2753e-07,  6.5289e-05,\n","        -6.1681e-05, -1.0651e-04, -6.5973e-05, -2.6031e-05, -1.1511e-04])\n","gradient values before mask reapp. tensor([ 2.6187e-04, -8.8997e-05,  1.4425e-05,  5.2476e-06,  8.1900e-05,\n","        -5.8938e-05, -1.0223e-04, -5.4014e-05, -2.3691e-05, -8.2974e-05])\n","gradient values before mask reapp. tensor([ 2.4737e-04, -9.0906e-05, -9.3976e-06,  4.5396e-07,  6.2082e-05,\n","        -6.1913e-05, -1.0640e-04, -6.7517e-05, -2.6081e-05, -1.1979e-04])\n","gradient values before mask reapp. tensor([ 2.7649e-04, -8.6121e-05,  4.3618e-05,  2.1669e-05,  1.1886e-04,\n","        -5.6945e-05, -9.6180e-05, -3.4117e-05, -1.3092e-05, -2.7136e-05])\n","gradient values before mask reapp. tensor([ 2.4661e-04, -9.0286e-05, -8.1773e-06,  1.0211e-06,  6.2683e-05,\n","        -6.1576e-05, -1.0550e-04, -6.6285e-05, -2.5796e-05, -1.1709e-04])\n","gradient values before mask reapp. tensor([ 2.6514e-04, -8.6956e-05,  2.5313e-05,  8.3904e-06,  9.0447e-05,\n","        -5.7111e-05, -9.8701e-05, -4.6514e-05, -2.2070e-05, -6.3856e-05])\n","gradient values before mask reapp. tensor([ 2.4763e-04, -8.9333e-05, -3.7273e-06,  2.4085e-06,  6.6151e-05,\n","        -6.0800e-05, -1.0391e-04, -6.3103e-05, -2.5088e-05, -1.0902e-04])\n","gradient values before mask reapp. tensor([ 2.6413e-04, -8.6374e-05,  2.6115e-05,  8.8686e-06,  9.0713e-05,\n","        -5.6817e-05, -9.7873e-05, -4.5515e-05, -2.1830e-05, -6.1774e-05])\n","gradient values before mask reapp. tensor([ 2.4544e-04, -8.8999e-05, -5.1545e-06,  2.2496e-06,  6.4350e-05,\n","        -6.0814e-05, -1.0360e-04, -6.3497e-05, -2.5186e-05, -1.1074e-04])\n","gradient values before mask reapp. tensor([ 2.6323e-04, -8.5738e-05,  2.7207e-05,  9.5292e-06,  9.1381e-05,\n","        -5.6485e-05, -9.6940e-05, -4.4292e-05, -2.1482e-05, -5.9040e-05])\n","gradient values before mask reapp. tensor([ 2.4504e-04, -8.8277e-05, -3.1964e-06,  3.0942e-06,  6.5726e-05,\n","        -6.0375e-05, -1.0251e-04, -6.1780e-05, -2.4753e-05, -1.0665e-04])\n","gradient values before mask reapp. tensor([ 2.6195e-04, -8.5314e-05,  2.7240e-05,  9.6145e-06,  9.0751e-05,\n","        -5.6300e-05, -9.6392e-05, -4.3859e-05, -2.1444e-05, -5.8580e-05])\n","gradient values before mask reapp. tensor([ 2.4629e-04, -8.7280e-05,  1.7070e-06,  4.6717e-06,  6.9737e-05,\n","        -5.9542e-05, -1.0080e-04, -5.8289e-05, -2.3920e-05, -9.7727e-05])\n","gradient values before mask reapp. tensor([ 2.6162e-04, -8.4570e-05,  2.9380e-05,  1.0553e-05,  9.2370e-05,\n","        -5.5832e-05, -9.5233e-05, -4.1998e-05, -2.0947e-05, -5.4109e-05])\n","gradient values before mask reapp. tensor([ 2.4227e-04, -8.7301e-05, -3.0903e-06,  3.6133e-06,  6.4895e-05,\n","        -6.0008e-05, -1.0124e-04, -6.0752e-05, -2.4497e-05, -1.0506e-04])\n","gradient values before mask reapp. tensor([ 2.6145e-04, -8.3874e-05,  3.1613e-05,  1.1372e-05,  9.3911e-05,\n","        -5.5355e-05, -9.4136e-05, -4.0153e-05, -2.0513e-05, -4.9740e-05])\n","gradient values before mask reapp. tensor([ 2.4023e-04, -8.6918e-05, -4.1945e-06,  3.5994e-06,  6.3463e-05,\n","        -5.9991e-05, -1.0085e-04, -6.0928e-05, -2.4515e-05, -1.0616e-04])\n","gradient values before mask reapp. tensor([ 2.5990e-04, -8.3419e-05,  3.1349e-05,  1.1548e-05,  9.3213e-05,\n","        -5.5205e-05, -9.3566e-05, -3.9826e-05, -2.0428e-05, -4.9470e-05])\n","gradient values before mask reapp. tensor([ 2.4129e-04, -8.5944e-05,  3.4769e-07,  5.0481e-06,  6.7069e-05,\n","        -5.9204e-05, -9.9219e-05, -5.7671e-05, -2.3772e-05, -9.7891e-05])\n","gradient values before mask reapp. tensor([ 2.5624e-04, -8.3492e-05,  2.6859e-05,  1.0356e-05,  8.8429e-05,\n","        -5.5603e-05, -9.4061e-05, -4.2221e-05, -2.1060e-05, -5.6643e-05])\n","gradient values before mask reapp. tensor([ 2.4200e-04, -8.5111e-05,  4.0343e-06,  6.1573e-06,  6.9812e-05,\n","        -5.8506e-05, -9.7858e-05, -5.5030e-05, -2.3195e-05, -9.1192e-05])\n","gradient values before mask reapp. tensor([ 2.5726e-04, -8.2510e-05,  3.1389e-05,  1.1864e-05,  9.2120e-05,\n","        -5.4811e-05, -9.2404e-05, -3.8938e-05, -2.0275e-05, -4.8284e-05])\n","gradient values before mask reapp. tensor([ 2.3648e-04, -8.5428e-05, -3.5541e-06,  4.3635e-06,  6.2478e-05,\n","        -5.9352e-05, -9.8918e-05, -5.9196e-05, -2.4154e-05, -1.0318e-04])\n","gradient values before mask reapp. tensor([ 2.5656e-04, -8.1926e-05,  3.2621e-05,  1.2403e-05,  9.2759e-05,\n","        -5.4468e-05, -9.1539e-05, -3.7715e-05, -1.9986e-05, -4.5607e-05])\n","gradient values before mask reapp. tensor([ 2.3712e-04, -8.4551e-05,  1.7389e-07,  5.6078e-06,  6.5372e-05,\n","        -5.8672e-05, -9.7482e-05, -5.6446e-05, -2.3515e-05, -9.6260e-05])\n","gradient values before mask reapp. tensor([ 2.4949e-04, -8.2120e-05,  2.3064e-05,  1.0855e-05,  8.4384e-05,\n","        -5.5537e-05, -9.2618e-05, -4.2771e-05, -2.0897e-05, -5.9458e-05])\n","gradient values before mask reapp. tensor([ 2.4514e-04, -8.2477e-05,  1.6673e-05,  9.5954e-06,  7.8806e-05,\n","        -5.6313e-05, -9.3580e-05, -4.6273e-05, -2.1532e-05, -6.9280e-05])\n","gradient values before mask reapp. tensor([ 2.5136e-04, -8.1314e-05,  2.8444e-05,  1.2095e-05,  8.8433e-05,\n","        -5.4662e-05, -9.1087e-05, -3.9182e-05, -2.0168e-05, -5.0645e-05])\n","gradient values before mask reapp. tensor([ 2.3345e-04, -8.3719e-05, -1.3466e-06,  5.8556e-06,  6.3293e-05,\n","        -5.8484e-05, -9.6490e-05, -5.6321e-05, -2.3392e-05, -9.7111e-05])\n","gradient values before mask reapp. tensor([ 2.5487e-04, -7.9983e-05,  3.7196e-05,  1.4463e-05,  9.5627e-05,\n","        -5.3313e-05, -8.8648e-05, -3.3456e-05, -1.8934e-05, -3.5717e-05])\n","gradient values before mask reapp. tensor([ 2.3194e-04, -8.3230e-05, -1.4738e-06,  6.1726e-06,  6.2855e-05,\n","        -5.8339e-05, -9.5879e-05, -5.5892e-05, -2.3227e-05, -9.6477e-05])\n","gradient values before mask reapp. tensor([ 2.5221e-04, -7.9741e-05,  3.4917e-05,  1.4187e-05,  9.3255e-05,\n","        -5.3446e-05, -8.8513e-05, -3.4330e-05, -1.9065e-05, -3.8706e-05])\n","gradient values before mask reapp. tensor([ 2.3297e-04, -8.2296e-05,  2.9227e-06,  7.5665e-06,  6.6342e-05,\n","        -5.7584e-05, -9.4320e-05, -5.2754e-05, -2.2504e-05, -8.8500e-05])\n","gradient values before mask reapp. tensor([ 2.5142e-04, -7.9218e-05,  3.5846e-05,  1.4559e-05,  9.3508e-05,\n","        -5.3156e-05, -8.7773e-05, -3.3347e-05, -1.8872e-05, -3.6712e-05])\n","gradient values before mask reapp. tensor([ 2.3105e-04, -8.1910e-05,  1.9798e-06,  7.5894e-06,  6.5065e-05,\n","        -5.7549e-05, -9.3913e-05, -5.2842e-05, -2.2498e-05, -8.9376e-05])\n","gradient values before mask reapp. tensor([ 2.4337e-04, -7.9648e-05,  2.4396e-05,  1.2496e-05,  8.3471e-05,\n","        -5.4483e-05, -8.9305e-05, -3.9576e-05, -2.0030e-05, -5.3753e-05])\n","gradient values before mask reapp. tensor([ 2.4156e-04, -7.9437e-05,  2.2811e-05,  1.2721e-05,  8.2468e-05,\n","        -5.4600e-05, -8.9123e-05, -4.0072e-05, -1.9887e-05, -5.5197e-05])\n","gradient values before mask reapp. tensor([ 2.3730e-04, -7.9899e-05,  1.6211e-05,  1.0963e-05,  7.6146e-05,\n","        -5.5393e-05, -9.0287e-05, -4.3904e-05, -2.0836e-05, -6.6010e-05])\n","gradient values before mask reapp. tensor([ 2.3931e-04, -7.9081e-05,  2.1296e-05,  1.2696e-05,  8.0849e-05,\n","        -5.4614e-05, -8.8784e-05, -4.0471e-05, -1.9904e-05, -5.6787e-05])\n","gradient values before mask reapp. tensor([ 2.3973e-04, -7.9181e-05,  2.1998e-05,  1.1865e-05,  8.0036e-05,\n","        -5.4437e-05, -8.8901e-05, -4.0327e-05, -2.0305e-05, -5.7241e-05])\n","gradient values before mask reapp. tensor([ 2.3056e-04, -7.9757e-05,  8.6830e-06,  1.0543e-05,  7.0465e-05,\n","        -5.6048e-05, -9.0462e-05, -4.7151e-05, -2.0904e-05, -7.5360e-05])\n","gradient values before mask reapp. tensor([ 2.4469e-04, -7.7581e-05,  3.3359e-05,  1.4943e-05,  8.9607e-05,\n","        -5.2760e-05, -8.5911e-05, -3.3027e-05, -1.8708e-05, -3.7977e-05])\n","gradient values before mask reapp. tensor([ 2.2735e-04, -7.9658e-05,  5.1521e-06,  9.7049e-06,  6.6619e-05,\n","        -5.6339e-05, -9.0700e-05, -4.8940e-05, -2.1380e-05, -8.0789e-05])\n","gradient values before mask reapp. tensor([ 2.4443e-04, -7.6916e-05,  3.5335e-05,  1.5690e-05,  9.0943e-05,\n","        -5.2318e-05, -8.4890e-05, -3.1365e-05, -1.8317e-05, -3.4035e-05])\n","gradient values before mask reapp. tensor([ 2.2713e-04, -7.8982e-05,  7.2077e-06,  1.0446e-05,  6.7975e-05,\n","        -5.5902e-05, -8.9680e-05, -4.7255e-05, -2.1002e-05, -7.6771e-05])\n","gradient values before mask reapp. tensor([ 2.4255e-04, -7.6639e-05,  3.4144e-05,  1.5440e-05,  8.9282e-05,\n","        -5.2278e-05, -8.4646e-05, -3.1719e-05, -1.8429e-05, -3.5618e-05])\n","gradient values before mask reapp. tensor([ 2.2816e-04, -7.8100e-05,  1.1529e-05,  1.1820e-05,  7.1486e-05,\n","        -5.5178e-05, -8.8172e-05, -4.4163e-05, -2.0263e-05, -6.8939e-05])\n","gradient values before mask reapp. tensor([ 2.4098e-04, -7.6205e-05,  3.3787e-05,  1.5673e-05,  8.8655e-05,\n","        -5.2172e-05, -8.4108e-05, -3.1435e-05, -1.8305e-05, -3.5418e-05])\n","gradient values before mask reapp. tensor([ 2.2478e-04, -7.8042e-05,  7.6602e-06,  1.0911e-05,  6.7372e-05,\n","        -5.5512e-05, -8.8486e-05, -4.6156e-05, -2.0770e-05, -7.4910e-05])\n","gradient values before mask reapp. tensor([ 2.3500e-04, -7.6190e-05,  2.6147e-05,  1.4701e-05,  8.2108e-05,\n","        -5.2982e-05, -8.4776e-05, -3.5345e-05, -1.8920e-05, -4.5954e-05])\n","gradient values before mask reapp. tensor([ 2.2608e-04, -7.7100e-05,  1.2356e-05,  1.2370e-05,  7.1141e-05,\n","        -5.4689e-05, -8.6891e-05, -4.2869e-05, -2.0016e-05, -6.6464e-05])\n","gradient values before mask reapp. tensor([ 2.4071e-04, -7.4855e-05,  3.8039e-05,  1.7225e-05,  9.1560e-05,\n","        -5.1259e-05, -8.2053e-05, -2.7989e-05, -1.7507e-05, -2.7116e-05])\n","gradient values before mask reapp. tensor([ 2.2056e-04, -7.7440e-05,  4.6930e-06,  1.0592e-05,  6.3884e-05,\n","        -5.5527e-05, -8.7983e-05, -4.7092e-05, -2.0929e-05, -7.8501e-05])\n","gradient values before mask reapp. tensor([ 2.3478e-04, -7.4877e-05,  3.0453e-05,  1.6275e-05,  8.5151e-05,\n","        -5.2083e-05, -8.2728e-05, -3.1846e-05, -1.8081e-05, -3.7578e-05])\n","gradient values before mask reapp. tensor([ 2.2306e-04, -7.6271e-05,  1.1560e-05,  1.2647e-05,  6.9621e-05,\n","        -5.4442e-05, -8.5930e-05, -4.2494e-05, -1.9876e-05, -6.6432e-05])\n","gradient values before mask reapp. tensor([ 2.3840e-04, -7.3986e-05,  3.8326e-05,  1.7555e-05,  9.0742e-05,\n","        -5.0873e-05, -8.0958e-05, -2.7043e-05, -1.7338e-05, -2.5711e-05])\n","gradient values before mask reapp. tensor([ 2.2055e-04, -7.6016e-05,  9.4850e-06,  1.2427e-05,  6.7464e-05,\n","        -5.4564e-05, -8.5780e-05, -4.3273e-05, -1.9979e-05, -6.9096e-05])\n","gradient values before mask reapp. tensor([ 2.2915e-04, -7.4476e-05,  2.4972e-05,  1.5353e-05,  7.9386e-05,\n","        -5.2439e-05, -8.2744e-05, -3.4322e-05, -1.8605e-05, -4.5242e-05])\n","gradient values before mask reapp. tensor([ 2.1854e-04, -7.5775e-05,  7.9244e-06,  1.2019e-05,  6.5399e-05,\n","        -5.4554e-05, -8.5628e-05, -4.3890e-05, -2.0197e-05, -7.1364e-05])\n","gradient values before mask reapp. tensor([ 2.3990e-04, -7.2341e-05,  4.5755e-05,  1.9982e-05,  9.6652e-05,\n","        -4.9547e-05, -7.8223e-05, -2.1648e-05, -1.6052e-05, -1.2063e-05])\n","gradient values before mask reapp. tensor([ 2.1600e-04, -7.5495e-05,  5.8285e-06,  1.1916e-05,  6.3342e-05,\n","        -5.4701e-05, -8.5460e-05, -4.4656e-05, -2.0255e-05, -7.3894e-05])\n","gradient values before mask reapp. tensor([ 2.2806e-04, -7.3328e-05,  2.7630e-05,  1.6525e-05,  8.1008e-05,\n","        -5.1757e-05, -8.1058e-05, -3.1837e-05, -1.7980e-05, -3.9543e-05])\n","gradient values before mask reapp. tensor([ 2.1698e-04, -7.4651e-05,  9.8130e-06,  1.3105e-05,  6.6405e-05,\n","        -5.3980e-05, -8.4072e-05, -4.1862e-05, -1.9646e-05, -6.6751e-05])\n","gradient values before mask reapp. tensor([ 2.3516e-04, -7.1879e-05,  4.1729e-05,  1.9377e-05,  9.2238e-05,\n","        -4.9742e-05, -7.7995e-05, -2.3250e-05, -1.6363e-05, -1.7488e-05])\n","gradient values before mask reapp. tensor([ 2.1286e-04, -7.4719e-05,  4.7021e-06,  1.2084e-05,  6.1514e-05,\n","        -5.4512e-05, -8.4610e-05, -4.4517e-05, -2.0176e-05, -7.4487e-05])\n","gradient values before mask reapp. tensor([ 2.2487e-04, -7.2605e-05,  2.6320e-05,  1.6549e-05,  7.8916e-05,\n","        -5.1593e-05, -8.0287e-05, -3.1839e-05, -1.7971e-05, -4.0615e-05])\n","gradient values before mask reapp. tensor([ 2.1503e-04, -7.3666e-05,  1.0812e-05,  1.3802e-05,  6.6466e-05,\n","        -5.3504e-05, -8.2775e-05, -4.0443e-05, -1.9285e-05, -6.3861e-05])\n","gradient values before mask reapp. tensor([ 2.2622e-04, -7.1672e-05,  3.1089e-05,  1.8070e-05,  8.2889e-05,\n","        -5.0790e-05, -7.8684e-05, -2.8494e-05, -1.7168e-05, -3.1975e-05])\n","gradient values before mask reapp. tensor([ 2.2381e-04, -7.1618e-05,  2.8207e-05,  1.7942e-05,  8.0730e-05,\n","        -5.1063e-05, -7.8849e-05, -2.9853e-05, -1.7196e-05, -3.5629e-05])\n","gradient values before mask reapp. tensor([ 2.1471e-04, -7.3054e-05,  1.2470e-05,  1.3492e-05,  6.5802e-05,\n","        -5.3054e-05, -8.2110e-05, -3.9403e-05, -1.9605e-05, -6.2070e-05])\n","gradient values before mask reapp. tensor([ 2.2337e-04, -7.1009e-05,  2.9758e-05,  1.8697e-05,  8.1951e-05,\n","        -5.0695e-05, -7.7917e-05, -2.8424e-05, -1.6778e-05, -3.2218e-05])\n","gradient values before mask reapp. tensor([ 2.2099e-04, -7.1636e-05,  2.5317e-05,  1.6379e-05,  7.6331e-05,\n","        -5.1200e-05, -7.9170e-05, -3.1454e-05, -1.7990e-05, -4.1417e-05])\n","gradient values before mask reapp. tensor([ 2.0354e-04, -7.3713e-05, -3.1551e-06,  1.1220e-05,  5.3319e-05,\n","        -5.4752e-05, -8.3976e-05, -4.7515e-05, -2.0604e-05, -8.4370e-05])\n","gradient values before mask reapp. tensor([ 2.2897e-04, -6.9686e-05,  4.1680e-05,  2.0433e-05,  9.0156e-05,\n","        -4.8862e-05, -7.5292e-05, -2.1262e-05, -1.5833e-05, -1.4441e-05])\n","gradient values before mask reapp. tensor([ 2.0612e-04, -7.2579e-05,  3.7917e-06,  1.3170e-05,  5.9034e-05,\n","        -5.3703e-05, -8.1983e-05, -4.2929e-05, -1.9593e-05, -7.2403e-05])\n","gradient values before mask reapp. tensor([ 2.2283e-04, -7.0221e-05,  3.2478e-05,  1.7964e-05,  8.1106e-05,\n","        -4.9866e-05, -7.6847e-05, -2.6604e-05, -1.7154e-05, -2.9505e-05])\n","gradient values before mask reapp. tensor([ 2.0924e-04, -7.1388e-05,  1.1655e-05,  1.5318e-05,  6.5581e-05,\n","        -5.2523e-05, -7.9809e-05, -3.7786e-05, -1.8453e-05, -5.8974e-05])\n","gradient values before mask reapp. tensor([ 2.2376e-04, -6.9427e-05,  3.6414e-05,  1.9182e-05,  8.4273e-05,\n","        -4.9192e-05, -7.5479e-05, -2.3789e-05, -1.6485e-05, -2.2432e-05])\n","gradient values before mask reapp. tensor([ 2.0213e-04, -7.2116e-05,  6.3664e-07,  1.2324e-05,  5.4821e-05,\n","        -5.3792e-05, -8.1796e-05, -4.4275e-05, -2.0062e-05, -7.7161e-05])\n","gradient values before mask reapp. tensor([ 2.1807e-04, -6.9313e-05,  2.9325e-05,  1.8562e-05,  7.8488e-05,\n","        -4.9949e-05, -7.5982e-05, -2.7323e-05, -1.6931e-05, -3.1714e-05])\n","gradient values before mask reapp. tensor([ 2.0594e-04, -7.0740e-05,  9.7457e-06,  1.4871e-05,  6.2499e-05,\n","        -5.2407e-05, -7.9305e-05, -3.8375e-05, -1.8761e-05, -6.1503e-05])\n","gradient values before mask reapp. tensor([ 2.2534e-04, -6.7875e-05,  4.3617e-05,  2.1413e-05,  8.9901e-05,\n","        -4.7901e-05, -7.2905e-05, -1.8641e-05, -1.5299e-05, -9.4028e-06])\n","gradient values before mask reapp. tensor([ 2.0143e-04, -7.0907e-05,  3.8232e-06,  1.3643e-05,  5.6912e-05,\n","        -5.3049e-05, -8.0044e-05, -4.1543e-05, -1.9395e-05, -7.0598e-05])\n","gradient values before mask reapp. tensor([ 2.1728e-04, -6.8201e-05,  3.2180e-05,  1.9728e-05,  8.0268e-05,\n","        -4.9253e-05, -7.4380e-05, -2.4835e-05, -1.6293e-05, -2.5886e-05])\n","gradient values before mask reapp. tensor([ 1.8632e-04, -7.2841e-05, -2.0746e-05,  8.3257e-06,  3.5737e-05,\n","        -5.5985e-05, -8.4342e-05, -5.5545e-05, -2.2085e-05, -1.0905e-04])\n","gradient values before mask reapp. tensor([ 2.2604e-04, -6.6217e-05,  4.9495e-05,  2.3674e-05,  9.4480e-05,\n","        -4.6716e-05, -7.0458e-05, -1.4286e-05, -1.4208e-05,  2.1084e-06])\n","gradient values before mask reapp. tensor([ 1.9151e-04, -7.1317e-05, -9.4072e-06,  1.1159e-05,  4.5062e-05,\n","        -5.4321e-05, -8.1529e-05, -4.8450e-05, -2.0625e-05, -9.0226e-05])\n","gradient values before mask reapp. tensor([ 2.2636e-04, -6.5623e-05,  5.2015e-05,  2.4343e-05,  9.6164e-05,\n","        -4.6220e-05, -6.9507e-05, -1.2451e-05, -1.3827e-05,  6.5071e-06])\n","gradient values before mask reapp. tensor([ 1.9146e-04, -7.0732e-05, -7.4753e-06,  1.1707e-05,  4.6178e-05,\n","        -5.3932e-05, -8.0696e-05, -4.6995e-05, -2.0348e-05, -8.6753e-05])\n","gradient values before mask reapp. tensor([ 2.2486e-04, -6.5347e-05,  5.1310e-05,  2.4253e-05,  9.5072e-05,\n","        -4.6159e-05, -6.9226e-05, -1.2537e-05, -1.3835e-05,  5.6872e-06])\n","gradient values before mask reapp. tensor([ 1.8984e-04, -7.0412e-05, -8.3009e-06,  1.1630e-05,  4.4971e-05,\n","        -5.3906e-05, -8.0416e-05, -4.7166e-05, -2.0386e-05, -8.7670e-05])\n","gradient values before mask reapp. tensor([ 2.2687e-04, -6.4364e-05,  5.7206e-05,  2.6088e-05,  1.0017e-04,\n","        -4.5253e-05, -6.7429e-05, -8.4935e-06, -1.2823e-05,  1.6129e-05])\n","gradient values before mask reapp. tensor([ 1.8418e-04, -7.0985e-05, -1.6861e-05,  9.2067e-06,  3.6440e-05,\n","        -5.4912e-05, -8.1988e-05, -5.2208e-05, -2.1643e-05, -1.0203e-04])\n","gradient values before mask reapp. tensor([ 2.2406e-04, -6.4306e-05,  5.3993e-05,  2.5205e-05,  9.6546e-05,\n","        -4.5484e-05, -6.7715e-05, -1.0207e-05, -1.3308e-05,  1.0990e-05])\n","gradient values before mask reapp. tensor([ 1.8355e-04, -7.0498e-05, -1.5965e-05,  9.5481e-06,  3.6740e-05,\n","        -5.4632e-05, -8.1341e-05, -5.1347e-05, -2.1464e-05, -1.0012e-04])\n","gradient values before mask reapp. tensor([ 2.1707e-04, -6.4406e-05,  4.4588e-05,  2.4130e-05,  8.8919e-05,\n","        -4.6541e-05, -6.8673e-05, -1.5104e-05, -1.3977e-05, -1.8493e-06])\n","gradient values before mask reapp. tensor([ 1.8609e-04, -6.9457e-05, -9.4834e-06,  1.1271e-05,  4.1943e-05,\n","        -5.3588e-05, -7.9525e-05, -4.7147e-05, -2.0579e-05, -8.9073e-05])\n","gradient values before mask reapp. tensor([ 2.2531e-04, -6.2969e-05,  6.0083e-05,  2.6878e-05,  1.0089e-04,\n","        -4.4338e-05, -6.5576e-05, -5.9340e-06, -1.2414e-05,  2.1671e-05])\n","gradient values before mask reapp. tensor([ 1.8227e-04, -6.9558e-05, -1.4367e-05,  1.0213e-05,  3.7184e-05,\n","        -5.4098e-05, -8.0118e-05, -4.9763e-05, -2.1125e-05, -9.6648e-05])\n","gradient values before mask reapp. tensor([ 2.1441e-04, -6.3775e-05,  4.3475e-05,  2.3908e-05,  8.6676e-05,\n","        -4.6359e-05, -6.8128e-05, -1.5277e-05, -1.4121e-05, -3.1949e-06])\n","gradient values before mask reapp. tensor([ 1.7193e-04, -7.0578e-05, -3.0258e-05,  7.2214e-06,  2.3890e-05,\n","        -5.5839e-05, -8.2501e-05, -5.8476e-05, -2.2591e-05, -1.2056e-04])\n","gradient values before mask reapp. tensor([ 2.2400e-04, -6.1639e-05,  6.2296e-05,  2.8270e-05,  1.0228e-04,\n","        -4.3668e-05, -6.3882e-05, -3.8015e-06, -1.1837e-05,  2.7319e-05])\n","gradient values before mask reapp. tensor([ 1.7496e-04, -6.9500e-05, -2.2982e-05,  8.9297e-06,  2.9529e-05,\n","        -5.4747e-05, -8.0629e-05, -5.3905e-05, -2.1719e-05, -1.0861e-04])\n","gradient values before mask reapp. tensor([ 2.2798e-04, -6.0406e-05,  7.1405e-05,  3.0769e-05,  1.1010e-04,\n","        -4.2282e-05, -6.1514e-05,  2.0692e-06, -1.0442e-05,  4.2775e-05])\n","gradient values before mask reapp. tensor([ 1.7556e-04, -6.8671e-05, -1.9522e-05,  1.0253e-05,  3.2493e-05,\n","        -5.4194e-05, -7.9317e-05, -5.1363e-05, -2.1042e-05, -1.0195e-04])\n","gradient values before mask reapp. tensor([ 2.2470e-04, -6.0468e-05,  6.7562e-05,  3.0077e-05,  1.0657e-04,\n","        -4.2688e-05, -6.1868e-05,  1.8406e-07, -1.0721e-05,  3.7054e-05])\n","gradient values before mask reapp. tensor([ 1.7136e-04, -6.8919e-05, -2.5247e-05,  8.7584e-06,  2.6813e-05,\n","        -5.4825e-05, -8.0178e-05, -5.4572e-05, -2.1795e-05, -1.1124e-04])\n","gradient values before mask reapp. tensor([ 2.2035e-04, -6.0887e-05,  6.1040e-05,  2.7980e-05,  9.9680e-05,\n","        -4.3330e-05, -6.3072e-05, -3.7216e-06, -1.1781e-05,  2.5795e-05])\n","gradient values before mask reapp. tensor([ 1.7575e-04, -6.7497e-05, -1.5296e-05,  1.1422e-05,  3.5155e-05,\n","        -5.3367e-05, -7.7620e-05, -4.8280e-05, -2.0425e-05, -9.4396e-05])\n","gradient values before mask reapp. tensor([ 2.1724e-04, -6.0936e-05,  5.7384e-05,  2.7150e-05,  9.6016e-05,\n","        -4.3708e-05, -6.3436e-05, -5.5774e-06, -1.2185e-05,  2.0097e-05])\n","gradient values before mask reapp. tensor([ 1.7634e-04, -6.6821e-05, -1.2303e-05,  1.2322e-05,  3.7395e-05,\n","        -5.2818e-05, -7.6570e-05, -4.6180e-05, -1.9930e-05, -8.9056e-05])\n","gradient values before mask reapp. tensor([ 2.0822e-04, -6.1291e-05,  4.4520e-05,  2.5551e-05,  8.5794e-05,\n","        -4.5200e-05, -6.4994e-05, -1.2450e-05, -1.3112e-05,  2.2190e-06])\n","gradient values before mask reapp. tensor([ 1.7674e-04, -6.6256e-05, -9.9915e-06,  1.2803e-05,  3.8619e-05,\n","        -5.2370e-05, -7.5787e-05, -4.4633e-05, -1.9721e-05, -8.5319e-05])\n","gradient values before mask reapp. tensor([ 2.0255e-04, -6.1818e-05,  3.5810e-05,  2.3031e-05,  7.6947e-05,\n","        -4.6165e-05, -6.6565e-05, -1.7643e-05, -1.4530e-05, -1.2343e-05])\n","gradient values before mask reapp. tensor([ 1.8057e-04, -6.4932e-05, -1.1048e-06,  1.5341e-05,  4.6258e-05,\n","        -5.0959e-05, -7.3373e-05, -3.8898e-05, -1.8378e-05, -6.9951e-05])\n","gradient values before mask reapp. tensor([ 2.0522e-04, -6.0738e-05,  4.2573e-05,  2.5041e-05,  8.2769e-05,\n","        -4.5077e-05, -6.4643e-05, -1.3206e-05, -1.3440e-05, -4.8278e-07])\n","gradient values before mask reapp. tensor([ 1.7874e-04, -6.4652e-05, -2.4857e-06,  1.5268e-05,  4.4774e-05,\n","        -5.0961e-05, -7.3192e-05, -3.9411e-05, -1.8415e-05, -7.1504e-05])\n","gradient values before mask reapp. tensor([ 1.9870e-04, -6.1438e-05,  3.2343e-05,  2.2277e-05,  7.2820e-05,\n","        -4.6270e-05, -6.6523e-05, -1.9254e-05, -1.4938e-05, -1.7381e-05])\n","gradient values before mask reapp. tensor([ 1.7491e-04, -6.5032e-05, -8.1432e-06,  1.3314e-05,  3.8577e-05,\n","        -5.1554e-05, -7.4264e-05, -4.2812e-05, -1.9427e-05, -8.1528e-05])\n","gradient values before mask reapp. tensor([ 2.0408e-04, -5.9918e-05,  4.3862e-05,  2.5264e-05,  8.2592e-05,\n","        -4.4531e-05, -6.3651e-05, -1.2020e-05, -1.3344e-05,  1.9527e-06])\n","gradient values before mask reapp. tensor([ 1.6382e-04, -6.6005e-05, -2.4978e-05,  1.0822e-05,  2.5403e-05,\n","        -5.3373e-05, -7.6572e-05, -5.1805e-05, -2.0579e-05, -1.0574e-04])\n","gradient values before mask reapp. tensor([ 2.0770e-04, -5.8992e-05,  5.1596e-05,  2.6470e-05,  8.7952e-05,\n","        -4.3328e-05, -6.1916e-05, -7.3832e-06, -1.2724e-05,  1.3607e-05])\n","gradient values before mask reapp. tensor([ 1.7003e-04, -6.4341e-05, -1.2020e-05,  1.3910e-05,  3.5985e-05,\n","        -5.1510e-05, -7.3507e-05, -4.3855e-05, -1.9007e-05, -8.4499e-05])\n","gradient values before mask reapp. tensor([ 2.0846e-04, -5.8366e-05,  5.4774e-05,  2.7303e-05,  9.0313e-05,\n","        -4.2734e-05, -6.0858e-05, -5.1742e-06, -1.2222e-05,  1.9083e-05])\n","gradient values before mask reapp. tensor([ 1.7021e-04, -6.3697e-05, -9.7114e-06,  1.4602e-05,  3.7528e-05,\n","        -5.1080e-05, -7.2604e-05, -4.2205e-05, -1.8656e-05, -8.0307e-05])\n","gradient values before mask reapp. tensor([ 2.0980e-04, -5.7551e-05,  5.9145e-05,  2.8761e-05,  9.4071e-05,\n","        -4.2010e-05, -5.9486e-05, -2.1728e-06, -1.1390e-05,  2.6960e-05])\n","gradient values before mask reapp. tensor([ 1.5878e-04, -6.5305e-05, -2.8712e-05,  9.5005e-06,  1.9714e-05,\n","        -5.3488e-05, -7.6382e-05, -5.3568e-05, -2.1366e-05, -1.1178e-04])\n","gradient values before mask reapp. tensor([ 2.1354e-04, -5.6465e-05,  6.7462e-05,  3.0716e-05,  1.0079e-04,\n","        -4.0702e-05, -5.7414e-05,  3.0523e-06, -1.0307e-05,  4.0613e-05])\n","gradient values before mask reapp. tensor([ 1.5349e-04, -6.5985e-05, -3.6946e-05,  6.7611e-06,  1.1103e-05,\n","        -5.4490e-05, -7.8046e-05, -5.8531e-05, -2.2779e-05, -1.2631e-04])\n","gradient values before mask reapp. tensor([ 2.1032e-04, -5.5742e-05,  6.5063e-05,  3.1800e-05,  9.9916e-05,\n","        -4.0762e-05, -5.6723e-05,  2.4938e-06, -9.8132e-06,  4.0041e-05])\n","gradient values before mask reapp. tensor([ 1.6208e-04, -6.3644e-05, -1.9337e-05,  1.1826e-05,  2.6793e-05,\n","        -5.1896e-05, -7.3676e-05, -4.7526e-05, -2.0171e-05, -9.5921e-05])\n","gradient values before mask reapp. tensor([ 1.9431e-04, -5.8429e-05,  3.7147e-05,  2.3891e-05,  7.3496e-05,\n","        -4.4384e-05, -6.2675e-05, -1.4474e-05, -1.4009e-05, -7.2562e-06])\n","gradient values before mask reapp. tensor([ 1.6732e-04, -6.2182e-05, -8.2881e-06,  1.4515e-05,  3.5823e-05,\n","        -5.0235e-05, -7.0998e-05, -4.0712e-05, -1.8798e-05, -7.7674e-05])\n","gradient values before mask reapp. tensor([ 1.9519e-04, -5.7608e-05,  4.0656e-05,  2.5005e-05,  7.6207e-05,\n","        -4.3712e-05, -6.1434e-05, -1.2068e-05, -1.3474e-05, -7.9873e-07])\n","gradient values before mask reapp. tensor([ 1.4840e-04, -6.4715e-05, -3.9586e-05,  7.9453e-06,  9.3427e-06,\n","        -5.3973e-05, -7.6524e-05, -5.8572e-05, -2.2094e-05, -1.2637e-04])\n","gradient values before mask reapp. tensor([ 2.0926e-04, -5.4691e-05,  6.7351e-05,  3.1229e-05,  9.8653e-05,\n","        -3.9925e-05, -5.5557e-05,  4.0629e-06, -1.0238e-05,  4.2552e-05])\n","gradient values before mask reapp. tensor([ 1.4929e-04, -6.4086e-05, -3.6459e-05,  8.3304e-06,  1.0943e-05,\n","        -5.3417e-05, -7.5633e-05, -5.6652e-05, -2.1965e-05, -1.2165e-04])\n","gradient values before mask reapp. tensor([ 2.1227e-04, -5.3779e-05,  7.4235e-05,  3.2761e-05,  1.0407e-04,\n","        -3.8821e-05, -5.3835e-05,  8.3787e-06, -9.3696e-06,  5.3770e-05])\n","gradient values before mask reapp. tensor([ 1.5213e-04, -6.3391e-05, -2.9718e-05,  1.3491e-05,  2.0954e-05,\n","        -5.3331e-05, -7.4354e-05, -5.1746e-05, -1.8392e-05, -1.0789e-04])\n","gradient values before mask reapp. tensor([ 2.1529e-04, -5.2852e-05,  8.1303e-05,  3.4580e-05,  1.1007e-04,\n","        -3.7691e-05, -5.1999e-05,  1.2941e-05, -8.2716e-06,  6.5630e-05])\n","gradient values before mask reapp. tensor([ 1.4710e-04, -6.3980e-05, -3.7389e-05,  1.1433e-05,  1.3507e-05,\n","        -5.4386e-05, -7.5907e-05, -5.6289e-05, -1.9380e-05, -1.2093e-04])\n","gradient values before mask reapp. tensor([ 2.1918e-04, -5.1706e-05,  9.0071e-05,  3.6885e-05,  1.1763e-04,\n","        -3.6328e-05, -4.9739e-05,  1.8566e-05, -6.9308e-06,  8.0442e-05])\n","gradient values before mask reapp. tensor([ 1.4909e-04, -6.2918e-05, -3.1795e-05,  1.3176e-05,  1.8167e-05,\n","        -5.3440e-05, -7.4199e-05, -5.2618e-05, -1.8526e-05, -1.1085e-04])\n","gradient values before mask reapp. tensor([ 1.9799e-04, -5.4659e-05,  5.4688e-05,  3.2424e-05,  9.1038e-05,\n","        -4.1711e-05, -5.6721e-05, -1.5383e-06, -8.6750e-06,  2.7089e-05])\n","gradient values before mask reapp. tensor([ 1.4513e-04, -6.2633e-05, -3.6059e-05,  1.3347e-05,  1.5390e-05,\n","        -5.3529e-05, -7.3937e-05, -5.4244e-05, -1.8390e-05, -1.1507e-04])\n","gradient values before mask reapp. tensor([ 2.0629e-04, -5.2875e-05,  7.0793e-05,  3.6033e-05,  1.0420e-04,\n","        -3.9416e-05, -5.3206e-05,  8.1783e-06, -6.7609e-06,  5.2864e-05])\n","gradient values before mask reapp. tensor([ 1.4706e-04, -6.1933e-05, -3.1150e-05,  1.4350e-05,  1.9012e-05,\n","        -5.2801e-05, -7.2746e-05, -5.1205e-05, -1.7797e-05, -1.0732e-04])\n","gradient values before mask reapp. tensor([ 2.1513e-04, -5.0866e-05,  8.8319e-05,  4.0253e-05,  1.1908e-04,\n","        -3.6821e-05, -4.9126e-05,  1.8990e-05, -4.4803e-06,  8.1688e-05])\n","gradient values before mask reapp. tensor([ 1.4645e-04, -6.1545e-05, -3.0552e-05,  1.4511e-05,  1.8981e-05,\n","        -5.2664e-05, -7.2354e-05, -5.0693e-05, -1.7696e-05, -1.0624e-04])\n","gradient values before mask reapp. tensor([ 2.1310e-04, -5.0897e-05,  8.6139e-05,  3.9705e-05,  1.1680e-04,\n","        -3.6982e-05, -4.9342e-05,  1.7907e-05, -4.6307e-06,  7.8174e-05])\n","gradient values before mask reapp. tensor([ 1.4270e-04, -6.1812e-05, -3.5930e-05,  1.3170e-05,  1.3554e-05,\n","        -5.3357e-05, -7.3353e-05, -5.3853e-05, -1.8391e-05, -1.1525e-04])\n","gradient values before mask reapp. tensor([ 1.9733e-04, -5.2508e-05,  6.0663e-05,  3.4851e-05,  9.5113e-05,\n","        -4.0229e-05, -5.3767e-05,  3.1887e-06, -7.3561e-06,  3.9245e-05])\n","gradient values before mask reapp. tensor([ 1.5155e-04, -5.9786e-05, -1.8766e-05,  1.7238e-05,  2.7781e-05,\n","        -5.0868e-05, -6.9504e-05, -4.3504e-05, -1.6329e-05, -8.7244e-05])\n","gradient values before mask reapp. tensor([ 1.9106e-04, -5.3437e-05,  5.0403e-05,  3.2092e-05,  8.5339e-05,\n","        -4.1590e-05, -5.5940e-05, -2.9366e-06, -8.6866e-06,  2.1722e-05])\n","gradient values before mask reapp. tensor([ 1.3721e-04, -6.1413e-05, -4.1621e-05,  1.3103e-05,  9.2688e-06,\n","        -5.3443e-05, -7.3103e-05, -5.6152e-05, -1.8307e-05, -1.2142e-04])\n","gradient values before mask reapp. tensor([ 2.0866e-04, -5.0007e-05,  8.3184e-05,  3.9608e-05,  1.1295e-04,\n","        -3.6990e-05, -4.8887e-05,  1.6771e-05, -4.7497e-06,  7.4653e-05])\n","gradient values before mask reapp. tensor([ 1.4414e-04, -5.9712e-05, -2.7648e-05,  1.6326e-05,  2.0655e-05,\n","        -5.1496e-05, -6.9959e-05, -4.7717e-05, -1.6657e-05, -9.8778e-05])\n","gradient values before mask reapp. tensor([ 2.0699e-04, -5.0083e-05,  8.1493e-05,  3.8982e-05,  1.1092e-04,\n","        -3.7127e-05, -4.9112e-05,  1.5932e-05, -4.9034e-06,  7.1470e-05])\n","gradient values before mask reapp. tensor([ 1.4826e-04, -5.8450e-05, -1.8454e-05,  1.8554e-05,  2.8177e-05,\n","        -5.0151e-05, -6.7686e-05, -4.2002e-05, -1.5478e-05, -8.3559e-05])\n","gradient values before mask reapp. tensor([ 2.0258e-04, -5.0556e-05,  7.5031e-05,  3.7420e-05,  1.0500e-04,\n","        -3.7870e-05, -5.0228e-05,  1.2299e-05, -5.5554e-06,  6.1009e-05])\n","gradient values before mask reapp. tensor([ 1.4397e-04, -5.8876e-05, -2.4965e-05,  1.6848e-05,  2.1625e-05,\n","        -5.1019e-05, -6.9004e-05, -4.5896e-05, -1.6361e-05, -9.4683e-05])\n","gradient values before mask reapp. tensor([ 1.8823e-04, -5.1732e-05,  5.2460e-05,  3.3564e-05,  8.6149e-05,\n","        -4.0630e-05, -5.3803e-05, -5.1197e-07, -7.8007e-06,  2.7515e-05])\n","gradient values before mask reapp. tensor([ 1.2838e-04, -6.0781e-05, -5.0169e-05,  1.2097e-05,  1.0697e-06,\n","        -5.3906e-05, -7.3129e-05, -5.9956e-05, -1.8632e-05, -1.3280e-04])\n","gradient values before mask reapp. tensor([ 2.0677e-04, -4.8246e-05,  8.6655e-05,  4.1265e-05,  1.1488e-04,\n","        -3.5846e-05, -4.6559e-05,  1.9964e-05, -3.7438e-06,  8.2445e-05])\n","gradient values before mask reapp. tensor([ 1.3691e-04, -5.8845e-05, -3.3506e-05,  1.5844e-05,  1.4635e-05,\n","        -5.1619e-05, -6.9507e-05, -5.0002e-05, -1.6727e-05, -1.0603e-04])\n","gradient values before mask reapp. tensor([ 2.0665e-04, -4.8072e-05,  8.7622e-05,  4.1260e-05,  1.1518e-04,\n","        -3.5600e-05, -4.6237e-05,  2.0685e-05, -3.5779e-06,  8.3631e-05])\n","gradient values before mask reapp. tensor([ 1.3367e-04, -5.9212e-05, -3.8224e-05,  1.4266e-05,  9.4815e-06,\n","        -5.2330e-05, -7.0585e-05, -5.2899e-05, -1.7472e-05, -1.1476e-04])\n","gradient values before mask reapp. tensor([ 1.9578e-04, -4.8557e-05,  7.1674e-05,  3.9082e-05,  1.0245e-04,\n","        -3.7383e-05, -4.8215e-05,  1.2040e-05, -4.8785e-06,  6.1361e-05])\n","gradient values before mask reapp. tensor([ 1.3885e-04, -5.7892e-05, -2.7805e-05,  1.6676e-05,  1.7781e-05,\n","        -5.0783e-05, -6.8218e-05, -4.6627e-05, -1.6264e-05, -9.7925e-05])\n","gradient values before mask reapp. tensor([ 1.9363e-04, -4.8483e-05,  6.9162e-05,  3.8595e-05,  9.9826e-05,\n","        -3.7569e-05, -4.8461e-05,  1.0683e-05, -5.1326e-06,  5.7547e-05])\n","gradient values before mask reapp. tensor([ 1.4395e-04, -5.6658e-05, -1.7708e-05,  1.8913e-05,  2.5699e-05,\n","        -4.9298e-05, -6.6006e-05, -4.0615e-05, -1.5138e-05, -8.1832e-05])\n","gradient values before mask reapp. tensor([ 1.9138e-04, -4.8592e-05,  6.6260e-05,  3.7779e-05,  9.6770e-05,\n","        -3.7841e-05, -4.8920e-05,  9.0412e-06, -5.4717e-06,  5.2643e-05])\n","gradient values before mask reapp. tensor([ 1.1936e-04, -6.0201e-05, -5.9034e-05,  1.0321e-05, -8.7384e-06,\n","        -5.4423e-05, -7.3556e-05, -6.4323e-05, -1.9345e-05, -1.4622e-04])\n","gradient values before mask reapp. tensor([ 2.0956e-04, -4.5228e-05,  9.9697e-05,  4.5187e-05,  1.2470e-04,\n","        -3.3193e-05, -4.1911e-05,  2.9016e-05, -1.5602e-06,  1.0605e-04])\n","gradient values before mask reapp. tensor([ 1.2558e-04, -5.8634e-05, -4.6442e-05,  1.3154e-05,  1.3209e-06,\n","        -5.2698e-05, -7.0761e-05, -5.6786e-05, -1.7930e-05, -1.2600e-04])\n","gradient values before mask reapp. tensor([ 2.1042e-04, -4.4889e-05,  1.0232e-04,  4.5546e-05,  1.2637e-04,\n","        -3.2728e-05, -4.1264e-05,  3.0699e-05, -1.2255e-06,  1.0986e-04])\n","gradient values before mask reapp. tensor([ 1.2558e-04, -5.8220e-05, -4.5092e-05,  1.3397e-05,  1.8056e-06,\n","        -5.2464e-05, -7.0312e-05, -5.5923e-05, -1.7806e-05, -1.2393e-04])\n","gradient values before mask reapp. tensor([ 1.8916e-04, -4.7348e-05,  6.7343e-05,  3.8740e-05,  9.6882e-05,\n","        -3.7183e-05, -4.7456e-05,  1.0500e-05, -4.9363e-06,  5.6152e-05])\n","gradient values before mask reapp. tensor([ 1.3693e-04, -5.5810e-05, -2.3764e-05,  1.8301e-05,  1.9333e-05,\n","        -4.9452e-05, -6.5722e-05, -4.3228e-05, -1.5370e-05, -8.9560e-05])\n","gradient values before mask reapp. tensor([ 1.9153e-04, -4.6659e-05,  7.2605e-05,  3.9788e-05,  1.0078e-04,\n","        -3.6345e-05, -4.6239e-05,  1.3692e-05, -4.3359e-06,  6.4383e-05])\n","gradient values before mask reapp. tensor([ 1.2536e-04, -5.6660e-05, -4.1216e-05,  1.5850e-05,  5.8993e-06,\n","        -5.1206e-05, -6.7901e-05, -5.2517e-05, -1.6579e-05, -1.1394e-04])\n","gradient values before mask reapp. tensor([ 1.8807e-04, -4.7625e-05,  6.6338e-05,  3.7172e-05,  9.3685e-05,\n","        -3.7314e-05, -4.8156e-05,  9.5891e-06, -5.4651e-06,  5.1517e-05])\n","gradient values before mask reapp. tensor([ 1.3709e-04, -5.4268e-05, -1.8885e-05,  2.0797e-05,  2.4481e-05,\n","        -4.8118e-05, -6.3105e-05, -3.9132e-05, -1.3955e-05, -7.8088e-05])\n","gradient values before mask reapp. tensor([ 1.9509e-04, -4.6125e-05,  8.0252e-05,  4.0349e-05,  1.0543e-04,\n","        -3.5205e-05, -4.4952e-05,  1.8192e-05, -3.6393e-06,  7.4124e-05])\n","gradient values before mask reapp. tensor([ 1.3749e-04, -5.3686e-05, -1.6734e-05,  2.1337e-05,  2.5630e-05,\n","        -4.7772e-05, -6.2441e-05, -3.7797e-05, -1.3749e-05, -7.4556e-05])\n","gradient values before mask reapp. tensor([ 1.7243e-04, -4.8780e-05,  4.2801e-05,  3.3074e-05,  7.3900e-05,\n","        -3.9964e-05, -5.1601e-05, -3.4470e-06, -7.6138e-06,  1.6634e-05])\n","gradient values before mask reapp. tensor([ 1.2368e-04, -5.5372e-05, -3.9038e-05,  1.7152e-05,  7.4622e-06,\n","        -5.0269e-05, -6.6053e-05, -5.0202e-05, -1.5725e-05, -1.0823e-04])\n","gradient values before mask reapp. tensor([ 1.9114e-04, -4.5476e-05,  7.6903e-05,  4.0433e-05,  1.0229e-04,\n","        -3.5248e-05, -4.4584e-05,  1.6852e-05, -3.6718e-06,  7.0712e-05])\n","gradient values before mask reapp. tensor([ 1.2870e-04, -5.4253e-05, -2.9222e-05,  1.8927e-05,  1.4610e-05,\n","        -4.9043e-05, -6.4189e-05, -4.4612e-05, -1.4859e-05, -9.3472e-05])\n","gradient values before mask reapp. tensor([ 1.9621e-04, -4.4550e-05,  8.6755e-05,  4.2250e-05,  1.1001e-04,\n","        -3.3824e-05, -4.2576e-05,  2.2752e-05, -2.5445e-06,  8.5755e-05])\n","gradient values before mask reapp. tensor([ 1.3297e-04, -5.2955e-05, -1.9934e-05,  2.1216e-05,  2.2179e-05,\n","        -4.7673e-05, -6.1905e-05, -3.8885e-05, -1.3696e-05, -7.8050e-05])\n","gradient values before mask reapp. tensor([ 1.7023e-04, -4.7710e-05,  4.3572e-05,  3.3756e-05,  7.3700e-05,\n","        -3.9358e-05, -5.0337e-05, -2.2531e-06, -7.1534e-06,  1.9281e-05])\n","gradient values before mask reapp. tensor([ 1.4136e-04, -5.1407e-05, -4.7451e-06,  2.4273e-05,  3.4022e-05,\n","        -4.5572e-05, -5.8989e-05, -3.0159e-05, -1.2165e-05, -5.4539e-05])\n","gradient values before mask reapp. tensor([ 1.5097e-04, -4.9463e-05,  1.2917e-05,  2.8431e-05,  4.8768e-05,\n","        -4.3060e-05, -5.5172e-05, -1.9588e-05, -1.0114e-05, -2.5987e-05])\n","gradient values before mask reapp. tensor([ 1.3142e-04, -5.2432e-05, -2.0332e-05,  2.1319e-05,  2.1235e-05,\n","        -4.7276e-05, -6.1392e-05, -3.8790e-05, -1.3571e-05, -7.8002e-05])\n","gradient values before mask reapp. tensor([ 1.9802e-04, -4.2684e-05,  9.4313e-05,  4.4511e-05,  1.1548e-04,\n","        -3.2274e-05, -3.9969e-05,  2.7764e-05, -1.4422e-06,  9.9414e-05])\n","gradient values before mask reapp. tensor([ 1.2827e-04, -5.2580e-05, -2.4613e-05,  2.0158e-05,  1.6780e-05,\n","        -4.7880e-05, -6.2191e-05, -4.1364e-05, -1.4180e-05, -8.5225e-05])\n","gradient values before mask reapp. tensor([ 1.7217e-04, -4.5936e-05,  5.1133e-05,  3.5855e-05,  7.9023e-05,\n","        -3.7837e-05, -4.7849e-05,  2.6903e-06, -6.1058e-06,  3.2570e-05])\n","gradient values before mask reapp. tensor([ 1.4009e-04, -5.0230e-05, -2.7742e-06,  2.4992e-05,  3.4591e-05,\n","        -4.4823e-05, -5.7640e-05, -2.8463e-05, -1.1753e-05, -5.0447e-05])\n","gradient values before mask reapp. tensor([ 1.6697e-04, -4.6991e-05,  4.2254e-05,  3.3120e-05,  7.0605e-05,\n","        -3.8968e-05, -4.9883e-05, -2.6601e-06, -7.2462e-06,  1.6937e-05])\n","gradient values before mask reapp. tensor([ 1.1850e-04, -5.3124e-05, -3.8516e-05,  1.7920e-05,  5.2320e-06,\n","        -4.9124e-05, -6.3849e-05, -4.8720e-05, -1.5199e-05, -1.0525e-04])\n","gradient values before mask reapp. tensor([ 1.8611e-04, -4.3755e-05,  7.6875e-05,  4.0414e-05,  9.9332e-05,\n","        -3.4205e-05, -4.2878e-05,  1.7890e-05, -3.2853e-06,  7.1465e-05])\n","gradient values before mask reapp. tensor([ 1.2654e-04, -5.1188e-05, -2.2726e-05,  2.1504e-05,  1.7995e-05,\n","        -4.7006e-05, -6.0416e-05, -3.9372e-05, -1.3461e-05, -7.9769e-05])\n","gradient values before mask reapp. tensor([ 1.9944e-04, -4.1319e-05,  1.0147e-04,  4.5775e-05,  1.1982e-04,\n","        -3.0739e-05, -3.7745e-05,  3.2568e-05, -3.8570e-07,  1.1067e-04])\n","gradient values before mask reapp. tensor([ 1.1847e-04, -5.2518e-05, -3.6700e-05,  1.7783e-05,  4.6609e-06,\n","        -4.8958e-05, -6.3602e-05, -4.7980e-05, -1.5391e-05, -1.0367e-04])\n","gradient values before mask reapp. tensor([ 1.5440e-04, -4.6256e-05,  2.7200e-05,  3.2268e-05,  5.8807e-05,\n","        -4.0170e-05, -5.0449e-05, -1.0091e-05, -7.9979e-06, -1.0709e-06])\n","gradient values before mask reapp. tensor([ 1.1201e-04, -5.3024e-05, -4.6234e-05,  1.6140e-05, -2.9009e-06,\n","        -4.9838e-05, -6.4808e-05, -5.3048e-05, -1.6083e-05, -1.1743e-04])\n","gradient values before mask reapp. tensor([ 2.0580e-04, -3.8880e-05,  1.1614e-04,  4.9924e-05,  1.3199e-04,\n","        -2.8348e-05, -3.3753e-05,  4.1762e-05,  1.5749e-06,  1.3622e-04])\n","gradient values before mask reapp. tensor([ 1.0438e-04, -5.4300e-05, -5.9119e-05,  1.2462e-05, -1.5331e-05,\n","        -5.1724e-05, -6.7753e-05, -6.0917e-05, -1.7897e-05, -1.3993e-04])\n","gradient values before mask reapp. tensor([ 1.9180e-04, -3.9866e-05,  9.4530e-05,  4.6621e-05,  1.1449e-04,\n","        -3.0845e-05, -3.6844e-05,  2.9771e-05, -3.5557e-07,  1.0511e-04])\n","gradient values before mask reapp. tensor([ 8.5539e-05, -5.6746e-05, -9.0114e-05,  6.4659e-06, -4.0713e-05,\n","        -5.5372e-05, -7.3018e-05, -7.8382e-05, -2.0812e-05, -1.8719e-04])\n","gradient values before mask reapp. tensor([ 2.1404e-04, -3.6223e-05,  1.3446e-04,  5.4999e-05,  1.4773e-04,\n","        -2.5355e-05, -2.8818e-05,  5.3462e-05,  4.2228e-06,  1.6793e-04])\n","gradient values before mask reapp. tensor([ 9.7103e-05, -5.4465e-05, -6.8553e-05,  1.0874e-05, -2.3557e-05,\n","        -5.2616e-05, -6.8736e-05, -6.5835e-05, -1.8608e-05, -1.5356e-04])\n","gradient values before mask reapp. tensor([ 2.1556e-04, -3.5546e-05,  1.3866e-04,  5.6127e-05,  1.5122e-04,\n","        -2.4580e-05, -2.7571e-05,  5.6244e-05,  4.9021e-06,  1.7526e-04])\n","gradient values before mask reapp. tensor([ 9.9775e-05, -5.3825e-05, -6.3151e-05,  1.1776e-05, -2.0025e-05,\n","        -5.1861e-05, -6.7728e-05, -6.2769e-05, -1.8160e-05, -1.4575e-04])\n","gradient values before mask reapp. tensor([ 1.8220e-04, -4.0390e-05,  8.1624e-05,  4.3827e-05,  1.0252e-04,\n","        -3.2132e-05, -3.8614e-05,  2.2770e-05, -1.5363e-06,  8.5036e-05])\n","gradient values before mask reapp. tensor([ 8.4793e-05, -5.5574e-05, -8.7129e-05,  7.3417e-06, -3.9343e-05,\n","        -5.4597e-05, -7.1527e-05, -7.6065e-05, -2.0258e-05, -1.8165e-04])\n","gradient values before mask reapp. tensor([ 2.0999e-04, -3.5749e-05,  1.3143e-04,  5.4501e-05,  1.4416e-04,\n","        -2.5302e-05, -2.8537e-05,  5.2316e-05,  4.1810e-06,  1.6381e-04])\n","gradient values before mask reapp. tensor([ 9.0163e-05, -5.4071e-05, -7.6061e-05,  9.9243e-06, -3.0593e-05,\n","        -5.3093e-05, -6.9020e-05, -6.9474e-05, -1.9049e-05, -1.6369e-04])\n","gradient values before mask reapp. tensor([ 1.9051e-04, -3.8051e-05,  9.9196e-05,  4.8112e-05,  1.1679e-04,\n","        -2.9434e-05, -3.4339e-05,  3.3611e-05,  6.8712e-07,  1.1404e-04])\n","gradient values before mask reapp. tensor([ 7.3909e-05, -5.6058e-05, -1.0250e-04,  4.9829e-06, -5.2121e-05,\n","        -5.6126e-05, -7.3350e-05, -8.4254e-05, -2.1451e-05, -2.0360e-04])\n","gradient values before mask reapp. tensor([ 2.1421e-04, -3.4083e-05,  1.4181e-04,  5.7153e-05,  1.5232e-04,\n","        -2.3601e-05, -2.5734e-05,  5.8880e-05,  5.5598e-06,  1.8131e-04])\n","gradient values before mask reapp. tensor([ 8.7597e-05, -5.3380e-05, -7.7121e-05,  1.0336e-05, -3.1582e-05,\n","        -5.2818e-05, -6.8223e-05, -6.9397e-05, -1.8762e-05, -1.6363e-04])\n","gradient values before mask reapp. tensor([ 2.1592e-04, -3.4081e-05,  1.4517e-04,  5.7138e-05,  1.5444e-04,\n","        -2.3050e-05, -2.5264e-05,  6.0883e-05,  5.9191e-06,  1.8520e-04])\n","gradient values before mask reapp. tensor([ 8.7763e-05, -5.3409e-05, -7.6761e-05,  9.8398e-06, -3.2537e-05,\n","        -5.2798e-05, -6.8520e-05, -6.9557e-05, -1.8995e-05, -1.6437e-04])\n","gradient values before mask reapp. tensor([ 1.3084e-04, -4.4792e-05,  2.6109e-06,  2.9825e-05,  3.7388e-05,\n","        -4.1288e-05, -5.0496e-05, -2.1114e-05, -8.7769e-06, -3.2195e-05])\n","gradient values before mask reapp. tensor([ 1.7164e-04, -4.0958e-05,  6.8565e-05,  3.9544e-05,  8.7782e-05,\n","        -3.3481e-05, -4.0855e-05,  1.5310e-05, -3.2274e-06,  6.1653e-05])\n","gradient values before mask reapp. tensor([ 1.2633e-04, -4.5076e-05, -4.0717e-06,  2.8257e-05,  3.0849e-05,\n","        -4.2222e-05, -5.1747e-05, -2.5137e-05, -9.6871e-06, -4.3072e-05])\n","gradient values before mask reapp. tensor([ 1.4746e-04, -4.4062e-05,  2.7955e-05,  3.1226e-05,  5.3188e-05,\n","        -3.8777e-05, -4.8409e-05, -8.4050e-06, -7.7316e-06, -1.6647e-06])\n","gradient values before mask reapp. tensor([ 1.0938e-04, -4.7082e-05, -3.1511e-05,  2.3230e-05,  8.6791e-06,\n","        -4.5365e-05, -5.6158e-05, -4.0424e-05, -1.2137e-05, -8.4203e-05])\n","gradient values before mask reapp. tensor([ 1.7402e-04, -3.9730e-05,  7.5479e-05,  4.1271e-05,  9.2901e-05,\n","        -3.2258e-05, -3.8849e-05,  1.9794e-05, -2.2737e-06,  7.3246e-05])\n","gradient values before mask reapp. tensor([ 1.2040e-04, -4.4901e-05, -1.0969e-05,  2.7455e-05,  2.5031e-05,\n","        -4.2719e-05, -5.2070e-05, -2.8473e-05, -1.0029e-05, -5.2113e-05])\n","gradient values before mask reapp. tensor([ 1.4738e-04, -4.3101e-05,  3.0914e-05,  3.2315e-05,  5.5305e-05,\n","        -3.8023e-05, -4.6993e-05, -6.0975e-06, -7.0991e-06,  4.2452e-06])\n","gradient values before mask reapp. tensor([ 1.4073e-04, -4.1357e-05,  2.5030e-05,  3.5216e-05,  5.4500e-05,\n","        -3.7807e-05, -4.4980e-05, -7.5303e-06, -6.1510e-06,  4.7557e-06])\n","gradient values before mask reapp. tensor([ 8.4054e-05, -5.1447e-05, -7.5407e-05,  1.1434e-05, -3.1854e-05,\n","        -5.1492e-05, -6.5917e-05, -6.7147e-05, -1.7971e-05, -1.5863e-04])\n","gradient values before mask reapp. tensor([ 2.1557e-04, -3.0876e-05,  1.5356e-04,  6.0460e-05,  1.5995e-04,\n","        -2.0903e-05, -2.1215e-05,  6.7090e-05,  7.4515e-06,  2.0237e-04])\n","gradient values before mask reapp. tensor([ 7.9101e-05, -5.1871e-05, -8.3068e-05,  9.5077e-06, -3.9401e-05,\n","        -5.2613e-05, -6.7490e-05, -7.1861e-05, -1.9077e-05, -1.7138e-04])\n","gradient values before mask reapp. tensor([ 1.9324e-04, -3.3606e-05,  1.1635e-04,  5.3107e-05,  1.2853e-04,\n","        -2.5653e-05, -2.7930e-05,  4.5522e-05,  3.4527e-06,  1.4497e-04])\n","gradient values before mask reapp. tensor([ 5.8618e-05, -5.4512e-05, -1.1674e-04,  3.0520e-06, -6.6803e-05,\n","        -5.6594e-05, -7.3164e-05, -9.0802e-05, -2.2218e-05, -2.2251e-04])\n","gradient values before mask reapp. tensor([ 2.2043e-04, -2.9329e-05,  1.6473e-04,  6.3161e-05,  1.6889e-04,\n","        -1.9033e-05, -1.8313e-05,  7.4182e-05,  8.9866e-06,  2.2087e-04])\n","gradient values before mask reapp. tensor([ 7.2647e-05, -5.1834e-05, -9.1024e-05,  8.3941e-06, -4.6264e-05,\n","        -5.3293e-05, -6.8102e-05, -7.5872e-05, -1.9591e-05, -1.8237e-04])\n","gradient values before mask reapp. tensor([ 1.7878e-04, -3.5479e-05,  9.2888e-05,  4.7546e-05,  1.0729e-04,\n","        -2.8689e-05, -3.2494e-05,  3.1705e-05,  6.8045e-07,  1.0687e-04])\n","gradient values before mask reapp. tensor([ 7.5351e-05, -5.0435e-05, -8.3512e-05,  1.1411e-05, -3.8404e-05,\n","        -5.1630e-05, -6.5235e-05, -7.0334e-05, -1.7906e-05, -1.6703e-04])\n","gradient values before mask reapp. tensor([ 1.9965e-04, -3.2372e-05,  1.2986e-04,  5.4780e-05,  1.3771e-04,\n","        -2.3701e-05, -2.5389e-05,  5.3445e-05,  4.7736e-06,  1.6400e-04])\n","gradient values before mask reapp. tensor([ 8.5418e-05, -4.8797e-05, -6.5605e-05,  1.4441e-05, -2.5013e-05,\n","        -4.9489e-05, -6.2203e-05, -6.0343e-05, -1.6391e-05, -1.4060e-04])\n","gradient values before mask reapp. tensor([ 1.9081e-04, -3.2263e-05,  1.1782e-04,  5.4202e-05,  1.2913e-04,\n","        -2.4673e-05, -2.6096e-05,  4.7481e-05,  4.2485e-06,  1.4954e-04])\n","gradient values before mask reapp. tensor([ 9.3127e-05, -4.7906e-05, -5.2774e-05,  1.6252e-05, -1.5749e-05,\n","        -4.7818e-05, -6.0303e-05, -5.3353e-05, -1.5368e-05, -1.2244e-04])\n","gradient values before mask reapp. tensor([ 1.2197e-04, -4.1138e-05,  2.5152e-06,  3.1873e-05,  3.4884e-05,\n","        -3.9258e-05, -4.6430e-05, -1.8640e-05, -7.4703e-06, -2.6406e-05])\n","gradient values before mask reapp. tensor([ 1.7444e-04, -3.6619e-05,  8.6726e-05,  4.3641e-05,  9.8888e-05,\n","        -2.9437e-05, -3.4504e-05,  2.7701e-05, -5.4162e-07,  9.2074e-05])\n","gradient values before mask reapp. tensor([ 1.0320e-04, -4.4408e-05, -3.0941e-05,  2.3123e-05,  3.9863e-06,\n","        -4.4236e-05, -5.4149e-05, -3.9400e-05, -1.2136e-05, -8.2924e-05])\n","gradient values before mask reapp. tensor([ 1.2817e-04, -4.1093e-05,  1.1696e-05,  3.1088e-05,  3.8526e-05,\n","        -3.8686e-05, -4.6486e-05, -1.4779e-05, -7.7596e-06, -1.8261e-05])\n","gradient values before mask reapp. tensor([ 9.0946e-05, -4.6344e-05, -5.1611e-05,  1.8272e-05, -1.3588e-05,\n","        -4.6779e-05, -5.8119e-05, -5.1404e-05, -1.4358e-05, -1.1598e-04])\n","gradient values before mask reapp. tensor([ 1.9637e-04, -3.1850e-05,  1.2846e-04,  5.3632e-05,  1.3428e-04,\n","        -2.3309e-05, -2.5081e-05,  5.2979e-05,  4.5956e-06,  1.6059e-04])\n","gradient values before mask reapp. tensor([ 1.1381e-04, -4.2430e-05, -1.1241e-05,  2.6905e-05,  1.9294e-05,\n","        -4.1370e-05, -5.0288e-05, -2.7972e-05, -1.0066e-05, -5.2560e-05])\n","gradient values before mask reapp. tensor([ 1.4410e-04, -3.9670e-05,  3.8440e-05,  3.4163e-05,  5.7652e-05,\n","        -3.5331e-05, -4.2652e-05,  1.0297e-07, -5.5981e-06,  1.7960e-05])\n","gradient values before mask reapp. tensor([ 9.1438e-05, -4.5335e-05, -4.7893e-05,  1.9695e-05, -1.0480e-05,\n","        -4.5843e-05, -5.6532e-05, -4.8665e-05, -1.3543e-05, -1.0836e-04])\n","gradient values before mask reapp. tensor([ 1.7690e-04, -3.4780e-05,  9.6229e-05,  4.5920e-05,  1.0587e-04,\n","        -2.7473e-05, -3.1371e-05,  3.4238e-05,  9.6205e-07,  1.0813e-04])\n","gradient values before mask reapp. tensor([ 1.1524e-04, -4.1211e-05, -5.6242e-06,  2.8790e-05,  2.4080e-05,\n","        -4.0187e-05, -4.8239e-05, -2.4024e-05, -8.9960e-06, -4.1811e-05])\n","gradient values before mask reapp. tensor([ 9.6918e-05, -4.5306e-05, -3.9209e-05,  1.9090e-05, -6.6884e-06,\n","        -4.5112e-05, -5.6188e-05, -4.4427e-05, -1.3554e-05, -1.0059e-04])\n","gradient values before mask reapp. tensor([ 1.1672e-04, -3.9939e-05, -3.5953e-07,  3.0973e-05,  2.9535e-05,\n","        -3.9023e-05, -4.6034e-05, -2.0128e-05, -7.8757e-06, -3.0708e-05])\n","gradient values before mask reapp. tensor([ 1.4829e-04, -3.7539e-05,  4.9880e-05,  3.7280e-05,  6.6592e-05,\n","        -3.3264e-05, -3.9263e-05,  7.4667e-06, -4.0170e-06,  3.7795e-05])\n","gradient values before mask reapp. tensor([ 9.2145e-05, -4.3437e-05, -4.1725e-05,  2.2700e-05, -4.5782e-06,\n","        -4.4024e-05, -5.3408e-05, -4.3689e-05, -1.1938e-05, -9.4538e-05])\n","gradient values before mask reapp. tensor([ 1.7912e-04, -3.2938e-05,  1.0426e-04,  4.8274e-05,  1.1180e-04,\n","        -2.5910e-05, -2.8677e-05,  3.9580e-05,  2.1134e-06,  1.2242e-04])\n","gradient values before mask reapp. tensor([ 1.1039e-04, -3.9988e-05, -8.4694e-06,  2.9703e-05,  2.2244e-05,\n","        -3.9798e-05, -4.6855e-05, -2.4371e-05, -8.5194e-06, -4.2394e-05])\n","gradient values before mask reapp. tensor([ 1.4301e-04, -3.7899e-05,  4.2992e-05,  3.5657e-05,  6.0135e-05,\n","        -3.3917e-05, -4.0170e-05,  3.8539e-06, -4.5829e-06,  2.6853e-05])\n","gradient values before mask reapp. tensor([ 9.0489e-05, -4.2640e-05, -4.1381e-05,  2.3352e-05, -4.5895e-06,\n","        -4.3673e-05, -5.2453e-05, -4.2894e-05, -1.1589e-05, -9.2539e-05])\n","gradient values before mask reapp. tensor([ 1.6902e-04, -3.3828e-05,  8.9428e-05,  4.5338e-05,  9.9115e-05,\n","        -2.7517e-05, -3.0849e-05,  3.1497e-05,  8.2931e-07,  9.9876e-05])\n","gradient values before mask reapp. tensor([ 1.1906e-04, -3.7935e-05,  9.0516e-06,  3.3609e-05,  3.6226e-05,\n","        -3.7191e-05, -4.2889e-05, -1.3706e-05, -6.4010e-06, -1.4343e-05])\n","gradient values before mask reapp. tensor([ 9.2844e-05, -4.3173e-05, -3.8246e-05,  2.1009e-05, -6.1535e-06,\n","        -4.4002e-05, -5.3550e-05, -4.2265e-05, -1.2556e-05, -9.4661e-05])\n","gradient values before mask reapp. tensor([ 1.2046e-04, -3.6887e-05,  1.3505e-05,  3.5444e-05,  4.0765e-05,\n","        -3.6141e-05, -4.1092e-05, -1.0500e-05, -5.4665e-06, -4.9681e-06])\n","gradient values before mask reapp. tensor([ 1.7535e-04, -3.2183e-05,  1.0267e-04,  4.8100e-05,  1.0946e-04,\n","        -2.5480e-05, -2.7817e-05,  3.9523e-05,  2.3598e-06,  1.2086e-04])\n","gradient values before mask reapp. tensor([ 1.1718e-04, -3.7708e-05,  7.2431e-06,  3.3077e-05,  3.3573e-05,\n","        -3.7172e-05, -4.3072e-05, -1.4822e-05, -6.6910e-06, -1.7408e-05])\n","gradient values before mask reapp. tensor([ 5.0643e-05, -4.8918e-05, -1.0873e-04,  6.2891e-06, -6.5119e-05,\n","        -5.2896e-05, -6.6410e-05, -8.2905e-05, -1.9958e-05, -2.0442e-04])\n","gradient values before mask reapp. tensor([ 2.1578e-04, -2.4037e-05,  1.7632e-04,  6.6246e-05,  1.7268e-04,\n","        -1.4980e-05, -1.1846e-05,  8.3350e-05,  1.1250e-05,  2.4267e-04])\n","gradient values before mask reapp. tensor([ 6.9200e-05, -4.6257e-05, -7.7086e-05,  1.1662e-05, -4.1333e-05,\n","        -4.9174e-05, -6.1308e-05, -6.5397e-05, -1.7357e-05, -1.5805e-04])\n","gradient values before mask reapp. tensor([ 1.2458e-04, -3.7024e-05,  1.9686e-05,  3.3647e-05,  4.0980e-05,\n","        -3.5781e-05, -4.1810e-05, -8.5407e-06, -6.1969e-06, -2.2484e-06])\n","gradient values before mask reapp. tensor([ 7.0786e-05, -4.5562e-05, -7.2843e-05,  1.3043e-05, -3.6831e-05,\n","        -4.8129e-05, -5.9792e-05, -6.2413e-05, -1.6427e-05, -1.4954e-04])\n","gradient values before mask reapp. tensor([ 1.8432e-04, -2.8129e-05,  1.2339e-04,  5.4790e-05,  1.2682e-04,\n","        -2.1934e-05, -2.2000e-05,  5.2099e-05,  5.0820e-06,  1.5899e-04])\n","gradient values before mask reapp. tensor([ 3.9788e-05, -5.0581e-05, -1.2612e-04,  1.3106e-06, -8.1540e-05,\n","        -5.4928e-05, -7.0030e-05, -9.3258e-05, -2.2071e-05, -2.3400e-04])\n","gradient values before mask reapp. tensor([ 2.1785e-04, -2.3106e-05,  1.8274e-04,  6.6895e-05,  1.7654e-04,\n","        -1.3867e-05, -1.0302e-05,  8.7304e-05,  1.1894e-05,  2.5171e-04])\n","gradient values before mask reapp. tensor([ 7.4172e-05, -4.4688e-05, -6.5252e-05,  1.4301e-05, -3.1749e-05,\n","        -4.6951e-05, -5.8151e-05, -5.7786e-05, -1.5618e-05, -1.3849e-04])\n","gradient values before mask reapp. tensor([ 1.7909e-04, -2.8433e-05,  1.1674e-04,  5.3591e-05,  1.2118e-04,\n","        -2.2371e-05, -2.2590e-05,  4.8900e-05,  4.7959e-06,  1.4929e-04])\n","gradient values before mask reapp. tensor([ 4.3482e-05, -4.8806e-05, -1.1629e-04,  4.0580e-06, -7.3711e-05,\n","        -5.3418e-05, -6.7208e-05, -8.6962e-05, -2.0750e-05, -2.1696e-04])\n","gradient values before mask reapp. tensor([ 2.1123e-04, -2.4048e-05,  1.7293e-04,  6.4350e-05,  1.6767e-04,\n","        -1.4875e-05, -1.1974e-05,  8.1961e-05,  1.1036e-05,  2.3558e-04])\n","gradient values before mask reapp. tensor([ 7.2533e-05, -4.4263e-05, -6.5755e-05,  1.4306e-05, -3.2997e-05,\n","        -4.6810e-05, -5.7768e-05, -5.7754e-05, -1.5555e-05, -1.3900e-04])\n","gradient values before mask reapp. tensor([ 8.5713e-05, -4.0089e-05, -3.8598e-05,  2.3882e-05, -5.9019e-06,\n","        -4.2031e-05, -4.9733e-05, -4.0066e-05, -1.0884e-05, -8.6930e-05])\n","gradient values before mask reapp. tensor([ 1.5684e-04, -3.1099e-05,  8.1218e-05,  4.5335e-05,  8.9328e-05,\n","        -2.7145e-05, -2.9186e-05,  2.8366e-05,  6.0196e-07,  9.1622e-05])\n","gradient values before mask reapp. tensor([ 6.0306e-05, -4.3724e-05, -8.1280e-05,  1.5053e-05, -4.1397e-05,\n","        -4.7396e-05, -5.7500e-05, -6.4526e-05, -1.5242e-05, -1.5336e-04])\n","gradient values before mask reapp. tensor([ 1.9938e-04, -2.5084e-05,  1.5538e-04,  6.0118e-05,  1.5106e-04,\n","        -1.7168e-05, -1.5005e-05,  7.2004e-05,  8.9098e-06,  2.0659e-04])\n","gradient values before mask reapp. tensor([ 8.0230e-05, -4.0377e-05, -4.6289e-05,  2.1917e-05, -1.4003e-05,\n","        -4.3085e-05, -5.1174e-05, -4.4672e-05, -1.1971e-05, -9.9916e-05])\n","gradient values before mask reapp. tensor([ 1.4873e-04, -3.3239e-05,  6.7210e-05,  4.0479e-05,  7.5924e-05,\n","        -2.8942e-05, -3.2597e-05,  2.0078e-05, -1.0960e-06,  6.5837e-05])\n","gradient values before mask reapp. tensor([ 6.6704e-05, -4.1733e-05, -6.7191e-05,  1.8131e-05, -3.0700e-05,\n","        -4.5587e-05, -5.4289e-05, -5.6126e-05, -1.3769e-05, -1.3086e-04])\n","gradient values before mask reapp. tensor([ 1.8998e-04, -2.6545e-05,  1.4075e-04,  5.6638e-05,  1.3857e-04,\n","        -1.8679e-05, -1.7486e-05,  6.4042e-05,  7.7015e-06,  1.8317e-04])\n","gradient values before mask reapp. tensor([ 7.8544e-05, -4.0943e-05, -4.8809e-05,  1.9686e-05, -1.8760e-05,\n","        -4.3721e-05, -5.2498e-05, -4.6776e-05, -1.2880e-05, -1.0758e-04])\n","gradient values before mask reapp. tensor([ 3.5119e-05, -4.8307e-05, -1.2400e-04,  2.3020e-06, -8.2167e-05,\n","        -5.3707e-05, -6.7345e-05, -9.0504e-05, -2.1212e-05, -2.2857e-04])\n","gradient values before mask reapp. tensor([ 1.7656e-04, -2.6179e-05,  1.2109e-04,  5.4983e-05,  1.2255e-04,\n","        -2.0994e-05, -1.9826e-05,  5.2636e-05,  5.7339e-06,  1.5791e-04])\n","gradient values before mask reapp. tensor([ 3.7386e-05, -4.7139e-05, -1.1767e-04,  4.8275e-06, -7.5721e-05,\n","        -5.2329e-05, -6.4946e-05, -8.5826e-05, -1.9811e-05, -2.1583e-04])\n","gradient values before mask reapp. tensor([ 2.2606e-04, -1.9059e-05,  2.0747e-04,  7.2512e-05,  1.9477e-04,\n","        -9.3216e-06, -3.1444e-06,  1.0357e-04,  1.5500e-05,  2.9244e-04])\n","gradient values before mask reapp. tensor([ 5.1076e-05, -4.4661e-05, -9.3273e-05,  9.6794e-06, -5.6876e-05,\n","        -4.9335e-05, -6.0485e-05, -7.2004e-05, -1.7575e-05, -1.7851e-04])\n","gradient values before mask reapp. tensor([ 9.7716e-05, -3.5472e-05, -8.4611e-06,  3.1360e-05,  1.8231e-05,\n","        -3.6907e-05, -4.1436e-05, -2.0670e-05, -6.6242e-06, -3.6225e-05])\n","gradient values before mask reapp. tensor([ 1.9212e-04, -2.4906e-05,  1.4875e-04,  5.8029e-05,  1.4329e-04,\n","        -1.7372e-05, -1.5327e-05,  6.8922e-05,  8.4748e-06,  1.9553e-04])\n","gradient values before mask reapp. tensor([ 6.9903e-05, -4.1136e-05, -5.9566e-05,  1.7383e-05, -2.8978e-05,\n","        -4.4571e-05, -5.3685e-05, -5.2422e-05, -1.3784e-05, -1.2409e-04])\n","gradient values before mask reapp. tensor([ 7.0950e-05, -3.9642e-05, -5.4040e-05,  2.0083e-05, -2.2407e-05,\n","        -4.3368e-05, -5.0891e-05, -4.7790e-05, -1.2356e-05, -1.1161e-04])\n","gradient values before mask reapp. tensor([ 1.6996e-04, -2.5826e-05,  1.1421e-04,  5.3829e-05,  1.1575e-04,\n","        -2.1312e-05, -2.0086e-05,  4.9328e-05,  5.3078e-06,  1.4813e-04])\n","gradient values before mask reapp. tensor([ 3.6097e-05, -4.5696e-05, -1.1474e-04,  6.3628e-06, -7.3568e-05,\n","        -5.1147e-05, -6.2867e-05, -8.3048e-05, -1.8853e-05, -2.0877e-04])\n","gradient values before mask reapp. tensor([ 2.2322e-04, -1.8095e-05,  2.0734e-04,  7.2839e-05,  1.9373e-04,\n","        -8.7478e-06, -2.0248e-06,  1.0431e-04,  1.5877e-05,  2.9339e-04])\n","gradient values before mask reapp. tensor([ 5.6338e-05, -4.2201e-05, -7.8997e-05,  1.3636e-05, -4.5405e-05,\n","        -4.6673e-05, -5.6238e-05, -6.2594e-05, -1.5402e-05, -1.5379e-04])\n","gradient values before mask reapp. tensor([ 7.3939e-05, -3.8275e-05, -4.6195e-05,  2.2271e-05, -1.6046e-05,\n","        -4.1933e-05, -4.8729e-05, -4.2959e-05, -1.1187e-05, -9.7509e-05])\n","gradient values before mask reapp. tensor([ 1.4547e-04, -3.0168e-05,  7.2708e-05,  4.2644e-05,  7.8052e-05,\n","        -2.7048e-05, -2.8929e-05,  2.4850e-05,  1.6517e-07,  7.7534e-05])\n","gradient values before mask reapp. tensor([ 3.6695e-05, -4.4444e-05, -1.1060e-04,  8.1968e-06, -6.9902e-05,\n","        -5.0114e-05, -6.1143e-05, -8.0222e-05, -1.7941e-05, -1.9949e-04])\n","gradient values before mask reapp. tensor([ 2.1878e-04, -1.8852e-05,  2.0166e-04,  6.9944e-05,  1.8666e-04,\n","        -9.6275e-06, -3.4022e-06,  1.0113e-04,  1.4913e-05,  2.8070e-04])\n","gradient values before mask reapp. tensor([ 6.9274e-05, -3.9127e-05, -5.3522e-05,  1.9879e-05, -2.3962e-05,\n","        -4.2838e-05, -5.0444e-05, -4.7295e-05, -1.2163e-05, -1.1124e-04])\n","gradient values before mask reapp. tensor([ 6.6875e-05, -3.8774e-05, -5.4960e-05,  2.0150e-05, -2.3998e-05,\n","        -4.2760e-05, -4.9632e-05, -4.7088e-05, -1.1786e-05, -1.1181e-04])\n","gradient values before mask reapp. tensor([ 1.7036e-04, -2.4491e-05,  1.2023e-04,  5.4688e-05,  1.1869e-04,\n","        -2.0129e-05, -1.8119e-05,  5.3488e-05,  6.1286e-06,  1.5703e-04])\n","gradient values before mask reapp. tensor([ 1.8411e-05, -4.6688e-05, -1.3891e-04,  1.7923e-06, -9.4517e-05,\n","        -5.3626e-05, -6.5944e-05, -9.5888e-05, -2.0809e-05, -2.4497e-04])\n","gradient values before mask reapp. tensor([ 2.4416e-04, -1.3331e-05,  2.4970e-04,  8.1898e-05,  2.2769e-04,\n","        -2.6084e-06,  7.3916e-06,  1.3009e-04,  2.0950e-05,  3.6055e-04])\n","gradient values before mask reapp. tensor([ 3.7074e-05, -4.3895e-05, -1.0665e-04,  7.3432e-06, -7.0263e-05,\n","        -4.9949e-05, -6.0637e-05, -7.7915e-05, -1.8149e-05, -1.9764e-04])\n","gradient values before mask reapp. tensor([ 1.0012e-04, -3.1447e-05,  7.7005e-06,  3.6289e-05,  3.0192e-05,\n","        -3.3517e-05, -3.5294e-05, -9.1044e-06, -3.7609e-06, -6.7036e-06])\n","gradient values before mask reapp. tensor([ 1.4668e-04, -2.7396e-05,  8.2972e-05,  4.6536e-05,  8.6671e-05,\n","        -2.4857e-05, -2.4506e-05,  3.2693e-05,  2.3065e-06,  9.7790e-05])\n","gradient values before mask reapp. tensor([ 4.3119e-05, -4.0642e-05, -9.1214e-05,  1.4549e-05, -5.3288e-05,\n","        -4.6577e-05, -5.4749e-05, -6.7010e-05, -1.4673e-05, -1.6377e-04])\n","gradient values before mask reapp. tensor([ 2.0622e-04, -1.9471e-05,  1.8553e-04,  6.6102e-05,  1.7124e-04,\n","        -1.1450e-05, -5.6454e-06,  9.2433e-05,  1.3338e-05,  2.5486e-04])\n","gradient values before mask reapp. tensor([ 4.9033e-05, -4.1499e-05, -8.4319e-05,  1.2357e-05, -5.2121e-05,\n","        -4.6590e-05, -5.6055e-05, -6.4917e-05, -1.5515e-05, -1.6146e-04])\n","gradient values before mask reapp. tensor([ 4.8808e-05, -4.0805e-05, -8.1785e-05,  1.3116e-05, -4.9212e-05,\n","        -4.6187e-05, -5.4608e-05, -6.2499e-05, -1.4884e-05, -1.5649e-04])\n","gradient values before mask reapp. tensor([ 1.7389e-04, -2.2873e-05,  1.3130e-04,  5.6571e-05,  1.2608e-04,\n","        -1.8203e-05, -1.5224e-05,  6.0636e-05,  7.5786e-06,  1.7382e-04])\n","gradient values before mask reapp. tensor([ 1.4683e-05, -4.5670e-05, -1.3920e-04,  1.5573e-06, -9.6350e-05,\n","        -5.3358e-05, -6.4901e-05, -9.5261e-05, -2.0596e-05, -2.4512e-04])\n","gradient values before mask reapp. tensor([ 2.4593e-04, -1.2440e-05,  2.5696e-04,  8.2440e-05,  2.3166e-04,\n","        -1.2112e-06,  9.2083e-06,  1.3487e-04,  2.1903e-05,  3.7024e-04])\n","gradient values before mask reapp. tensor([ 4.1839e-05, -4.1752e-05, -9.2650e-05,  1.0307e-05, -5.9866e-05,\n","        -4.7558e-05, -5.6760e-05, -6.8747e-05, -1.6184e-05, -1.7515e-04])\n","gradient values before mask reapp. tensor([ 8.2496e-05, -3.3514e-05, -1.8937e-05,  2.9387e-05,  5.1225e-06,\n","        -3.6843e-05, -4.0323e-05, -2.4513e-05, -6.8465e-06, -5.1009e-05])\n","gradient values before mask reapp. tensor([ 1.6087e-04, -2.3766e-05,  1.1345e-04,  5.3141e-05,  1.1112e-04,\n","        -2.0211e-05, -1.7308e-05,  5.1634e-05,  6.1910e-06,  1.4655e-04])\n","gradient values before mask reapp. tensor([ 3.3298e-05, -4.0808e-05, -1.0291e-04,  1.1696e-05, -6.4907e-05,\n","        -4.7848e-05, -5.6220e-05, -7.3339e-05, -1.5841e-05, -1.8233e-04])\n","gradient values before mask reapp. tensor([ 2.3031e-04, -1.4352e-05,  2.3256e-04,  7.6479e-05,  2.0992e-04,\n","        -4.5095e-06,  4.6582e-06,  1.2077e-04,  1.9089e-05,  3.3056e-04])\n","gradient values before mask reapp. tensor([ 1.4158e-05, -4.7094e-05, -1.4213e-04, -2.7859e-06, -1.0450e-04,\n","        -5.4396e-05, -6.8005e-05, -9.8989e-05, -2.2528e-05, -2.5833e-04])\n","gradient values before mask reapp. tensor([ 8.2107e-05, -3.3241e-05, -1.7333e-05,  2.8851e-05,  5.1637e-06,\n","        -3.6569e-05, -3.9896e-05, -2.3382e-05, -6.7802e-06, -5.0062e-05])\n","gradient values before mask reapp. tensor([ 1.3542e-04, -2.9256e-05,  6.7201e-05,  4.0170e-05,  6.9147e-05,\n","        -2.6607e-05, -2.8216e-05,  2.3235e-05,  1.9746e-07,  6.7424e-05])\n","gradient values before mask reapp. tensor([ 6.4051e-05, -3.4768e-05, -4.5133e-05,  2.4781e-05, -1.6079e-05,\n","        -3.9674e-05, -4.3585e-05, -3.8306e-05, -8.8438e-06, -8.9309e-05])\n","gradient values before mask reapp. tensor([ 1.4759e-04, -2.6019e-05,  9.1469e-05,  4.7037e-05,  9.0547e-05,\n","        -2.2995e-05, -2.2104e-05,  3.8390e-05,  3.5061e-06,  1.0931e-04])\n","gradient values before mask reapp. tensor([ 1.2090e-04, -2.6595e-05,  5.2090e-05,  4.4125e-05,  6.2869e-05,\n","        -2.6937e-05, -2.5715e-05,  1.7900e-05,  1.1894e-06,  5.9919e-05])\n","gradient values before mask reapp. tensor([ 3.7004e-05, -4.0539e-05, -9.5151e-05,  1.0706e-05, -6.2312e-05,\n","        -4.6979e-05, -5.5635e-05, -6.9310e-05, -1.5827e-05, -1.7599e-04])\n","gradient values before mask reapp. tensor([ 2.0177e-04, -1.5694e-05,  1.8966e-04,  7.0491e-05,  1.7487e-04,\n","        -9.1118e-06, -9.4256e-07,  9.7217e-05,  1.5336e-05,  2.6976e-04])\n","gradient values before mask reapp. tensor([-2.7703e-05, -5.1442e-05, -2.0826e-04, -1.5165e-05, -1.5842e-04,\n","        -6.2286e-05, -7.8568e-05, -1.3609e-04, -2.8714e-05, -3.5741e-04])\n","gradient values before mask reapp. tensor([ 2.9640e-04, -1.9063e-06,  3.5344e-04,  1.0482e-04,  3.1278e-04,\n","         1.3148e-05,  3.0725e-05,  1.9343e-04,  3.3940e-05,  5.2717e-04])\n","gradient values before mask reapp. tensor([-6.4611e-05, -6.1659e-05, -2.7976e-04, -3.8141e-05, -2.2607e-04,\n","        -7.3303e-05, -9.7476e-05, -1.8079e-04, -3.9210e-05, -4.8794e-04])\n","gradient values before mask reapp. tensor([ 1.7316e-04, -1.4652e-05,  1.5095e-04,  7.0759e-05,  1.5026e-04,\n","        -1.2049e-05, -2.2966e-06,  7.8438e-05,  1.4320e-05,  2.2841e-04])\n","gradient values before mask reapp. tensor([ 1.5677e-05, -4.5966e-05, -1.3393e-04, -3.0293e-06, -1.0120e-04,\n","        -5.3242e-05, -6.6094e-05, -9.3633e-05, -2.1961e-05, -2.4955e-04])\n","gradient values before mask reapp. tensor([ 1.7872e-04, -1.3507e-05,  1.6157e-04,  7.3236e-05,  1.5926e-04,\n","        -1.0394e-05,  7.2010e-08,  8.4880e-05,  1.5689e-05,  2.4579e-04])\n","gradient values before mask reapp. tensor([ 8.8629e-05, -3.6002e-05, -9.3279e-06,  2.1203e-05,  7.4203e-07,\n","        -3.6959e-05, -4.3334e-05, -2.1469e-05, -8.9049e-06, -5.8696e-05])\n","gradient values before mask reapp. tensor([ 9.3187e-05, -2.7734e-05,  1.1793e-05,  3.9045e-05,  3.1456e-05,\n","        -3.0895e-05, -3.0460e-05, -3.8767e-06, -1.6771e-06,  5.3304e-06])\n","gradient values before mask reapp. tensor([ 8.6277e-05, -3.6527e-05, -1.3053e-05,  1.9948e-05, -2.7880e-06,\n","        -3.7374e-05, -4.4156e-05, -2.3608e-05, -9.2906e-06, -6.5358e-05])\n","gradient values before mask reapp. tensor([ 1.0802e-04, -2.4154e-05,  4.1070e-05,  4.7504e-05,  5.8549e-05,\n","        -2.6156e-05, -2.2809e-05,  1.4900e-05,  2.8067e-06,  5.6660e-05])\n","gradient values before mask reapp. tensor([ 1.3765e-04, -3.1085e-05,  7.3727e-05,  3.4897e-05,  6.8347e-05,\n","        -2.6024e-05, -2.9042e-05,  2.6872e-05,  1.9626e-08,  6.4271e-05])\n","gradient values before mask reapp. tensor([ 1.3728e-04, -2.1603e-05,  8.8354e-05,  5.4119e-05,  9.3867e-05,\n","        -2.0551e-05, -1.6075e-05,  4.1091e-05,  6.7100e-06,  1.2257e-04])\n","gradient values before mask reapp. tensor([-4.7008e-05, -5.4628e-05, -2.3793e-04, -2.5093e-05, -1.8841e-04,\n","        -6.6587e-05, -8.5188e-05, -1.5351e-04, -3.2842e-05, -4.1218e-04])\n","gradient values before mask reapp. tensor([ 2.2632e-04, -5.5043e-06,  2.4792e-04,  9.1549e-05,  2.3047e-04,\n","         1.6533e-06,  1.7630e-05,  1.3645e-04,  2.5700e-05,  3.8125e-04])\n","gradient values before mask reapp. tensor([-3.7924e-05, -5.1506e-05, -2.1895e-04, -1.8953e-05, -1.7133e-04,\n","        -6.3651e-05, -8.0034e-05, -1.4169e-04, -3.0200e-05, -3.7768e-04])\n","gradient values before mask reapp. tensor([ 2.7551e-04, -1.3735e-06,  3.2731e-04,  1.0256e-04,  2.9147e-04,\n","         1.1115e-05,  2.9103e-05,  1.8047e-04,  3.2508e-05,  4.9328e-04])\n","gradient values before mask reapp. tensor([-9.5093e-05, -6.2031e-05, -3.1992e-04, -4.3165e-05, -2.5775e-04,\n","        -7.7366e-05, -1.0107e-04, -2.0131e-04, -4.1808e-05, -5.4224e-04])\n","gradient values before mask reapp. tensor([2.8621e-04, 1.8396e-06, 3.4972e-04, 1.0982e-04, 3.1251e-04, 1.4828e-05,\n","        3.5475e-05, 1.9516e-04, 3.6140e-05, 5.3405e-04])\n","gradient values before mask reapp. tensor([-7.8244e-05, -5.8010e-05, -2.8715e-04, -3.4306e-05, -2.2870e-04,\n","        -7.2604e-05, -9.3138e-05, -1.8103e-04, -3.7386e-05, -4.8627e-04])\n","gradient values before mask reapp. tensor([2.7458e-04, 2.4956e-08, 3.3024e-04, 1.0530e-04, 2.9554e-04, 1.2205e-05,\n","        3.1633e-05, 1.8383e-04, 3.3967e-05, 5.0252e-04])\n","gradient values before mask reapp. tensor([-8.7205e-05, -5.9043e-05, -3.0080e-04, -3.6839e-05, -2.3963e-04,\n","        -7.4149e-05, -9.5103e-05, -1.8823e-04, -3.8421e-05, -5.0687e-04])\n","gradient values before mask reapp. tensor([3.4692e-04, 8.8640e-06, 4.5380e-04, 1.2836e-04, 3.9768e-04, 2.8495e-05,\n","        5.4088e-05, 2.5603e-04, 4.7449e-05, 6.9052e-04])\n","gradient values before mask reapp. tensor([-8.0466e-05, -6.1043e-05, -2.9468e-04, -4.0685e-05, -2.4028e-04,\n","        -7.4419e-05, -9.7614e-05, -1.8701e-04, -3.9674e-05, -5.0937e-04])\n","gradient values before mask reapp. tensor([ 1.5716e-04, -1.4863e-05,  1.3394e-04,  6.7631e-05,  1.3467e-04,\n","        -1.2964e-05, -3.1133e-06,  7.1047e-05,  1.3892e-05,  2.0323e-04])\n","gradient values before mask reapp. tensor([-7.1239e-05, -5.5594e-05, -2.7043e-04, -3.0045e-05, -2.1457e-04,\n","        -6.9982e-05, -8.8649e-05, -1.7026e-04, -3.5010e-05, -4.5805e-04])\n","gradient values before mask reapp. tensor([3.5256e-04, 1.0471e-05, 4.6563e-04, 1.3075e-04, 4.0653e-04, 3.0070e-05,\n","        5.6574e-05, 2.6289e-04, 4.8565e-05, 7.0889e-04])\n","gradient values before mask reapp. tensor([-7.7446e-05, -6.0145e-05, -2.8780e-04, -3.9784e-05, -2.3597e-04,\n","        -7.3521e-05, -9.6293e-05, -1.8303e-04, -3.9190e-05, -4.9997e-04])\n","gradient values before mask reapp. tensor([ 1.7238e-04, -1.2148e-05,  1.6164e-04,  7.2987e-05,  1.5637e-04,\n","        -9.3015e-06,  2.1251e-06,  8.7058e-05,  1.6642e-05,  2.4547e-04])\n","gradient values before mask reapp. tensor([-7.6655e-05, -5.7232e-05, -2.8042e-04, -3.4320e-05, -2.2545e-04,\n","        -7.1550e-05, -9.1766e-05, -1.7683e-04, -3.6784e-05, -4.7850e-04])\n","gradient values before mask reapp. tensor([2.9705e-04, 5.6069e-06, 3.7573e-04, 1.1607e-04, 3.3307e-04, 1.8900e-05,\n","        4.2134e-05, 2.1165e-04, 3.9563e-05, 5.7653e-04])\n","gradient values before mask reapp. tensor([-9.6265e-05, -6.0253e-05, -3.1306e-04, -4.1638e-05, -2.5300e-04,\n","        -7.5890e-05, -9.7900e-05, -1.9546e-04, -4.0216e-05, -5.3062e-04])\n","gradient values before mask reapp. tensor([2.9865e-04, 5.6570e-06, 3.7904e-04, 1.1619e-04, 3.3512e-04, 1.9286e-05,\n","        4.2616e-05, 2.1369e-04, 3.9900e-05, 5.8037e-04])\n","gradient values before mask reapp. tensor([-1.2039e-04, -6.3478e-05, -3.5307e-04, -4.9418e-05, -2.8577e-04,\n","        -8.0888e-05, -1.0491e-04, -2.1819e-04, -4.4105e-05, -5.9185e-04])\n","gradient values before mask reapp. tensor([3.6973e-04, 1.3413e-05, 4.9901e-04, 1.3685e-04, 4.3289e-04, 3.4638e-05,\n","        6.3258e-05, 2.8305e-04, 5.2416e-05, 7.5927e-04])\n","gradient values before mask reapp. tensor([-8.8165e-05, -6.1463e-05, -3.0254e-04, -4.3995e-05, -2.4989e-04,\n","        -7.5436e-05, -9.8933e-05, -1.9101e-04, -4.0671e-05, -5.2543e-04])\n","gradient values before mask reapp. tensor([ 1.4687e-04, -1.4986e-05,  1.2217e-04,  6.4493e-05,  1.2220e-04,\n","        -1.4408e-05, -4.7657e-06,  6.4721e-05,  1.2544e-05,  1.8318e-04])\n","gradient values before mask reapp. tensor([-7.7724e-05, -5.6167e-05, -2.7681e-04, -3.3348e-05, -2.2281e-04,\n","        -7.0773e-05, -8.9911e-05, -1.7353e-04, -3.5836e-05, -4.7214e-04])\n","gradient values before mask reapp. tensor([3.2546e-04, 1.0580e-05, 4.2930e-04, 1.2729e-04, 3.7741e-04, 2.6488e-05,\n","        5.3376e-05, 2.4422e-04, 4.6097e-05, 6.6044e-04])\n","gradient values before mask reapp. tensor([-1.1247e-04, -6.0986e-05, -3.3560e-04, -4.5176e-05, -2.7183e-04,\n","        -7.8418e-05, -1.0076e-04, -2.0754e-04, -4.2025e-05, -5.6323e-04])\n","gradient values before mask reapp. tensor([3.4839e-04, 9.4996e-06, 4.6367e-04, 1.2637e-04, 4.0025e-04, 2.9388e-05,\n","        5.5464e-05, 2.6218e-04, 4.7815e-05, 6.9735e-04])\n","gradient values before mask reapp. tensor([-6.1405e-05, -5.5541e-05, -2.5181e-04, -3.1725e-05, -2.0739e-04,\n","        -6.8269e-05, -8.7705e-05, -1.6054e-04, -3.4655e-05, -4.4247e-04])\n","gradient values before mask reapp. tensor([ 9.4221e-05, -2.4123e-05,  3.0430e-05,  4.0926e-05,  4.0358e-05,\n","        -2.7662e-05, -2.4700e-05,  9.4454e-06,  7.7222e-07,  3.0061e-05])\n","gradient values before mask reapp. tensor([ 3.7110e-05, -3.8997e-05, -7.8302e-05,  6.7430e-06, -6.0965e-05,\n","        -4.4714e-05, -5.2761e-05, -5.8279e-05, -1.5025e-05, -1.6579e-04])\n","gradient values before mask reapp. tensor([ 1.6120e-04, -1.2430e-05,  1.4927e-04,  6.8561e-05,  1.4201e-04,\n","        -1.0999e-05,  6.6510e-08,  8.0210e-05,  1.4869e-05,  2.2223e-04])\n","gradient values before mask reapp. tensor([ 4.2609e-05, -3.7161e-05, -6.7157e-05,  1.0090e-05, -5.1472e-05,\n","        -4.3052e-05, -4.9954e-05, -5.1598e-05, -1.3690e-05, -1.4618e-04])\n","gradient values before mask reapp. tensor([ 1.4443e-04, -1.5513e-05,  1.1889e-04,  6.0948e-05,  1.1505e-04,\n","        -1.5186e-05, -6.7226e-06,  6.1584e-05,  1.0960e-05,  1.7199e-04])\n","gradient values before mask reapp. tensor([ 6.9802e-05, -3.1800e-05, -1.8823e-05,  2.2132e-05, -1.0189e-05,\n","        -3.6119e-05, -3.9716e-05, -2.3176e-05, -8.0336e-06, -6.6310e-05])\n","gradient values before mask reapp. tensor([ 1.0088e-04, -2.4291e-05,  3.9127e-05,  4.0089e-05,  4.4273e-05,\n","        -2.6613e-05, -2.4996e-05,  1.2755e-05,  5.8021e-07,  3.8155e-05])\n","gradient values before mask reapp. tensor([ 5.3921e-05, -3.6396e-05, -4.9827e-05,  1.1387e-05, -4.0089e-05,\n","        -4.0983e-05, -4.8241e-05, -4.2848e-05, -1.2868e-05, -1.2425e-04])\n","gradient values before mask reapp. tensor([ 1.1555e-04, -2.0923e-05,  6.6504e-05,  4.7317e-05,  6.8154e-05,\n","        -2.2513e-05, -1.8647e-05,  2.9289e-05,  4.0191e-06,  8.4465e-05])\n","gradient values before mask reapp. tensor([ 1.2774e-04, -2.7238e-05,  7.5910e-05,  3.5014e-05,  6.4164e-05,\n","        -2.4277e-05, -2.5251e-05,  3.0566e-05,  8.0982e-07,  6.7659e-05])\n","gradient values before mask reapp. tensor([ 8.0638e-05, -2.6117e-05,  7.2625e-06,  3.5370e-05,  1.9824e-05,\n","        -2.9912e-05, -2.9371e-05, -4.5665e-06, -1.8159e-06, -6.8658e-06])\n","gradient values before mask reapp. tensor([ 1.1771e-04, -2.7073e-05,  6.1761e-05,  3.4217e-05,  5.3553e-05,\n","        -2.5800e-05, -2.6436e-05,  2.3123e-05, -1.5383e-07,  5.0134e-05])\n","gradient values before mask reapp. tensor([ 6.0384e-05, -2.9009e-05, -2.6624e-05,  2.8263e-05, -8.2115e-06,\n","        -3.4279e-05, -3.5553e-05, -2.4028e-05, -5.2982e-06, -5.9545e-05])\n","gradient values before mask reapp. tensor([ 1.5685e-04, -1.9738e-05,  1.3128e-04,  5.1648e-05,  1.1391e-04,\n","        -1.5730e-05, -1.1529e-05,  6.4440e-05,  8.4199e-06,  1.6560e-04])\n","gradient values before mask reapp. tensor([ 2.8489e-05, -3.4764e-05, -8.3258e-05,  1.4315e-05, -5.7504e-05,\n","        -4.2239e-05, -4.7717e-05, -5.8080e-05, -1.2251e-05, -1.5245e-04])\n","gradient values before mask reapp. tensor([ 1.3410e-04, -2.4117e-05,  9.0531e-05,  4.1649e-05,  7.8778e-05,\n","        -2.1143e-05, -2.0184e-05,  4.0204e-05,  3.6731e-06,  9.8837e-05])\n","gradient values before mask reapp. tensor([ 5.1592e-05, -3.0142e-05, -4.0458e-05,  2.5371e-05, -1.9199e-05,\n","        -3.5790e-05, -3.7761e-05, -3.1747e-05, -6.4365e-06, -8.0182e-05])\n","gradient values before mask reapp. tensor([ 1.9270e-04, -1.8366e-05,  1.8924e-04,  5.7251e-05,  1.5858e-04,\n","        -8.7440e-06, -3.5794e-06,  9.7366e-05,  1.3748e-05,  2.4326e-04])\n","gradient values before mask reapp. tensor([ 8.5562e-05, -2.6079e-05,  1.5970e-05,  3.5255e-05,  2.4549e-05,\n","        -2.8614e-05, -2.8358e-05,  3.9512e-07, -1.1924e-06,  2.4706e-06])\n","gradient values before mask reapp. tensor([-4.9885e-05, -5.0152e-05, -2.2328e-04, -2.3143e-05, -1.8261e-04,\n","        -6.2638e-05, -7.9115e-05, -1.4252e-04, -3.0410e-05, -3.8986e-04])\n","gradient values before mask reapp. tensor([ 2.1593e-04, -3.4688e-06,  2.4702e-04,  8.8111e-05,  2.2110e-04,\n","         3.1276e-06,  1.9248e-05,  1.3748e-04,  2.5636e-05,  3.7413e-04])\n","gradient values before mask reapp. tensor([-6.6531e-05, -5.2638e-05, -2.5122e-04, -3.0223e-05, -2.0760e-04,\n","        -6.6715e-05, -8.4845e-05, -1.5905e-04, -3.4011e-05, -4.3644e-04])\n","gradient values before mask reapp. tensor([2.5434e-04, 3.4534e-06, 3.1564e-04, 1.0421e-04, 2.7959e-04, 1.2807e-05,\n","        3.3680e-05, 1.7843e-04, 3.3779e-05, 4.8517e-04])\n","gradient values before mask reapp. tensor([-9.1528e-05, -5.8049e-05, -2.9737e-04, -4.2533e-05, -2.4856e-04,\n","        -7.3136e-05, -9.5551e-05, -1.8721e-04, -3.9876e-05, -5.1445e-04])\n","gradient values before mask reapp. tensor([2.4790e-04, 1.8531e-06, 3.0300e-04, 9.9381e-05, 2.6590e-04, 1.0426e-05,\n","        2.9653e-05, 1.6957e-04, 3.1173e-05, 4.6042e-04])\n","gradient values before mask reapp. tensor([-1.9788e-04, -7.5969e-05, -4.8203e-04, -8.3033e-05, -4.0163e-04,\n","        -9.6976e-05, -1.3131e-04, -2.9414e-04, -5.9272e-05, -8.0659e-04])\n","gradient values before mask reapp. tensor([4.6243e-04, 3.4229e-05, 6.7815e-04, 1.7937e-04, 5.8364e-04, 6.1361e-05,\n","        1.0396e-04, 3.9188e-04, 7.4513e-05, 1.0523e-03])\n","gradient values before mask reapp. tensor([-1.3991e-04, -6.5677e-05, -3.7951e-04, -6.1418e-05, -3.1935e-04,\n","        -8.4411e-05, -1.1183e-04, -2.3507e-04, -4.9225e-05, -6.4737e-04])\n","gradient values before mask reapp. tensor([2.9041e-04, 9.6712e-06, 3.8192e-04, 1.1892e-04, 3.3540e-04, 2.2248e-05,\n","        4.7653e-05, 2.1863e-04, 4.1941e-05, 5.9048e-04])\n","gradient values before mask reapp. tensor([-2.0759e-04, -7.4805e-05, -4.9271e-04, -8.2213e-05, -4.0892e-04,\n","        -9.8031e-05, -1.3106e-04, -2.9901e-04, -5.9487e-05, -8.1673e-04])\n","gradient values before mask reapp. tensor([4.2131e-04, 2.5874e-05, 6.0452e-04, 1.5979e-04, 5.1797e-04, 5.0781e-05,\n","        8.7219e-05, 3.4739e-04, 6.5222e-05, 9.2776e-04])\n","gradient values before mask reapp. tensor([-1.5763e-04, -6.9446e-05, -4.1035e-04, -7.0297e-05, -3.4756e-04,\n","        -8.8867e-05, -1.1894e-04, -2.5346e-04, -5.3103e-05, -7.0117e-04])\n","gradient values before mask reapp. tensor([2.6700e-04, 4.8524e-06, 3.3990e-04, 1.0684e-04, 2.9652e-04, 1.5756e-05,\n","        3.7409e-05, 1.9250e-04, 3.6051e-05, 5.1747e-04])\n","gradient values before mask reapp. tensor([-2.2264e-04, -7.8446e-05, -5.1907e-04, -9.0649e-05, -4.3303e-04,\n","        -1.0198e-04, -1.3746e-04, -3.1477e-04, -6.2876e-05, -8.6408e-04])\n","gradient values before mask reapp. tensor([4.8106e-04, 3.6703e-05, 7.1330e-04, 1.8584e-04, 6.1252e-04, 6.6408e-05,\n","        1.1093e-04, 4.1349e-04, 7.9038e-05, 1.1055e-03])\n","gradient values before mask reapp. tensor([-1.6699e-04, -6.9390e-05, -4.2219e-04, -7.1523e-05, -3.5708e-04,\n","        -9.0284e-05, -1.1991e-04, -2.5936e-04, -5.3880e-05, -7.1720e-04])\n","gradient values before mask reapp. tensor([2.5505e-04, 2.7961e-06, 3.2044e-04, 1.0196e-04, 2.7945e-04, 1.3217e-05,\n","        3.3503e-05, 1.8139e-04, 3.4020e-05, 4.8517e-04])\n","gradient values before mask reapp. tensor([-2.1178e-04, -7.5498e-05, -4.9657e-04, -8.4782e-05, -4.1397e-04,\n","        -9.8817e-05, -1.3209e-04, -3.0097e-04, -5.9965e-05, -8.2620e-04])\n","gradient values before mask reapp. tensor([4.2896e-04, 2.6623e-05, 6.1994e-04, 1.6115e-04, 5.2888e-04, 5.2653e-05,\n","        8.9571e-05, 3.5646e-04, 6.6778e-05, 9.4794e-04])\n","gradient values before mask reapp. tensor([-1.8148e-04, -7.3163e-05, -4.4808e-04, -8.0132e-05, -3.8146e-04,\n","        -9.4091e-05, -1.2641e-04, -2.7494e-04, -5.7329e-05, -7.6475e-04])\n","gradient values before mask reapp. tensor([ 1.9816e-04, -2.0906e-06,  2.2961e-04,  8.8738e-05,  2.0942e-04,\n","         2.7785e-06,  2.0189e-05,  1.3077e-04,  2.6425e-05,  3.5697e-04])\n","gradient values before mask reapp. tensor([ 4.4360e-05, -3.8732e-05, -5.5530e-05,  2.5869e-06, -5.2614e-05,\n","        -4.1739e-05, -5.0188e-05, -4.4617e-05, -1.3774e-05, -1.4834e-04])\n","gradient values before mask reapp. tensor([ 7.6267e-05, -2.3208e-05,  1.4716e-05,  3.8907e-05,  2.6014e-05,\n","        -2.6695e-05, -2.4148e-05,  3.3188e-06,  1.4478e-06,  1.0267e-05])\n","gradient values before mask reapp. tensor([ 9.9373e-05, -2.9609e-05,  4.1010e-05,  2.4811e-05,  2.9865e-05,\n","        -2.8199e-05, -3.0503e-05,  1.2522e-05, -2.3184e-06,  7.4481e-06])\n","gradient values before mask reapp. tensor([ 6.2934e-05, -2.5043e-05, -7.3881e-06,  3.3840e-05,  6.6381e-06,\n","        -2.9795e-05, -2.8448e-05, -9.6707e-06, -1.1562e-06, -2.5235e-05])\n","gradient values before mask reapp. tensor([ 5.0008e-05, -3.7377e-05, -4.4270e-05,  6.2514e-06, -4.2117e-05,\n","        -3.9483e-05, -4.7123e-05, -3.7310e-05, -1.1714e-05, -1.2766e-04])\n","gradient values before mask reapp. tensor([ 1.1622e-04, -1.4958e-05,  8.9899e-05,  5.7919e-05,  9.2154e-05,\n","        -1.5727e-05, -6.7519e-06,  4.9585e-05,  1.1376e-05,  1.3579e-04])\n","gradient values before mask reapp. tensor([ 2.1904e-05, -4.2295e-05, -9.1970e-05, -6.2438e-06, -8.4356e-05,\n","        -4.6580e-05, -5.7098e-05, -6.5233e-05, -1.7625e-05, -2.0807e-04])\n","gradient values before mask reapp. tensor([ 8.7315e-05, -1.9210e-05,  4.1244e-05,  4.7408e-05,  5.1146e-05,\n","        -2.2263e-05, -1.5976e-05,  2.1376e-05,  6.1229e-06,  5.9110e-05])\n","gradient values before mask reapp. tensor([ 1.3481e-04, -2.7706e-05,  1.0141e-04,  3.0952e-05,  7.6156e-05,\n","        -2.1102e-05, -2.1452e-05,  4.7783e-05,  3.4852e-06,  8.8405e-05])\n","gradient values before mask reapp. tensor([ 1.3828e-04, -1.2643e-05,  1.2769e-04,  6.3138e-05,  1.1931e-04,\n","        -1.1347e-05, -8.4789e-07,  7.1323e-05,  1.4530e-05,  1.8724e-04])\n","gradient values before mask reapp. tensor([-1.1503e-04, -5.8850e-05, -3.2054e-04, -4.8512e-05, -2.7031e-04,\n","        -7.5732e-05, -9.6989e-05, -1.9666e-04, -4.0725e-05, -5.5269e-04])\n","gradient values before mask reapp. tensor([2.5306e-04, 5.3003e-06, 3.2685e-04, 1.0443e-04, 2.8357e-04, 1.4558e-05,\n","        3.6968e-05, 1.8694e-04, 3.5509e-05, 4.9768e-04])\n","gradient values before mask reapp. tensor([-1.3136e-04, -6.1650e-05, -3.4967e-04, -5.5591e-05, -2.9590e-04,\n","        -7.9648e-05, -1.0326e-04, -2.1429e-04, -4.4384e-05, -6.0052e-04])\n","gradient values before mask reapp. tensor([2.7142e-04, 7.3435e-06, 3.5819e-04, 1.0857e-04, 3.0715e-04, 1.8153e-05,\n","        4.1876e-05, 2.0465e-04, 3.8049e-05, 5.4137e-04])\n","gradient values before mask reapp. tensor([-2.1721e-04, -7.5185e-05, -4.9754e-04, -8.6082e-05, -4.1653e-04,\n","        -9.8188e-05, -1.3082e-04, -2.9944e-04, -5.9214e-05, -8.2975e-04])\n","gradient values before mask reapp. tensor([4.6653e-04, 3.5930e-05, 6.9741e-04, 1.7970e-04, 5.9370e-04, 6.4040e-05,\n","        1.0811e-04, 4.0494e-04, 7.6825e-05, 1.0742e-03])\n","gradient values before mask reapp. tensor([-1.6290e-04, -6.6726e-05, -4.0387e-04, -6.8457e-05, -3.4358e-04,\n","        -8.7165e-05, -1.1443e-04, -2.4636e-04, -5.0904e-05, -6.8928e-04])\n","gradient values before mask reapp. tensor([2.5507e-04, 3.7194e-06, 3.2891e-04, 1.0031e-04, 2.8091e-04, 1.4050e-05,\n","        3.5036e-05, 1.8698e-04, 3.4405e-05, 4.9096e-04])\n","gradient values before mask reapp. tensor([-2.1519e-04, -7.4115e-05, -4.9203e-04, -8.4662e-05, -4.1228e-04,\n","        -9.7510e-05, -1.2948e-04, -2.9625e-04, -5.8632e-05, -8.2026e-04])\n","gradient values before mask reapp. tensor([4.1289e-04, 2.5242e-05, 6.0080e-04, 1.5462e-04, 5.0843e-04, 5.0313e-05,\n","        8.6409e-05, 3.4647e-04, 6.4715e-05, 9.1261e-04])\n","gradient values before mask reapp. tensor([-1.4140e-04, -6.4284e-05, -3.6716e-04, -6.2839e-05, -3.1566e-04,\n","        -8.2621e-05, -1.0849e-04, -2.2545e-04, -4.7552e-05, -6.3682e-04])\n","gradient values before mask reapp. tensor([ 1.6211e-04, -6.9896e-06,  1.7438e-04,  7.3303e-05,  1.5722e-04,\n","        -4.8912e-06,  8.9994e-06,  9.8657e-05,  1.9577e-05,  2.6204e-04])\n","gradient values before mask reapp. tensor([-1.4586e-06, -4.0350e-05, -1.2055e-04, -7.3420e-06, -1.0732e-04,\n","        -4.9249e-05, -5.8652e-05, -8.0158e-05, -1.9652e-05, -2.4228e-04])\n","gradient values before mask reapp. tensor([ 9.8974e-05, -1.9233e-05,  6.1442e-05,  4.3386e-05,  5.6801e-05,\n","        -2.1405e-05, -1.6237e-05,  3.0479e-05,  4.9205e-06,  7.1368e-05])\n","gradient values before mask reapp. tensor([ 6.3938e-05, -2.9458e-05, -6.1624e-06,  1.8126e-05, -1.0906e-05,\n","        -3.3601e-05, -3.5800e-05, -1.3049e-05, -6.7645e-06, -5.9613e-05])\n","gradient values before mask reapp. tensor([-4.4666e-05, -4.2907e-05, -1.8842e-04, -1.2633e-05, -1.5248e-04,\n","        -5.5080e-05, -6.5910e-05, -1.1636e-04, -2.2885e-05, -3.2559e-04])\n","gradient values before mask reapp. tensor([2.9516e-04, 4.7051e-06, 3.9419e-04, 1.0257e-04, 3.2690e-04, 2.0533e-05,\n","        4.1972e-05, 2.2228e-04, 3.8566e-05, 5.7050e-04])\n","gradient values before mask reapp. tensor([-1.9093e-05, -4.0401e-05, -1.4856e-04, -8.2530e-06, -1.2651e-04,\n","        -5.1277e-05, -6.1516e-05, -9.5923e-05, -2.1212e-05, -2.7398e-04])\n","gradient values before mask reapp. tensor([ 1.2490e-04, -1.8977e-05,  1.0018e-04,  4.3349e-05,  8.0289e-05,\n","        -1.8269e-05, -1.3915e-05,  4.9588e-05,  5.8834e-06,  1.1387e-04])\n","gradient values before mask reapp. tensor([-9.1122e-05, -5.0958e-05, -2.7089e-04, -3.2412e-05, -2.2389e-04,\n","        -6.6396e-05, -8.3379e-05, -1.6599e-04, -3.2925e-05, -4.5958e-04])\n","gradient values before mask reapp. tensor([2.7124e-04, 4.9629e-06, 3.5714e-04, 1.0108e-04, 2.9952e-04, 1.7181e-05,\n","        3.8267e-05, 2.0183e-04, 3.5905e-05, 5.2572e-04])\n","gradient values before mask reapp. tensor([-1.4764e-04, -6.1911e-05, -3.7136e-04, -5.8325e-05, -3.1217e-04,\n","        -8.0651e-05, -1.0516e-04, -2.2572e-04, -4.5326e-05, -6.2800e-04])\n","gradient values before mask reapp. tensor([3.1822e-04, 1.3583e-05, 4.4170e-04, 1.2216e-04, 3.7350e-04, 2.9662e-05,\n","        5.6982e-05, 2.5325e-04, 4.6803e-05, 6.6546e-04])\n","gradient values before mask reapp. tensor([-9.9241e-05, -5.2818e-05, -2.8490e-04, -3.7245e-05, -2.3782e-04,\n","        -6.8517e-05, -8.6814e-05, -1.7441e-04, -3.4981e-05, -4.8588e-04])\n","gradient values before mask reapp. tensor([2.7380e-04, 5.4689e-06, 3.6174e-04, 1.0279e-04, 3.0392e-04, 1.8513e-05,\n","        3.9651e-05, 2.0501e-04, 3.6914e-05, 5.3431e-04])\n","gradient values before mask reapp. tensor([-1.4767e-04, -6.2007e-05, -3.7224e-04, -5.8167e-05, -3.1257e-04,\n","        -8.0309e-05, -1.0546e-04, -2.2661e-04, -4.5246e-05, -6.2817e-04])\n","gradient values before mask reapp. tensor([3.1436e-04, 1.2548e-05, 4.3416e-04, 1.1976e-04, 3.6658e-04, 2.8746e-05,\n","        5.5020e-05, 2.4843e-04, 4.5770e-05, 6.5219e-04])\n","gradient values before mask reapp. tensor([-1.5620e-04, -6.3517e-05, -3.8643e-04, -6.2043e-05, -3.2490e-04,\n","        -8.2393e-05, -1.0826e-04, -2.3468e-04, -4.6943e-05, -6.5221e-04])\n","gradient values before mask reapp. tensor([4.4025e-04, 2.8874e-05, 6.4935e-04, 1.6234e-04, 5.4703e-04, 5.7733e-05,\n","        9.5431e-05, 3.7486e-04, 6.9927e-05, 9.8478e-04])\n","gradient values before mask reapp. tensor([-1.8707e-04, -7.1389e-05, -4.4585e-04, -8.1251e-05, -3.8343e-04,\n","        -9.2061e-05, -1.2409e-04, -2.7205e-04, -5.6501e-05, -7.6287e-04])\n","gradient values before mask reapp. tensor([ 1.7233e-04, -6.2963e-06,  1.9201e-04,  7.3206e-05,  1.6792e-04,\n","        -2.1443e-06,  1.1110e-05,  1.0807e-04,  2.0493e-05,  2.8248e-04])\n","gradient values before mask reapp. tensor([-5.1562e-05, -5.0332e-05, -2.0948e-04, -3.2640e-05, -1.8790e-04,\n","        -6.1281e-05, -7.8677e-05, -1.3386e-04, -3.1290e-05, -3.9517e-04])\n","gradient values before mask reapp. tensor([ 1.6589e-04, -6.8380e-06,  1.8065e-04,  7.1166e-05,  1.5794e-04,\n","        -3.5580e-06,  8.8371e-06,  1.0092e-04,  1.8991e-05,  2.6531e-04])\n","gradient values before mask reapp. tensor([-3.0124e-05, -4.8326e-05, -1.7366e-04, -2.7534e-05, -1.5986e-04,\n","        -5.6786e-05, -7.2956e-05, -1.1333e-04, -2.7935e-05, -3.4433e-04])\n","gradient values before mask reapp. tensor([ 8.3772e-05, -1.8905e-05,  4.0666e-05,  4.4209e-05,  4.6086e-05,\n","        -2.0692e-05, -1.6206e-05,  2.0816e-05,  5.7361e-06,  5.3241e-05])\n","gradient values before mask reapp. tensor([ 1.4448e-04, -2.3947e-05,  1.2854e-04,  3.3373e-05,  9.3361e-05,\n","        -1.6664e-05, -1.5357e-05,  6.4359e-05,  5.8195e-06,  1.2508e-04])\n","gradient values before mask reapp. tensor([ 1.1076e-04, -1.6494e-05,  8.4245e-05,  4.8788e-05,  7.5015e-05,\n","        -1.6522e-05, -1.0985e-05,  4.4183e-05,  8.0420e-06,  1.0890e-04])\n","gradient values before mask reapp. tensor([ 4.0556e-05, -3.4182e-05, -4.4992e-05,  5.0972e-06, -4.8058e-05,\n","        -3.8564e-05, -4.4744e-05, -3.6193e-05, -1.1961e-05, -1.3021e-04])\n","gradient values before mask reapp. tensor([ 2.7122e-06, -3.3550e-05, -1.0283e-04,  9.6337e-06, -7.8392e-05,\n","        -4.0611e-05, -4.6740e-05, -6.4823e-05, -1.1410e-05, -1.8169e-04])\n","gradient values before mask reapp. tensor([ 2.5367e-04, -3.6921e-06,  3.2357e-04,  8.0836e-05,  2.6132e-04,\n","         1.0822e-05,  2.5961e-05,  1.8033e-04,  2.9344e-05,  4.4526e-04])\n","gradient values before mask reapp. tensor([-3.3135e-05, -4.2493e-05, -1.7051e-04, -1.4156e-05, -1.4692e-04,\n","        -5.2763e-05, -6.5658e-05, -1.0838e-04, -2.3325e-05, -3.1092e-04])\n","gradient values before mask reapp. tensor([ 1.2775e-04, -1.9164e-05,  1.0858e-04,  4.0754e-05,  8.2941e-05,\n","        -1.6961e-05, -1.3206e-05,  5.4611e-05,  6.1038e-06,  1.1820e-04])\n","gradient values before mask reapp. tensor([-1.2220e-04, -5.6632e-05, -3.2302e-04, -4.7558e-05, -2.7200e-04,\n","        -7.2970e-05, -9.4779e-05, -1.9695e-04, -3.9429e-05, -5.4988e-04])\n","gradient values before mask reapp. tensor([3.5153e-04, 1.3149e-05, 4.9623e-04, 1.2040e-04, 4.0839e-04, 3.4845e-05,\n","        6.1381e-05, 2.8243e-04, 4.9448e-05, 7.2366e-04])\n","gradient values before mask reapp. tensor([-7.3631e-05, -5.0033e-05, -2.4200e-04, -3.3095e-05, -2.1009e-04,\n","        -6.3120e-05, -8.1322e-05, -1.5137e-04, -3.2518e-05, -4.3102e-04])\n","gradient values before mask reapp. tensor([ 1.6556e-04, -1.2461e-05,  1.7517e-04,  5.6268e-05,  1.3969e-04,\n","        -7.4133e-06,  5.3907e-07,  9.3809e-05,  1.3881e-05,  2.2638e-04])\n","gradient values before mask reapp. tensor([-1.0521e-04, -5.3357e-05, -2.9387e-04, -3.9844e-05, -2.4664e-04,\n","        -6.8282e-05, -8.8621e-05, -1.8014e-04, -3.5836e-05, -5.0017e-04])\n","gradient values before mask reapp. tensor([2.7211e-04, 5.3934e-06, 3.6228e-04, 9.8830e-05, 2.9935e-04, 1.8342e-05,\n","        3.8680e-05, 2.0444e-04, 3.5632e-05, 5.2743e-04])\n","gradient values before mask reapp. tensor([-1.3881e-04, -5.9232e-05, -3.5237e-04, -5.4229e-05, -2.9690e-04,\n","        -7.6452e-05, -1.0071e-04, -2.1472e-04, -4.2789e-05, -5.9589e-04])\n","gradient values before mask reapp. tensor([3.3562e-04, 1.5197e-05, 4.7309e-04, 1.2410e-04, 3.9498e-04, 3.4415e-05,\n","        6.1575e-05, 2.7092e-04, 4.9315e-05, 7.0565e-04])\n","gradient values before mask reapp. tensor([-1.4782e-04, -6.0591e-05, -3.6781e-04, -5.7728e-05, -3.1033e-04,\n","        -7.8533e-05, -1.0381e-04, -2.2389e-04, -4.4597e-05, -6.2060e-04])\n","gradient values before mask reapp. tensor([ 2.3670e-04, -1.7590e-06,  2.9891e-04,  8.2610e-05,  2.4465e-04,\n","         9.7844e-06,  2.5031e-05,  1.6680e-04,  2.8213e-05,  4.2248e-04])\n","gradient values before mask reapp. tensor([-6.0448e-05, -4.4914e-05, -2.1324e-04, -2.0948e-05, -1.7783e-04,\n","        -5.6919e-05, -7.1486e-05, -1.3225e-04, -2.6340e-05, -3.6872e-04])\n","gradient values before mask reapp. tensor([ 1.3193e-04, -1.4356e-05,  1.2203e-04,  4.9878e-05,  9.9350e-05,\n","        -1.2946e-05, -6.4105e-06,  6.4226e-05,  9.6213e-06,  1.5476e-04])\n","gradient values before mask reapp. tensor([ 8.7265e-06, -3.5379e-05, -9.3601e-05, -3.7498e-07, -8.3129e-05,\n","        -4.2567e-05, -5.0314e-05, -6.3159e-05, -1.5245e-05, -1.9224e-04])\n","gradient values before mask reapp. tensor([ 1.6156e-04, -1.0713e-05,  1.7180e-04,  5.7807e-05,  1.3815e-04,\n","        -6.8706e-06,  1.8542e-06,  9.2481e-05,  1.3953e-05,  2.2681e-04])\n","gradient values before mask reapp. tensor([-3.7452e-05, -4.3251e-05, -1.7600e-04, -1.9356e-05, -1.5384e-04,\n","        -5.3652e-05, -6.7409e-05, -1.1236e-04, -2.5082e-05, -3.2522e-04])\n","gradient values before mask reapp. tensor([2.3273e-04, 4.4236e-07, 2.9515e-04, 8.4680e-05, 2.4211e-04, 1.0100e-05,\n","        2.6139e-05, 1.6490e-04, 2.7874e-05, 4.2234e-04])\n","gradient values before mask reapp. tensor([-1.5259e-04, -6.1518e-05, -3.7631e-04, -6.0597e-05, -3.1782e-04,\n","        -7.8905e-05, -1.0539e-04, -2.2870e-04, -4.5645e-05, -6.3578e-04])\n","gradient values before mask reapp. tensor([4.6073e-04, 3.3223e-05, 6.8965e-04, 1.6720e-04, 5.7534e-04, 6.3675e-05,\n","        1.0281e-04, 3.9766e-04, 7.2962e-05, 1.0413e-03])\n","gradient values before mask reapp. tensor([-1.9437e-04, -7.1351e-05, -4.5484e-04, -8.5454e-05, -3.9398e-04,\n","        -9.2004e-05, -1.2605e-04, -2.7844e-04, -5.8156e-05, -7.7917e-04])\n","gradient values before mask reapp. tensor([2.8129e-04, 8.2959e-06, 3.8026e-04, 1.0425e-04, 3.1528e-04, 2.2362e-05,\n","        4.3703e-05, 2.1571e-04, 3.8211e-05, 5.5948e-04])\n","gradient values before mask reapp. tensor([-2.5312e-04, -8.0584e-05, -5.5527e-04, -1.0585e-04, -4.7443e-04,\n","        -1.0436e-04, -1.4424e-04, -3.3564e-04, -6.7729e-05, -9.3353e-04])\n","gradient values before mask reapp. tensor([5.0989e-04, 4.1997e-05, 7.7793e-04, 1.8798e-04, 6.5123e-04, 7.6179e-05,\n","        1.2144e-04, 4.5044e-04, 8.3719e-05, 1.1850e-03])\n","gradient values before mask reapp. tensor([-1.8645e-04, -7.0999e-05, -4.4163e-04, -8.5064e-05, -3.8621e-04,\n","        -9.0784e-05, -1.2476e-04, -2.7126e-04, -5.7590e-05, -7.6464e-04])\n","gradient values before mask reapp. tensor([2.6240e-04, 6.2045e-06, 3.4923e-04, 9.9176e-05, 2.9020e-04, 1.8866e-05,\n","        3.8626e-05, 1.9819e-04, 3.5451e-05, 5.1379e-04])\n","gradient values before mask reapp. tensor([-2.8614e-04, -8.6583e-05, -6.1186e-04, -1.2119e-04, -5.2502e-04,\n","        -1.1285e-04, -1.5662e-04, -3.6939e-04, -7.4988e-05, -1.0296e-03])\n","gradient values before mask reapp. tensor([4.9002e-04, 4.4273e-05, 7.5257e-04, 1.9085e-04, 6.3548e-04, 7.4556e-05,\n","        1.2202e-04, 4.3899e-04, 8.3339e-05, 1.1617e-03])\n","gradient values before mask reapp. tensor([-3.3202e-04, -9.4600e-05, -6.9241e-04, -1.3956e-04, -5.9336e-04,\n","        -1.2362e-04, -1.7307e-04, -4.1690e-04, -8.3981e-05, -1.1589e-03])\n","gradient values before mask reapp. tensor([4.9327e-04, 4.3549e-05, 7.5708e-04, 1.8947e-04, 6.3709e-04, 7.4669e-05,\n","        1.2155e-04, 4.4098e-04, 8.3230e-05, 1.1637e-03])\n","gradient values before mask reapp. tensor([-3.3006e-04, -9.4151e-05, -6.8741e-04, -1.3910e-04, -5.9013e-04,\n","        -1.2325e-04, -1.7194e-04, -4.1347e-04, -8.3573e-05, -1.1530e-03])\n","gradient values before mask reapp. tensor([4.7912e-04, 4.2207e-05, 7.3464e-04, 1.8632e-04, 6.1979e-04, 7.2152e-05,\n","        1.1837e-04, 4.2881e-04, 8.1537e-05, 1.1318e-03])\n","gradient values before mask reapp. tensor([-3.2394e-04, -9.2984e-05, -6.7534e-04, -1.3637e-04, -5.7979e-04,\n","        -1.2157e-04, -1.6921e-04, -4.0592e-04, -8.1949e-05, -1.1335e-03])\n","gradient values before mask reapp. tensor([3.9560e-04, 3.2305e-05, 5.9397e-04, 1.5938e-04, 5.0148e-04, 5.3318e-05,\n","        9.2640e-05, 3.4665e-04, 6.5867e-05, 9.1548e-04])\n"]},{"output_type":"display_data","data":{"text/plain":["'60.0% done'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{}},{"output_type":"stream","name":"stdout","text":["sc1 weights:  torch.Size([100, 612])\n","sc2 weights:  torch.Size([1, 100])\n","first ten digits of weight at init tensor([-1.2461e-03,  1.7529e-03, -3.6313e-04, -0.0000e+00, -3.7446e-05,\n","         1.0265e-03, -1.6284e-04, -1.5556e-04, -3.7374e-04, -1.8305e-03],\n","       grad_fn=<SliceBackward0>)\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n"]},{"output_type":"display_data","data":{"text/plain":["'70.0% done'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{}},{"output_type":"stream","name":"stdout","text":["sc1 weights:  torch.Size([100, 612])\n","sc2 weights:  torch.Size([1, 100])\n","first ten digits of weight at init tensor([-0.0006, -0.0012,  0.0000,  0.0002, -0.0012,  0.0010,  0.0018, -0.0005,\n","         0.0012,  0.0000], grad_fn=<SliceBackward0>)\n","gradient values before mask reapp. tensor([-0.0006, -0.0001, -0.0010, -0.0002, -0.0008, -0.0001, -0.0002, -0.0006,\n","        -0.0001, -0.0016])\n","gradient values before mask reapp. tensor([-0.0006, -0.0001, -0.0011, -0.0002, -0.0009, -0.0002, -0.0002, -0.0006,\n","        -0.0001, -0.0017])\n","gradient values before mask reapp. tensor([-0.0006, -0.0001, -0.0011, -0.0003, -0.0009, -0.0002, -0.0002, -0.0007,\n","        -0.0001, -0.0018])\n","gradient values before mask reapp. tensor([-0.0007, -0.0001, -0.0012, -0.0003, -0.0010, -0.0002, -0.0003, -0.0007,\n","        -0.0001, -0.0020])\n","gradient values before mask reapp. tensor([-0.0007, -0.0001, -0.0013, -0.0003, -0.0011, -0.0002, -0.0003, -0.0007,\n","        -0.0001, -0.0021])\n","gradient values before mask reapp. tensor([-0.0008, -0.0002, -0.0014, -0.0003, -0.0011, -0.0002, -0.0003, -0.0008,\n","        -0.0001, -0.0023])\n","gradient values before mask reapp. tensor([-0.0009, -0.0002, -0.0015, -0.0003, -0.0012, -0.0002, -0.0003, -0.0008,\n","        -0.0001, -0.0024])\n","gradient values before mask reapp. tensor([-0.0009, -0.0002, -0.0016, -0.0003, -0.0013, -0.0003, -0.0003, -0.0009,\n","        -0.0001, -0.0026])\n","gradient values before mask reapp. tensor([-0.0010, -0.0002, -0.0017, -0.0004, -0.0014, -0.0003, -0.0004, -0.0010,\n","        -0.0001, -0.0028])\n","gradient values before mask reapp. tensor([-0.0011, -0.0002, -0.0018, -0.0004, -0.0014, -0.0003, -0.0004, -0.0010,\n","        -0.0002, -0.0030])\n","gradient values before mask reapp. tensor([-0.0011, -0.0002, -0.0020, -0.0004, -0.0015, -0.0003, -0.0004, -0.0011,\n","        -0.0002, -0.0032])\n","gradient values before mask reapp. tensor([-0.0012, -0.0002, -0.0021, -0.0004, -0.0016, -0.0003, -0.0005, -0.0012,\n","        -0.0002, -0.0034])\n","gradient values before mask reapp. tensor([-0.0013, -0.0002, -0.0022, -0.0005, -0.0017, -0.0004, -0.0005, -0.0012,\n","        -0.0002, -0.0037])\n","gradient values before mask reapp. tensor([-0.0014, -0.0003, -0.0024, -0.0005, -0.0018, -0.0004, -0.0005, -0.0013,\n","        -0.0002, -0.0039])\n","gradient values before mask reapp. tensor([-0.0015, -0.0003, -0.0025, -0.0005, -0.0019, -0.0004, -0.0006, -0.0014,\n","        -0.0002, -0.0041])\n","gradient values before mask reapp. tensor([-0.0015, -0.0003, -0.0027, -0.0005, -0.0020, -0.0004, -0.0006, -0.0014,\n","        -0.0002, -0.0044])\n","gradient values before mask reapp. tensor([-0.0016, -0.0003, -0.0028, -0.0006, -0.0021, -0.0005, -0.0006, -0.0015,\n","        -0.0002, -0.0046])\n","gradient values before mask reapp. tensor([-0.0017, -0.0003, -0.0030, -0.0006, -0.0022, -0.0005, -0.0007, -0.0016,\n","        -0.0002, -0.0049])\n","gradient values before mask reapp. tensor([-0.0018, -0.0004, -0.0031, -0.0006, -0.0022, -0.0005, -0.0007, -0.0016,\n","        -0.0001, -0.0051])\n","gradient values before mask reapp. tensor([-0.0019, -0.0004, -0.0033, -0.0006, -0.0023, -0.0006, -0.0008, -0.0017,\n","        -0.0001, -0.0054])\n","gradient values before mask reapp. tensor([-0.0020, -0.0004, -0.0034, -0.0007, -0.0024, -0.0006, -0.0008, -0.0017,\n","        -0.0001, -0.0056])\n","gradient values before mask reapp. tensor([-2.0365e-03, -4.0230e-04, -3.5005e-03, -6.6586e-04, -2.3901e-03,\n","        -6.3561e-04, -8.3503e-04, -1.7395e-03, -9.0156e-05, -5.7929e-03])\n","gradient values before mask reapp. tensor([-2.1033e-03, -4.1672e-04, -3.6061e-03, -6.7488e-04, -2.4114e-03,\n","        -6.6638e-04, -8.7029e-04, -1.7628e-03, -6.4713e-05, -5.9812e-03])\n","gradient values before mask reapp. tensor([-2.1620e-03, -4.2974e-04, -3.6962e-03, -6.7917e-04, -2.4139e-03,\n","        -6.9622e-04, -9.0349e-04, -1.7736e-03, -3.4314e-05, -6.1462e-03])\n","gradient values before mask reapp. tensor([-2.2112e-03, -4.4109e-04, -3.7683e-03, -6.7816e-04, -2.3955e-03,\n","        -7.2480e-04, -9.3415e-04, -1.7707e-03,  1.3473e-06, -6.2838e-03])\n","gradient values before mask reapp. tensor([-2.2495e-03, -4.5054e-04, -3.8203e-03, -6.7138e-04, -2.3544e-03,\n","        -7.5177e-04, -9.6179e-04, -1.7526e-03,  4.2487e-05, -6.3905e-03])\n","gradient values before mask reapp. tensor([-2.2760e-03, -4.5788e-04, -3.8503e-03, -6.5846e-04, -2.2893e-03,\n","        -7.7681e-04, -9.8599e-04, -1.7184e-03,  8.9200e-05, -6.4633e-03])\n","gradient values before mask reapp. tensor([-0.0023, -0.0005, -0.0039, -0.0006, -0.0022, -0.0008, -0.0010, -0.0017,\n","         0.0001, -0.0065])\n","gradient values before mask reapp. tensor([-0.0023, -0.0005, -0.0038, -0.0006, -0.0021, -0.0008, -0.0010, -0.0016,\n","         0.0002, -0.0065])\n","gradient values before mask reapp. tensor([-0.0023, -0.0005, -0.0038, -0.0006, -0.0019, -0.0008, -0.0010, -0.0015,\n","         0.0003, -0.0065])\n","gradient values before mask reapp. tensor([-0.0023, -0.0005, -0.0037, -0.0005, -0.0018, -0.0009, -0.0010, -0.0014,\n","         0.0003, -0.0064])\n","gradient values before mask reapp. tensor([-0.0022, -0.0005, -0.0036, -0.0005, -0.0016, -0.0009, -0.0010, -0.0013,\n","         0.0004, -0.0063])\n","gradient values before mask reapp. tensor([-0.0022, -0.0005, -0.0035, -0.0005, -0.0014, -0.0009, -0.0010, -0.0012,\n","         0.0005, -0.0061])\n","gradient values before mask reapp. tensor([-0.0021, -0.0004, -0.0034, -0.0004, -0.0012, -0.0009, -0.0010, -0.0010,\n","         0.0005, -0.0060])\n","gradient values before mask reapp. tensor([-0.0020, -0.0004, -0.0033, -0.0003, -0.0010, -0.0009, -0.0010, -0.0009,\n","         0.0006, -0.0058])\n","gradient values before mask reapp. tensor([-0.0020, -0.0004, -0.0031, -0.0003, -0.0007, -0.0009, -0.0010, -0.0007,\n","         0.0007, -0.0056])\n","gradient values before mask reapp. tensor([-0.0019, -0.0004, -0.0030, -0.0002, -0.0005, -0.0009, -0.0010, -0.0006,\n","         0.0008, -0.0053])\n","gradient values before mask reapp. tensor([-0.0018, -0.0004, -0.0028, -0.0002, -0.0003, -0.0009, -0.0010, -0.0004,\n","         0.0008, -0.0051])\n","gradient values before mask reapp. tensor([-1.7302e-03, -3.8724e-04, -2.6545e-03, -1.1846e-04, -3.0992e-05,\n","        -8.9038e-04, -9.8906e-04, -3.0036e-04,  9.1865e-04, -4.8754e-03])\n","gradient values before mask reapp. tensor([-1.6506e-03, -3.7466e-04, -2.4978e-03, -6.3999e-05,  1.9029e-04,\n","        -8.8821e-04, -9.7467e-04, -1.5753e-04,  9.8592e-04, -4.6473e-03])\n","gradient values before mask reapp. tensor([-1.5732e-03, -3.6236e-04, -2.3459e-03, -1.1869e-05,  4.0186e-04,\n","        -8.8546e-04, -9.6017e-04, -2.0817e-05,  1.0495e-03, -4.4254e-03])\n","gradient values before mask reapp. tensor([-1.4988e-03, -3.5052e-04, -2.2006e-03,  3.7507e-05,  6.0211e-04,\n","        -8.8233e-04, -9.4588e-04,  1.0867e-04,  1.1091e-03, -4.2125e-03])\n","gradient values before mask reapp. tensor([-1.4282e-03, -3.3928e-04, -2.0632e-03,  8.3811e-05,  7.8983e-04,\n","        -8.7902e-04, -9.3209e-04,  2.3008e-04,  1.1645e-03, -4.0109e-03])\n","gradient values before mask reapp. tensor([-0.0014, -0.0003, -0.0019,  0.0001,  0.0010, -0.0009, -0.0009,  0.0003,\n","         0.0012, -0.0038])\n","gradient values before mask reapp. tensor([-0.0013, -0.0003, -0.0018,  0.0002,  0.0011, -0.0009, -0.0009,  0.0004,\n","         0.0013, -0.0036])\n","gradient values before mask reapp. tensor([-0.0012, -0.0003, -0.0017,  0.0002,  0.0013, -0.0009, -0.0009,  0.0005,\n","         0.0013, -0.0035])\n","gradient values before mask reapp. tensor([-0.0012, -0.0003, -0.0016,  0.0002,  0.0014, -0.0009, -0.0009,  0.0006,\n","         0.0013, -0.0033])\n","gradient values before mask reapp. tensor([-0.0011, -0.0003, -0.0015,  0.0003,  0.0015, -0.0009, -0.0009,  0.0007,\n","         0.0014, -0.0032])\n","gradient values before mask reapp. tensor([-0.0011, -0.0003, -0.0014,  0.0003,  0.0016, -0.0009, -0.0009,  0.0008,\n","         0.0014, -0.0031])\n","gradient values before mask reapp. tensor([-0.0011, -0.0003, -0.0014,  0.0003,  0.0017, -0.0009, -0.0009,  0.0008,\n","         0.0014, -0.0030])\n","gradient values before mask reapp. tensor([-0.0010, -0.0003, -0.0013,  0.0003,  0.0018, -0.0009, -0.0009,  0.0009,\n","         0.0015, -0.0029])\n","gradient values before mask reapp. tensor([-0.0010, -0.0003, -0.0012,  0.0004,  0.0019, -0.0009, -0.0008,  0.0010,\n","         0.0015, -0.0028])\n","gradient values before mask reapp. tensor([-0.0010, -0.0003, -0.0012,  0.0004,  0.0020, -0.0009, -0.0008,  0.0010,\n","         0.0015, -0.0027])\n","gradient values before mask reapp. tensor([-0.0009, -0.0003, -0.0011,  0.0004,  0.0021, -0.0009, -0.0008,  0.0011,\n","         0.0015, -0.0026])\n","gradient values before mask reapp. tensor([-0.0009, -0.0003, -0.0011,  0.0004,  0.0021, -0.0009, -0.0008,  0.0011,\n","         0.0016, -0.0026])\n","gradient values before mask reapp. tensor([-0.0009, -0.0003, -0.0010,  0.0004,  0.0022, -0.0009, -0.0008,  0.0011,\n","         0.0016, -0.0025])\n","gradient values before mask reapp. tensor([-0.0009, -0.0003, -0.0010,  0.0004,  0.0022, -0.0009, -0.0008,  0.0012,\n","         0.0016, -0.0025])\n","gradient values before mask reapp. tensor([-0.0009, -0.0003, -0.0010,  0.0004,  0.0023, -0.0009, -0.0008,  0.0012,\n","         0.0016, -0.0024])\n","gradient values before mask reapp. tensor([-0.0009, -0.0003, -0.0010,  0.0005,  0.0023, -0.0009, -0.0008,  0.0012,\n","         0.0016, -0.0024])\n","gradient values before mask reapp. tensor([-0.0008, -0.0003, -0.0009,  0.0005,  0.0024, -0.0009, -0.0008,  0.0012,\n","         0.0016, -0.0024])\n","gradient values before mask reapp. tensor([-0.0008, -0.0003, -0.0009,  0.0005,  0.0024, -0.0009, -0.0008,  0.0013,\n","         0.0017, -0.0023])\n","gradient values before mask reapp. tensor([-0.0008, -0.0002, -0.0009,  0.0005,  0.0025, -0.0009, -0.0008,  0.0013,\n","         0.0017, -0.0023])\n","gradient values before mask reapp. tensor([-0.0008, -0.0002, -0.0009,  0.0005,  0.0025, -0.0009, -0.0008,  0.0013,\n","         0.0017, -0.0023])\n","gradient values before mask reapp. tensor([-0.0008, -0.0002, -0.0008,  0.0005,  0.0025, -0.0009, -0.0008,  0.0013,\n","         0.0017, -0.0022])\n","gradient values before mask reapp. tensor([-0.0008, -0.0002, -0.0008,  0.0005,  0.0026, -0.0009, -0.0008,  0.0013,\n","         0.0017, -0.0022])\n","gradient values before mask reapp. tensor([-0.0008, -0.0002, -0.0008,  0.0005,  0.0026, -0.0009, -0.0008,  0.0014,\n","         0.0017, -0.0022])\n","gradient values before mask reapp. tensor([-0.0008, -0.0002, -0.0008,  0.0005,  0.0026, -0.0009, -0.0008,  0.0014,\n","         0.0017, -0.0022])\n","gradient values before mask reapp. tensor([-0.0008, -0.0002, -0.0008,  0.0005,  0.0026, -0.0009, -0.0008,  0.0014,\n","         0.0017, -0.0022])\n","gradient values before mask reapp. tensor([-0.0008, -0.0002, -0.0008,  0.0005,  0.0027, -0.0009, -0.0008,  0.0014,\n","         0.0017, -0.0022])\n","gradient values before mask reapp. tensor([-0.0008, -0.0002, -0.0008,  0.0005,  0.0027, -0.0009, -0.0008,  0.0014,\n","         0.0018, -0.0022])\n","gradient values before mask reapp. tensor([-0.0007, -0.0002, -0.0008,  0.0005,  0.0027, -0.0009, -0.0008,  0.0014,\n","         0.0018, -0.0021])\n","gradient values before mask reapp. tensor([-0.0007, -0.0002, -0.0007,  0.0006,  0.0028, -0.0009, -0.0008,  0.0015,\n","         0.0018, -0.0021])\n","gradient values before mask reapp. tensor([-0.0007, -0.0003, -0.0007,  0.0006,  0.0028, -0.0009, -0.0008,  0.0015,\n","         0.0018, -0.0021])\n","gradient values before mask reapp. tensor([-0.0007, -0.0003, -0.0007,  0.0006,  0.0028, -0.0009, -0.0008,  0.0015,\n","         0.0018, -0.0021])\n","gradient values before mask reapp. tensor([-0.0007, -0.0003, -0.0007,  0.0006,  0.0028, -0.0009, -0.0009,  0.0015,\n","         0.0018, -0.0021])\n","gradient values before mask reapp. tensor([-0.0007, -0.0003, -0.0007,  0.0006,  0.0029, -0.0009, -0.0009,  0.0015,\n","         0.0018, -0.0021])\n","gradient values before mask reapp. tensor([-0.0007, -0.0003, -0.0007,  0.0006,  0.0029, -0.0009, -0.0009,  0.0015,\n","         0.0018, -0.0021])\n","gradient values before mask reapp. tensor([-0.0007, -0.0003, -0.0007,  0.0006,  0.0029, -0.0009, -0.0009,  0.0015,\n","         0.0018, -0.0021])\n","gradient values before mask reapp. tensor([-0.0007, -0.0003, -0.0007,  0.0006,  0.0029, -0.0009, -0.0009,  0.0015,\n","         0.0019, -0.0021])\n","gradient values before mask reapp. tensor([-0.0007, -0.0003, -0.0007,  0.0006,  0.0029, -0.0009, -0.0009,  0.0016,\n","         0.0019, -0.0021])\n","gradient values before mask reapp. tensor([-0.0007, -0.0003, -0.0007,  0.0006,  0.0030, -0.0009, -0.0009,  0.0016,\n","         0.0019, -0.0021])\n","gradient values before mask reapp. tensor([-0.0007, -0.0003, -0.0007,  0.0006,  0.0030, -0.0009, -0.0009,  0.0016,\n","         0.0019, -0.0021])\n","gradient values before mask reapp. tensor([-0.0007, -0.0003, -0.0007,  0.0006,  0.0030, -0.0009, -0.0009,  0.0016,\n","         0.0019, -0.0021])\n","gradient values before mask reapp. tensor([-0.0007, -0.0003, -0.0007,  0.0006,  0.0030, -0.0009, -0.0009,  0.0016,\n","         0.0019, -0.0021])\n","gradient values before mask reapp. tensor([-0.0007, -0.0003, -0.0007,  0.0006,  0.0031, -0.0009, -0.0009,  0.0016,\n","         0.0019, -0.0021])\n","gradient values before mask reapp. tensor([-0.0007, -0.0003, -0.0007,  0.0006,  0.0031, -0.0009, -0.0009,  0.0016,\n","         0.0019, -0.0021])\n","gradient values before mask reapp. tensor([-0.0007, -0.0003, -0.0007,  0.0006,  0.0031, -0.0009, -0.0009,  0.0016,\n","         0.0019, -0.0021])\n","gradient values before mask reapp. tensor([-0.0007, -0.0003, -0.0007,  0.0006,  0.0031, -0.0010, -0.0009,  0.0016,\n","         0.0019, -0.0021])\n","gradient values before mask reapp. tensor([-0.0007, -0.0003, -0.0007,  0.0006,  0.0031, -0.0010, -0.0009,  0.0016,\n","         0.0019, -0.0021])\n","gradient values before mask reapp. tensor([-0.0007, -0.0003, -0.0007,  0.0006,  0.0031, -0.0010, -0.0009,  0.0016,\n","         0.0020, -0.0021])\n","gradient values before mask reapp. tensor([-0.0007, -0.0003, -0.0007,  0.0006,  0.0032, -0.0010, -0.0009,  0.0016,\n","         0.0020, -0.0021])\n","gradient values before mask reapp. tensor([-0.0007, -0.0003, -0.0007,  0.0006,  0.0032, -0.0010, -0.0009,  0.0017,\n","         0.0020, -0.0021])\n","gradient values before mask reapp. tensor([-0.0007, -0.0003, -0.0007,  0.0006,  0.0032, -0.0010, -0.0009,  0.0017,\n","         0.0020, -0.0021])\n","gradient values before mask reapp. tensor([-0.0007, -0.0003, -0.0007,  0.0006,  0.0032, -0.0010, -0.0009,  0.0017,\n","         0.0020, -0.0022])\n","gradient values before mask reapp. tensor([-0.0007, -0.0003, -0.0007,  0.0006,  0.0032, -0.0010, -0.0009,  0.0017,\n","         0.0020, -0.0022])\n","gradient values before mask reapp. tensor([-0.0007, -0.0003, -0.0007,  0.0006,  0.0032, -0.0010, -0.0009,  0.0017,\n","         0.0020, -0.0022])\n","gradient values before mask reapp. tensor([-0.0007, -0.0003, -0.0007,  0.0006,  0.0032, -0.0010, -0.0009,  0.0017,\n","         0.0020, -0.0022])\n","gradient values before mask reapp. tensor([-0.0007, -0.0003, -0.0007,  0.0006,  0.0033, -0.0010, -0.0010,  0.0017,\n","         0.0020, -0.0022])\n","gradient values before mask reapp. tensor([-0.0007, -0.0003, -0.0007,  0.0006,  0.0033, -0.0010, -0.0010,  0.0017,\n","         0.0020, -0.0022])\n","gradient values before mask reapp. tensor([-0.0007, -0.0003, -0.0007,  0.0006,  0.0033, -0.0010, -0.0010,  0.0017,\n","         0.0020, -0.0022])\n","gradient values before mask reapp. tensor([-0.0007, -0.0003, -0.0007,  0.0006,  0.0033, -0.0010, -0.0010,  0.0017,\n","         0.0020, -0.0022])\n","gradient values before mask reapp. tensor([-0.0007, -0.0003, -0.0007,  0.0006,  0.0033, -0.0010, -0.0010,  0.0017,\n","         0.0020, -0.0022])\n","gradient values before mask reapp. tensor([-0.0007, -0.0003, -0.0007,  0.0006,  0.0033, -0.0010, -0.0010,  0.0017,\n","         0.0020, -0.0023])\n","gradient values before mask reapp. tensor([-0.0007, -0.0003, -0.0007,  0.0006,  0.0033, -0.0010, -0.0010,  0.0017,\n","         0.0020, -0.0023])\n","gradient values before mask reapp. tensor([-0.0007, -0.0003, -0.0007,  0.0006,  0.0033, -0.0010, -0.0010,  0.0017,\n","         0.0020, -0.0023])\n","gradient values before mask reapp. tensor([-0.0007, -0.0003, -0.0007,  0.0006,  0.0033, -0.0010, -0.0010,  0.0017,\n","         0.0020, -0.0023])\n","gradient values before mask reapp. tensor([-0.0007, -0.0003, -0.0007,  0.0006,  0.0033, -0.0010, -0.0010,  0.0016,\n","         0.0021, -0.0023])\n","gradient values before mask reapp. tensor([-0.0007, -0.0003, -0.0007,  0.0006,  0.0033, -0.0010, -0.0010,  0.0016,\n","         0.0021, -0.0023])\n","gradient values before mask reapp. tensor([-0.0007, -0.0003, -0.0007,  0.0006,  0.0033, -0.0010, -0.0010,  0.0016,\n","         0.0021, -0.0024])\n","gradient values before mask reapp. tensor([-0.0007, -0.0003, -0.0008,  0.0006,  0.0033, -0.0010, -0.0010,  0.0016,\n","         0.0021, -0.0024])\n","gradient values before mask reapp. tensor([-0.0007, -0.0003, -0.0008,  0.0006,  0.0033, -0.0010, -0.0010,  0.0016,\n","         0.0021, -0.0024])\n","gradient values before mask reapp. tensor([-0.0007, -0.0003, -0.0008,  0.0006,  0.0033, -0.0011, -0.0010,  0.0016,\n","         0.0021, -0.0024])\n","gradient values before mask reapp. tensor([-0.0007, -0.0003, -0.0008,  0.0006,  0.0033, -0.0011, -0.0010,  0.0016,\n","         0.0020, -0.0024])\n","gradient values before mask reapp. tensor([-0.0007, -0.0003, -0.0008,  0.0006,  0.0033, -0.0011, -0.0010,  0.0016,\n","         0.0020, -0.0024])\n","gradient values before mask reapp. tensor([-0.0007, -0.0004, -0.0008,  0.0006,  0.0033, -0.0011, -0.0010,  0.0016,\n","         0.0020, -0.0024])\n","gradient values before mask reapp. tensor([-0.0007, -0.0004, -0.0008,  0.0006,  0.0033, -0.0011, -0.0010,  0.0016,\n","         0.0020, -0.0025])\n","gradient values before mask reapp. tensor([-0.0007, -0.0004, -0.0008,  0.0006,  0.0033, -0.0011, -0.0010,  0.0015,\n","         0.0020, -0.0025])\n","gradient values before mask reapp. tensor([-0.0007, -0.0004, -0.0008,  0.0006,  0.0033, -0.0011, -0.0010,  0.0015,\n","         0.0020, -0.0025])\n","gradient values before mask reapp. tensor([-0.0007, -0.0004, -0.0008,  0.0006,  0.0032, -0.0011, -0.0010,  0.0015,\n","         0.0020, -0.0025])\n","gradient values before mask reapp. tensor([-0.0007, -0.0004, -0.0008,  0.0006,  0.0032, -0.0011, -0.0011,  0.0015,\n","         0.0020, -0.0025])\n","gradient values before mask reapp. tensor([-0.0007, -0.0004, -0.0008,  0.0006,  0.0032, -0.0011, -0.0011,  0.0015,\n","         0.0020, -0.0025])\n","gradient values before mask reapp. tensor([-0.0007, -0.0004, -0.0008,  0.0006,  0.0032, -0.0011, -0.0011,  0.0015,\n","         0.0020, -0.0025])\n","gradient values before mask reapp. tensor([-0.0007, -0.0004, -0.0008,  0.0006,  0.0032, -0.0011, -0.0011,  0.0014,\n","         0.0020, -0.0025])\n","gradient values before mask reapp. tensor([-0.0006, -0.0004, -0.0008,  0.0006,  0.0032, -0.0011, -0.0011,  0.0014,\n","         0.0020, -0.0025])\n","gradient values before mask reapp. tensor([-0.0006, -0.0004, -0.0008,  0.0005,  0.0032, -0.0011, -0.0011,  0.0014,\n","         0.0020, -0.0025])\n","gradient values before mask reapp. tensor([-0.0006, -0.0004, -0.0008,  0.0005,  0.0032, -0.0011, -0.0011,  0.0014,\n","         0.0020, -0.0025])\n","gradient values before mask reapp. tensor([-0.0006, -0.0004, -0.0008,  0.0005,  0.0032, -0.0011, -0.0011,  0.0014,\n","         0.0020, -0.0025])\n","gradient values before mask reapp. tensor([-0.0006, -0.0004, -0.0008,  0.0005,  0.0031, -0.0011, -0.0011,  0.0014,\n","         0.0019, -0.0025])\n","gradient values before mask reapp. tensor([-0.0006, -0.0004, -0.0008,  0.0005,  0.0031, -0.0011, -0.0011,  0.0014,\n","         0.0019, -0.0025])\n","gradient values before mask reapp. tensor([-0.0006, -0.0004, -0.0008,  0.0005,  0.0031, -0.0011, -0.0011,  0.0013,\n","         0.0019, -0.0025])\n","gradient values before mask reapp. tensor([-0.0006, -0.0004, -0.0008,  0.0005,  0.0031, -0.0010, -0.0011,  0.0013,\n","         0.0019, -0.0025])\n","gradient values before mask reapp. tensor([-0.0005, -0.0004, -0.0008,  0.0005,  0.0031, -0.0010, -0.0010,  0.0013,\n","         0.0019, -0.0024])\n","gradient values before mask reapp. tensor([-0.0005, -0.0004, -0.0007,  0.0005,  0.0031, -0.0010, -0.0010,  0.0013,\n","         0.0019, -0.0024])\n","gradient values before mask reapp. tensor([-0.0005, -0.0004, -0.0007,  0.0005,  0.0031, -0.0010, -0.0010,  0.0013,\n","         0.0019, -0.0023])\n","gradient values before mask reapp. tensor([-0.0004, -0.0004, -0.0006,  0.0005,  0.0032, -0.0010, -0.0010,  0.0013,\n","         0.0019, -0.0022])\n","gradient values before mask reapp. tensor([-0.0004, -0.0004, -0.0006,  0.0005,  0.0032, -0.0010, -0.0010,  0.0014,\n","         0.0019, -0.0021])\n","gradient values before mask reapp. tensor([-0.0003, -0.0004, -0.0005,  0.0006,  0.0033, -0.0010, -0.0010,  0.0014,\n","         0.0019, -0.0019])\n","gradient values before mask reapp. tensor([-0.0004, -0.0004, -0.0007,  0.0004,  0.0030, -0.0010, -0.0010,  0.0010,\n","         0.0017, -0.0023])\n","gradient values before mask reapp. tensor([-0.0004, -0.0004, -0.0006,  0.0004,  0.0030, -0.0010, -0.0010,  0.0011,\n","         0.0017, -0.0021])\n","gradient values before mask reapp. tensor([-0.0003, -0.0004, -0.0005,  0.0004,  0.0031, -0.0010, -0.0010,  0.0011,\n","         0.0017, -0.0020])\n","gradient values before mask reapp. tensor([-0.0004, -0.0004, -0.0008,  0.0003,  0.0028, -0.0010, -0.0010,  0.0007,\n","         0.0016, -0.0023])\n","gradient values before mask reapp. tensor([-0.0003, -0.0004, -0.0006,  0.0003,  0.0029, -0.0010, -0.0010,  0.0008,\n","         0.0016, -0.0021])\n","gradient values before mask reapp. tensor([-0.0002, -0.0004, -0.0005,  0.0003,  0.0030, -0.0010, -0.0010,  0.0008,\n","         0.0016, -0.0019])\n","gradient values before mask reapp. tensor([-0.0002, -0.0004, -0.0004,  0.0003,  0.0030, -0.0009, -0.0009,  0.0009,\n","         0.0016, -0.0018])\n","gradient values before mask reapp. tensor([-8.8242e-05, -4.0751e-04, -2.9680e-04,  3.5975e-04,  3.1184e-03,\n","        -9.2691e-04, -9.1814e-04,  9.3022e-04,  1.6184e-03, -1.5889e-03])\n","gradient values before mask reapp. tensor([-0.0002, -0.0004, -0.0006,  0.0003,  0.0027, -0.0009, -0.0009,  0.0006,\n","         0.0015, -0.0019])\n","gradient values before mask reapp. tensor([-0.0001, -0.0004, -0.0004,  0.0003,  0.0029, -0.0009, -0.0009,  0.0007,\n","         0.0015, -0.0016])\n","gradient values before mask reapp. tensor([-0.0005, -0.0005, -0.0010,  0.0001,  0.0019, -0.0009, -0.0009,  0.0001,\n","         0.0013, -0.0025])\n","gradient values before mask reapp. tensor([-0.0004, -0.0005, -0.0009,  0.0002,  0.0021, -0.0009, -0.0009,  0.0002,\n","         0.0013, -0.0023])\n","gradient values before mask reapp. tensor([-0.0003, -0.0004, -0.0007,  0.0002,  0.0022, -0.0009, -0.0008,  0.0003,\n","         0.0013, -0.0020])\n","gradient values before mask reapp. tensor([-4.3167e-04, -4.7377e-04, -9.2549e-04,  1.5617e-04,  1.7862e-03,\n","        -8.5362e-04, -8.3867e-04, -4.9453e-05,  1.1500e-03, -2.1721e-03])\n","gradient values before mask reapp. tensor([-5.9823e-04, -4.9343e-04, -1.1471e-03,  9.0798e-05,  1.3878e-03,\n","        -8.4166e-04, -8.2862e-04, -3.0594e-04,  1.0481e-03, -2.4697e-03])\n","gradient values before mask reapp. tensor([-2.7881e-04, -4.5295e-04, -6.8090e-04,  2.0715e-04,  1.9926e-03,\n","        -8.2055e-04, -7.9466e-04,  8.6485e-05,  1.1752e-03, -1.7875e-03])\n","gradient values before mask reapp. tensor([-0.0005, -0.0005, -0.0009,  0.0001,  0.0016, -0.0008, -0.0008, -0.0002,\n","         0.0011, -0.0021])\n","gradient values before mask reapp. tensor([-0.0004, -0.0005, -0.0008,  0.0002,  0.0016, -0.0008, -0.0008, -0.0001,\n","         0.0011, -0.0020])\n","gradient values before mask reapp. tensor([-3.2565e-04, -4.5738e-04, -7.2026e-04,  1.7711e-04,  1.7427e-03,\n","        -7.8277e-04, -7.5281e-04, -6.9412e-05,  1.0878e-03, -1.8013e-03])\n","gradient values before mask reapp. tensor([-0.0005, -0.0005, -0.0009,  0.0001,  0.0013, -0.0008, -0.0008, -0.0004,\n","         0.0009, -0.0020])\n","gradient values before mask reapp. tensor([-0.0004, -0.0005, -0.0009,  0.0001,  0.0014, -0.0008, -0.0007, -0.0004,\n","         0.0009, -0.0018])\n","gradient values before mask reapp. tensor([-0.0003, -0.0005, -0.0008,  0.0002,  0.0015, -0.0008, -0.0007, -0.0003,\n","         0.0009, -0.0017])\n","gradient values before mask reapp. tensor([-0.0003, -0.0005, -0.0007,  0.0002,  0.0015, -0.0007, -0.0007, -0.0003,\n","         0.0009, -0.0016])\n","gradient values before mask reapp. tensor([-0.0003, -0.0005, -0.0006,  0.0002,  0.0016, -0.0007, -0.0007, -0.0003,\n","         0.0009, -0.0015])\n","gradient values before mask reapp. tensor([-0.0002, -0.0005, -0.0006,  0.0002,  0.0016, -0.0007, -0.0007, -0.0002,\n","         0.0009, -0.0014])\n","gradient values before mask reapp. tensor([-0.0002, -0.0005, -0.0006,  0.0002,  0.0016, -0.0007, -0.0007, -0.0002,\n","         0.0009, -0.0014])\n","gradient values before mask reapp. tensor([-0.0002, -0.0005, -0.0005,  0.0002,  0.0016, -0.0007, -0.0007, -0.0002,\n","         0.0009, -0.0014])\n","gradient values before mask reapp. tensor([-0.0002, -0.0005, -0.0005,  0.0002,  0.0016, -0.0007, -0.0007, -0.0002,\n","         0.0009, -0.0014])\n","gradient values before mask reapp. tensor([-0.0001, -0.0005, -0.0005,  0.0002,  0.0016, -0.0007, -0.0007, -0.0002,\n","         0.0009, -0.0013])\n","gradient values before mask reapp. tensor([-0.0001, -0.0005, -0.0005,  0.0002,  0.0016, -0.0007, -0.0007, -0.0002,\n","         0.0009, -0.0013])\n","gradient values before mask reapp. tensor([-0.0001, -0.0005, -0.0005,  0.0002,  0.0016, -0.0007, -0.0007, -0.0002,\n","         0.0009, -0.0013])\n","gradient values before mask reapp. tensor([-9.4907e-05, -4.5410e-04, -5.0213e-04,  1.7458e-04,  1.5746e-03,\n","        -6.9012e-04, -6.7808e-04, -2.0414e-04,  8.7677e-04, -1.3168e-03])\n","gradient values before mask reapp. tensor([-8.1682e-05, -4.5420e-04, -4.9671e-04,  1.7036e-04,  1.5642e-03,\n","        -6.8615e-04, -6.7757e-04, -2.0570e-04,  8.6808e-04, -1.3121e-03])\n","gradient values before mask reapp. tensor([-6.8949e-05, -4.5433e-04, -4.9208e-04,  1.6596e-04,  1.5531e-03,\n","        -6.8224e-04, -6.7715e-04, -2.0770e-04,  8.5924e-04, -1.3086e-03])\n","gradient values before mask reapp. tensor([-5.7893e-05, -4.5478e-04, -4.9074e-04,  1.6066e-04,  1.5385e-03,\n","        -6.7866e-04, -6.7736e-04, -2.1177e-04,  8.4969e-04, -1.3105e-03])\n","gradient values before mask reapp. tensor([-4.3202e-05, -4.5451e-04, -4.8242e-04,  1.5723e-04,  1.5307e-03,\n","        -6.7427e-04, -6.7615e-04, -2.1152e-04,  8.4142e-04, -1.3009e-03])\n","gradient values before mask reapp. tensor([-3.1002e-05, -4.5466e-04, -4.7863e-04,  1.5265e-04,  1.5184e-03,\n","        -6.7037e-04, -6.7577e-04, -2.1401e-04,  8.3232e-04, -1.2986e-03])\n","gradient values before mask reapp. tensor([-1.9077e-05, -4.5483e-04, -4.7538e-04,  1.4795e-04,  1.5056e-03,\n","        -6.6649e-04, -6.7545e-04, -2.1682e-04,  8.2308e-04, -1.2971e-03])\n","gradient values before mask reapp. tensor([-6.6423e-06, -4.5490e-04, -4.7122e-04,  1.4343e-04,  1.4934e-03,\n","        -6.6248e-04, -6.7494e-04, -2.1911e-04,  8.1391e-04, -1.2942e-03])\n","gradient values before mask reapp. tensor([ 5.5210e-06, -4.5497e-04, -4.6734e-04,  1.3893e-04,  1.4811e-03,\n","        -6.5849e-04, -6.7442e-04, -2.2150e-04,  8.0475e-04, -1.2915e-03])\n","gradient values before mask reapp. tensor([ 1.7446e-05, -4.5504e-04, -4.6387e-04,  1.3433e-04,  1.4682e-03,\n","        -6.5452e-04, -6.7394e-04, -2.2412e-04,  7.9547e-04, -1.2894e-03])\n","gradient values before mask reapp. tensor([ 3.0268e-05, -4.5493e-04, -4.5863e-04,  1.3021e-04,  1.4571e-03,\n","        -6.5034e-04, -6.7309e-04, -2.2566e-04,  7.8651e-04, -1.2845e-03])\n","gradient values before mask reapp. tensor([ 4.2302e-05, -4.5491e-04, -4.5478e-04,  1.2578e-04,  1.4445e-03,\n","        -6.4628e-04, -6.7244e-04, -2.2801e-04,  7.7728e-04, -1.2816e-03])\n","gradient values before mask reapp. tensor([ 5.4978e-05, -4.5478e-04, -4.4974e-04,  1.2161e-04,  1.4330e-03,\n","        -6.4207e-04, -6.7156e-04, -2.2966e-04,  7.6822e-04, -1.2769e-03])\n","gradient values before mask reapp. tensor([ 6.6388e-05, -4.5481e-04, -4.4679e-04,  1.1699e-04,  1.4196e-03,\n","        -6.3809e-04, -6.7102e-04, -2.3250e-04,  7.5884e-04, -1.2754e-03])\n","gradient values before mask reapp. tensor([ 8.0308e-05, -4.5435e-04, -4.3910e-04,  1.1366e-04,  1.4107e-03,\n","        -6.3355e-04, -6.6950e-04, -2.3243e-04,  7.5031e-04, -1.2661e-03])\n","gradient values before mask reapp. tensor([ 9.2298e-05, -4.5422e-04, -4.3495e-04,  1.0939e-04,  1.3983e-03,\n","        -6.2941e-04, -6.6866e-04, -2.3451e-04,  7.4112e-04, -1.2626e-03])\n","gradient values before mask reapp. tensor([ 0.0001, -0.0005, -0.0004,  0.0001,  0.0014, -0.0006, -0.0007, -0.0002,\n","         0.0007, -0.0013])\n","gradient values before mask reapp. tensor([ 0.0001, -0.0005, -0.0004,  0.0001,  0.0014, -0.0006, -0.0007, -0.0002,\n","         0.0007, -0.0013])\n","gradient values before mask reapp. tensor([ 1.2544e-04, -4.5411e-04, -4.2708e-04,  9.5673e-05,  1.3567e-03,\n","        -6.1739e-04, -6.6674e-04, -2.4334e-04,  7.1278e-04, -1.2587e-03])\n","gradient values before mask reapp. tensor([ 1.3677e-04, -4.5395e-04, -4.2369e-04,  9.1367e-05,  1.3436e-03,\n","        -6.1328e-04, -6.6587e-04, -2.4574e-04,  7.0349e-04, -1.2561e-03])\n","gradient values before mask reapp. tensor([-5.7692e-05, -4.8039e-04, -7.9554e-04, -1.8085e-04,  7.6985e-04,\n","        -6.1816e-04, -7.2905e-04, -5.0972e-04,  5.1435e-04, -2.0111e-03])\n","gradient values before mask reapp. tensor([ 1.6888e-04, -4.5182e-04, -3.9868e-04,  8.7634e-05,  1.3351e-03,\n","        -6.0304e-04, -6.6057e-04, -2.3939e-04,  6.8835e-04, -1.2211e-03])\n","gradient values before mask reapp. tensor([-2.2750e-05, -4.7784e-04, -7.6510e-04, -1.8030e-04,  7.6990e-04,\n","        -6.0783e-04, -7.2273e-04, -4.9944e-04,  5.0207e-04, -1.9646e-03])\n","gradient values before mask reapp. tensor([ 1.9297e-04, -4.5093e-04, -3.8780e-04,  8.0558e-05,  1.3133e-03,\n","        -5.9440e-04, -6.5778e-04, -2.4138e-04,  6.7089e-04, -1.2084e-03])\n","gradient values before mask reapp. tensor([ 2.1635e-06, -4.7694e-04, -7.5266e-04, -1.8394e-04,  7.5308e-04,\n","        -5.9960e-04, -7.1979e-04, -4.9988e-04,  4.8687e-04, -1.9468e-03])\n","gradient values before mask reapp. tensor([ 2.3047e-04, -4.4752e-04, -3.5140e-04,  8.0184e-05,  1.3163e-03,\n","        -5.8290e-04, -6.5001e-04, -2.2779e-04,  6.5812e-04, -1.1543e-03])\n","gradient values before mask reapp. tensor([ 3.9633e-05, -4.7360e-04, -7.1594e-04, -1.8147e-04,  7.5960e-04,\n","        -5.8861e-04, -7.1202e-04, -4.8545e-04,  4.7605e-04, -1.8897e-03])\n","gradient values before mask reapp. tensor([ 2.5944e-04, -4.4546e-04, -3.2999e-04,  7.6186e-05,  1.3051e-03,\n","        -5.7314e-04, -6.4500e-04, -2.2310e-04,  6.4293e-04, -1.1242e-03])\n","gradient values before mask reapp. tensor([ 8.2011e-05, -4.6915e-04, -6.6867e-04, -1.7612e-04,  7.7684e-04,\n","        -5.7655e-04, -7.0217e-04, -4.6444e-04,  4.6748e-04, -1.8154e-03])\n","gradient values before mask reapp. tensor([ 3.1626e-04, -4.3820e-04, -2.5501e-04,  8.6353e-05,  1.3467e-03,\n","        -5.5761e-04, -6.2976e-04, -1.8567e-04,  6.3799e-04, -1.0073e-03])\n","gradient values before mask reapp. tensor([ 0.0001, -0.0005, -0.0006, -0.0002,  0.0008, -0.0006, -0.0007, -0.0004,\n","         0.0005, -0.0017])\n","gradient values before mask reapp. tensor([ 3.5974e-04, -4.3312e-04, -2.0369e-04,  9.0765e-05,  1.3661e-03,\n","        -5.4487e-04, -6.1896e-04, -1.6230e-04,  6.2926e-04, -9.2825e-04])\n","gradient values before mask reapp. tensor([ 0.0002, -0.0005, -0.0005, -0.0002,  0.0008, -0.0005, -0.0007, -0.0004,\n","         0.0005, -0.0016])\n","gradient values before mask reapp. tensor([ 0.0002, -0.0005, -0.0005, -0.0001,  0.0009, -0.0005, -0.0007, -0.0004,\n","         0.0005, -0.0015])\n","gradient values before mask reapp. tensor([ 0.0002, -0.0005, -0.0005, -0.0002,  0.0008, -0.0005, -0.0007, -0.0004,\n","         0.0004, -0.0016])\n","gradient values before mask reapp. tensor([ 4.3494e-04, -4.2446e-04, -1.1954e-04,  9.5886e-05,  1.3890e-03,\n","        -5.2182e-04, -6.0054e-04, -1.2593e-04,  6.0980e-04, -7.9896e-04])\n","gradient values before mask reapp. tensor([ 0.0003, -0.0004, -0.0004, -0.0001,  0.0009, -0.0005, -0.0007, -0.0003,\n","         0.0004, -0.0014])\n","gradient values before mask reapp. tensor([ 0.0003, -0.0004, -0.0004, -0.0001,  0.0009, -0.0005, -0.0006, -0.0003,\n","         0.0004, -0.0014])\n","gradient values before mask reapp. tensor([ 0.0003, -0.0004, -0.0004, -0.0001,  0.0009, -0.0005, -0.0006, -0.0003,\n","         0.0004, -0.0013])\n","gradient values before mask reapp. tensor([ 0.0003, -0.0004, -0.0003, -0.0001,  0.0010, -0.0005, -0.0006, -0.0003,\n","         0.0004, -0.0013])\n","gradient values before mask reapp. tensor([ 0.0004, -0.0004, -0.0003, -0.0001,  0.0010, -0.0005, -0.0006, -0.0003,\n","         0.0004, -0.0012])\n","gradient values before mask reapp. tensor([ 0.0004, -0.0004, -0.0003, -0.0001,  0.0010, -0.0005, -0.0006, -0.0003,\n","         0.0004, -0.0012])\n","gradient values before mask reapp. tensor([ 0.0003, -0.0004, -0.0005, -0.0002,  0.0006, -0.0005, -0.0006, -0.0004,\n","         0.0003, -0.0016])\n","gradient values before mask reapp. tensor([ 0.0004, -0.0004, -0.0002, -0.0001,  0.0010, -0.0005, -0.0006, -0.0002,\n","         0.0004, -0.0011])\n","gradient values before mask reapp. tensor([ 0.0003, -0.0004, -0.0005, -0.0002,  0.0007, -0.0005, -0.0006, -0.0004,\n","         0.0003, -0.0015])\n","gradient values before mask reapp. tensor([ 4.8428e-04, -4.1570e-04, -1.3724e-04, -8.8698e-05,  1.0743e-03,\n","        -4.6527e-04, -5.9132e-04, -1.9752e-04,  4.3488e-04, -9.6797e-04])\n","gradient values before mask reapp. tensor([ 0.0004, -0.0004, -0.0004, -0.0002,  0.0007, -0.0005, -0.0006, -0.0004,\n","         0.0003, -0.0014])\n","gradient values before mask reapp. tensor([ 0.0004, -0.0004, -0.0004, -0.0002,  0.0007, -0.0005, -0.0006, -0.0003,\n","         0.0003, -0.0014])\n","gradient values before mask reapp. tensor([ 0.0004, -0.0004, -0.0004, -0.0002,  0.0007, -0.0005, -0.0006, -0.0003,\n","         0.0003, -0.0013])\n","gradient values before mask reapp. tensor([ 0.0004, -0.0004, -0.0004, -0.0002,  0.0007, -0.0005, -0.0006, -0.0003,\n","         0.0003, -0.0013])\n","gradient values before mask reapp. tensor([ 0.0004, -0.0004, -0.0004, -0.0002,  0.0007, -0.0005, -0.0006, -0.0003,\n","         0.0003, -0.0013])\n","gradient values before mask reapp. tensor([ 5.5096e-04, -4.0722e-04, -6.7317e-05, -8.1890e-05,  1.0818e-03,\n","        -4.4281e-04, -5.7501e-04, -1.7045e-04,  4.1206e-04, -8.5506e-04])\n","gradient values before mask reapp. tensor([ 0.0004, -0.0004, -0.0004, -0.0002,  0.0007, -0.0004, -0.0006, -0.0003,\n","         0.0003, -0.0013])\n","gradient values before mask reapp. tensor([ 0.0005, -0.0004, -0.0004, -0.0002,  0.0007, -0.0004, -0.0006, -0.0003,\n","         0.0003, -0.0013])\n","gradient values before mask reapp. tensor([ 0.0005, -0.0004, -0.0004, -0.0002,  0.0007, -0.0004, -0.0006, -0.0003,\n","         0.0003, -0.0013])\n","gradient values before mask reapp. tensor([ 5.3141e-04, -4.2632e-04, -3.4538e-04, -2.3311e-05,  7.7395e-04,\n","        -4.3550e-04, -5.4627e-04, -2.8855e-04,  3.5396e-04, -1.0817e-03])\n","gradient values before mask reapp. tensor([ 0.0004, -0.0004, -0.0006, -0.0002,  0.0003, -0.0004, -0.0006, -0.0005,\n","         0.0002, -0.0017])\n","gradient values before mask reapp. tensor([ 7.4465e-04, -3.8294e-04,  2.3896e-04,  1.1928e-04,  1.4739e-03,\n","        -4.2008e-04, -5.1924e-04,  2.7331e-05,  5.2054e-04, -2.4238e-04])\n","gradient values before mask reapp. tensor([ 2.2702e-04, -4.6616e-04, -9.1915e-04, -4.3853e-04, -1.0854e-04,\n","        -4.4345e-04, -6.4455e-04, -6.9642e-04,  6.3703e-05, -2.2426e-03])\n","gradient values before mask reapp. tensor([ 7.5528e-04, -3.8158e-04,  2.4358e-04,  1.1550e-04,  1.4576e-03,\n","        -4.1460e-04, -5.1703e-04,  2.5292e-05,  5.0927e-04, -2.3590e-04])\n","gradient values before mask reapp. tensor([ 2.4050e-04, -4.6443e-04, -9.0610e-04, -4.3555e-04, -1.0889e-04,\n","        -4.3877e-04, -6.4224e-04, -6.9291e-04,  5.8162e-05, -2.2199e-03])\n","gradient values before mask reapp. tensor([ 7.6230e-04, -3.8074e-04,  2.4219e-04,  1.1042e-04,  1.4359e-03,\n","        -4.0986e-04, -5.1589e-04,  1.9791e-05,  4.9722e-04, -2.3883e-04])\n","gradient values before mask reapp. tensor([ 2.5605e-04, -4.6220e-04, -8.8868e-04, -4.3144e-04, -1.0505e-04,\n","        -4.3356e-04, -6.3890e-04, -6.8657e-04,  5.3450e-05, -2.1901e-03])\n","gradient values before mask reapp. tensor([ 7.6739e-04, -3.8024e-04,  2.3732e-04,  1.0443e-04,  1.4109e-03,\n","        -4.0553e-04, -5.1541e-04,  1.2207e-05,  4.8455e-04, -2.4748e-04])\n","gradient values before mask reapp. tensor([ 0.0004, -0.0004, -0.0006, -0.0002,  0.0003, -0.0004, -0.0006, -0.0005,\n","         0.0002, -0.0016])\n","gradient values before mask reapp. tensor([ 5.8056e-04, -4.1935e-04, -3.1219e-04, -3.8970e-05,  7.1525e-04,\n","        -4.1127e-04, -5.3937e-04, -2.9447e-04,  3.0590e-04, -1.0397e-03])\n","gradient values before mask reapp. tensor([ 5.9176e-04, -4.1740e-04, -2.9678e-04, -3.7137e-05,  7.2116e-04,\n","        -4.0745e-04, -5.3607e-04, -2.8745e-04,  3.0340e-04, -1.0154e-03])\n","gradient values before mask reapp. tensor([ 5.9284e-04, -4.1726e-04, -2.9967e-04, -4.0054e-05,  7.0992e-04,\n","        -4.0588e-04, -5.3652e-04, -2.9157e-04,  2.9788e-04, -1.0211e-03])\n","gradient values before mask reapp. tensor([ 5.9214e-04, -4.1743e-04, -3.0597e-04, -4.3907e-05,  6.9518e-04,\n","        -4.0462e-04, -5.3765e-04, -2.9784e-04,  2.9163e-04, -1.0323e-03])\n","gradient values before mask reapp. tensor([ 5.9761e-04, -4.1649e-04, -3.0070e-04, -4.4655e-05,  6.9181e-04,\n","        -4.0210e-04, -5.3642e-04, -2.9691e-04,  2.8759e-04, -1.0245e-03])\n","gradient values before mask reapp. tensor([ 5.9882e-04, -4.1625e-04, -3.0322e-04, -4.7369e-05,  6.8087e-04,\n","        -4.0042e-04, -5.3670e-04, -3.0077e-04,  2.8213e-04, -1.0294e-03])\n","gradient values before mask reapp. tensor([ 0.0005, -0.0004, -0.0006, -0.0002,  0.0003, -0.0004, -0.0006, -0.0005,\n","         0.0002, -0.0015])\n","gradient values before mask reapp. tensor([ 6.1153e-04, -4.1386e-04, -2.8889e-04, -4.7474e-05,  6.7793e-04,\n","        -3.9488e-04, -5.3324e-04, -2.9639e-04,  2.7489e-04, -1.0070e-03])\n","gradient values before mask reapp. tensor([ 6.2789e-04, -4.1085e-04, -2.6314e-04, -4.2650e-05,  6.9431e-04,\n","        -3.8999e-04, -5.2771e-04, -2.8273e-04,  2.7461e-04, -9.6559e-04])\n","gradient values before mask reapp. tensor([ 6.2254e-04, -4.1169e-04, -2.7716e-04, -4.8152e-05,  6.7280e-04,\n","        -3.8972e-04, -5.3024e-04, -2.9344e-04,  2.6739e-04, -9.8890e-04])\n","gradient values before mask reapp. tensor([ 6.2492e-04, -4.1116e-04, -2.7694e-04, -4.9953e-05,  6.6490e-04,\n","        -3.8781e-04, -5.2989e-04, -2.9541e-04,  2.6269e-04, -9.8904e-04])\n","gradient values before mask reapp. tensor([ 6.2449e-04, -4.1111e-04, -2.8182e-04, -5.3018e-05,  6.5219e-04,\n","        -3.8650e-04, -5.3053e-04, -3.0046e-04,  2.5714e-04, -9.9740e-04])\n","gradient values before mask reapp. tensor([ 6.2912e-04, -4.1015e-04, -2.7724e-04, -5.3606e-05,  6.4866e-04,\n","        -3.8414e-04, -5.2928e-04, -2.9968e-04,  2.5334e-04, -9.9040e-04])\n","gradient values before mask reapp. tensor([ 6.3034e-04, -4.0976e-04, -2.7898e-04, -5.5823e-05,  6.3893e-04,\n","        -3.8244e-04, -5.2925e-04, -3.0278e-04,  2.4833e-04, -9.9354e-04])\n","gradient values before mask reapp. tensor([ 0.0005, -0.0004, -0.0005, -0.0002,  0.0003, -0.0004, -0.0006, -0.0005,\n","         0.0001, -0.0015])\n","gradient values before mask reapp. tensor([ 6.4522e-04, -4.0669e-04, -2.5897e-04, -5.3833e-05,  6.4255e-04,\n","        -3.7645e-04, -5.2435e-04, -2.9433e-04,  2.4285e-04, -9.6126e-04])\n","gradient values before mask reapp. tensor([ 6.4927e-04, -4.0577e-04, -2.5524e-04, -5.4570e-05,  6.3816e-04,\n","        -3.7415e-04, -5.2319e-04, -2.9400e-04,  2.3892e-04, -9.5550e-04])\n","gradient values before mask reapp. tensor([ 6.5091e-04, -4.0522e-04, -2.5551e-04, -5.6113e-05,  6.3054e-04,\n","        -3.7244e-04, -5.2278e-04, -2.9594e-04,  2.3460e-04, -9.5597e-04])\n","gradient values before mask reapp. tensor([ 6.4864e-04, -4.0542e-04, -2.6325e-04, -5.9811e-05,  6.1529e-04,\n","        -3.7149e-04, -5.2393e-04, -3.0260e-04,  2.2872e-04, -9.6888e-04])\n","gradient values before mask reapp. tensor([ 6.5410e-04, -4.0415e-04, -2.5643e-04, -5.9488e-05,  6.1441e-04,\n","        -3.6893e-04, -5.2205e-04, -3.0018e-04,  2.2563e-04, -9.5773e-04])\n","gradient values before mask reapp. tensor([ 6.5421e-04, -4.0390e-04, -2.5963e-04, -6.1952e-05,  6.0361e-04,\n","        -3.6749e-04, -5.2226e-04, -3.0398e-04,  2.2063e-04, -9.6320e-04])\n","gradient values before mask reapp. tensor([ 6.6078e-04, -4.0239e-04, -2.5056e-04, -6.0909e-05,  6.0502e-04,\n","        -3.6468e-04, -5.1987e-04, -3.0011e-04,  2.1804e-04, -9.4821e-04])\n","gradient values before mask reapp. tensor([ 6.6656e-04, -4.0109e-04, -2.4312e-04, -6.0476e-05,  6.0459e-04,\n","        -3.6203e-04, -5.1788e-04, -2.9730e-04,  2.1504e-04, -9.3617e-04])\n","gradient values before mask reapp. tensor([ 6.6749e-04, -4.0054e-04, -2.4421e-04, -6.2043e-05,  5.9638e-04,\n","        -3.6041e-04, -5.1751e-04, -2.9958e-04,  2.1073e-04, -9.3768e-04])\n","gradient values before mask reapp. tensor([ 6.6946e-04, -3.9991e-04, -2.4352e-04, -6.3318e-05,  5.8974e-04,\n","        -3.5864e-04, -5.1689e-04, -3.0084e-04,  2.0669e-04, -9.3668e-04])\n","gradient values before mask reapp. tensor([ 0.0006, -0.0004, -0.0005, -0.0002,  0.0003, -0.0004, -0.0006, -0.0004,\n","         0.0001, -0.0014])\n","gradient values before mask reapp. tensor([ 6.8024e-04, -3.9724e-04, -2.2914e-04, -6.2114e-05,  5.8917e-04,\n","        -3.5350e-04, -5.1279e-04, -2.9518e-04,  2.0106e-04, -9.1276e-04])\n","gradient values before mask reapp. tensor([ 6.7858e-04, -3.9708e-04, -2.3461e-04, -6.4645e-05,  5.7703e-04,\n","        -3.5242e-04, -5.1322e-04, -3.0002e-04,  1.9616e-04, -9.2117e-04])\n","gradient values before mask reapp. tensor([ 6.8082e-04, -3.9634e-04, -2.3308e-04, -6.5578e-05,  5.7143e-04,\n","        -3.5059e-04, -5.1237e-04, -3.0064e-04,  1.9242e-04, -9.1865e-04])\n","gradient values before mask reapp. tensor([ 6.8087e-04, -3.9589e-04, -2.3544e-04, -6.7352e-05,  5.6216e-04,\n","        -3.4913e-04, -5.1219e-04, -3.0359e-04,  1.8803e-04, -9.2208e-04])\n","gradient values before mask reapp. tensor([ 6.8564e-04, -3.9462e-04, -2.2896e-04, -6.6818e-05,  5.6158e-04,\n","        -3.4675e-04, -5.1027e-04, -3.0105e-04,  1.8533e-04, -9.1122e-04])\n","gradient values before mask reapp. tensor([ 6.8450e-04, -3.9441e-04, -2.3348e-04, -6.9221e-05,  5.5020e-04,\n","        -3.4556e-04, -5.1055e-04, -3.0532e-04,  1.8056e-04, -9.1832e-04])\n","gradient values before mask reapp. tensor([ 6.9686e-04, -3.9171e-04, -2.1280e-04, -6.4789e-05,  5.6341e-04,\n","        -3.4154e-04, -5.0564e-04, -2.9395e-04,  1.8048e-04, -8.8399e-04])\n","gradient values before mask reapp. tensor([ 6.9191e-04, -3.9215e-04, -2.2409e-04, -6.8884e-05,  5.4574e-04,\n","        -3.4118e-04, -5.0728e-04, -3.0231e-04,  1.7464e-04, -9.0207e-04])\n","gradient values before mask reapp. tensor([ 6.9818e-04, -3.9052e-04, -2.1440e-04, -6.7286e-05,  5.4862e-04,\n","        -3.3849e-04, -5.0460e-04, -2.9762e-04,  1.7274e-04, -8.8567e-04])\n","gradient values before mask reapp. tensor([ 6.9571e-04, -3.9050e-04, -2.2103e-04, -7.0131e-05,  5.3544e-04,\n","        -3.3759e-04, -5.0527e-04, -3.0309e-04,  1.6775e-04, -8.9609e-04])\n","gradient values before mask reapp. tensor([ 7.0082e-04, -3.8909e-04, -2.1343e-04, -6.9099e-05,  5.3633e-04,\n","        -3.3516e-04, -5.0303e-04, -2.9967e-04,  1.6551e-04, -8.8318e-04])\n","gradient values before mask reapp. tensor([ 7.0053e-04, -3.8860e-04, -2.1575e-04, -7.0633e-05,  5.2758e-04,\n","        -3.3379e-04, -5.0274e-04, -3.0236e-04,  1.6145e-04, -8.8631e-04])\n","gradient values before mask reapp. tensor([ 7.0366e-04, -3.8755e-04, -2.1183e-04, -7.0618e-05,  5.2478e-04,\n","        -3.3174e-04, -5.0125e-04, -3.0124e-04,  1.5848e-04, -8.7944e-04])\n","gradient values before mask reapp. tensor([ 7.0642e-04, -3.8648e-04, -2.0830e-04, -7.0512e-05,  5.2190e-04,\n","        -3.2976e-04, -4.9975e-04, -3.0024e-04,  1.5561e-04, -8.7292e-04])\n","gradient values before mask reapp. tensor([ 7.0882e-04, -3.8553e-04, -2.0552e-04, -7.0719e-05,  5.1816e-04,\n","        -3.2788e-04, -4.9847e-04, -2.9975e-04,  1.5255e-04, -8.6785e-04])\n","gradient values before mask reapp. tensor([ 7.0887e-04, -3.8494e-04, -2.0692e-04, -7.1912e-05,  5.1051e-04,\n","        -3.2646e-04, -4.9794e-04, -3.0176e-04,  1.4881e-04, -8.6937e-04])\n","gradient values before mask reapp. tensor([ 7.1853e-04, -3.8267e-04, -1.9060e-04, -6.8505e-05,  5.1993e-04,\n","        -3.2305e-04, -4.9389e-04, -2.9288e-04,  1.4827e-04, -8.4215e-04])\n","gradient values before mask reapp. tensor([ 7.1704e-04, -3.8229e-04, -1.9452e-04, -7.0184e-05,  5.1017e-04,\n","        -3.2197e-04, -4.9382e-04, -2.9632e-04,  1.4425e-04, -8.4757e-04])\n","gradient values before mask reapp. tensor([ 7.2392e-04, -3.8049e-04, -1.8316e-04, -6.8017e-05,  5.1494e-04,\n","        -3.1916e-04, -4.9075e-04, -2.9044e-04,  1.4289e-04, -8.2838e-04])\n","gradient values before mask reapp. tensor([ 7.2135e-04, -3.8028e-04, -1.8888e-04, -7.0126e-05,  5.0362e-04,\n","        -3.1831e-04, -4.9102e-04, -2.9491e-04,  1.3866e-04, -8.3669e-04])\n","gradient values before mask reapp. tensor([ 7.2632e-04, -3.7882e-04, -1.8087e-04, -6.8786e-05,  5.0536e-04,\n","        -3.1595e-04, -4.8864e-04, -2.9102e-04,  1.3682e-04, -8.2296e-04])\n","gradient values before mask reapp. tensor([ 6.2680e-04, -3.9110e-04, -3.6364e-04, -1.9893e-04,  2.2743e-04,\n","        -3.1898e-04, -5.1907e-04, -4.1929e-04,  4.6573e-05, -1.1902e-03])\n","gradient values before mask reapp. tensor([ 7.3116e-04, -3.7663e-04, -1.7392e-04, -6.8216e-05,  5.0023e-04,\n","        -3.1214e-04, -4.8547e-04, -2.8868e-04,  1.3162e-04, -8.0968e-04])\n","gradient values before mask reapp. tensor([ 7.2949e-04, -3.7631e-04, -1.7789e-04, -6.9919e-05,  4.9068e-04,\n","        -3.1117e-04, -4.8549e-04, -2.9209e-04,  1.2776e-04, -8.1537e-04])\n","gradient values before mask reapp. tensor([ 7.2671e-04, -3.7616e-04, -1.8389e-04, -7.2154e-05,  4.7908e-04,\n","        -3.1039e-04, -4.8585e-04, -2.9672e-04,  1.2352e-04, -8.2429e-04])\n","gradient values before mask reapp. tensor([ 7.3167e-04, -3.7457e-04, -1.7531e-04, -7.0386e-05,  4.8191e-04,\n","        -3.0802e-04, -4.8320e-04, -2.9224e-04,  1.2211e-04, -8.0924e-04])\n","gradient values before mask reapp. tensor([ 7.3451e-04, -3.7341e-04, -1.7100e-04, -6.9915e-05,  4.8017e-04,\n","        -3.0604e-04, -4.8150e-04, -2.9057e-04,  1.1968e-04, -8.0134e-04])\n","gradient values before mask reapp. tensor([ 7.3283e-04, -3.7305e-04, -1.7473e-04, -7.1460e-05,  4.7096e-04,\n","        -3.0506e-04, -4.8139e-04, -2.9372e-04,  1.1598e-04, -8.0651e-04])\n","gradient values before mask reapp. tensor([ 7.4063e-04, -3.7088e-04, -1.6079e-04, -6.8184e-05,  4.7892e-04,\n","        -3.0204e-04, -4.7756e-04, -2.8589e-04,  1.1554e-04, -7.8248e-04])\n","gradient values before mask reapp. tensor([ 7.3882e-04, -3.7054e-04, -1.6461e-04, -6.9718e-05,  4.6992e-04,\n","        -3.0114e-04, -4.7751e-04, -2.8904e-04,  1.1197e-04, -7.8781e-04])\n","gradient values before mask reapp. tensor([ 7.4268e-04, -3.6915e-04, -1.5814e-04, -6.8584e-05,  4.7036e-04,\n","        -2.9892e-04, -4.7529e-04, -2.8594e-04,  1.1003e-04, -7.7626e-04])\n","gradient values before mask reapp. tensor([ 7.4678e-04, -3.6765e-04, -1.5056e-04, -6.6880e-05,  4.7279e-04,\n","        -2.9681e-04, -4.7278e-04, -2.8184e-04,  1.0878e-04, -7.6269e-04])\n","gradient values before mask reapp. tensor([ 7.4029e-04, -3.6809e-04, -1.6293e-04, -7.0586e-05,  4.5547e-04,\n","        -2.9683e-04, -4.7440e-04, -2.9025e-04,  1.0366e-04, -7.8180e-04])\n","gradient values before mask reapp. tensor([ 7.3889e-04, -3.6762e-04, -1.6587e-04, -7.1844e-05,  4.4723e-04,\n","        -2.9578e-04, -4.7408e-04, -2.9281e-04,  1.0025e-04, -7.8556e-04])\n","gradient values before mask reapp. tensor([ 7.5158e-04, -3.6454e-04, -1.4246e-04, -6.5922e-05,  4.6474e-04,\n","        -2.9178e-04, -4.6830e-04, -2.7898e-04,  1.0177e-04, -7.4597e-04])\n","gradient values before mask reapp. tensor([ 7.4601e-04, -3.6482e-04, -1.5292e-04, -6.9100e-05,  4.4949e-04,\n","        -2.9166e-04, -4.6954e-04, -2.8613e-04,  9.7140e-05, -7.6203e-04])\n","gradient values before mask reapp. tensor([ 7.4438e-04, -3.6436e-04, -1.5616e-04, -7.0371e-05,  4.4100e-04,\n","        -2.9065e-04, -4.6925e-04, -2.8885e-04,  9.3713e-05, -7.6619e-04])\n","gradient values before mask reapp. tensor([ 7.5222e-04, -3.6214e-04, -1.4145e-04, -6.6692e-05,  4.5041e-04,\n","        -2.8772e-04, -4.6524e-04, -2.8028e-04,  9.3841e-05, -7.4082e-04])\n","gradient values before mask reapp. tensor([ 7.4711e-04, -3.6229e-04, -1.5086e-04, -6.9502e-05,  4.3635e-04,\n","        -2.8751e-04, -4.6623e-04, -2.8671e-04,  8.9505e-05, -7.5504e-04])\n","gradient values before mask reapp. tensor([ 7.5455e-04, -3.6019e-04, -1.3734e-04, -6.6312e-05,  4.4398e-04,\n","        -2.8455e-04, -4.6251e-04, -2.7909e-04,  8.9107e-05, -7.3174e-04])\n","gradient values before mask reapp. tensor([ 7.5735e-04, -3.5883e-04, -1.3156e-04, -6.4883e-05,  4.4517e-04,\n","        -2.8274e-04, -4.6029e-04, -2.7590e-04,  8.7840e-05, -7.2093e-04])\n","gradient values before mask reapp. tensor([ 7.5418e-04, -3.5861e-04, -1.3732e-04, -6.6687e-05,  4.3458e-04,\n","        -2.8208e-04, -4.6049e-04, -2.8005e-04,  8.4168e-05, -7.2907e-04])\n","gradient values before mask reapp. tensor([ 7.5179e-04, -3.5826e-04, -1.4152e-04, -6.8063e-05,  4.2565e-04,\n","        -2.8131e-04, -4.6038e-04, -2.8318e-04,  8.0868e-05, -7.3474e-04])\n","gradient values before mask reapp. tensor([ 7.5235e-04, -3.5740e-04, -1.4018e-04, -6.8032e-05,  4.2218e-04,\n","        -2.7996e-04, -4.5920e-04, -2.8289e-04,  7.8634e-05, -7.3153e-04])\n","gradient values before mask reapp. tensor([ 7.5822e-04, -3.5543e-04, -1.2885e-04, -6.5054e-05,  4.2848e-04,\n","        -2.7737e-04, -4.5576e-04, -2.7632e-04,  7.8253e-05, -7.1129e-04])\n","gradient values before mask reapp. tensor([ 7.5724e-04, -3.5482e-04, -1.3034e-04, -6.5719e-05,  4.2220e-04,\n","        -2.7630e-04, -4.5511e-04, -2.7775e-04,  7.5490e-05, -7.1258e-04])\n","gradient values before mask reapp. tensor([ 7.5739e-04, -3.5400e-04, -1.2958e-04, -6.5709e-05,  4.1836e-04,\n","        -2.7506e-04, -4.5400e-04, -2.7773e-04,  7.3261e-05, -7.1015e-04])\n","gradient values before mask reapp. tensor([ 7.6009e-04, -3.5262e-04, -1.2402e-04, -6.4320e-05,  4.1913e-04,\n","        -2.7316e-04, -4.5178e-04, -2.7471e-04,  7.1890e-05, -6.9952e-04])\n","gradient values before mask reapp. tensor([ 7.6289e-04, -3.5132e-04, -1.1845e-04, -6.3087e-05,  4.1977e-04,\n","        -2.7131e-04, -4.4969e-04, -2.7177e-04,  7.0462e-05, -6.8923e-04])\n","gradient values before mask reapp. tensor([ 7.6194e-04, -3.5066e-04, -1.1962e-04, -6.3547e-05,  4.1407e-04,\n","        -2.7024e-04, -4.4892e-04, -2.7291e-04,  6.7908e-05, -6.8982e-04])\n","gradient values before mask reapp. tensor([ 7.6952e-04, -3.4835e-04, -1.0480e-04, -5.9595e-05,  4.2398e-04,\n","        -2.6733e-04, -4.4476e-04, -2.6406e-04,  6.8349e-05, -6.6393e-04])\n","gradient values before mask reapp. tensor([ 7.6633e-04, -3.4811e-04, -1.0977e-04, -6.0979e-05,  4.1522e-04,\n","        -2.6688e-04, -4.4482e-04, -2.6740e-04,  6.5443e-05, -6.7084e-04])\n","gradient values before mask reapp. tensor([ 7.7664e-04, -3.4539e-04, -9.0267e-05, -5.5993e-05,  4.2916e-04,\n","        -2.6335e-04, -4.3980e-04, -2.5586e-04,  6.6492e-05, -6.3756e-04])\n","gradient values before mask reapp. tensor([ 7.7434e-04, -3.4497e-04, -9.3708e-05, -5.7027e-05,  4.2146e-04,\n","        -2.6261e-04, -4.3951e-04, -2.5832e-04,  6.3657e-05, -6.4195e-04])\n","gradient values before mask reapp. tensor([ 7.7478e-04, -3.4389e-04, -9.1455e-05, -5.6163e-05,  4.2007e-04,\n","        -2.6132e-04, -4.3788e-04, -2.5699e-04,  6.2283e-05, -6.3640e-04])\n","gradient values before mask reapp. tensor([ 7.8048e-04, -3.4202e-04, -8.0327e-05, -5.3359e-05,  4.2609e-04,\n","        -2.5881e-04, -4.3459e-04, -2.5055e-04,  6.1914e-05, -6.1687e-04])\n","gradient values before mask reapp. tensor([ 7.7359e-04, -3.4242e-04, -9.1765e-05, -5.6392e-05,  4.1143e-04,\n","        -2.5921e-04, -4.3595e-04, -2.5774e-04,  5.8065e-05, -6.3437e-04])\n","gradient values before mask reapp. tensor([ 7.0929e-04, -3.4930e-04, -2.0814e-04, -1.4897e-04,  2.2181e-04,\n","        -2.5883e-04, -4.5404e-04, -3.4094e-04, -6.3286e-06, -8.7587e-04])\n","gradient values before mask reapp. tensor([ 7.7984e-04, -3.3940e-04, -7.7835e-05, -5.2489e-05,  4.1691e-04,\n","        -2.5540e-04, -4.3088e-04, -2.4950e-04,  5.6621e-05, -6.0834e-04])\n","gradient values before mask reapp. tensor([ 7.8193e-04, -3.3813e-04, -7.2884e-05, -5.1098e-05,  4.1763e-04,\n","        -2.5375e-04, -4.2882e-04, -2.4667e-04,  5.5498e-05, -5.9870e-04])\n","gradient values before mask reapp. tensor([ 7.7559e-04, -3.3835e-04, -8.3345e-05, -5.3868e-05,  4.0376e-04,\n","        -2.5391e-04, -4.2991e-04, -2.5330e-04,  5.1763e-05, -6.1441e-04])\n","gradient values before mask reapp. tensor([ 7.9392e-04, -3.3425e-04, -4.8908e-05, -4.4920e-05,  4.3216e-04,\n","        -2.4874e-04, -4.2191e-04, -2.3250e-04,  5.5574e-05, -5.5687e-04])\n","gradient values before mask reapp. tensor([ 7.8728e-04, -3.3438e-04, -5.9025e-05, -4.7157e-05,  4.1958e-04,\n","        -2.4905e-04, -4.2275e-04, -2.3851e-04,  5.2424e-05, -5.7153e-04])\n","gradient values before mask reapp. tensor([ 6.3997e-04, -3.5269e-04, -3.2650e-04, -2.3697e-04,  1.7551e-05,\n","        -2.5474e-04, -4.6747e-04, -4.2487e-04, -7.6859e-05, -1.1094e-03])\n","gradient values before mask reapp. tensor([ 7.9856e-04, -3.3057e-04, -3.5768e-05, -4.0940e-05,  4.3410e-04,\n","        -2.4429e-04, -4.1595e-04, -2.2455e-04,  5.2767e-05, -5.3069e-04])\n","gradient values before mask reapp. tensor([ 7.8564e-04, -3.3194e-04, -5.8054e-05, -4.6575e-05,  4.0923e-04,\n","        -2.4589e-04, -4.1942e-04, -2.3833e-04,  4.7123e-05, -5.6547e-04])\n","gradient values before mask reapp. tensor([ 7.8899e-04, -3.3040e-04, -5.0521e-05, -4.4578e-05,  4.1254e-04,\n","        -2.4395e-04, -4.1680e-04, -2.3384e-04,  4.6568e-05, -5.5172e-04])\n","gradient values before mask reapp. tensor([ 7.9858e-04, -3.2770e-04, -3.1085e-05, -3.9143e-05,  4.2791e-04,\n","        -2.4080e-04, -4.1170e-04, -2.2181e-04,  4.8454e-05, -5.1826e-04])\n","gradient values before mask reapp. tensor([ 7.8703e-04, -3.2881e-04, -5.0687e-05, -4.4045e-05,  4.0570e-04,\n","        -2.4210e-04, -4.1458e-04, -2.3386e-04,  4.3349e-05, -5.4860e-04])\n","gradient values before mask reapp. tensor([ 7.9277e-04, -3.2688e-04, -3.8463e-05, -4.0781e-05,  4.1406e-04,\n","        -2.3982e-04, -4.1109e-04, -2.2635e-04,  4.3959e-05, -5.2739e-04])\n","gradient values before mask reapp. tensor([ 7.9507e-04, -3.2556e-04, -3.2951e-05, -3.9241e-05,  4.1536e-04,\n","        -2.3811e-04, -4.0892e-04, -2.2315e-04,  4.2996e-05, -5.1689e-04])\n","gradient values before mask reapp. tensor([ 6.4939e-04, -3.4387e-04, -2.9706e-04, -2.2186e-04,  2.4329e-05,\n","        -2.4472e-04, -4.5332e-04, -4.0614e-04, -8.1278e-05, -1.0437e-03])\n","gradient values before mask reapp. tensor([ 8.0023e-04, -3.2266e-04, -1.9857e-05, -3.5211e-05,  4.2126e-04,\n","        -2.3472e-04, -4.0398e-04, -2.1498e-04,  4.2184e-05, -4.9211e-04])\n","gradient values before mask reapp. tensor([ 7.8758e-04, -3.2392e-04, -4.0923e-05, -4.0510e-05,  3.9857e-04,\n","        -2.3641e-04, -4.0719e-04, -2.2771e-04,  3.7375e-05, -5.2502e-04])\n","gradient values before mask reapp. tensor([ 7.9803e-04, -3.2115e-04, -2.0548e-05, -3.4998e-05,  4.1376e-04,\n","        -2.3292e-04, -4.0198e-04, -2.1543e-04,  3.8850e-05, -4.9014e-04])\n","gradient values before mask reapp. tensor([ 7.9148e-04, -3.2140e-04, -3.0698e-05, -3.7542e-05,  4.0096e-04,\n","        -2.3327e-04, -4.0302e-04, -2.2158e-04,  3.5671e-05, -5.0539e-04])\n","gradient values before mask reapp. tensor([ 7.9622e-04, -3.1960e-04, -2.0372e-05, -3.4552e-05,  4.0730e-04,\n","        -2.3108e-04, -3.9982e-04, -2.1527e-04,  3.5806e-05, -4.8685e-04])\n","gradient values before mask reapp. tensor([ 7.9134e-04, -3.1946e-04, -2.7303e-05, -3.6068e-05,  3.9759e-04,\n","        -2.3100e-04, -4.0008e-04, -2.1938e-04,  3.3180e-05, -4.9649e-04])\n","gradient values before mask reapp. tensor([ 6.6596e-04, -3.3444e-04, -2.5420e-04, -2.0477e-04,  4.7155e-05,\n","        -2.3421e-04, -4.3730e-04, -3.7876e-04, -8.1695e-05, -9.5918e-04])\n","gradient values before mask reapp. tensor([ 7.9618e-04, -3.1674e-04, -1.4603e-05, -3.2261e-05,  4.0344e-04,\n","        -2.2786e-04, -3.9540e-04, -2.1140e-04,  3.2547e-05, -4.7284e-04])\n","gradient values before mask reapp. tensor([ 7.9538e-04, -3.1576e-04, -1.3652e-05, -3.1468e-05,  4.0174e-04,\n","        -2.2691e-04, -3.9396e-04, -2.1051e-04,  3.1551e-05, -4.6923e-04])\n","gradient values before mask reapp. tensor([ 7.8842e-04, -3.1602e-04, -2.4436e-05, -3.4177e-05,  3.8852e-04,\n","        -2.2733e-04, -3.9511e-04, -2.1703e-04,  2.8370e-05, -4.8548e-04])\n","gradient values before mask reapp. tensor([ 7.9633e-04, -3.1369e-04, -8.1662e-06, -2.9558e-05,  4.0051e-04,\n","        -2.2449e-04, -3.9070e-04, -2.0702e-04,  2.9554e-05, -4.5721e-04])\n","gradient values before mask reapp. tensor([ 7.9061e-04, -3.1376e-04, -1.6614e-05, -3.1644e-05,  3.8968e-04,\n","        -2.2471e-04, -3.9142e-04, -2.1207e-04,  2.6875e-05, -4.6973e-04])\n","gradient values before mask reapp. tensor([ 6.6922e-04, -3.2821e-04, -2.3638e-04, -1.9430e-04,  5.0407e-05,\n","        -2.2772e-04, -4.2736e-04, -3.6639e-04, -8.4285e-05, -9.1693e-04])\n","gradient values before mask reapp. tensor([ 8.0105e-04, -3.1002e-04,  6.7488e-06, -2.5095e-05,  4.0616e-04,\n","        -2.2047e-04, -3.8460e-04, -1.9740e-04,  2.8423e-05, -4.2890e-04])\n","gradient values before mask reapp. tensor([ 8.0764e-04, -3.0774e-04,  2.1267e-05, -2.0582e-05,  4.1722e-04,\n","        -2.1789e-04, -3.8035e-04, -1.8817e-04,  2.9686e-05, -4.0293e-04])\n","gradient values before mask reapp. tensor([ 7.9335e-04, -3.0928e-04, -2.3894e-06, -2.6597e-05,  3.9258e-04,\n","        -2.2005e-04, -3.8414e-04, -2.0235e-04,  2.4776e-05, -4.4031e-04])\n","gradient values before mask reapp. tensor([ 8.0262e-04, -3.0672e-04,  1.6182e-05, -2.1442e-05,  4.0656e-04,\n","        -2.1687e-04, -3.7930e-04, -1.9102e-04,  2.6255e-05, -4.0832e-04])\n","gradient values before mask reapp. tensor([ 6.7888e-04, -3.2169e-04, -2.0756e-04, -1.8258e-04,  6.7081e-05,\n","        -2.2096e-04, -4.1624e-04, -3.4719e-04, -8.3577e-05, -8.5985e-04])\n","gradient values before mask reapp. tensor([ 7.9740e-04, -3.0562e-04,  1.1071e-05, -2.2172e-05,  3.9616e-04,\n","        -2.1584e-04, -3.7816e-04, -1.9378e-04,  2.2989e-05, -4.1348e-04])\n","gradient values before mask reapp. tensor([ 8.0403e-04, -3.0353e-04,  2.5084e-05, -1.8207e-05,  4.0613e-04,\n","        -2.1331e-04, -3.7425e-04, -1.8513e-04,  2.3883e-05, -3.8907e-04])\n","gradient values before mask reapp. tensor([ 7.4091e-04, -3.1081e-04, -8.7698e-05, -9.7503e-05,  2.3616e-04,\n","        -2.1547e-04, -3.9247e-04, -2.6330e-04, -3.0647e-05, -6.1446e-04])\n","gradient values before mask reapp. tensor([ 7.9952e-04, -3.0220e-04,  2.2222e-05, -1.8005e-05,  3.9914e-04,\n","        -2.1232e-04, -3.7254e-04, -1.8605e-04,  2.1700e-05, -3.9030e-04])\n","gradient values before mask reapp. tensor([ 7.3947e-04, -3.0902e-04, -8.5124e-05, -9.5331e-05,  2.3471e-04,\n","        -2.1391e-04, -3.8972e-04, -2.6086e-04, -3.1684e-05, -6.0639e-04])\n","gradient values before mask reapp. tensor([ 8.0352e-04, -2.9955e-04,  3.3972e-05, -1.4268e-05,  4.0467e-04,\n","        -2.0937e-04, -3.6801e-04, -1.7845e-04,  2.1299e-05, -3.6805e-04])\n","gradient values before mask reapp. tensor([ 6.6997e-04, -3.1656e-04, -2.0718e-04, -1.7533e-04,  5.5411e-05,\n","        -2.1679e-04, -4.0893e-04, -3.4416e-04, -8.7685e-05, -8.4434e-04])\n","gradient values before mask reapp. tensor([ 8.0435e-04, -2.9749e-04,  4.0392e-05, -1.1912e-05,  4.0590e-04,\n","        -2.0731e-04, -3.6463e-04, -1.7391e-04,  2.0424e-05, -3.5475e-04])\n","gradient values before mask reapp. tensor([ 7.9989e-04, -2.9730e-04,  3.4539e-05, -1.3134e-05,  3.9774e-04,\n","        -2.0726e-04, -3.6478e-04, -1.7728e-04,  1.8332e-05, -3.6281e-04])\n","gradient values before mask reapp. tensor([ 7.8805e-04, -2.9839e-04,  1.5433e-05, -1.7882e-05,  3.7744e-04,\n","        -2.0883e-04, -3.6762e-04, -1.8865e-04,  1.4220e-05, -3.9259e-04])\n","gradient values before mask reapp. tensor([ 6.7916e-04, -3.1095e-04, -1.8044e-04, -1.6505e-04,  7.2812e-05,\n","        -2.1111e-04, -3.9917e-04, -3.2623e-04, -8.6118e-05, -7.9277e-04])\n","gradient values before mask reapp. tensor([ 8.0019e-04, -2.9412e-04,  4.2682e-05, -9.6568e-06,  3.9823e-04,\n","        -2.0409e-04, -3.5973e-04, -1.7130e-04,  1.6754e-05, -3.4435e-04])\n","gradient values before mask reapp. tensor([ 7.9115e-04, -2.9470e-04,  2.8801e-05, -1.2972e-05,  3.8300e-04,\n","        -2.0508e-04, -3.6149e-04, -1.7943e-04,  1.3606e-05, -3.6554e-04])\n","gradient values before mask reapp. tensor([ 8.0456e-04, -2.9146e-04,  5.5745e-05, -5.6492e-06,  4.0601e-04,\n","        -2.0134e-04, -3.5506e-04, -1.6262e-04,  1.7195e-05, -3.2045e-04])\n","gradient values before mask reapp. tensor([ 6.7827e-04, -3.0735e-04, -1.7221e-04, -1.5934e-04,  7.3668e-05,\n","        -2.0789e-04, -3.9350e-04, -3.1958e-04, -8.7043e-05, -7.7167e-04])\n","gradient values before mask reapp. tensor([ 7.9314e-04, -2.9147e-04,  4.0017e-05, -9.1256e-06,  3.8678e-04,\n","        -2.0189e-04, -3.5617e-04, -1.7158e-04,  1.2867e-05, -3.4323e-04])\n","gradient values before mask reapp. tensor([ 7.9430e-04, -2.9027e-04,  4.4350e-05, -7.6393e-06,  3.8805e-04,\n","        -2.0054e-04, -3.5421e-04, -1.6875e-04,  1.2390e-05, -3.3450e-04])\n","gradient values before mask reapp. tensor([ 6.7549e-04, -3.0501e-04, -1.6990e-04, -1.5593e-04,  7.0982e-05,\n","        -2.0596e-04, -3.9007e-04, -3.1693e-04, -8.8197e-05, -7.6203e-04])\n","gradient values before mask reapp. tensor([ 8.0424e-04, -2.8651e-04,  6.7989e-05, -5.0304e-07,  4.0621e-04,\n","        -1.9656e-04, -3.4724e-04, -1.5343e-04,  1.4811e-05, -2.9279e-04])\n","gradient values before mask reapp. tensor([ 7.9602e-04, -2.8699e-04,  5.5652e-05, -3.4520e-06,  3.9247e-04,\n","        -1.9742e-04, -3.4874e-04, -1.6060e-04,  1.1969e-05, -3.1163e-04])\n","gradient values before mask reapp. tensor([ 6.8269e-04, -3.0080e-04, -1.4879e-04, -1.4816e-04,  8.5509e-05,\n","        -2.0176e-04, -3.8265e-04, -3.0270e-04, -8.6505e-05, -7.2212e-04])\n","gradient values before mask reapp. tensor([ 7.9663e-04, -2.8491e-04,  6.1778e-05, -1.1642e-06,  3.9353e-04,\n","        -1.9534e-04, -3.4542e-04, -1.5625e-04,  1.1146e-05, -2.9870e-04])\n","gradient values before mask reapp. tensor([ 7.8377e-04, -2.8616e-04,  4.1188e-05, -6.2288e-06,  3.7246e-04,\n","        -1.9723e-04, -3.4858e-04, -1.6837e-04,  7.1554e-06, -3.3094e-04])\n","gradient values before mask reapp. tensor([ 6.8039e-04, -2.9812e-04, -1.4439e-04, -1.4401e-04,  8.5992e-05,\n","        -1.9974e-04, -3.7853e-04, -2.9830e-04, -8.6654e-05, -7.0864e-04])\n","gradient values before mask reapp. tensor([ 7.9622e-04, -2.8200e-04,  6.9422e-05,  1.9501e-06,  3.9512e-04,\n","        -1.9277e-04, -3.4077e-04, -1.5025e-04,  1.0472e-05, -2.8203e-04])\n","gradient values before mask reapp. tensor([ 7.8978e-04, -2.8215e-04,  6.0281e-05, -5.9798e-08,  3.8422e-04,\n","        -1.9320e-04, -3.4158e-04, -1.5549e-04,  8.0540e-06, -2.9548e-04])\n","gradient values before mask reapp. tensor([ 6.8047e-04, -2.9542e-04, -1.3664e-04, -1.3972e-04,  8.8488e-05,\n","        -1.9736e-04, -3.7419e-04, -2.9231e-04, -8.6801e-05, -6.9109e-04])\n","gradient values before mask reapp. tensor([ 7.9364e-04, -2.7932e-04,  7.3330e-05,  4.4790e-06,  3.9317e-04,\n","        -1.9050e-04, -3.3665e-04, -1.4643e-04,  9.1317e-06, -2.7068e-04])\n","gradient values before mask reapp. tensor([ 6.7885e-04, -2.9368e-04, -1.3387e-04, -1.3705e-04,  8.8614e-05,\n","        -1.9606e-04, -3.7153e-04, -2.8952e-04, -8.6941e-05, -6.8250e-04])\n","gradient values before mask reapp. tensor([ 7.8749e-04, -2.7856e-04,  6.6766e-05,  3.1494e-06,  3.8188e-04,\n","        -1.8990e-04, -3.3609e-04, -1.5003e-04,  5.9967e-06, -2.7897e-04])\n","gradient values before mask reapp. tensor([ 7.8927e-04, -2.7729e-04,  7.3082e-05,  5.2095e-06,  3.8644e-04,\n","        -1.8876e-04, -3.3382e-04, -1.4559e-04,  6.6979e-06, -2.6742e-04])\n","gradient values before mask reapp. tensor([ 6.7719e-04, -2.9102e-04, -1.2835e-04, -1.3291e-04,  8.9883e-05,\n","        -1.9401e-04, -3.6736e-04, -2.8450e-04, -8.7010e-05, -6.6787e-04])\n","gradient values before mask reapp. tensor([ 7.8732e-04, -2.7552e-04,  7.5304e-05,  6.7445e-06,  3.8486e-04,\n","        -1.8731e-04, -3.3119e-04, -1.4331e-04,  5.7924e-06, -2.6052e-04])\n","gradient values before mask reapp. tensor([ 7.7870e-04, -2.7606e-04,  6.2324e-05,  3.7037e-06,  3.7057e-04,\n","        -1.8824e-04, -3.3279e-04, -1.5083e-04,  2.8598e-06, -2.8032e-04])\n","gradient values before mask reapp. tensor([ 6.8133e-04, -2.8749e-04, -1.1247e-04, -1.2674e-04,  1.0045e-04,\n","        -1.9079e-04, -3.6127e-04, -2.7332e-04, -8.5554e-05, -6.3730e-04])\n","gradient values before mask reapp. tensor([ 7.8084e-04, -2.7377e-04,  7.2089e-05,  6.8968e-06,  3.7651e-04,\n","        -1.8620e-04, -3.2888e-04, -1.4388e-04,  3.5258e-06, -2.6205e-04])\n","gradient values before mask reapp. tensor([ 6.7416e-04, -2.8681e-04, -1.1988e-04, -1.2651e-04,  9.1603e-05,\n","        -1.9080e-04, -3.6080e-04, -2.7669e-04, -8.7022e-05, -6.4526e-04])\n","gradient values before mask reapp. tensor([ 7.8446e-04, -2.7103e-04,  8.4634e-05,  1.1142e-05,  3.8493e-04,\n","        -1.8362e-04, -3.2417e-04, -1.3520e-04,  4.5313e-06, -2.3844e-04])\n","gradient values before mask reapp. tensor([ 7.7684e-04, -2.7137e-04,  7.3475e-05,  8.6418e-06,  3.7261e-04,\n","        -1.8431e-04, -3.2540e-04, -1.4161e-04,  2.0433e-06, -2.5508e-04])\n","gradient values before mask reapp. tensor([ 6.7524e-04, -2.8367e-04, -1.0915e-04, -1.2130e-04,  9.8108e-05,\n","        -1.8825e-04, -3.5565e-04, -2.6844e-04, -8.5981e-05, -6.2260e-04])\n","gradient values before mask reapp. tensor([ 7.7424e-04, -2.6984e-04,  7.4329e-05,  9.5865e-06,  3.6975e-04,\n","        -1.8309e-04, -3.2322e-04, -1.4024e-04,  9.5889e-07, -2.5093e-04])\n","gradient values before mask reapp. tensor([ 6.7850e-04, -2.8122e-04, -9.7152e-05, -1.1698e-04,  1.0706e-04,\n","        -1.8611e-04, -3.5133e-04, -2.5994e-04, -8.4425e-05, -6.0028e-04])\n","gradient values before mask reapp. tensor([ 7.7459e-04, -2.6787e-04,  8.1104e-05,  1.1896e-05,  3.7328e-04,\n","        -1.8152e-04, -3.1995e-04, -1.3500e-04,  1.3676e-06, -2.3774e-04])\n","gradient values before mask reapp. tensor([ 7.2099e-04, -2.7412e-04, -1.3866e-05, -5.2581e-05,  2.3340e-04,\n","        -1.8398e-04, -3.3546e-04, -2.0017e-04, -4.2562e-05, -4.2585e-04])\n","gradient values before mask reapp. tensor([ 7.7384e-04, -2.6592e-04,  8.6137e-05,  1.4218e-05,  3.7567e-04,\n","        -1.8004e-04, -3.1680e-04, -1.3067e-04,  1.6986e-06, -2.2647e-04])\n","gradient values before mask reapp. tensor([ 6.6551e-04, -2.7960e-04, -1.0891e-04, -1.1600e-04,  9.3002e-05,\n","        -1.8606e-04, -3.4986e-04, -2.6463e-04, -8.6387e-05, -6.1182e-04])\n","gradient values before mask reapp. tensor([ 7.6496e-04, -2.6554e-04,  7.5272e-05,  1.1755e-05,  3.6128e-04,\n","        -1.8015e-04, -3.1710e-04, -1.3664e-04, -1.5898e-06, -2.4192e-04])\n","gradient values before mask reapp. tensor([ 6.6641e-04, -2.7753e-04, -1.0160e-04, -1.1256e-04,  9.7517e-05,\n","        -1.8432e-04, -3.4647e-04, -2.5911e-04, -8.5649e-05, -5.9653e-04])\n","gradient values before mask reapp. tensor([ 7.6115e-04, -2.6428e-04,  7.3961e-05,  1.2006e-05,  3.5663e-04,\n","        -1.7929e-04, -3.1545e-04, -1.3657e-04, -2.8634e-06, -2.4161e-04])\n","gradient values before mask reapp. tensor([ 7.1051e-04, -2.7010e-04, -1.5541e-05, -4.9341e-05,  2.2409e-04,\n","        -1.8146e-04, -3.2996e-04, -1.9804e-04, -4.4660e-05, -4.1928e-04])\n","gradient values before mask reapp. tensor([ 7.6192e-04, -2.6205e-04,  8.1847e-05,  1.5222e-05,  3.6199e-04,\n","        -1.7749e-04, -3.1171e-04, -1.3043e-04, -1.9239e-06, -2.2546e-04])\n","gradient values before mask reapp. tensor([ 6.6382e-04, -2.7415e-04, -9.4408e-05, -1.0753e-04,  1.0062e-04,\n","        -1.8202e-04, -3.4125e-04, -2.5233e-04, -8.4795e-05, -5.7828e-04])\n","gradient values before mask reapp. tensor([ 7.5433e-04, -2.6149e-04,  7.3651e-05,  1.3228e-05,  3.5062e-04,\n","        -1.7748e-04, -3.1155e-04, -1.3464e-04, -4.4455e-06, -2.3705e-04])\n","gradient values before mask reapp. tensor([ 6.6103e-04, -2.7275e-04, -9.3676e-05, -1.0567e-04,  9.9492e-05,\n","        -1.8120e-04, -3.3926e-04, -2.5072e-04, -8.4825e-05, -5.7375e-04])\n","gradient values before mask reapp. tensor([ 7.5077e-04, -2.6015e-04,  7.3042e-05,  1.3710e-05,  3.4700e-04,\n","        -1.7661e-04, -3.0975e-04, -1.3404e-04, -5.4003e-06, -2.3557e-04])\n","gradient values before mask reapp. tensor([ 7.0186e-04, -2.6577e-04, -1.3382e-05, -4.5332e-05,  2.1917e-04,\n","        -1.7875e-04, -3.2379e-04, -1.9340e-04, -4.5642e-05, -4.0702e-04])\n","gradient values before mask reapp. tensor([ 7.5073e-04, -2.5813e-04,  7.9182e-05,  1.6110e-05,  3.5014e-04,\n","        -1.7501e-04, -3.0648e-04, -1.2915e-04, -5.0162e-06, -2.2288e-04])\n","gradient values before mask reapp. tensor([ 6.5753e-04, -2.6970e-04, -8.8104e-05, -1.0132e-04,  1.0142e-04,\n","        -1.7927e-04, -3.3456e-04, -2.4488e-04, -8.3997e-05, -5.5882e-04])\n","gradient values before mask reapp. tensor([ 7.4368e-04, -2.5736e-04,  7.2321e-05,  1.5094e-05,  3.4094e-04,\n","        -1.7479e-04, -3.0583e-04, -1.3227e-04, -6.8999e-06, -2.3123e-04])\n","gradient values before mask reapp. tensor([ 6.5717e-04, -2.6776e-04, -8.2730e-05, -9.8329e-05,  1.0480e-04,\n","        -1.7790e-04, -3.3155e-04, -2.4041e-04, -8.3207e-05, -5.4665e-04])\n","gradient values before mask reapp. tensor([ 7.4196e-04, -2.5583e-04,  7.5138e-05,  1.5784e-05,  3.4055e-04,\n","        -1.7378e-04, -3.0360e-04, -1.2963e-04, -7.1993e-06, -2.2542e-04])\n","gradient values before mask reapp. tensor([ 6.9522e-04, -2.6120e-04, -7.3686e-06, -4.0722e-05,  2.1843e-04,\n","        -1.7584e-04, -3.1702e-04, -1.8629e-04, -4.5627e-05, -3.8933e-04])\n","gradient values before mask reapp. tensor([ 7.3706e-04, -2.5481e-04,  7.2000e-05,  1.5419e-05,  3.3457e-04,\n","        -1.7327e-04, -3.0242e-04, -1.3062e-04, -8.5451e-06, -2.2844e-04])\n","gradient values before mask reapp. tensor([ 6.5114e-04, -2.6498e-04, -8.1630e-05, -9.4619e-05,  1.0283e-04,\n","        -1.7640e-04, -3.2758e-04, -2.3723e-04, -8.3015e-05, -5.3805e-04])\n","gradient values before mask reapp. tensor([ 7.3098e-04, -2.5395e-04,  6.6664e-05,  1.4433e-05,  3.2640e-04,\n","        -1.7292e-04, -3.0163e-04, -1.3298e-04, -1.0337e-05, -2.3495e-04])\n","gradient values before mask reapp. tensor([ 6.9229e-04, -2.5776e-04, -4.2715e-07, -3.6365e-05,  2.2091e-04,\n","        -1.7339e-04, -3.1166e-04, -1.7964e-04, -4.5118e-05, -3.7166e-04])\n","gradient values before mask reapp. tensor([ 6.8877e-04, -2.5749e-04, -4.2720e-06, -3.7090e-05,  2.1581e-04,\n","        -1.7344e-04, -3.1169e-04, -1.8165e-04, -4.6095e-05, -3.7703e-04])\n","gradient values before mask reapp. tensor([ 7.2981e-04, -2.5125e-04,  7.3894e-05,  1.7090e-05,  3.2941e-04,\n","        -1.7094e-04, -2.9733e-04, -1.2685e-04, -9.9784e-06, -2.1997e-04])\n","gradient values before mask reapp. tensor([ 6.3805e-04, -2.6257e-04, -9.0965e-05, -9.2559e-05,  9.0427e-05,\n","        -1.7570e-04, -3.2494e-04, -2.4001e-04, -8.4477e-05, -5.4453e-04])\n","gradient values before mask reapp. tensor([ 7.3126e-04, -2.4911e-04,  8.2306e-05,  1.9581e-05,  3.3413e-04,\n","        -1.6904e-04, -2.9381e-04, -1.2080e-04, -9.4811e-06, -2.0436e-04])\n","gradient values before mask reapp. tensor([ 6.3322e-04, -2.6152e-04, -9.3909e-05, -9.1565e-05,  8.6125e-05,\n","        -1.7530e-04, -3.2369e-04, -2.4060e-04, -8.4972e-05, -5.4589e-04])\n","gradient values before mask reapp. tensor([ 7.2871e-04, -2.4761e-04,  8.3420e-05,  2.0469e-05,  3.3219e-04,\n","        -1.6795e-04, -2.9170e-04, -1.1921e-04, -1.0132e-05, -2.0010e-04])\n","gradient values before mask reapp. tensor([ 7.2334e-04, -2.4748e-04,  7.7007e-05,  1.9450e-05,  3.2545e-04,\n","        -1.6828e-04, -2.9190e-04, -1.2241e-04, -1.1234e-05, -2.0870e-04])\n","gradient values before mask reapp. tensor([ 6.3755e-04, -2.5819e-04, -7.7043e-05, -8.5934e-05,  9.9440e-05,\n","        -1.7268e-04, -3.1795e-04, -2.2858e-04, -8.2189e-05, -5.1567e-04])\n","gradient values before mask reapp. tensor([ 7.2265e-04, -2.4570e-04,  8.1810e-05,  2.1329e-05,  3.2765e-04,\n","        -1.6691e-04, -2.8906e-04, -1.1836e-04, -1.0898e-05, -1.9853e-04])\n","gradient values before mask reapp. tensor([ 6.3492e-04, -2.5668e-04, -7.5577e-05, -8.3840e-05,  9.9698e-05,\n","        -1.7187e-04, -3.1576e-04, -2.2637e-04, -8.1751e-05, -5.0981e-04])\n","gradient values before mask reapp. tensor([ 7.0748e-04, -2.4663e-04,  5.9329e-05,  1.5041e-05,  3.0259e-04,\n","        -1.6860e-04, -2.9210e-04, -1.3155e-04, -1.5862e-05, -2.3438e-04])\n","gradient values before mask reapp. tensor([ 6.8274e-04, -2.4819e-04,  1.7952e-05, -2.5991e-05,  2.2558e-04,\n","        -1.6688e-04, -2.9720e-04, -1.6177e-04, -4.3900e-05, -3.2683e-04])\n","gradient values before mask reapp. tensor([ 6.6680e-04, -2.5008e-04, -8.6650e-06, -3.2155e-05,  1.9944e-04,\n","        -1.6953e-04, -3.0180e-04, -1.7769e-04, -4.8514e-05, -3.6854e-04])\n","gradient values before mask reapp. tensor([ 7.1960e-04, -2.4167e-04,  9.0863e-05,  2.3961e-05,  3.2899e-04,\n","        -1.6385e-04, -2.8294e-04, -1.1047e-04, -1.1141e-05, -1.8001e-04])\n","gradient values before mask reapp. tensor([ 6.2364e-04, -2.5407e-04, -8.1536e-05, -8.1322e-05,  9.0797e-05,\n","        -1.7092e-04, -3.1260e-04, -2.2704e-04, -8.2444e-05, -5.1155e-04])\n","gradient values before mask reapp. tensor([ 7.1524e-04, -2.4051e-04,  8.8840e-05,  2.3737e-05,  3.2422e-04,\n","        -1.6326e-04, -2.8157e-04, -1.1076e-04, -1.2210e-05, -1.8143e-04])\n","gradient values before mask reapp. tensor([ 6.1806e-04, -2.5324e-04, -8.5916e-05, -8.0818e-05,  8.5417e-05,\n","        -1.7080e-04, -3.1178e-04, -2.2853e-04, -8.3007e-05, -5.1559e-04])\n","gradient values before mask reapp. tensor([ 7.1194e-04, -2.3912e-04,  8.8896e-05,  2.4514e-05,  3.2189e-04,\n","        -1.6236e-04, -2.7961e-04, -1.0964e-04, -1.2751e-05, -1.7862e-04])\n","gradient values before mask reapp. tensor([ 6.6463e-04, -2.4485e-04,  5.4608e-06, -2.5694e-05,  2.0701e-04,\n","        -1.6581e-04, -2.9361e-04, -1.6564e-04, -4.6798e-05, -3.3813e-04])\n","gradient values before mask reapp. tensor([ 6.6406e-04, -2.4437e-04,  6.7210e-06, -2.5771e-05,  2.0677e-04,\n","        -1.6542e-04, -2.9294e-04, -1.6460e-04, -4.6771e-05, -3.3661e-04])\n","gradient values before mask reapp. tensor([ 7.0153e-04, -2.3801e-04,  7.8812e-05,  2.2997e-05,  3.0868e-04,\n","        -1.6218e-04, -2.7880e-04, -1.1426e-04, -1.5305e-05, -1.9109e-04])\n","gradient values before mask reapp. tensor([ 6.2591e-04, -2.4737e-04, -5.6646e-05, -7.0808e-05,  1.0900e-04,\n","        -1.6594e-04, -3.0171e-04, -2.0776e-04, -7.8112e-05, -4.6223e-04])\n","gradient values before mask reapp. tensor([ 6.9655e-04, -2.3699e-04,  7.5807e-05,  2.2614e-05,  3.0351e-04,\n","        -1.6175e-04, -2.7761e-04, -1.1502e-04, -1.6246e-05, -1.9404e-04])\n","gradient values before mask reapp. tensor([ 6.2200e-04, -2.4614e-04, -5.7536e-05, -6.9424e-05,  1.0713e-04,\n","        -1.6550e-04, -3.0010e-04, -2.0699e-04, -7.7994e-05, -4.6055e-04])\n","gradient values before mask reapp. tensor([ 6.9075e-04, -2.3616e-04,  7.0930e-05,  2.1590e-05,  2.9605e-04,\n","        -1.6145e-04, -2.7688e-04, -1.1712e-04, -1.7797e-05, -2.0018e-04])\n","gradient values before mask reapp. tensor([ 6.5430e-04, -2.4020e-04,  7.3225e-06, -2.2173e-05,  2.0192e-04,\n","        -1.6316e-04, -2.8722e-04, -1.6073e-04, -4.7268e-05, -3.2693e-04])\n","gradient values before mask reapp. tensor([ 6.6060e-04, -2.3812e-04,  2.1755e-05, -1.7811e-05,  2.1433e-04,\n","        -1.6094e-04, -2.8326e-04, -1.5134e-04, -4.5147e-05, -3.0163e-04])\n","gradient values before mask reapp. tensor([ 6.5947e-04, -2.3766e-04,  2.2685e-05, -1.7757e-05,  2.1482e-04,\n","        -1.6090e-04, -2.8263e-04, -1.5018e-04, -4.4592e-05, -3.0061e-04])\n","gradient values before mask reapp. tensor([ 6.4652e-04, -2.3876e-04,  2.1409e-06, -2.1763e-05,  1.9459e-04,\n","        -1.6271e-04, -2.8558e-04, -1.6214e-04, -4.8265e-05, -3.3108e-04])\n","gradient values before mask reapp. tensor([ 6.8324e-04, -2.3323e-04,  7.1523e-05,  2.0930e-05,  2.8944e-04,\n","        -1.5976e-04, -2.7306e-04, -1.1464e-04, -1.9295e-05, -1.9757e-04])\n","gradient values before mask reapp. tensor([ 6.1172e-04, -2.4150e-04, -5.5586e-05, -6.3442e-05,  1.0456e-04,\n","        -1.6303e-04, -2.9358e-04, -2.0160e-04, -7.7214e-05, -4.4633e-04])\n","gradient values before mask reapp. tensor([ 6.8600e-04, -2.3093e-04,  8.2337e-05,  2.4094e-05,  2.9694e-04,\n","        -1.5768e-04, -2.6915e-04, -1.0708e-04, -1.8129e-05, -1.7808e-04])\n","gradient values before mask reapp. tensor([ 6.1004e-04, -2.3996e-04, -5.2736e-05, -6.1364e-05,  1.0587e-04,\n","        -1.6207e-04, -2.9132e-04, -1.9869e-04, -7.6630e-05, -4.3893e-04])\n","gradient values before mask reapp. tensor([ 6.8433e-04, -2.2932e-04,  8.5244e-05,  2.5295e-05,  2.9717e-04,\n","        -1.5653e-04, -2.6677e-04, -1.0431e-04, -1.8197e-05, -1.7126e-04])\n","gradient values before mask reapp. tensor([ 6.4180e-04, -2.3415e-04,  1.1237e-05, -1.6865e-05,  1.9750e-04,\n","        -1.5961e-04, -2.7867e-04, -1.5332e-04, -4.7292e-05, -3.0947e-04])\n","gradient values before mask reapp. tensor([ 6.4772e-04, -2.3244e-04,  2.4594e-05, -1.3863e-05,  2.0882e-04,\n","        -1.5792e-04, -2.7554e-04, -1.4484e-04, -4.5156e-05, -2.8832e-04])\n","gradient values before mask reapp. tensor([ 6.4276e-04, -2.3212e-04,  1.8978e-05, -1.3990e-05,  2.0295e-04,\n","        -1.5803e-04, -2.7538e-04, -1.4749e-04, -4.6159e-05, -2.9454e-04])\n","gradient values before mask reapp. tensor([ 6.4515e-04, -2.3099e-04,  2.5912e-05, -1.2467e-05,  2.0829e-04,\n","        -1.5704e-04, -2.7350e-04, -1.4292e-04, -4.5093e-05, -2.8346e-04])\n","gradient values before mask reapp. tensor([ 6.4009e-04, -2.3078e-04,  2.0019e-05, -1.2900e-05,  2.0221e-04,\n","        -1.5724e-04, -2.7350e-04, -1.4577e-04, -4.6079e-05, -2.9057e-04])\n","gradient values before mask reapp. tensor([ 6.4191e-04, -2.2973e-04,  2.6133e-05, -1.1593e-05,  2.0713e-04,\n","        -1.5650e-04, -2.7183e-04, -1.4162e-04, -4.4932e-05, -2.8103e-04])\n","gradient values before mask reapp. tensor([ 6.3063e-04, -2.3093e-04,  8.0773e-06, -1.5527e-05,  1.8865e-04,\n","        -1.5813e-04, -2.7460e-04, -1.5219e-04, -4.8420e-05, -3.0882e-04])\n","gradient values before mask reapp. tensor([ 6.4904e-04, -2.2653e-04,  4.5192e-05, -5.6972e-06,  2.2313e-04,\n","        -1.5339e-04, -2.6606e-04, -1.2885e-04, -4.2034e-05, -2.4710e-04])\n","gradient values before mask reapp. tensor([ 6.2717e-04, -2.2949e-04,  8.2422e-06, -1.4235e-05,  1.8788e-04,\n","        -1.5746e-04, -2.7268e-04, -1.5078e-04, -4.8118e-05, -3.0545e-04])\n","gradient values before mask reapp. tensor([ 6.3976e-04, -2.2670e-04,  3.3430e-05, -8.4758e-06,  2.0952e-04,\n","        -1.5428e-04, -2.6723e-04, -1.3527e-04, -4.4447e-05, -2.6542e-04])\n","gradient values before mask reapp. tensor([ 6.3379e-04, -2.2651e-04,  2.6139e-05, -8.9832e-06,  2.0251e-04,\n","        -1.5461e-04, -2.6737e-04, -1.3883e-04, -4.5498e-05, -2.7425e-04])\n","gradient values before mask reapp. tensor([ 6.3302e-04, -2.2597e-04,  2.7387e-05, -9.0000e-06,  2.0274e-04,\n","        -1.5442e-04, -2.6674e-04, -1.3773e-04, -4.5209e-05, -2.7275e-04])\n","gradient values before mask reapp. tensor([ 6.2820e-04, -2.2568e-04,  2.1952e-05, -9.0566e-06,  1.9713e-04,\n","        -1.5450e-04, -2.6655e-04, -1.4025e-04, -4.6151e-05, -2.7861e-04])\n","gradient values before mask reapp. tensor([ 6.3389e-04, -2.2390e-04,  3.4986e-05, -6.0108e-06,  2.0811e-04,\n","        -1.5277e-04, -2.6339e-04, -1.3197e-04, -4.4113e-05, -2.5763e-04])\n","gradient values before mask reapp. tensor([ 6.2354e-04, -2.2483e-04,  1.9141e-05, -9.2202e-06,  1.9265e-04,\n","        -1.5431e-04, -2.6567e-04, -1.4096e-04, -4.6721e-05, -2.8165e-04])\n","gradient values before mask reapp. tensor([ 6.2605e-04, -2.2377e-04,  2.5995e-05, -7.8908e-06,  1.9756e-04,\n","        -1.5327e-04, -2.6388e-04, -1.3657e-04, -4.5855e-05, -2.7098e-04])\n","gradient values before mask reapp. tensor([ 6.2964e-04, -2.2185e-04,  3.6283e-05, -3.9551e-06,  2.0699e-04,\n","        -1.5150e-04, -2.6039e-04, -1.2939e-04, -4.4046e-05, -2.5115e-04])\n","gradient values before mask reapp. tensor([ 6.0115e-04, -2.2480e-04, -1.2949e-05, -4.0209e-05,  1.3150e-04,\n","        -1.5243e-04, -2.6828e-04, -1.6351e-04, -6.8152e-05, -3.5156e-04])\n","gradient values before mask reapp. tensor([ 6.3793e-04, -2.1997e-04,  5.6835e-05,  2.1167e-05,  2.4790e-04,\n","        -1.5263e-04, -2.5633e-04, -1.1228e-04, -2.7470e-05, -1.9995e-04])\n","gradient values before mask reapp. tensor([ 6.3308e-04, -2.1871e-04,  5.1193e-05,  3.1875e-07,  2.1830e-04,\n","        -1.4906e-04, -2.5533e-04, -1.1887e-04, -4.1614e-05, -2.2521e-04])\n","gradient values before mask reapp. tensor([ 5.8516e-04, -2.2515e-04, -3.3479e-05, -4.2794e-05,  1.1118e-04,\n","        -1.5419e-04, -2.7013e-04, -1.7415e-04, -7.0886e-05, -3.8050e-04])\n","gradient values before mask reapp. tensor([ 6.5046e-04, -2.1485e-04,  8.8912e-05,  3.0027e-05,  2.7533e-04,\n","        -1.4780e-04, -2.4727e-04, -9.1098e-05, -2.2322e-05, -1.4488e-04])\n","gradient values before mask reapp. tensor([ 5.8682e-04, -2.2303e-04, -2.4550e-05, -3.9418e-05,  1.1817e-04,\n","        -1.5254e-04, -2.6670e-04, -1.6761e-04, -6.9323e-05, -3.6352e-04])\n","gradient values before mask reapp. tensor([ 6.4738e-04, -2.1370e-04,  8.8966e-05,  2.9771e-05,  2.7257e-04,\n","        -1.4716e-04, -2.4581e-04, -9.0247e-05, -2.2968e-05, -1.4405e-04])\n","gradient values before mask reapp. tensor([ 5.8221e-04, -2.2205e-04, -2.6959e-05, -3.8556e-05,  1.1519e-04,\n","        -1.5233e-04, -2.6557e-04, -1.6785e-04, -6.9302e-05, -3.6453e-04])\n","gradient values before mask reapp. tensor([ 6.4302e-04, -2.1297e-04,  8.6334e-05,  2.8456e-05,  2.6703e-04,\n","        -1.4688e-04, -2.4509e-04, -9.1139e-05, -2.4142e-05, -1.4837e-04])\n","gradient values before mask reapp. tensor([ 5.8317e-04, -2.2012e-04, -1.9342e-05, -3.5525e-05,  1.2100e-04,\n","        -1.5084e-04, -2.6242e-04, -1.6208e-04, -6.7939e-05, -3.4970e-04])\n","gradient values before mask reapp. tensor([ 6.1892e-04, -2.1444e-04,  4.8238e-05,  2.1496e-06,  2.0873e-04,\n","        -1.4719e-04, -2.4998e-04, -1.1661e-04, -4.2339e-05, -2.2296e-04])\n","gradient values before mask reapp. tensor([ 6.0863e-04, -2.1508e-04,  3.3038e-05, -2.5598e-07,  1.9451e-04,\n","        -1.4846e-04, -2.5174e-04, -1.2499e-04, -4.4627e-05, -2.4446e-04])\n","gradient values before mask reapp. tensor([ 6.1531e-04, -2.1318e-04,  4.7739e-05,  3.0410e-06,  2.0695e-04,\n","        -1.4656e-04, -2.4833e-04, -1.1574e-04, -4.2325e-05, -2.2115e-04])\n","gradient values before mask reapp. tensor([ 6.0649e-04, -2.1372e-04,  3.5003e-05,  9.5258e-07,  1.9480e-04,\n","        -1.4767e-04, -2.4980e-04, -1.2272e-04, -4.4293e-05, -2.3934e-04])\n","gradient values before mask reapp. tensor([ 6.1414e-04, -2.1158e-04,  5.1726e-05,  5.0237e-06,  2.0962e-04,\n","        -1.4559e-04, -2.4593e-04, -1.1213e-04, -4.1427e-05, -2.1233e-04])\n","gradient values before mask reapp. tensor([ 5.7490e-04, -2.1650e-04, -1.6975e-05, -3.1484e-05,  1.2029e-04,\n","        -1.4923e-04, -2.5752e-04, -1.5722e-04, -6.6535e-05, -3.3914e-04])\n","gradient values before mask reapp. tensor([ 6.1151e-04, -2.1060e-04,  5.2161e-05,  5.2585e-06,  2.0780e-04,\n","        -1.4507e-04, -2.4466e-04, -1.1106e-04, -4.1618e-05, -2.1101e-04])\n","gradient values before mask reapp. tensor([ 6.0451e-04, -2.1059e-04,  4.2971e-05,  4.3773e-06,  1.9908e-04,\n","        -1.4552e-04, -2.4509e-04, -1.1577e-04, -4.3043e-05, -2.2244e-04])\n","gradient values before mask reapp. tensor([ 6.0511e-04, -2.0997e-04,  4.6509e-05,  4.6829e-06,  2.0156e-04,\n","        -1.4527e-04, -2.4426e-04, -1.1333e-04, -4.2223e-05, -2.1810e-04])\n","gradient values before mask reapp. tensor([ 5.9887e-04, -2.0981e-04,  3.8599e-05,  4.2856e-06,  1.9369e-04,\n","        -1.4546e-04, -2.4436e-04, -1.1732e-04, -4.3673e-05, -2.2711e-04])\n","gradient values before mask reapp. tensor([ 5.8178e-04, -2.1130e-04,  9.5175e-06, -2.3331e-05,  1.4163e-04,\n","        -1.4506e-04, -2.4891e-04, -1.3859e-04, -6.1716e-05, -2.9285e-04])\n","gradient values before mask reapp. tensor([ 5.9562e-04, -2.0871e-04,  3.8488e-05,  4.8045e-06,  1.9236e-04,\n","        -1.4504e-04, -2.4299e-04, -1.1631e-04, -4.3454e-05, -2.2584e-04])\n","gradient values before mask reapp. tensor([ 6.0068e-04, -2.0730e-04,  4.9717e-05,  7.0566e-06,  2.0109e-04,\n","        -1.4360e-04, -2.4051e-04, -1.0938e-04, -4.1956e-05, -2.0869e-04])\n","gradient values before mask reapp. tensor([ 5.9718e-04, -2.0678e-04,  4.6786e-05,  7.2957e-06,  1.9797e-04,\n","        -1.4344e-04, -2.3988e-04, -1.1039e-04, -4.2410e-05, -2.1093e-04])\n","gradient values before mask reapp. tensor([ 5.7440e-04, -2.0926e-04,  7.3973e-06, -2.1460e-05,  1.3775e-04,\n","        -1.4436e-04, -2.4642e-04, -1.3767e-04, -6.1405e-05, -2.9161e-04])\n","gradient values before mask reapp. tensor([ 5.9128e-04, -2.0602e-04,  4.2038e-05,  7.1909e-06,  1.9242e-04,\n","        -1.4342e-04, -2.3919e-04, -1.1211e-04, -4.3016e-05, -2.1605e-04])\n","gradient values before mask reapp. tensor([ 6.0070e-04, -2.0402e-04,  6.0694e-05,  1.0808e-05,  2.0748e-04,\n","        -1.4113e-04, -2.3546e-04, -1.0089e-04, -4.0554e-05, -1.8779e-04])\n","gradient values before mask reapp. tensor([ 5.7153e-04, -2.0679e-04,  1.1656e-05, -1.7682e-05,  1.4051e-04,\n","        -1.4272e-04, -2.4257e-04, -1.3304e-04, -6.0404e-05, -2.7875e-04])\n","gradient values before mask reapp. tensor([ 6.0204e-04, -2.0210e-04,  6.8943e-05,  1.3686e-05,  2.1379e-04,\n","        -1.3963e-04, -2.3230e-04, -9.4795e-05, -3.9127e-05, -1.7243e-04])\n","gradient values before mask reapp. tensor([ 5.7432e-04, -2.0472e-04,  2.2379e-05, -1.4336e-05,  1.4931e-04,\n","        -1.4101e-04, -2.3907e-04, -1.2546e-04, -5.8401e-05, -2.5987e-04])\n","gradient values before mask reapp. tensor([ 5.9533e-04, -2.0163e-04,  6.2498e-05,  1.2646e-05,  2.0642e-04,\n","        -1.3997e-04, -2.3222e-04, -9.7681e-05, -4.0038e-05, -1.8138e-04])\n","gradient values before mask reapp. tensor([ 5.7064e-04, -2.0363e-04,  2.1602e-05, -1.3230e-05,  1.4774e-04,\n","        -1.4064e-04, -2.3768e-04, -1.2476e-04, -5.8173e-05, -2.5854e-04])\n","gradient values before mask reapp. tensor([ 5.9641e-04, -1.9975e-04,  7.0192e-05,  1.5323e-05,  2.1209e-04,\n","        -1.3848e-04, -2.2916e-04, -9.1946e-05, -3.8760e-05, -1.6698e-04])\n","gradient values before mask reapp. tensor([ 5.6975e-04, -2.0216e-04,  2.5645e-05, -1.1229e-05,  1.5033e-04,\n","        -1.3969e-04, -2.3544e-04, -1.2123e-04, -5.7305e-05, -2.4997e-04])\n","gradient values before mask reapp. tensor([ 5.9341e-04, -1.9855e-04,  7.0599e-05,  1.6383e-05,  2.1127e-04,\n","        -1.3788e-04, -2.2752e-04, -9.0574e-05, -3.8546e-05, -1.6403e-04])\n","gradient values before mask reapp. tensor([ 5.6974e-04, -2.0053e-04,  3.1239e-05, -8.9455e-06,  1.5425e-04,\n","        -1.3860e-04, -2.3295e-04, -1.1680e-04, -5.6216e-05, -2.3912e-04])\n","gradient values before mask reapp. tensor([ 5.6888e-04, -2.0030e-04,  3.1661e-05, -9.2338e-06,  1.5365e-04,\n","        -1.3872e-04, -2.3288e-04, -1.1637e-04, -5.6003e-05, -2.3976e-04])\n","gradient values before mask reapp. tensor([ 5.8332e-04, -1.9742e-04,  6.1840e-05,  1.6372e-05,  2.0203e-04,\n","        -1.3792e-04, -2.2645e-04, -9.3871e-05, -3.9542e-05, -1.7307e-04])\n","gradient values before mask reapp. tensor([ 5.6323e-04, -1.9960e-04,  2.6658e-05, -8.9187e-06,  1.4726e-04,\n","        -1.3867e-04, -2.3237e-04, -1.1853e-04, -5.7017e-05, -2.4485e-04])\n","gradient values before mask reapp. tensor([ 5.9186e-04, -1.9430e-04,  8.2818e-05,  2.2173e-05,  2.1999e-04,\n","        -1.3496e-04, -2.2091e-04, -8.0190e-05, -3.6070e-05, -1.3774e-04])\n","gradient values before mask reapp. tensor([ 5.6357e-04, -1.9787e-04,  3.3554e-05, -6.3518e-06,  1.5357e-04,\n","        -1.3755e-04, -2.2951e-04, -1.1294e-04, -5.5062e-05, -2.3187e-04])\n","gradient values before mask reapp. tensor([ 5.6126e-04, -1.9715e-04,  3.2803e-05, -5.1816e-06,  1.5265e-04,\n","        -1.3701e-04, -2.2831e-04, -1.1251e-04, -5.5103e-05, -2.3001e-04])\n","gradient values before mask reapp. tensor([ 5.6694e-04, -1.9570e-04,  4.5137e-05, -2.7742e-06,  1.6264e-04,\n","        -1.3565e-04, -2.2581e-04, -1.0496e-04, -5.3260e-05, -2.1151e-04])\n","gradient values before mask reapp. tensor([ 5.5539e-04, -1.9650e-04,  2.8036e-05, -5.0799e-06,  1.4767e-04,\n","        -1.3719e-04, -2.2782e-04, -1.1421e-04, -5.5345e-05, -2.3528e-04])\n","gradient values before mask reapp. tensor([ 5.8529e-04, -1.9171e-04,  8.4202e-05,  2.3200e-05,  2.1651e-04,\n","        -1.3373e-04, -2.1763e-04, -7.7242e-05, -3.6173e-05, -1.3326e-04])\n","gradient values before mask reapp. tensor([ 5.5153e-04, -1.9547e-04,  2.6686e-05, -4.1341e-06,  1.4519e-04,\n","        -1.3687e-04, -2.2661e-04, -1.1398e-04, -5.5427e-05, -2.3501e-04])\n","gradient values before mask reapp. tensor([ 5.6519e-04, -1.9266e-04,  5.3369e-05,  1.4625e-06,  1.6814e-04,\n","        -1.3369e-04, -2.2120e-04, -9.7764e-05, -5.1470e-05, -1.9366e-04])\n","gradient values before mask reapp. tensor([ 5.5563e-04, -1.9327e-04,  3.9464e-05, -5.1978e-07,  1.5572e-04,\n","        -1.3495e-04, -2.2285e-04, -1.0529e-04, -5.3180e-05, -2.1326e-04])\n","gradient values before mask reapp. tensor([ 5.7675e-04, -1.8984e-04,  8.0222e-05,  2.3922e-05,  2.1035e-04,\n","        -1.3317e-04, -2.1544e-04, -7.7484e-05, -3.6549e-05, -1.3557e-04])\n","gradient values before mask reapp. tensor([ 5.4825e-04, -1.9322e-04,  3.1015e-05, -1.7969e-06,  1.4658e-04,\n","        -1.3573e-04, -2.2358e-04, -1.0964e-04, -5.4327e-05, -2.2577e-04])\n","gradient values before mask reapp. tensor([ 5.6118e-04, -1.9022e-04,  5.7281e-05,  4.2668e-06,  1.6988e-04,\n","        -1.3242e-04, -2.1776e-04, -9.3261e-05, -5.0158e-05, -1.8371e-04])\n","gradient values before mask reapp. tensor([ 5.4694e-04, -1.9177e-04,  3.4534e-05,  1.8249e-07,  1.4910e-04,\n","        -1.3485e-04, -2.2137e-04, -1.0633e-04, -5.3373e-05, -2.1773e-04])\n","gradient values before mask reapp. tensor([ 5.5095e-04, -1.9018e-04,  4.4393e-05,  2.9832e-06,  1.5700e-04,\n","        -1.3342e-04, -2.1874e-04, -1.0001e-04, -5.2028e-05, -2.0102e-04])\n","gradient values before mask reapp. tensor([ 5.4401e-04, -1.9066e-04,  3.4533e-05,  1.3453e-06,  1.4728e-04,\n","        -1.3434e-04, -2.1998e-04, -1.0541e-04, -5.3525e-05, -2.1564e-04])\n","gradient values before mask reapp. tensor([ 5.7977e-04, -1.8448e-04,  1.0231e-04,  3.1387e-05,  2.2648e-04,\n","        -1.2889e-04, -2.0676e-04, -6.1125e-05, -3.2937e-05, -9.4513e-05])\n","gradient values before mask reapp. tensor([ 5.4043e-04, -1.8976e-04,  3.3786e-05,  2.0547e-06,  1.4650e-04,\n","        -1.3417e-04, -2.1889e-04, -1.0468e-04, -5.2825e-05, -2.1511e-04])\n","gradient values before mask reapp. tensor([ 5.5092e-04, -1.8686e-04,  5.5767e-05,  7.8961e-06,  1.6561e-04,\n","        -1.3106e-04, -2.1350e-04, -9.0905e-05, -4.9662e-05, -1.7809e-04])\n","gradient values before mask reapp. tensor([ 5.4684e-04, -1.8743e-04,  5.0214e-05,  5.9754e-06,  1.5971e-04,\n","        -1.3194e-04, -2.1475e-04, -9.4004e-05, -5.0257e-05, -1.8886e-04])\n","gradient values before mask reapp. tensor([ 5.5476e-04, -1.8438e-04,  6.8849e-05,  1.2249e-05,  1.7723e-04,\n","        -1.2887e-04, -2.0915e-04, -8.1645e-05, -4.7098e-05, -1.5419e-04])\n","gradient values before mask reapp. tensor([ 5.4027e-04, -1.8702e-04,  4.3863e-05,  5.5663e-06,  1.5323e-04,\n","        -1.3235e-04, -2.1471e-04, -9.6751e-05, -5.0762e-05, -1.9703e-04])\n","gradient values before mask reapp. tensor([ 5.5016e-04, -1.8360e-04,  6.6034e-05,  1.2690e-05,  1.7374e-04,\n","        -1.2879e-04, -2.0836e-04, -8.2299e-05, -4.7216e-05, -1.5658e-04])\n","gradient values before mask reapp. tensor([ 5.3204e-04, -1.8671e-04,  3.4598e-05,  4.8539e-06,  1.4367e-04,\n","        -1.3298e-04, -2.1505e-04, -1.0129e-04, -5.2018e-05, -2.0912e-04])\n","gradient values before mask reapp. tensor([ 5.5756e-04, -1.8096e-04,  8.4706e-05,  1.7446e-05,  1.8976e-04,\n","        -1.2617e-04, -2.0348e-04, -7.0003e-05, -4.4006e-05, -1.2579e-04])\n","gradient values before mask reapp. tensor([ 5.1488e-04, -1.8819e-04,  9.1587e-06,  3.4886e-07,  1.2013e-04,\n","        -1.3559e-04, -2.1868e-04, -1.1537e-04, -5.5302e-05, -2.4727e-04])\n","gradient values before mask reapp. tensor([ 5.6339e-04, -1.7847e-04,  1.0041e-04,  2.1795e-05,  2.0259e-04,\n","        -1.2377e-04, -1.9908e-04, -5.9637e-05, -4.1597e-05, -9.9124e-05])\n","gradient values before mask reapp. tensor([ 5.0916e-04, -1.8761e-04,  4.4610e-06,  2.8884e-07,  1.1539e-04,\n","        -1.3584e-04, -2.1831e-04, -1.1709e-04, -5.5450e-05, -2.5280e-04])\n","gradient values before mask reapp. tensor([ 5.6460e-04, -1.7677e-04,  1.0793e-04,  2.4271e-05,  2.0845e-04,\n","        -1.2251e-04, -1.9638e-04, -5.4133e-05, -4.0137e-05, -8.5652e-05])\n","gradient values before mask reapp. tensor([ 5.0292e-04, -1.8703e-04, -1.3515e-06,  1.3867e-07,  1.0886e-04,\n","        -1.3612e-04, -2.1810e-04, -1.1965e-04, -5.6224e-05, -2.5983e-04])\n","gradient values before mask reapp. tensor([ 5.6628e-04, -1.7509e-04,  1.1596e-04,  2.6799e-05,  2.1444e-04,\n","        -1.2111e-04, -1.9364e-04, -4.8434e-05, -3.8795e-05, -7.1448e-05])\n","gradient values before mask reapp. tensor([ 5.0165e-04, -1.8583e-04,  1.7380e-06,  1.5240e-06,  1.1111e-04,\n","        -1.3544e-04, -2.1633e-04, -1.1674e-04, -5.5188e-05, -2.5356e-04])\n","gradient values before mask reapp. tensor([ 5.6492e-04, -1.7384e-04,  1.1887e-04,  2.8264e-05,  2.1621e-04,\n","        -1.2041e-04, -1.9185e-04, -4.5698e-05, -3.7981e-05, -6.5254e-05])\n","gradient values before mask reapp. tensor([ 5.0073e-04, -1.8442e-04,  5.5267e-06,  3.3104e-06,  1.1362e-04,\n","        -1.3460e-04, -2.1429e-04, -1.1346e-04, -5.4298e-05, -2.4568e-04])\n","gradient values before mask reapp. tensor([ 5.6151e-04, -1.7296e-04,  1.1805e-04,  2.8927e-05,  2.1466e-04,\n","        -1.2016e-04, -1.9081e-04, -4.5177e-05, -3.7692e-05, -6.4956e-05])\n","gradient values before mask reapp. tensor([ 4.9694e-04, -1.8336e-04,  4.2939e-06,  4.3122e-06,  1.1144e-04,\n","        -1.3430e-04, -2.1308e-04, -1.1319e-04, -5.4310e-05, -2.4515e-04])\n","gradient values before mask reapp. tensor([ 5.4930e-04, -1.7325e-04,  1.0144e-04,  2.6816e-05,  1.9795e-04,\n","        -1.2157e-04, -1.9252e-04, -5.4259e-05, -4.0393e-05, -8.8267e-05])\n","gradient values before mask reapp. tensor([ 5.0250e-04, -1.8103e-04,  1.9261e-05,  8.3843e-06,  1.2361e-04,\n","        -1.3197e-04, -2.0891e-04, -1.0331e-04, -5.2029e-05, -2.1983e-04])\n","gradient values before mask reapp. tensor([ 5.5736e-04, -1.7074e-04,  1.2095e-04,  3.1283e-05,  2.1509e-04,\n","        -1.1899e-04, -1.8780e-04, -4.1566e-05, -3.6824e-05, -5.7038e-05])\n","gradient values before mask reapp. tensor([ 4.9435e-04, -1.8077e-04,  1.0148e-05,  7.5018e-06,  1.1455e-04,\n","        -1.3270e-04, -2.0935e-04, -1.0775e-04, -5.3038e-05, -2.3212e-04])\n","gradient values before mask reapp. tensor([ 5.4899e-04, -1.7036e-04,  1.1136e-04,  3.0656e-05,  2.0486e-04,\n","        -1.1962e-04, -1.8814e-04, -4.6380e-05, -3.8368e-05, -6.9423e-05])\n","gradient values before mask reapp. tensor([ 5.0250e-04, -1.7792e-04,  2.9918e-05,  1.2454e-05,  1.3119e-04,\n","        -1.2999e-04, -2.0438e-04, -9.5024e-05, -4.9833e-05, -1.9981e-04])\n","gradient values before mask reapp. tensor([ 5.3914e-04, -1.7050e-04,  9.9021e-05,  2.8945e-05,  1.9304e-04,\n","        -1.2076e-04, -1.8932e-04, -5.2781e-05, -3.9762e-05, -8.7031e-05])\n","gradient values before mask reapp. tensor([ 4.9923e-04, -1.7702e-04,  2.9059e-05,  1.3177e-05,  1.2927e-04,\n","        -1.2966e-04, -2.0334e-04, -9.4668e-05, -4.9787e-05, -1.9938e-04])\n","gradient values before mask reapp. tensor([ 5.2755e-04, -1.7125e-04,  8.2598e-05,  2.5773e-05,  1.7636e-04,\n","        -1.2254e-04, -1.9177e-04, -6.2125e-05, -4.2339e-05, -1.1242e-04])\n","gradient values before mask reapp. tensor([ 5.0651e-04, -1.7413e-04,  4.7456e-05,  1.8451e-05,  1.4460e-04,\n","        -1.2683e-04, -1.9824e-04, -8.2683e-05, -4.7074e-05, -1.6762e-04])\n","gradient values before mask reapp. tensor([ 5.2328e-04, -1.7050e-04,  8.0164e-05,  2.6153e-05,  1.7333e-04,\n","        -1.2241e-04, -1.9100e-04, -6.2616e-05, -4.2386e-05, -1.1440e-04])\n","gradient values before mask reapp. tensor([ 5.0812e-04, -1.7249e-04,  5.5305e-05,  2.0884e-05,  1.5049e-04,\n","        -1.2544e-04, -1.9556e-04, -7.7115e-05, -4.5765e-05, -1.5376e-04])\n","gradient values before mask reapp. tensor([ 5.2972e-04, -1.6826e-04,  9.6703e-05,  2.9980e-05,  1.8791e-04,\n","        -1.2019e-04, -1.8686e-04, -5.1688e-05, -3.9190e-05, -8.7910e-05])\n","gradient values before mask reapp. tensor([ 4.7379e-04, -1.7763e-04, -2.4892e-06,  8.4379e-06,  9.7364e-05,\n","        -1.3218e-04, -2.0630e-04, -1.1102e-04, -5.3996e-05, -2.4501e-04])\n","gradient values before mask reapp. tensor([ 5.4045e-04, -1.6488e-04,  1.2121e-04,  3.6545e-05,  2.0875e-04,\n","        -1.1650e-04, -1.8051e-04, -3.5958e-05, -3.5571e-05, -4.6535e-05])\n","gradient values before mask reapp. tensor([ 4.7266e-04, -1.7649e-04,  3.4252e-07,  9.6776e-06,  9.8574e-05,\n","        -1.3145e-04, -2.0468e-04, -1.0853e-04, -5.3485e-05, -2.3932e-04])\n","gradient values before mask reapp. tensor([ 5.4421e-04, -1.6282e-04,  1.3299e-04,  3.9862e-05,  2.1818e-04,\n","        -1.1466e-04, -1.7704e-04, -2.8034e-05, -3.3677e-05, -2.6391e-05])\n","gradient values before mask reapp. tensor([ 4.7019e-04, -1.7546e-04,  1.0561e-06,  1.0574e-05,  9.8309e-05,\n","        -1.3104e-04, -2.0341e-04, -1.0721e-04, -5.3052e-05, -2.3676e-04])\n","gradient values before mask reapp. tensor([ 5.4589e-04, -1.6127e-04,  1.4100e-04,  4.2044e-05,  2.2467e-04,\n","        -1.1344e-04, -1.7450e-04, -2.2322e-05, -3.1990e-05, -1.2987e-05])\n","gradient values before mask reapp. tensor([ 4.6236e-04, -1.7539e-04, -7.8921e-06,  9.4681e-06,  8.9522e-05,\n","        -1.3176e-04, -2.0399e-04, -1.1159e-04, -5.3967e-05, -2.4928e-04])\n","gradient values before mask reapp. tensor([ 5.4636e-04, -1.5981e-04,  1.4695e-04,  4.4035e-05,  2.2937e-04,\n","        -1.1239e-04, -1.7222e-04, -1.7788e-05, -3.0654e-05, -2.2249e-06])\n","gradient values before mask reapp. tensor([ 4.5843e-04, -1.7461e-04, -9.7945e-06,  9.7718e-06,  8.7044e-05,\n","        -1.3171e-04, -2.0328e-04, -1.1184e-04, -5.3824e-05, -2.5094e-04])\n","gradient values before mask reapp. tensor([ 5.3489e-04, -1.5996e-04,  1.3155e-04,  4.2171e-05,  2.1375e-04,\n","        -1.1367e-04, -1.7375e-04, -2.6236e-05, -3.3202e-05, -2.3619e-05])\n","gradient values before mask reapp. tensor([ 4.4332e-04, -1.7577e-04, -3.2190e-05,  6.1674e-06,  6.5520e-05,\n","        -1.3368e-04, -2.0624e-04, -1.2427e-04, -5.7172e-05, -2.8378e-04])\n","gradient values before mask reapp. tensor([ 5.4667e-04, -1.5653e-04,  1.5763e-04,  4.8697e-05,  2.3585e-04,\n","        -1.0992e-04, -1.6736e-04, -9.7423e-06, -2.9380e-05,  1.9427e-05])\n","gradient values before mask reapp. tensor([ 4.4228e-04, -1.7454e-04, -2.9023e-05,  7.5160e-06,  6.7331e-05,\n","        -1.3297e-04, -2.0454e-04, -1.2155e-04, -5.6464e-05, -2.7748e-04])\n","gradient values before mask reapp. tensor([ 5.4620e-04, -1.5530e-04,  1.6168e-04,  5.0159e-05,  2.3868e-04,\n","        -1.0909e-04, -1.6554e-04, -6.4462e-06, -2.8391e-05,  2.6940e-05])\n","gradient values before mask reapp. tensor([ 4.4584e-04, -1.7248e-04, -1.7455e-05,  1.0767e-05,  7.6934e-05,\n","        -1.3127e-04, -2.0114e-04, -1.1372e-04, -5.4422e-05, -2.5774e-04])\n","gradient values before mask reapp. tensor([ 5.3873e-04, -1.5524e-04,  1.5327e-04,  4.8892e-05,  2.3067e-04,\n","        -1.0990e-04, -1.6622e-04, -1.0571e-05, -2.8998e-05,  1.4637e-05])\n","gradient values before mask reapp. tensor([ 4.4790e-04, -1.7081e-04, -8.8475e-06,  1.3085e-05,  8.3704e-05,\n","        -1.2997e-04, -1.9851e-04, -1.0779e-04, -5.2856e-05, -2.4327e-04])\n","gradient values before mask reapp. tensor([ 5.3478e-04, -1.5462e-04,  1.5114e-04,  4.8905e-05,  2.2826e-04,\n","        -1.0994e-04, -1.6571e-04, -1.0949e-05, -2.8716e-05,  1.2138e-05])\n","gradient values before mask reapp. tensor([ 4.4343e-04, -1.7010e-04, -1.1656e-05,  1.3237e-05,  8.0645e-05,\n","        -1.3006e-04, -1.9796e-04, -1.0854e-04, -5.2757e-05, -2.4622e-04])\n","gradient values before mask reapp. tensor([ 5.3035e-04, -1.5415e-04,  1.4794e-04,  4.8597e-05,  2.2473e-04,\n","        -1.1008e-04, -1.6545e-04, -1.2036e-05, -2.8670e-05,  7.8085e-06])\n","gradient values before mask reapp. tensor([ 4.4292e-04, -1.6874e-04, -7.5236e-06,  1.4822e-05,  8.3548e-05,\n","        -1.2926e-04, -1.9608e-04, -1.0524e-04, -5.1789e-05, -2.3833e-04])\n","gradient values before mask reapp. tensor([ 5.2217e-04, -1.5412e-04,  1.3813e-04,  4.7225e-05,  2.1489e-04,\n","        -1.1091e-04, -1.6630e-04, -1.7120e-05, -2.9874e-05, -6.2398e-06])\n","gradient values before mask reapp. tensor([ 4.3356e-04, -1.6904e-04, -1.9663e-05,  1.2850e-05,  7.1530e-05,\n","        -1.3032e-04, -1.9741e-04, -1.1169e-04, -5.3378e-05, -2.5623e-04])\n","gradient values before mask reapp. tensor([ 5.1550e-04, -1.5343e-04,  1.3121e-04,  4.7358e-05,  2.0665e-04,\n","        -1.1103e-04, -1.6606e-04, -2.0510e-05, -3.1419e-05, -1.3834e-05])\n","gradient values before mask reapp. tensor([ 4.3638e-04, -1.6735e-04, -1.0295e-05,  1.5393e-05,  7.8260e-05,\n","        -1.2873e-04, -1.9463e-04, -1.0549e-04, -5.2165e-05, -2.4041e-04])\n","gradient values before mask reapp. tensor([ 5.3026e-04, -1.5011e-04,  1.6206e-04,  5.3739e-05,  2.3420e-04,\n","        -1.0717e-04, -1.5948e-04, -1.2106e-06, -2.6041e-05,  3.4251e-05])\n","gradient values before mask reapp. tensor([ 4.3058e-04, -1.6687e-04, -1.5611e-05,  1.4877e-05,  7.3011e-05,\n","        -1.2918e-04, -1.9468e-04, -1.0782e-04, -5.2365e-05, -2.4761e-04])\n","gradient values before mask reapp. tensor([ 5.0946e-04, -1.5199e-04,  1.2951e-04,  4.7890e-05,  2.0317e-04,\n","        -1.1063e-04, -1.6461e-04, -2.0070e-05, -3.1085e-05, -1.4844e-05])\n","gradient values before mask reapp. tensor([ 4.3579e-04, -1.6467e-04, -1.7461e-06,  1.8544e-05,  8.3971e-05,\n","        -1.2698e-04, -1.9088e-04, -9.8834e-05, -5.0430e-05, -2.2431e-04])\n","gradient values before mask reapp. tensor([ 5.0458e-04, -1.5159e-04,  1.2523e-04,  4.7495e-05,  1.9828e-04,\n","        -1.1076e-04, -1.6449e-04, -2.1889e-05, -3.1502e-05, -2.0550e-05])\n","gradient values before mask reapp. tensor([ 4.3295e-04, -1.6385e-04, -2.4074e-06,  1.9027e-05,  8.2093e-05,\n","        -1.2664e-04, -1.9002e-04, -9.8571e-05, -5.0473e-05, -2.2408e-04])\n","gradient values before mask reapp. tensor([ 5.2220e-04, -1.4770e-04,  1.6135e-04,  5.5133e-05,  2.3089e-04,\n","        -1.0624e-04, -1.5680e-04,  6.3890e-07, -2.5223e-05,  3.6184e-05])\n","gradient values before mask reapp. tensor([ 4.2329e-04, -1.6447e-04, -1.5307e-05,  1.6151e-05,  6.9908e-05,\n","        -1.2820e-04, -1.9203e-04, -1.0563e-04, -5.1738e-05, -2.4483e-04])\n","gradient values before mask reapp. tensor([ 5.0870e-04, -1.4840e-04,  1.4175e-04,  5.1941e-05,  2.1120e-04,\n","        -1.0814e-04, -1.5947e-04, -1.0576e-05, -2.8526e-05,  7.2579e-06])\n","gradient values before mask reapp. tensor([ 4.0436e-04, -1.6617e-04, -4.4603e-05,  1.1255e-05,  4.2395e-05,\n","        -1.3095e-04, -1.9627e-04, -1.2221e-04, -5.6049e-05, -2.8811e-04])\n","gradient values before mask reapp. tensor([ 5.0811e-04, -1.4709e-04,  1.4521e-04,  5.3603e-05,  2.1258e-04,\n","        -1.0710e-04, -1.5757e-04, -7.8143e-06, -2.8275e-05,  1.4615e-05])\n","gradient values before mask reapp. tensor([ 4.1619e-04, -1.6278e-04, -1.8747e-05,  1.7538e-05,  6.4109e-05,\n","        -1.2730e-04, -1.9009e-04, -1.0606e-04, -5.2390e-05, -2.4577e-04])\n","gradient values before mask reapp. tensor([ 5.1327e-04, -1.4519e-04,  1.5897e-04,  5.6616e-05,  2.2456e-04,\n","        -1.0525e-04, -1.5420e-04,  1.2190e-06, -2.5587e-05,  3.6388e-05])\n","gradient values before mask reapp. tensor([ 4.1259e-04, -1.6214e-04, -2.0469e-05,  1.7482e-05,  6.1898e-05,\n","        -1.2736e-04, -1.8962e-04, -1.0636e-04, -5.2154e-05, -2.4793e-04])\n","gradient values before mask reapp. tensor([ 5.0490e-04, -1.4528e-04,  1.4858e-04,  5.4945e-05,  2.1418e-04,\n","        -1.0621e-04, -1.5530e-04, -4.3066e-06, -2.6883e-05,  2.1083e-05])\n","gradient values before mask reapp. tensor([ 4.0554e-04, -1.6207e-04, -2.8560e-05,  1.6334e-05,  5.3595e-05,\n","        -1.2794e-04, -1.9021e-04, -1.1044e-04, -5.3133e-05, -2.5949e-04])\n","gradient values before mask reapp. tensor([ 5.0827e-04, -1.4354e-04,  1.5914e-04,  5.7556e-05,  2.2277e-04,\n","        -1.0462e-04, -1.5238e-04,  2.7356e-06, -2.5010e-05,  3.8408e-05])\n","gradient values before mask reapp. tensor([ 4.0537e-04, -1.6084e-04, -2.4216e-05,  1.7592e-05,  5.6608e-05,\n","        -1.2720e-04, -1.8855e-04, -1.0717e-04, -5.2159e-05, -2.5202e-04])\n","gradient values before mask reapp. tensor([ 5.0676e-04, -1.4267e-04,  1.6097e-04,  5.8161e-05,  2.2384e-04,\n","        -1.0420e-04, -1.5127e-04,  4.5804e-06, -2.4200e-05,  4.1677e-05])\n","gradient values before mask reapp. tensor([ 4.0117e-04, -1.6022e-04, -2.6995e-05,  1.7448e-05,  5.3386e-05,\n","        -1.2734e-04, -1.8822e-04, -1.0811e-04, -5.2137e-05, -2.5555e-04])\n","gradient values before mask reapp. tensor([ 4.8965e-04, -1.4390e-04,  1.3485e-04,  5.3763e-05,  1.9825e-04,\n","        -1.0679e-04, -1.5511e-04, -1.0532e-05, -2.8547e-05,  2.9326e-06])\n","gradient values before mask reapp. tensor([ 4.0328e-04, -1.5861e-04, -1.8998e-05,  1.9718e-05,  5.8933e-05,\n","        -1.2588e-04, -1.8571e-04, -1.0278e-04, -5.1144e-05, -2.4178e-04])\n","gradient values before mask reapp. tensor([ 4.8970e-04, -1.4266e-04,  1.3915e-04,  5.5186e-05,  2.0071e-04,\n","        -1.0583e-04, -1.5336e-04, -7.3785e-06, -2.7938e-05,  1.0742e-05])\n","gradient values before mask reapp. tensor([ 4.0089e-04, -1.5781e-04, -1.9083e-05,  2.0132e-05,  5.7498e-05,\n","        -1.2551e-04, -1.8486e-04, -1.0227e-04, -5.1144e-05, -2.4102e-04])\n","gradient values before mask reapp. tensor([ 5.0533e-04, -1.3937e-04,  1.7134e-04,  6.1506e-05,  2.2992e-04,\n","        -1.0193e-04, -1.4674e-04,  1.2697e-05, -2.2096e-05,  6.0262e-05])\n","gradient values before mask reapp. tensor([ 3.9313e-04, -1.5795e-04, -2.8489e-05,  1.8268e-05,  4.8572e-05,\n","        -1.2657e-04, -1.8606e-04, -1.0722e-04, -5.1884e-05, -2.5570e-04])\n","gradient values before mask reapp. tensor([ 4.8867e-04, -1.4056e-04,  1.4594e-04,  5.7181e-05,  2.0504e-04,\n","        -1.0446e-04, -1.5050e-04, -2.0272e-06, -2.6297e-05,  2.2500e-05])\n","gradient values before mask reapp. tensor([ 3.7390e-04, -1.6000e-04, -5.8908e-05,  1.2690e-05,  1.9732e-05,\n","        -1.2950e-04, -1.9078e-04, -1.2465e-04, -5.6533e-05, -3.0160e-04])\n","gradient values before mask reapp. tensor([ 4.9456e-04, -1.3817e-04,  1.6079e-04,  6.1241e-05,  2.1637e-04,\n","        -1.0201e-04, -1.4644e-04,  7.4117e-06, -2.4565e-05,  4.7742e-05])\n","gradient values before mask reapp. tensor([ 3.8378e-04, -1.5694e-04, -3.6615e-05,  1.8175e-05,  3.8451e-05,\n","        -1.2631e-04, -1.8535e-04, -1.1065e-04, -5.3284e-05, -2.6496e-04])\n","gradient values before mask reapp. tensor([ 4.9188e-04, -1.3747e-04,  1.6046e-04,  6.1536e-05,  2.1566e-04,\n","        -1.0174e-04, -1.4565e-04,  8.0259e-06, -2.4039e-05,  4.7980e-05])\n","gradient values before mask reapp. tensor([ 3.8369e-04, -1.5577e-04, -3.2414e-05,  1.9315e-05,  4.1185e-05,\n","        -1.2556e-04, -1.8379e-04, -1.0756e-04, -5.2434e-05, -2.5786e-04])\n","gradient values before mask reapp. tensor([ 4.9103e-04, -1.3653e-04,  1.6324e-04,  6.2278e-05,  2.1742e-04,\n","        -1.0118e-04, -1.4441e-04,  1.0341e-05, -2.3203e-05,  5.2631e-05])\n","gradient values before mask reapp. tensor([ 3.8598e-04, -1.5428e-04, -2.3966e-05,  2.1176e-05,  4.7769e-05,\n","        -1.2436e-04, -1.8147e-04, -1.0190e-04, -5.0908e-05, -2.4451e-04])\n","gradient values before mask reapp. tensor([ 4.9802e-04, -1.3468e-04,  1.7970e-04,  6.5189e-05,  2.3201e-04,\n","        -9.9216e-05, -1.4096e-04,  2.0799e-05, -1.9954e-05,  7.7276e-05])\n","gradient values before mask reapp. tensor([ 3.7215e-04, -1.5553e-04, -4.4559e-05,  1.6775e-05,  2.8915e-05,\n","        -1.2685e-04, -1.8504e-04, -1.1368e-04, -5.3210e-05, -2.7711e-04])\n","gradient values before mask reapp. tensor([ 4.7070e-04, -1.3740e-04,  1.3513e-04,  5.7240e-05,  1.8904e-04,\n","        -1.0390e-04, -1.4824e-04, -5.5623e-06, -2.7532e-05,  1.0243e-05])\n","gradient values before mask reapp. tensor([ 3.7651e-04, -1.5359e-04, -3.2928e-05,  1.9999e-05,  3.7071e-05,\n","        -1.2470e-04, -1.8168e-04, -1.0626e-04, -5.2155e-05, -2.5712e-04])\n","gradient values before mask reapp. tensor([ 4.7358e-04, -1.3582e-04,  1.4416e-04,  5.9452e-05,  1.9543e-04,\n","        -1.0240e-04, -1.4574e-04,  2.5386e-07, -2.6416e-05,  2.5055e-05])\n","gradient values before mask reapp. tensor([ 3.7912e-04, -1.5185e-04, -2.4073e-05,  2.2472e-05,  4.3651e-05,\n","        -1.2318e-04, -1.7903e-04, -1.0046e-04, -5.0912e-05, -2.4193e-04])\n","gradient values before mask reapp. tensor([ 4.7283e-04, -1.3486e-04,  1.4679e-04,  6.0221e-05,  1.9659e-04,\n","        -1.0175e-04, -1.4453e-04,  2.3236e-06, -2.5910e-05,  2.9606e-05])\n","gradient values before mask reapp. tensor([ 3.5531e-04, -1.5475e-04, -6.2807e-05,  1.5006e-05,  7.6373e-06,\n","        -1.2716e-04, -1.8548e-04, -1.2285e-04, -5.6591e-05, -3.0119e-04])\n","gradient values before mask reapp. tensor([ 4.8426e-04, -1.3186e-04,  1.7144e-04,  6.5855e-05,  2.1765e-04,\n","        -9.8268e-05, -1.3883e-04,  1.7754e-05, -2.2150e-05,  6.9259e-05])\n","gradient values before mask reapp. tensor([ 3.5471e-04, -1.5403e-04, -6.0055e-05,  1.5237e-05,  8.7306e-06,\n","        -1.2672e-04, -1.8458e-04, -1.2082e-04, -5.6067e-05, -2.9765e-04])\n","gradient values before mask reapp. tensor([ 4.9286e-04, -1.2932e-04,  1.9114e-04,  7.0276e-05,  2.3466e-04,\n","        -9.5585e-05, -1.3425e-04,  3.0199e-05, -1.8848e-05,  1.0077e-04])\n","gradient values before mask reapp. tensor([ 3.6288e-04, -1.5140e-04, -4.0757e-05,  1.9488e-05,  2.5348e-05,\n","        -1.2425e-04, -1.8009e-04, -1.0863e-04, -5.2814e-05, -2.6703e-04])\n","gradient values before mask reapp. tensor([ 4.8992e-04, -1.2889e-04,  1.9016e-04,  6.9849e-05,  2.3390e-04,\n","        -9.5681e-05, -1.3398e-04,  3.0347e-05, -1.8029e-05,  9.8731e-05])\n","gradient values before mask reapp. tensor([ 3.5336e-04, -1.5190e-04, -5.3524e-05,  1.6719e-05,  1.3545e-05,\n","        -1.2582e-04, -1.8212e-04, -1.1575e-04, -5.3996e-05, -2.8728e-04])\n","gradient values before mask reapp. tensor([ 4.8422e-04, -1.2865e-04,  1.8416e-04,  6.8931e-05,  2.2743e-04,\n","        -9.6118e-05, -1.3440e-04,  2.7293e-05, -1.8721e-05,  8.9996e-05])\n","gradient values before mask reapp. tensor([ 3.3915e-04, -1.5314e-04, -7.4761e-05,  1.2506e-05, -6.4909e-06,\n","        -1.2810e-04, -1.8549e-04, -1.2782e-04, -5.6838e-05, -3.2012e-04])\n","gradient values before mask reapp. tensor([ 4.7414e-04, -1.2865e-04,  1.7035e-04,  6.7377e-05,  2.1243e-04,\n","        -9.6998e-05, -1.3571e-04,  1.9440e-05, -2.1616e-05,  7.1139e-05])\n","gradient values before mask reapp. tensor([ 3.4216e-04, -1.5083e-04, -6.4708e-05,  1.6922e-05,  1.5047e-06,\n","        -1.2556e-04, -1.8153e-04, -1.2085e-04, -5.5627e-05, -2.9905e-04])\n","gradient values before mask reapp. tensor([ 4.7287e-04, -1.2851e-04,  1.7100e-04,  6.6602e-05,  2.1178e-04,\n","        -9.6872e-05, -1.3566e-04,  2.0046e-05, -2.1262e-05,  7.0204e-05])\n","gradient values before mask reapp. tensor([ 3.5223e-04, -1.4802e-04, -4.2560e-05,  2.1698e-05,  2.0233e-05,\n","        -1.2263e-04, -1.7661e-04, -1.0718e-04, -5.2262e-05, -2.6403e-04])\n","gradient values before mask reapp. tensor([ 4.7756e-04, -1.2694e-04,  1.8326e-04,  6.8827e-05,  2.2245e-04,\n","        -9.5301e-05, -1.3295e-04,  2.7924e-05, -1.8777e-05,  8.8677e-05])\n","gradient values before mask reapp. tensor([ 3.5348e-04, -1.4686e-04, -3.6245e-05,  2.2606e-05,  2.5163e-05,\n","        -1.2194e-04, -1.7511e-04, -1.0302e-04, -5.0854e-05, -2.5509e-04])\n","gradient values before mask reapp. tensor([ 4.9019e-04, -1.2361e-04,  2.1081e-04,  7.5293e-05,  2.4832e-04,\n","        -9.1485e-05, -1.2648e-04,  4.5652e-05, -1.3392e-05,  1.3343e-04])\n","gradient values before mask reapp. tensor([ 3.2490e-04, -1.5182e-04, -8.4561e-05,  9.8208e-06, -1.9118e-05,\n","        -1.2856e-04, -1.8546e-04, -1.3177e-04, -5.7125e-05, -3.3672e-04])\n","gradient values before mask reapp. tensor([ 4.8747e-04, -1.2306e-04,  2.0954e-04,  7.5209e-05,  2.4511e-04,\n","        -9.1217e-05, -1.2607e-04,  4.5179e-05, -1.3987e-05,  1.3184e-04])\n","gradient values before mask reapp. tensor([ 3.2429e-04, -1.5079e-04, -8.1773e-05,  1.0639e-05, -1.7705e-05,\n","        -1.2799e-04, -1.8434e-04, -1.2972e-04, -5.6508e-05, -3.3197e-04])\n","gradient values before mask reapp. tensor([ 4.6452e-04, -1.2506e-04,  1.7322e-04,  6.8762e-05,  2.1084e-04,\n","        -9.5114e-05, -1.3184e-04,  2.3973e-05, -1.9623e-05,  7.7371e-05])\n","gradient values before mask reapp. tensor([ 3.0390e-04, -1.5317e-04, -1.1499e-04,  4.5458e-06, -4.9868e-05,\n","        -1.3097e-04, -1.8958e-04, -1.4903e-04, -6.2131e-05, -3.8199e-04])\n","gradient values before mask reapp. tensor([ 4.9740e-04, -1.1880e-04,  2.3557e-04,  8.1942e-05,  2.6519e-04,\n","        -8.7023e-05, -1.1908e-04,  6.1707e-05, -1.0669e-05,  1.7543e-04])\n","gradient values before mask reapp. tensor([ 3.0791e-04, -1.5139e-04, -1.0374e-04,  6.9128e-06, -4.0762e-05,\n","        -1.2951e-04, -1.8690e-04, -1.4190e-04, -6.0191e-05, -3.6445e-04])\n","gradient values before mask reapp. tensor([ 4.7507e-04, -1.2118e-04,  1.9958e-04,  7.5147e-05,  2.3078e-04,\n","        -9.0730e-05, -1.2498e-04,  4.0589e-05, -1.6529e-05,  1.2082e-04])\n","gradient values before mask reapp. tensor([ 3.3141e-04, -1.4658e-04, -5.8013e-05,  1.6342e-05, -9.6181e-07,\n","        -1.2382e-04, -1.7767e-04, -1.1427e-04, -5.3330e-05, -2.9321e-04])\n","gradient values before mask reapp. tensor([ 4.7281e-04, -1.2082e-04,  1.9918e-04,  7.4629e-05,  2.2955e-04,\n","        -9.0703e-05, -1.2479e-04,  4.0768e-05, -1.6196e-05,  1.1927e-04])\n","gradient values before mask reapp. tensor([ 3.2980e-04, -1.4597e-04, -5.6822e-05,  1.6158e-05, -2.2658e-07,\n","        -1.2371e-04, -1.7712e-04, -1.1296e-04, -5.2382e-05, -2.9247e-04])\n","gradient values before mask reapp. tensor([ 4.5446e-04, -1.2249e-04,  1.7050e-04,  6.8918e-05,  2.0256e-04,\n","        -9.4046e-05, -1.2971e-04,  2.3936e-05, -2.0300e-05,  7.4823e-05])\n","gradient values before mask reapp. tensor([ 3.0040e-04, -1.4991e-04, -1.0603e-04,  6.4562e-06, -4.6197e-05,\n","        -1.2883e-04, -1.8564e-04, -1.4182e-04, -5.9997e-05, -3.6804e-04])\n","gradient values before mask reapp. tensor([ 4.8566e-04, -1.1625e-04,  2.3007e-04,  8.2079e-05,  2.5390e-04,\n","        -8.6056e-05, -1.1715e-04,  6.0025e-05, -1.2135e-05,  1.6971e-04])\n","gradient values before mask reapp. tensor([ 2.9305e-04, -1.4983e-04, -1.1496e-04,  4.8103e-06, -5.5622e-05,\n","        -1.2977e-04, -1.8674e-04, -1.4682e-04, -6.1294e-05, -3.8166e-04])\n","gradient values before mask reapp. tensor([ 4.9037e-04, -1.1459e-04,  2.4208e-04,  8.4550e-05,  2.6312e-04,\n","        -8.4271e-05, -1.1430e-04,  6.7555e-05, -1.0468e-05,  1.8847e-04])\n","gradient values before mask reapp. tensor([ 2.9146e-04, -1.4902e-04, -1.1363e-04,  4.9903e-06, -5.5071e-05,\n","        -1.2954e-04, -1.8600e-04, -1.4554e-04, -6.0620e-05, -3.7979e-04])\n","gradient values before mask reapp. tensor([ 4.6853e-04, -1.1655e-04,  2.0776e-04,  7.8267e-05,  2.3144e-04,\n","        -8.8046e-05, -1.1982e-04,  4.7652e-05, -1.5331e-05,  1.3666e-04])\n","gradient values before mask reapp. tensor([ 2.9785e-04, -1.4703e-04, -9.8925e-05,  8.1632e-06, -4.4007e-05,\n","        -1.2733e-04, -1.8260e-04, -1.3656e-04, -5.8917e-05, -3.5659e-04])\n","gradient values before mask reapp. tensor([ 4.7507e-04, -1.1454e-04,  2.2287e-04,  8.1564e-05,  2.4344e-04,\n","        -8.5782e-05, -1.1630e-04,  5.7037e-05, -1.3247e-05,  1.6060e-04])\n","gradient values before mask reapp. tensor([ 3.0171e-04, -1.4557e-04, -8.8690e-05,  1.0023e-05, -3.6334e-05,\n","        -1.2588e-04, -1.8027e-04, -1.3017e-04, -5.7416e-05, -3.4128e-04])\n","gradient values before mask reapp. tensor([ 4.5370e-04, -1.1708e-04,  1.8816e-04,  7.4435e-05,  2.1087e-04,\n","        -8.9588e-05, -1.2239e-04,  3.6678e-05, -1.8378e-05,  1.0653e-04])\n","gradient values before mask reapp. tensor([ 2.7792e-04, -1.4866e-04, -1.2806e-04,  2.3638e-06, -7.3434e-05,\n","        -1.2975e-04, -1.8691e-04, -1.5315e-04, -6.3587e-05, -4.0144e-04])\n","gradient values before mask reapp. tensor([ 4.8221e-04, -1.1147e-04,  2.4244e-04,  8.6091e-05,  2.5696e-04,\n","        -8.2355e-05, -1.1114e-04,  6.9339e-05, -1.1235e-05,  1.9229e-04])\n","gradient values before mask reapp. tensor([ 2.8453e-04, -1.4647e-04, -1.1211e-04,  5.6126e-06, -6.0058e-05,\n","        -1.2777e-04, -1.8338e-04, -1.4324e-04, -6.0936e-05, -3.7671e-04])\n","gradient values before mask reapp. tensor([ 4.8026e-04, -1.1111e-04,  2.4260e-04,  8.5655e-05,  2.5631e-04,\n","        -8.2227e-05, -1.1082e-04,  6.9904e-05, -1.0783e-05,  1.9157e-04])\n","gradient values before mask reapp. tensor([ 2.9857e-04, -1.4338e-04, -8.3323e-05,  1.1166e-05, -3.5008e-05,\n","        -1.2431e-04, -1.7763e-04, -1.2571e-04, -5.6264e-05, -3.3267e-04])\n","gradient values before mask reapp. tensor([ 4.4973e-04, -1.1461e-04,  1.9281e-04,  7.5516e-05,  2.1121e-04,\n","        -8.8341e-05, -1.1980e-04,  4.0615e-05, -1.7505e-05,  1.1409e-04])\n","gradient values before mask reapp. tensor([ 3.1155e-04, -1.4048e-04, -5.6925e-05,  1.6520e-05, -1.2944e-05,\n","        -1.2077e-04, -1.7212e-04, -1.0968e-04, -5.2515e-05, -2.9170e-04])\n","gradient values before mask reapp. tensor([ 4.4943e-04, -1.1403e-04,  1.9529e-04,  7.5398e-05,  2.1190e-04,\n","        -8.7972e-05, -1.1926e-04,  4.2229e-05, -1.7085e-05,  1.1647e-04])\n","gradient values before mask reapp. tensor([ 2.4281e-04, -1.5032e-04, -1.7557e-04, -6.8432e-06, -1.2080e-04,\n","        -1.3404e-04, -1.9340e-04, -1.7966e-04, -7.0232e-05, -4.7414e-04])\n","gradient values before mask reapp. tensor([ 4.9634e-04, -1.0591e-04,  2.8135e-04,  9.3215e-05,  2.8564e-04,\n","        -7.6748e-05, -1.0220e-04,  9.3642e-05, -5.7264e-06,  2.5092e-04])\n","gradient values before mask reapp. tensor([ 2.5642e-04, -1.4676e-04, -1.4672e-04, -5.9740e-07, -9.5598e-05,\n","        -1.3048e-04, -1.8721e-04, -1.6199e-04, -6.5620e-05, -4.2849e-04])\n","gradient values before mask reapp. tensor([ 4.9974e-04, -1.0489e-04,  2.9075e-04,  9.4461e-05,  2.9305e-04,\n","        -7.5511e-05, -1.0026e-04,  9.9639e-05, -4.0244e-06,  2.6415e-04])\n","gradient values before mask reapp. tensor([ 2.8869e-04, -1.3921e-04, -8.3206e-05,  1.4264e-05, -3.8107e-05,\n","        -1.2253e-04, -1.7355e-04, -1.2325e-04, -5.5467e-05, -3.2564e-04])\n","gradient values before mask reapp. tensor([ 4.5059e-04, -1.1193e-04,  2.0693e-04,  7.6383e-05,  2.1825e-04,\n","        -8.6042e-05, -1.1642e-04,  4.9926e-05, -1.5111e-05,  1.3156e-04])\n","gradient values before mask reapp. tensor([ 2.8637e-04, -1.3873e-04, -8.3936e-05,  1.3593e-05, -4.0090e-05,\n","        -1.2257e-04, -1.7349e-04, -1.2348e-04, -5.5454e-05, -3.2805e-04])\n","gradient values before mask reapp. tensor([ 4.2176e-04, -1.1547e-04,  1.5876e-04,  6.6829e-05,  1.7322e-04,\n","        -9.1242e-05, -1.2489e-04,  2.1347e-05, -2.2659e-05,  5.7535e-05])\n","gradient values before mask reapp. tensor([ 2.8301e-04, -1.3907e-04, -8.8481e-05,  1.2527e-05, -4.7293e-05,\n","        -1.2211e-04, -1.7396e-04, -1.2624e-04, -5.7260e-05, -3.3518e-04])\n","gradient values before mask reapp. tensor([ 4.5694e-04, -1.0828e-04,  2.2653e-04,  8.2589e-05,  2.3445e-04,\n","        -8.1836e-05, -1.0996e-04,  6.3301e-05, -1.2088e-05,  1.6741e-04])\n","gradient values before mask reapp. tensor([ 2.9946e-04, -1.3600e-04, -5.5821e-05,  1.7990e-05, -1.8954e-05,\n","        -1.1846e-04, -1.6798e-04, -1.0657e-04, -5.1997e-05, -2.8702e-04])\n","gradient values before mask reapp. tensor([ 4.5785e-04, -1.0773e-04,  2.3139e-04,  8.2504e-05,  2.3836e-04,\n","        -8.1442e-05, -1.0923e-04,  6.6486e-05, -1.0639e-05,  1.7261e-04])\n","gradient values before mask reapp. tensor([ 2.6883e-04, -1.4027e-04, -1.0684e-04,  6.3523e-06, -6.4683e-05,\n","        -1.2513e-04, -1.7809e-04, -1.3681e-04, -5.8369e-05, -3.6924e-04])\n","gradient values before mask reapp. tensor([ 4.3319e-04, -1.1008e-04,  1.9170e-04,  7.5298e-05,  2.0172e-04,\n","        -8.5801e-05, -1.1582e-04,  4.3249e-05, -1.6367e-05,  1.1264e-04])\n","gradient values before mask reapp. tensor([ 2.5179e-04, -1.4231e-04, -1.3438e-04,  1.1506e-06, -9.2041e-05,\n","        -1.2739e-04, -1.8236e-04, -1.5282e-04, -6.3371e-05, -4.1084e-04])\n","gradient values before mask reapp. tensor([ 4.4974e-04, -1.0663e-04,  2.2411e-04,  8.2433e-05,  2.2770e-04,\n","        -8.0948e-05, -1.0873e-04,  6.2841e-05, -1.2756e-05,  1.6430e-04])\n","gradient values before mask reapp. tensor([ 2.8323e-04, -1.3621e-04, -7.4364e-05,  1.3359e-05, -3.9999e-05,\n","        -1.2003e-04, -1.7043e-04, -1.1682e-04, -5.4824e-05, -3.1747e-04])\n","gradient values before mask reapp. tensor([ 4.4701e-04, -1.0675e-04,  2.2225e-04,  8.0878e-05,  2.2506e-04,\n","        -8.1328e-05, -1.0933e-04,  6.1919e-05, -1.2572e-05,  1.5883e-04])\n","gradient values before mask reapp. tensor([ 2.8650e-04, -1.3471e-04, -6.4543e-05,  1.5128e-05, -3.1743e-05,\n","        -1.1888e-04, -1.6824e-04, -1.1051e-04, -5.2770e-05, -3.0293e-04])\n","gradient values before mask reapp. tensor([ 3.8099e-04, -1.1457e-04,  1.1199e-04,  6.0202e-05,  1.2794e-04,\n","        -9.4449e-05, -1.2849e-04, -2.5472e-06, -2.7282e-05, -8.5309e-06])\n","gradient values before mask reapp. tensor([ 2.8066e-04, -1.3473e-04, -7.2077e-05,  1.4351e-05, -4.1587e-05,\n","        -1.1862e-04, -1.6855e-04, -1.1472e-04, -5.5167e-05, -3.1267e-04])\n","gradient values before mask reapp. tensor([ 4.5069e-04, -1.0393e-04,  2.3591e-04,  8.4070e-05,  2.3328e-04,\n","        -7.8968e-05, -1.0558e-04,  7.0367e-05, -1.1387e-05,  1.8083e-04])\n","gradient values before mask reapp. tensor([ 2.4221e-04, -1.3991e-04, -1.3628e-04,  6.4887e-07, -9.8861e-05,\n","        -1.2658e-04, -1.8060e-04, -1.5254e-04, -6.3560e-05, -4.1369e-04])\n","gradient values before mask reapp. tensor([ 4.5124e-04, -1.0285e-04,  2.4000e-04,  8.5016e-05,  2.3443e-04,\n","        -7.8137e-05, -1.0438e-04,  7.2792e-05, -1.1390e-05,  1.8717e-04])\n","gradient values before mask reapp. tensor([ 2.5016e-04, -1.3714e-04, -1.1803e-04,  5.0916e-06, -8.4200e-05,\n","        -1.2400e-04, -1.7627e-04, -1.4139e-04, -6.1163e-05, -3.8392e-04])\n","gradient values before mask reapp. tensor([ 4.5085e-04, -1.0259e-04,  2.4198e-04,  8.4563e-05,  2.3483e-04,\n","        -7.7713e-05, -1.0401e-04,  7.4169e-05, -1.1019e-05,  1.8850e-04])\n","gradient values before mask reapp. tensor([ 2.2272e-04, -1.4127e-04, -1.6389e-04, -5.0995e-06, -1.2591e-04,\n","        -1.2929e-04, -1.8487e-04, -1.6820e-04, -6.7361e-05, -4.5685e-04])\n","gradient values before mask reapp. tensor([ 4.7139e-04, -9.8433e-05,  2.8195e-04,  9.2933e-05,  2.6831e-04,\n","        -7.2350e-05, -9.5721e-05,  9.8274e-05, -5.7913e-06,  2.5118e-04])\n","gradient values before mask reapp. tensor([ 2.3475e-04, -1.3791e-04, -1.3799e-04,  7.9346e-07, -1.0390e-04,\n","        -1.2583e-04, -1.7903e-04, -1.5226e-04, -6.3561e-05, -4.1533e-04])\n","gradient values before mask reapp. tensor([ 4.6084e-04, -9.8894e-05,  2.6701e-04,  9.0031e-05,  2.5395e-04,\n","        -7.4000e-05, -9.8066e-05,  8.9587e-05, -7.8086e-06,  2.2829e-04])\n","gradient values before mask reapp. tensor([ 2.1852e-04, -1.4000e-04, -1.6446e-04, -5.6502e-06, -1.2939e-04,\n","        -1.2914e-04, -1.8442e-04, -1.6828e-04, -6.7467e-05, -4.5896e-04])\n","gradient values before mask reapp. tensor([ 4.4327e-04, -9.9982e-05,  2.4082e-04,  8.5681e-05,  2.3001e-04,\n","        -7.6617e-05, -1.0172e-04,  7.4723e-05, -1.1457e-05,  1.9009e-04])\n","gradient values before mask reapp. tensor([ 1.9263e-04, -1.4350e-04, -2.0767e-04, -1.4627e-05, -1.6940e-04,\n","        -1.3378e-04, -1.9219e-04, -1.9371e-04, -7.3842e-05, -5.2628e-04])\n","gradient values before mask reapp. tensor([ 4.9251e-04, -9.2150e-05,  3.2959e-04,  1.0314e-04,  3.0508e-04,\n","        -6.5116e-05, -8.4787e-05,  1.2726e-04, -2.4705e-07,  3.2680e-04])\n","gradient values before mask reapp. tensor([ 2.3320e-04, -1.3612e-04, -1.3231e-04,  6.6192e-07, -1.0448e-04,\n","        -1.2450e-04, -1.7759e-04, -1.4885e-04, -6.3412e-05, -4.0965e-04])\n","gradient values before mask reapp. tensor([ 4.4759e-04, -9.7929e-05,  2.5462e-04,  8.7767e-05,  2.3912e-04,\n","        -7.4480e-05, -9.8641e-05,  8.3295e-05, -9.6197e-06,  2.0983e-04])\n","gradient values before mask reapp. tensor([ 1.9491e-04, -1.4175e-04, -1.9681e-04, -1.2814e-05, -1.6176e-04,\n","        -1.3188e-04, -1.8934e-04, -1.8632e-04, -7.1769e-05, -5.1043e-04])\n","gradient values before mask reapp. tensor([ 4.8711e-04, -9.1163e-05,  3.2760e-04,  1.0255e-04,  3.0148e-04,\n","        -6.5028e-05, -8.4300e-05,  1.2693e-04,  1.0132e-07,  3.2311e-04])\n","gradient values before mask reapp. tensor([ 1.8243e-04, -1.4228e-04, -2.1414e-04, -1.6195e-05, -1.7810e-04,\n","        -1.3395e-04, -1.9194e-04, -1.9624e-04, -7.4093e-05, -5.3684e-04])\n","gradient values before mask reapp. tensor([ 5.1038e-04, -8.7902e-05,  3.7024e-04,  1.0942e-04,  3.3704e-04,\n","        -5.9832e-05, -7.6941e-05,  1.5207e-04,  5.9049e-06,  3.8537e-04])\n","gradient values before mask reapp. tensor([ 1.8099e-04, -1.4153e-04, -2.1299e-04, -1.6473e-05, -1.7876e-04,\n","        -1.3401e-04, -1.9167e-04, -1.9548e-04, -7.3851e-05, -5.3670e-04])\n","gradient values before mask reapp. tensor([ 3.8783e-04, -1.0456e-04,  1.5981e-04,  6.8549e-05,  1.5185e-04,\n","        -8.4957e-05, -1.1496e-04,  2.8155e-05, -2.2712e-05,  6.3193e-05])\n","gradient values before mask reapp. tensor([ 2.7742e-04, -1.2641e-04, -4.1327e-05,  1.8380e-05, -3.1858e-05,\n","        -1.1190e-04, -1.5873e-04, -9.3780e-05, -5.1937e-05, -2.7026e-04])\n","gradient values before mask reapp. tensor([ 4.1022e-04, -1.0031e-04,  2.0281e-04,  7.6843e-05,  1.8803e-04,\n","        -7.9683e-05, -1.0668e-04,  5.3781e-05, -1.6843e-05,  1.2883e-04])\n","gradient values before mask reapp. tensor([ 2.8560e-04, -1.2229e-04, -2.0869e-05,  2.5325e-05, -1.2937e-05,\n","        -1.0889e-04, -1.5300e-04, -8.0974e-05, -4.8312e-05, -2.3235e-04])\n","gradient values before mask reapp. tensor([ 3.4344e-04, -1.1044e-04,  8.8009e-05,  5.2518e-05,  8.7681e-05,\n","        -9.3641e-05, -1.2841e-04, -1.3652e-05, -3.1423e-05, -5.1209e-05])\n","gradient values before mask reapp. tensor([ 3.4130e-04, -1.1426e-04,  7.8750e-05,  4.3388e-05,  7.2287e-05,\n","        -9.6583e-05, -1.3490e-04, -2.2055e-05, -3.5031e-05, -8.2242e-05])\n","gradient values before mask reapp. tensor([ 3.1212e-04, -1.1421e-04,  3.6241e-05,  4.1337e-05,  4.0322e-05,\n","        -1.0020e-04, -1.3824e-04, -4.4635e-05, -3.8799e-05, -1.3291e-04])\n","gradient values before mask reapp. tensor([ 3.1809e-04, -1.1729e-04,  3.9830e-05,  3.4596e-05,  3.4637e-05,\n","        -1.0125e-04, -1.4252e-04, -4.5601e-05, -4.1336e-05, -1.4509e-04])\n","gradient values before mask reapp. tensor([ 3.3497e-04, -1.0873e-04,  8.3826e-05,  6.2491e-05,  9.5681e-05,\n","        -9.4218e-05, -1.2641e-04, -1.1992e-05, -2.4591e-05, -4.3979e-05])\n","gradient values before mask reapp. tensor([ 3.4115e-04, -1.1399e-04,  8.4329e-05,  5.9462e-05,  9.2675e-05,\n","        -9.8791e-05, -1.3471e-04, -1.5468e-05, -2.3815e-05, -6.2621e-05])\n","gradient values before mask reapp. tensor([ 3.3971e-04, -1.0679e-04,  9.5386e-05,  5.6288e-05,  9.3905e-05,\n","        -9.1296e-05, -1.2375e-04, -6.8749e-06, -2.8864e-05, -3.4336e-05])\n","gradient values before mask reapp. tensor([ 2.8254e-04, -1.2174e-04, -1.6618e-05,  2.1882e-05, -1.7667e-05,\n","        -1.0787e-04, -1.5296e-04, -7.8539e-05, -4.8846e-05, -2.3543e-04])\n","gradient values before mask reapp. tensor([ 3.7918e-04, -1.0005e-04,  1.6851e-04,  8.1803e-05,  1.6793e-04,\n","        -8.4148e-05, -1.1007e-04,  3.8447e-05, -1.2618e-05,  8.8270e-05])\n","gradient values before mask reapp. tensor([ 1.9768e-04, -1.3390e-04, -1.6254e-04, -7.4418e-06, -1.4599e-04,\n","        -1.2510e-04, -1.7966e-04, -1.6438e-04, -6.8455e-05, -4.6048e-04])\n","gradient values before mask reapp. tensor([ 5.0703e-04, -8.0893e-05,  3.9444e-04,  1.3129e-04,  3.6789e-04,\n","        -5.7150e-05, -6.8412e-05,  1.7244e-04,  2.0004e-05,  4.3993e-04])\n","gradient values before mask reapp. tensor([ 1.5244e-04, -1.4012e-04, -2.3864e-04, -2.3899e-05, -2.1375e-04,\n","        -1.3483e-04, -1.9427e-04, -2.0941e-04, -7.8371e-05, -5.8094e-04])\n","gradient values before mask reapp. tensor([ 4.9262e-04, -8.2816e-05,  3.7126e-04,  1.2568e-04,  3.4522e-04,\n","        -5.9917e-05, -7.3057e-05,  1.5857e-04,  1.6536e-05,  4.0161e-04])\n","gradient values before mask reapp. tensor([ 1.4104e-04, -1.4151e-04, -2.5549e-04, -2.7828e-05, -2.2941e-04,\n","        -1.3651e-04, -1.9708e-04, -2.1881e-04, -8.0412e-05, -6.0789e-04])\n","gradient values before mask reapp. tensor([ 5.2260e-04, -7.7589e-05,  4.2746e-04,  1.3874e-04,  3.9534e-04,\n","        -5.3040e-05, -6.2146e-05,  1.9251e-04,  2.5358e-05,  4.9023e-04])\n","gradient values before mask reapp. tensor([ 7.9326e-05, -1.5529e-04, -3.9230e-04, -5.2077e-05, -4.2320e-04,\n","        -1.4072e-04, -2.2136e-04, -3.1402e-04, -1.4262e-04, -8.1211e-04])\n","gradient values before mask reapp. tensor([ 4.6766e-04, -8.3453e-05,  3.3649e-04,  1.1909e-04,  3.1041e-04,\n","        -6.2881e-05, -7.7277e-05,  1.3870e-04,  1.0443e-05,  3.5078e-04])\n","gradient values before mask reapp. tensor([ 1.3720e-04, -1.4035e-04, -2.5471e-04, -1.8019e-05, -2.2170e-04,\n","        -1.3734e-04, -1.9610e-04, -2.1612e-04, -7.5112e-05, -5.9742e-04])\n","gradient values before mask reapp. tensor([ 5.4234e-04, -7.2775e-05,  4.6877e-04,  1.4780e-04,  4.2801e-04,\n","        -4.7193e-05, -5.3358e-05,  2.1736e-04,  3.0277e-05,  5.5514e-04])\n","gradient values before mask reapp. tensor([ 8.8633e-05, -1.5285e-04, -3.7024e-04, -3.7263e-05, -3.9704e-04,\n","        -1.3908e-04, -2.1705e-04, -2.9905e-04, -1.3442e-04, -7.6914e-04])\n","gradient values before mask reapp. tensor([ 4.6785e-04, -8.2190e-05,  3.4234e-04,  1.1976e-04,  3.1158e-04,\n","        -6.1766e-05, -7.6011e-05,  1.4214e-04,  1.0623e-05,  3.5795e-04])\n","gradient values before mask reapp. tensor([ 1.2719e-04, -1.4028e-04, -2.6608e-04, -2.0483e-05, -2.3548e-04,\n","        -1.3825e-04, -1.9772e-04, -2.2268e-04, -7.7248e-05, -6.1605e-04])\n","gradient values before mask reapp. tensor([ 5.6252e-04, -6.8907e-05,  5.0962e-04,  1.5652e-04,  4.6194e-04,\n","        -4.2127e-05, -4.5791e-05,  2.4193e-04,  3.6470e-05,  6.1689e-04])\n","gradient values before mask reapp. tensor([ 8.1915e-05, -1.5277e-04, -3.7698e-04, -3.8883e-05, -4.0830e-04,\n","        -1.3929e-04, -2.1808e-04, -3.0326e-04, -1.3678e-04, -7.8109e-04])\n","gradient values before mask reapp. tensor([ 4.6273e-04, -8.1949e-05,  3.3896e-04,  1.1853e-04,  3.0560e-04,\n","        -6.2045e-05, -7.6709e-05,  1.4030e-04,  1.0194e-05,  3.5027e-04])\n","gradient values before mask reapp. tensor([ 1.2493e-04, -1.3938e-04, -2.6405e-04, -2.0499e-05, -2.3682e-04,\n","        -1.3780e-04, -1.9718e-04, -2.2130e-04, -7.7105e-05, -6.1473e-04])\n","gradient values before mask reapp. tensor([ 4.7517e-04, -7.9280e-05,  3.6336e-04,  1.2351e-04,  3.2378e-04,\n","        -5.8295e-05, -7.1564e-05,  1.5467e-04,  1.2298e-05,  3.8834e-04])\n","gradient values before mask reapp. tensor([ 1.4734e-04, -1.3610e-04, -2.2267e-04, -1.1751e-05, -2.0091e-04,\n","        -1.3240e-04, -1.8945e-04, -1.9627e-04, -7.0824e-05, -5.5138e-04])\n","gradient values before mask reapp. tensor([ 5.0175e-04, -7.4512e-05,  4.1407e-04,  1.3557e-04,  3.7003e-04,\n","        -5.2125e-05, -6.1601e-05,  1.8561e-04,  2.0860e-05,  4.6873e-04])\n","gradient values before mask reapp. tensor([ 1.6285e-04, -1.3227e-04, -1.9090e-04, -3.9001e-06, -1.7290e-04,\n","        -1.2890e-04, -1.8313e-04, -1.7724e-04, -6.5744e-05, -5.0072e-04])\n","gradient values before mask reapp. tensor([ 4.3853e-04, -8.4107e-05,  3.0434e-04,  1.0999e-04,  2.6926e-04,\n","        -6.5519e-05, -8.3042e-05,  1.1979e-04,  4.4662e-06,  2.9304e-04])\n","gradient values before mask reapp. tensor([ 1.7061e-04, -1.3148e-04, -1.7565e-04, -1.5982e-06, -1.6086e-04,\n","        -1.2667e-04, -1.8054e-04, -1.6788e-04, -6.3516e-05, -4.7957e-04])\n","gradient values before mask reapp. tensor([ 4.9735e-04, -7.4932e-05,  4.1110e-04,  1.3358e-04,  3.6506e-04,\n","        -5.2999e-05, -6.3198e-05,  1.8370e-04,  2.0955e-05,  4.5927e-04])\n","gradient values before mask reapp. tensor([ 1.0250e-04, -1.4684e-04, -3.2817e-04, -2.7504e-05, -3.7745e-04,\n","        -1.3133e-04, -2.0776e-04, -2.7447e-04, -1.3339e-04, -7.0588e-04])\n","gradient values before mask reapp. tensor([ 4.0077e-04, -8.7383e-05,  2.4615e-04,  9.6810e-05,  2.1330e-04,\n","        -7.1768e-05, -9.2643e-05,  8.5552e-05, -4.9650e-06,  2.0237e-04])\n","gradient values before mask reapp. tensor([ 1.5563e-04, -1.3219e-04, -1.9584e-04, -6.0942e-06, -1.8300e-04,\n","        -1.2855e-04, -1.8384e-04, -1.7991e-04, -6.7364e-05, -5.1181e-04])\n","gradient values before mask reapp. tensor([ 5.4906e-04, -6.5749e-05,  5.0850e-04,  1.5564e-04,  4.5071e-04,\n","        -4.0686e-05, -4.4198e-05,  2.4250e-04,  3.5766e-05,  6.1197e-04])\n","gradient values before mask reapp. tensor([ 4.6257e-05, -1.5549e-04, -4.2369e-04, -5.1245e-05, -4.6974e-04,\n","        -1.4254e-04, -2.2670e-04, -3.3199e-04, -1.4920e-04, -8.6233e-04])\n","gradient values before mask reapp. tensor([ 4.1659e-04, -8.4043e-05,  2.7944e-04,  1.0301e-04,  2.3961e-04,\n","        -6.6892e-05, -8.6010e-05,  1.0556e-04, -7.3144e-07,  2.5284e-04])\n","gradient values before mask reapp. tensor([ 2.9479e-04, -1.0917e-04,  5.5510e-05,  5.1754e-05,  4.3580e-05,\n","        -9.8262e-05, -1.3613e-04, -2.9738e-05, -2.8488e-05, -1.1491e-04])\n","gradient values before mask reapp. tensor([ 3.3455e-04, -9.8704e-05,  1.3353e-04,  6.9446e-05,  1.0982e-04,\n","        -8.6948e-05, -1.1742e-04,  1.7483e-05, -1.9740e-05,  1.4836e-05])\n","gradient values before mask reapp. tensor([ 2.1383e-04, -1.1874e-04, -8.1107e-05,  2.0725e-05, -8.4041e-05,\n","        -1.1336e-04, -1.5983e-04, -1.1106e-04, -5.1042e-05, -3.2740e-04])\n","gradient values before mask reapp. tensor([ 4.0799e-04, -8.5484e-05,  2.6848e-04,  9.9924e-05,  2.3051e-04,\n","        -6.8640e-05, -8.9315e-05,  9.9448e-05, -4.9727e-08,  2.3115e-04])\n","gradient values before mask reapp. tensor([ 1.3507e-04, -1.4198e-04, -2.6396e-04, -1.7224e-05, -3.3705e-04,\n","        -1.2255e-04, -1.9806e-04, -2.3874e-04, -1.2936e-04, -6.1731e-04])\n","gradient values before mask reapp. tensor([ 3.4118e-04, -9.3513e-05,  1.5643e-04,  7.5503e-05,  1.2726e-04,\n","        -8.0438e-05, -1.0805e-04,  3.3588e-05, -1.7837e-05,  5.9196e-05])\n","gradient values before mask reapp. tensor([ 3.0767e-04, -1.0947e-04,  8.2281e-05,  5.2302e-05,  6.0761e-05,\n","        -9.6134e-05, -1.3449e-04, -1.4315e-05, -2.4982e-05, -8.8719e-05])\n","gradient values before mask reapp. tensor([ 3.9160e-04, -8.5123e-05,  2.4857e-04,  9.6878e-05,  2.1087e-04,\n","        -7.0616e-05, -9.1573e-05,  8.8432e-05, -2.5870e-06,  2.0223e-04])\n","gradient values before mask reapp. tensor([ 9.6518e-05, -1.4846e-04, -3.2786e-04, -3.2558e-05, -3.9648e-04,\n","        -1.3054e-04, -2.1129e-04, -2.7655e-04, -1.3801e-04, -7.2288e-04])\n","gradient values before mask reapp. tensor([ 4.1293e-04, -8.0616e-05,  2.9087e-04,  1.0676e-04,  2.4677e-04,\n","        -6.4278e-05, -8.1897e-05,  1.1457e-04,  2.7847e-06,  2.7123e-04])\n","gradient values before mask reapp. tensor([ 2.5887e-04, -1.1617e-04,  2.5303e-06,  3.5245e-05, -1.0573e-05,\n","        -1.0634e-04, -1.5001e-04, -6.1122e-05, -3.4701e-05, -2.1603e-04])\n","gradient values before mask reapp. tensor([ 3.7167e-04, -8.6328e-05,  2.2138e-04,  9.0847e-05,  1.8380e-04,\n","        -7.3410e-05, -9.5695e-05,  7.3119e-05, -6.5639e-06,  1.5913e-04])\n","gradient values before mask reapp. tensor([ 2.6637e-05, -1.5666e-04, -4.4325e-04, -5.7716e-05, -5.0617e-04,\n","        -1.4254e-04, -2.3088e-04, -3.4493e-04, -1.5759e-04, -9.0100e-04])\n","gradient values before mask reapp. tensor([ 6.0169e-04, -5.1387e-05,  6.2860e-04,  1.8273e-04,  5.4930e-04,\n","        -2.4129e-05, -1.8827e-05,  3.1642e-04,  5.4037e-05,  7.9910e-04])\n","gradient values before mask reapp. tensor([ 2.9303e-05, -1.5643e-04, -4.3667e-04, -5.6033e-05, -5.0039e-04,\n","        -1.4304e-04, -2.3113e-04, -3.4111e-04, -1.5517e-04, -8.9484e-04])\n","gradient values before mask reapp. tensor([ 3.6615e-04, -8.5038e-05,  2.1923e-04,  8.9301e-05,  1.7658e-04,\n","        -7.2031e-05, -9.4361e-05,  7.2202e-05, -8.9223e-06,  1.5666e-04])\n","gradient values before mask reapp. tensor([ 2.0672e-04, -1.2077e-04, -7.9577e-05,  1.6955e-05, -9.3490e-05,\n","        -1.1498e-04, -1.6418e-04, -1.1043e-04, -4.9710e-05, -3.4546e-04])\n","gradient values before mask reapp. tensor([ 3.4336e-04, -8.7762e-05,  1.8264e-04,  8.1791e-05,  1.4299e-04,\n","        -7.5611e-05, -1.0032e-04,  5.1288e-05, -1.4049e-05,  1.0037e-04])\n","gradient values before mask reapp. tensor([ 2.6587e-04, -1.1195e-04,  2.8010e-05,  4.2209e-05,  5.5729e-06,\n","        -1.0233e-04, -1.4397e-04, -4.5113e-05, -3.1672e-05, -1.7645e-04])\n","gradient values before mask reapp. tensor([ 3.9269e-04, -7.9029e-05,  2.7392e-04,  1.0369e-04,  2.2554e-04,\n","        -6.5682e-05, -8.3395e-05,  1.0584e-04,  7.3727e-07,  2.4380e-04])\n","gradient values before mask reapp. tensor([ 2.1839e-04, -1.1536e-04, -4.7928e-05,  2.6814e-05, -6.2408e-05,\n","        -1.1011e-04, -1.5535e-04, -8.9519e-05, -4.2813e-05, -2.8843e-04])\n","gradient values before mask reapp. tensor([ 3.6590e-04, -8.4935e-05,  2.2632e-04,  9.1445e-05,  1.8372e-04,\n","        -7.2213e-05, -9.4539e-05,  7.7305e-05, -4.5579e-06,  1.6290e-04])\n","gradient values before mask reapp. tensor([ 2.3427e-04, -1.2292e-04, -6.6387e-05,  2.9231e-05, -1.8068e-04,\n","        -9.5376e-05, -1.5922e-04, -1.2075e-04, -1.0584e-04, -3.0907e-04])\n","gradient values before mask reapp. tensor([ 3.1695e-04, -9.2645e-05,  1.4124e-04,  7.1495e-05,  1.0678e-04,\n","        -8.3602e-05, -1.1239e-04,  2.5949e-05, -1.6067e-05,  2.4022e-05])\n","gradient values before mask reapp. tensor([ 1.4397e-04, -1.2528e-04, -1.7227e-04, -2.9371e-06, -1.7800e-04,\n","        -1.2467e-04, -1.7860e-04, -1.6366e-04, -6.2093e-05, -4.8711e-04])\n","gradient values before mask reapp. tensor([ 4.6103e-04, -7.0019e-05,  3.9615e-04,  1.2786e-04,  3.2995e-04,\n","        -5.2204e-05, -6.4293e-05,  1.7679e-04,  1.8825e-05,  4.2360e-04])\n","gradient values before mask reapp. tensor([-9.1507e-05, -1.7435e-04, -6.3863e-04, -1.0460e-04, -6.9905e-04,\n","        -1.6436e-04, -2.6981e-04, -4.6287e-04, -1.9071e-04, -1.2202e-03])\n","gradient values before mask reapp. tensor([ 6.5500e-04, -3.9629e-05,  7.4278e-04,  2.0743e-04,  6.4228e-04,\n","        -9.4354e-06,  2.8609e-06,  3.8519e-04,  7.0749e-05,  9.7250e-04])\n","gradient values before mask reapp. tensor([-7.6759e-06, -1.6104e-04, -4.8790e-04, -6.9565e-05, -5.6470e-04,\n","        -1.4723e-04, -2.4207e-04, -3.7304e-04, -1.6784e-04, -9.8483e-04])\n","gradient values before mask reapp. tensor([ 3.8714e-04, -7.7247e-05,  2.7833e-04,  1.0231e-04,  2.2134e-04,\n","        -6.3897e-05, -8.2329e-05,  1.0856e-04,  1.9230e-07,  2.4552e-04])\n","gradient values before mask reapp. tensor([ 2.3713e-04, -1.1552e-04, -8.0734e-06,  3.0767e-05, -3.2335e-05,\n","        -1.0716e-04, -1.5324e-04, -6.6439e-05, -3.5041e-05, -2.4538e-04])\n","gradient values before mask reapp. tensor([ 4.1993e-04, -7.2908e-05,  3.3804e-04,  1.1579e-04,  2.7682e-04,\n","        -5.8450e-05, -7.3005e-05,  1.4433e-04,  1.1630e-05,  3.3436e-04])\n","gradient values before mask reapp. tensor([ 5.9081e-05, -1.4009e-04, -3.1517e-04, -3.8069e-05, -3.1061e-04,\n","        -1.4307e-04, -2.0925e-04, -2.4908e-04, -8.1474e-05, -7.2506e-04])\n","gradient values before mask reapp. tensor([ 5.4607e-04, -5.1761e-05,  5.6476e-04,  1.6776e-04,  4.7780e-04,\n","        -3.0140e-05, -2.8639e-05,  2.7996e-04,  4.4048e-05,  6.9374e-04])\n","gradient values before mask reapp. tensor([-5.9204e-05, -1.6684e-04, -5.6943e-04, -8.6194e-05, -6.4404e-04,\n","        -1.5539e-04, -2.5600e-04, -4.2096e-04, -1.8141e-04, -1.1112e-03])\n","gradient values before mask reapp. tensor([ 6.0769e-04, -4.2427e-05,  6.7805e-04,  1.9437e-04,  5.8410e-04,\n","        -1.6798e-05, -6.9451e-06,  3.4947e-04,  6.4083e-05,  8.7236e-04])\n","gradient values before mask reapp. tensor([ 1.4218e-05, -1.5537e-04, -4.3750e-04, -5.6059e-05, -5.2786e-04,\n","        -1.4015e-04, -2.3173e-04, -3.4248e-04, -1.6216e-04, -9.0586e-04])\n","gradient values before mask reapp. tensor([ 4.1111e-04, -7.0285e-05,  3.3710e-04,  1.1705e-04,  2.7533e-04,\n","        -5.7282e-05, -7.0269e-05,  1.4605e-04,  1.2780e-05,  3.3718e-04])\n","gradient values before mask reapp. tensor([ 1.0433e-04, -1.3073e-04, -2.2376e-04, -1.5779e-05, -2.2970e-04,\n","        -1.3270e-04, -1.9156e-04, -1.9304e-04, -6.5885e-05, -5.8294e-04])\n","gradient values before mask reapp. tensor([ 4.9173e-04, -5.8306e-05,  4.8180e-04,  1.5019e-04,  4.0704e-04,\n","        -3.9745e-05, -4.2977e-05,  2.3352e-04,  3.6001e-05,  5.6405e-04])\n","gradient values before mask reapp. tensor([ 1.9773e-04, -1.1744e-04, -5.6366e-05,  2.1976e-05, -7.3949e-05,\n","        -1.1408e-04, -1.6147e-04, -9.2097e-05, -3.6892e-05, -3.2326e-04])\n","gradient values before mask reapp. tensor([ 3.8933e-04, -7.2570e-05,  3.0657e-04,  1.1121e-04,  2.5004e-04,\n","        -6.2312e-05, -7.6685e-05,  1.2901e-04,  1.1505e-05,  2.8655e-04])\n","gradient values before mask reapp. tensor([ 1.5272e-04, -1.2717e-04, -1.8037e-04,  8.3002e-06, -3.1053e-04,\n","        -1.0467e-04, -1.7705e-04, -1.8928e-04, -1.3163e-04, -4.8503e-04])\n","gradient values before mask reapp. tensor([ 3.3417e-04, -8.2091e-05,  2.0971e-04,  8.6311e-05,  1.6207e-04,\n","        -7.4839e-05, -9.7183e-05,  7.0231e-05, -2.3504e-06,  1.2724e-04])\n","gradient values before mask reapp. tensor([ 2.4383e-04, -1.1688e-04, -2.3406e-05,  3.9985e-05, -1.7100e-04,\n","        -8.7210e-05, -1.5140e-04, -9.6776e-05, -1.0768e-04, -2.5020e-04])\n","gradient values before mask reapp. tensor([ 2.7936e-04, -9.2194e-05,  1.1325e-04,  6.4150e-05,  7.9404e-05,\n","        -8.7867e-05, -1.1787e-04,  1.3044e-05, -1.2914e-05, -3.0341e-05])\n","gradient values before mask reapp. tensor([ 2.8795e-04, -9.9433e-05,  1.1740e-04,  6.0976e-05,  8.5025e-05,\n","        -9.2308e-05, -1.2625e-04,  1.3760e-05, -8.2373e-06, -4.7461e-05])\n","gradient values before mask reapp. tensor([ 3.3510e-04, -9.4094e-05,  1.4868e-04,  8.6841e-05, -3.2399e-05,\n","        -5.7212e-05, -1.0748e-04,  6.9007e-06, -9.3862e-05,  5.0293e-05])\n","gradient values before mask reapp. tensor([-2.7988e-05, -1.5646e-04, -4.9483e-04, -6.6527e-05, -5.9795e-04,\n","        -1.4278e-04, -2.3934e-04, -3.7760e-04, -1.7829e-04, -9.9112e-04])\n","gradient values before mask reapp. tensor([ 5.1293e-04, -5.3793e-05,  5.3390e-04,  1.6020e-04,  4.5827e-04,\n","        -3.6050e-05, -3.6211e-05,  2.6602e-04,  5.0977e-05,  6.3405e-04])\n","gradient values before mask reapp. tensor([-3.6021e-05, -1.5874e-04, -5.0823e-04, -6.9567e-05, -6.0927e-04,\n","        -1.4506e-04, -2.4334e-04, -3.8541e-04, -1.7858e-04, -1.0160e-03])\n","gradient values before mask reapp. tensor([ 5.8654e-04, -4.3210e-05,  6.6746e-04,  1.9068e-04,  5.8275e-04,\n","        -2.0815e-05, -1.1558e-05,  3.4722e-04,  7.4170e-05,  8.4240e-04])\n","gradient values before mask reapp. tensor([ 2.7271e-05, -1.5060e-04, -3.9537e-04, -4.3883e-05, -5.0436e-04,\n","        -1.3400e-04, -2.2489e-04, -3.1780e-04, -1.5807e-04, -8.4524e-04])\n","gradient values before mask reapp. tensor([ 3.7207e-04, -7.2542e-05,  2.9716e-04,  1.0872e-04,  2.4796e-04,\n","        -6.4596e-05, -7.9302e-05,  1.2680e-04,  1.8587e-05,  2.6479e-04])\n","gradient values before mask reapp. tensor([ 1.3618e-04, -1.2121e-04, -1.3815e-04,  3.3984e-06, -1.4746e-04,\n","        -1.2459e-04, -1.7640e-04, -1.3821e-04, -4.3540e-05, -4.5728e-04])\n","gradient values before mask reapp. tensor([ 4.4862e-04, -6.1219e-05,  4.3452e-04,  1.3987e-04,  3.7186e-04,\n","        -4.8105e-05, -5.3649e-05,  2.0945e-04,  4.0049e-05,  4.7943e-04])\n","gradient values before mask reapp. tensor([ 1.5989e-04, -1.3015e-04, -1.5749e-04,  1.0062e-05, -2.9685e-04,\n","        -1.0449e-04, -1.7990e-04, -1.7605e-04, -1.2505e-04, -4.7237e-04])\n","gradient values before mask reapp. tensor([ 3.6859e-04, -7.2800e-05,  2.9735e-04,  1.0858e-04,  2.4919e-04,\n","        -6.6223e-05, -8.0885e-05,  1.2747e-04,  2.1473e-05,  2.5954e-04])\n","gradient values before mask reapp. tensor([-2.3859e-05, -1.5414e-04, -4.7417e-04, -5.9095e-05, -5.8644e-04,\n","        -1.4043e-04, -2.3635e-04, -3.6485e-04, -1.7495e-04, -9.6229e-04])\n","gradient values before mask reapp. tensor([ 5.1472e-04, -5.0304e-05,  5.5648e-04,  1.6657e-04,  4.7823e-04,\n","        -3.4380e-05, -3.1856e-05,  2.8185e-04,  5.8372e-05,  6.6587e-04])\n","gradient values before mask reapp. tensor([ 1.0441e-04, -1.2441e-04, -1.8132e-04, -6.1571e-06, -1.8198e-04,\n","        -1.2998e-04, -1.8394e-04, -1.6133e-04, -4.5404e-05, -5.2634e-04])\n","gradient values before mask reapp. tensor([ 5.8909e-04, -4.2066e-05,  6.8633e-04,  1.9402e-04,  5.9930e-04,\n","        -2.1588e-05, -1.1639e-05,  3.5903e-04,  8.1906e-05,  8.5968e-04])\n","gradient values before mask reapp. tensor([-8.3735e-05, -1.6309e-04, -5.7356e-04, -8.0956e-05, -6.7668e-04,\n","        -1.5281e-04, -2.5571e-04, -4.2326e-04, -1.8835e-04, -1.1217e-03])\n","gradient values before mask reapp. tensor([ 4.3941e-04, -6.1101e-05,  4.2996e-04,  1.3770e-04,  3.6441e-04,\n","        -5.0396e-05, -5.6802e-05,  2.0645e-04,  4.1290e-05,  4.6346e-04])\n","gradient values before mask reapp. tensor([ 7.6331e-05, -1.3840e-04, -2.9092e-04, -1.6597e-05, -4.2883e-04,\n","        -1.1771e-04, -2.0206e-04, -2.5531e-04, -1.4933e-04, -6.7705e-04])\n","gradient values before mask reapp. tensor([ 3.8744e-04, -6.8899e-05,  3.4310e-04,  1.1850e-04,  2.8917e-04,\n","        -6.1248e-05, -7.3165e-05,  1.5607e-04,  3.0920e-05,  3.2596e-04])\n","gradient values before mask reapp. tensor([ 1.9314e-04, -1.2355e-04, -8.6343e-05,  2.8373e-05, -2.4297e-04,\n","        -9.4487e-05, -1.6641e-04, -1.3322e-04, -1.1652e-04, -3.6260e-04])\n","gradient values before mask reapp. tensor([ 3.5968e-04, -7.2997e-05,  2.9752e-04,  1.0619e-04,  2.4709e-04,\n","        -6.8649e-05, -8.3686e-05,  1.2832e-04,  2.5146e-05,  2.4716e-04])\n","gradient values before mask reapp. tensor([-1.8751e-05, -1.5107e-04, -4.5100e-04, -5.1295e-05, -5.7641e-04,\n","        -1.3619e-04, -2.3131e-04, -3.5045e-04, -1.7395e-04, -9.2703e-04])\n","gradient values before mask reapp. tensor([ 4.3696e-04, -5.8261e-05,  4.3992e-04,  1.4013e-04,  3.7096e-04,\n","        -4.9395e-05, -5.3683e-05,  2.1408e-04,  4.3853e-05,  4.7764e-04])\n","gradient values before mask reapp. tensor([ 9.0395e-05, -1.2233e-04, -1.8589e-04, -5.6561e-06, -1.8824e-04,\n","        -1.3073e-04, -1.8382e-04, -1.6192e-04, -4.3358e-05, -5.3526e-04])\n","gradient values before mask reapp. tensor([ 5.7023e-04, -4.0635e-05,  6.7139e-04,  1.9044e-04,  5.7858e-04,\n","        -2.3296e-05, -1.3934e-05,  3.5078e-04,  7.9708e-05,  8.3217e-04])\n","gradient values before mask reapp. tensor([-0.0001, -0.0002, -0.0007, -0.0001, -0.0008, -0.0002, -0.0003, -0.0005,\n","        -0.0002, -0.0013])\n","gradient values before mask reapp. tensor([ 7.2059e-04, -1.9038e-05,  9.3946e-04,  2.5092e-04,  8.2535e-04,\n","         7.8383e-06,  3.5575e-05,  5.1239e-04,  1.2365e-04,  1.2507e-03])\n","gradient values before mask reapp. tensor([-4.8429e-05, -1.5310e-04, -4.9444e-04, -5.7773e-05, -6.2118e-04,\n","        -1.4006e-04, -2.3841e-04, -3.7656e-04, -1.8206e-04, -9.9078e-04])\n","gradient values before mask reapp. tensor([ 4.1975e-04, -6.3769e-05,  4.1424e-04,  1.3271e-04,  3.5534e-04,\n","        -5.5856e-05, -6.3779e-05,  1.9944e-04,  4.7751e-05,  4.2405e-04])\n","gradient values before mask reapp. tensor([ 4.1533e-05, -1.3864e-04, -3.3467e-04, -2.1903e-05, -4.8440e-04,\n","        -1.1997e-04, -2.0815e-04, -2.8234e-04, -1.6166e-04, -7.4053e-04])\n","gradient values before mask reapp. tensor([ 3.0999e-04, -7.7715e-05,  2.2626e-04,  8.9750e-05,  1.8043e-04,\n","        -7.6947e-05, -9.7371e-05,  8.6724e-05,  1.6557e-05,  1.3112e-04])\n","gradient values before mask reapp. tensor([ 1.3999e-04, -1.2494e-04, -1.6302e-04,  1.3204e-05, -3.3978e-04,\n","        -9.8386e-05, -1.7700e-04, -1.8166e-04, -1.4088e-04, -4.7780e-04])\n","gradient values before mask reapp. tensor([ 4.0744e-04, -6.4666e-05,  3.9787e-04,  1.2750e-04,  3.3809e-04,\n","        -5.7706e-05, -6.7536e-05,  1.8901e-04,  4.4994e-05,  3.9534e-04])\n","gradient values before mask reapp. tensor([ 1.6288e-04, -1.2608e-04, -1.2424e-04,  2.0431e-05, -2.9412e-04,\n","        -9.8517e-05, -1.7596e-04, -1.5805e-04, -1.2660e-04, -4.3116e-04])\n","gradient values before mask reapp. tensor([ 4.1676e-04, -5.8526e-05,  4.2706e-04,  1.3841e-04,  3.7302e-04,\n","        -5.2523e-05, -5.7001e-05,  2.1132e-04,  5.4526e-05,  4.5162e-04])\n","gradient values before mask reapp. tensor([-7.5836e-05, -1.6174e-04, -5.4227e-04, -7.6118e-05, -6.7596e-04,\n","        -1.4830e-04, -2.5514e-04, -4.0844e-04, -1.9107e-04, -1.0922e-03])\n","gradient values before mask reapp. tensor([ 3.6800e-04, -6.9477e-05,  2.1778e-04,  8.3854e-05,  6.6936e-05,\n","        -4.1193e-05, -4.4973e-05,  1.0263e-04, -3.2665e-05,  1.7422e-04])\n","gradient values before mask reapp. tensor([ 8.8717e-05, -1.2298e-04, -1.7138e-04, -6.1999e-06, -1.7320e-04,\n","        -1.3346e-04, -1.8795e-04, -1.5316e-04, -3.3228e-05, -5.3442e-04])\n","gradient values before mask reapp. tensor([ 5.1103e-04, -5.1023e-05,  4.7255e-04,  1.3822e-04,  3.0169e-04,\n","        -1.5291e-05, -4.8250e-06,  2.5209e-04,  1.0073e-05,  5.5823e-04])\n","gradient values before mask reapp. tensor([-0.0002, -0.0002, -0.0008, -0.0001, -0.0009, -0.0002, -0.0003, -0.0006,\n","        -0.0002, -0.0015])\n","gradient values before mask reapp. tensor([ 6.1823e-04, -3.4268e-05,  6.6923e-04,  1.8184e-04,  4.8240e-04,\n","         7.8603e-06,  3.2181e-05,  3.7069e-04,  4.1580e-05,  8.6631e-04])\n","gradient values before mask reapp. tensor([-6.8619e-05, -1.5633e-04, -5.7074e-04, -1.0661e-04, -6.3490e-04,\n","        -1.5240e-04, -2.2172e-04, -3.7516e-04, -1.3640e-04, -1.1341e-03])\n","gradient values before mask reapp. tensor([ 3.3301e-04, -7.4296e-05,  1.6312e-04,  6.8674e-05,  1.4514e-05,\n","        -4.9753e-05, -5.6862e-05,  7.0598e-05, -3.8909e-05,  7.8292e-05])\n","gradient values before mask reapp. tensor([-0.0001, -0.0002, -0.0007, -0.0001, -0.0007, -0.0002, -0.0002, -0.0004,\n","        -0.0002, -0.0013])\n","gradient values before mask reapp. tensor([ 4.4808e-04, -5.6489e-05,  3.6908e-04,  1.1475e-04,  1.9745e-04,\n","        -2.4937e-05, -1.9003e-05,  1.9257e-04, -9.1330e-06,  4.0017e-04])\n","gradient values before mask reapp. tensor([-0.0001, -0.0002, -0.0007, -0.0001, -0.0008, -0.0002, -0.0002, -0.0004,\n","        -0.0002, -0.0013])\n","gradient values before mask reapp. tensor([ 4.9969e-04, -4.8256e-05,  4.6492e-04,  1.3699e-04,  2.8707e-04,\n","        -1.3559e-05, -9.4601e-07,  2.5087e-04,  7.6201e-06,  5.5104e-04])\n","gradient values before mask reapp. tensor([-3.3841e-05, -1.4698e-04, -4.9760e-04, -8.8020e-05, -5.7426e-04,\n","        -1.4240e-04, -2.0449e-04, -3.2929e-04, -1.2613e-04, -1.0153e-03])\n","gradient values before mask reapp. tensor([ 3.6298e-04, -6.7877e-05,  2.2515e-04,  8.3476e-05,  6.9633e-05,\n","        -4.1559e-05, -4.3482e-05,  1.0987e-04, -2.7676e-05,  1.7684e-04])\n","gradient values before mask reapp. tensor([-4.8701e-05, -1.4879e-04, -5.2207e-04, -9.4316e-05, -5.9947e-04,\n","        -1.4450e-04, -2.0781e-04, -3.4290e-04, -1.3058e-04, -1.0541e-03])\n","gradient values before mask reapp. tensor([ 3.9837e-04, -6.2537e-05,  2.9218e-04,  9.9169e-05,  1.3252e-04,\n","        -3.4370e-05, -3.1671e-05,  1.5061e-04, -1.5424e-05,  2.8036e-04])\n","gradient values before mask reapp. tensor([ 5.3546e-05, -1.3465e-04, -3.3331e-04, -5.0579e-05, -4.1683e-04,\n","        -1.2545e-04, -1.7658e-04, -2.2952e-04, -9.4502e-05, -7.6355e-04])\n","gradient values before mask reapp. tensor([ 3.8288e-04, -6.6957e-05,  2.6558e-04,  9.0971e-05,  1.1032e-04,\n","        -4.0995e-05, -4.1535e-05,  1.3369e-04, -1.6066e-05,  2.2559e-04])\n","gradient values before mask reapp. tensor([-0.0002, -0.0002, -0.0008, -0.0002, -0.0008, -0.0002, -0.0003, -0.0005,\n","        -0.0002, -0.0015])\n","gradient values before mask reapp. tensor([ 3.4526e-04, -7.1141e-05,  2.0056e-04,  7.6773e-05,  4.0409e-05,\n","        -4.6996e-05, -5.1341e-05,  9.4118e-05, -3.2074e-05,  1.2736e-04])\n","gradient values before mask reapp. tensor([ 7.7279e-05, -1.1951e-04, -2.8617e-04, -3.6177e-05, -3.9467e-04,\n","        -1.0882e-04, -1.5122e-04, -1.9877e-04, -1.0020e-04, -6.5541e-04])\n","gradient values before mask reapp. tensor([ 2.6676e-04, -8.7583e-05,  5.7962e-05,  4.0080e-05, -8.5994e-05,\n","        -6.7859e-05, -8.5052e-05,  6.9565e-06, -4.9925e-05, -1.1436e-04])\n","gradient values before mask reapp. tensor([ 2.0477e-04, -9.7519e-05, -5.3632e-05,  1.8993e-05, -1.7714e-04,\n","        -8.0314e-05, -1.0608e-04, -5.7908e-05, -6.0625e-05, -2.8509e-04])\n","gradient values before mask reapp. tensor([ 1.2775e-04, -1.2051e-04, -1.9680e-04, -2.6011e-05, -3.0860e-04,\n","        -1.0639e-04, -1.4779e-04, -1.4747e-04, -7.9383e-05, -5.5452e-04])\n","gradient values before mask reapp. tensor([ 1.8311e-04, -9.8614e-05, -8.9558e-05,  1.0075e-05, -2.1665e-04,\n","        -8.2085e-05, -1.0854e-04, -7.7637e-05, -6.9366e-05, -3.3725e-04])\n","gradient values before mask reapp. tensor([ 1.1924e-04, -1.1983e-04, -2.0904e-04, -2.8996e-05, -3.2563e-04,\n","        -1.0628e-04, -1.4721e-04, -1.5392e-04, -8.3986e-05, -5.7062e-04])\n","gradient values before mask reapp. tensor([ 2.5373e-04, -8.8102e-05,  4.0722e-05,  4.0237e-05, -9.5039e-05,\n","        -6.8018e-05, -8.5765e-05,  5.8048e-07, -4.6720e-05, -1.3537e-04])\n","gradient values before mask reapp. tensor([ 2.3677e-04, -1.0456e-04,  6.5188e-06,  2.0408e-05, -1.1569e-04,\n","        -8.5190e-05, -1.1283e-04, -2.4765e-05, -4.1857e-05, -2.4140e-04])\n","gradient values before mask reapp. tensor([ 2.2607e-04, -9.3371e-05, -6.9898e-06,  2.7813e-05, -1.3681e-04,\n","        -7.6532e-05, -9.8179e-05, -2.8447e-05, -5.0904e-05, -2.2039e-04])\n","gradient values before mask reapp. tensor([-9.1312e-05, -1.5045e-04, -5.7790e-04, -1.1079e-04, -6.6134e-04,\n","        -1.4960e-04, -2.1366e-04, -3.7118e-04, -1.3842e-04, -1.1487e-03])\n","gradient values before mask reapp. tensor([ 3.2779e-04, -7.3707e-05,  1.7777e-04,  7.0862e-05,  1.8975e-05,\n","        -5.0710e-05, -5.8197e-05,  8.2240e-05, -2.9720e-05,  7.9548e-05])\n","gradient values before mask reapp. tensor([ 7.1428e-05, -1.1979e-04, -2.8260e-04, -3.9840e-05, -3.9602e-04,\n","        -1.1105e-04, -1.5290e-04, -1.9444e-04, -9.5995e-05, -6.6805e-04])\n","gradient values before mask reapp. tensor([ 3.0412e-04, -7.8345e-05,  1.3586e-04,  5.9680e-05, -1.7318e-05,\n","        -5.7336e-05, -6.8702e-05,  5.6371e-05, -3.3937e-05,  7.2743e-06])\n","gradient values before mask reapp. tensor([-7.6736e-05, -1.4540e-04, -5.4900e-04, -1.0341e-04, -6.4032e-04,\n","        -1.4390e-04, -2.0557e-04, -3.5383e-04, -1.3611e-04, -1.0978e-03])\n","gradient values before mask reapp. tensor([ 4.2657e-04, -5.9096e-05,  3.5493e-04,  1.0651e-04,  1.7660e-04,\n","        -3.0414e-05, -2.7475e-05,  1.8667e-04, -2.7939e-06,  3.4854e-04])\n","gradient values before mask reapp. tensor([-6.0431e-05, -1.4639e-04, -5.2184e-04, -1.0149e-04, -6.1531e-04,\n","        -1.4382e-04, -2.0652e-04, -3.3955e-04, -1.2973e-04, -1.0716e-03])\n","gradient values before mask reapp. tensor([ 3.6162e-04, -6.8054e-05,  2.4026e-04,  8.0400e-05,  7.0014e-05,\n","        -4.2907e-05, -4.7376e-05,  1.1901e-04, -2.0813e-05,  1.6934e-04])\n","gradient values before mask reapp. tensor([-0.0002, -0.0002, -0.0007, -0.0002, -0.0008, -0.0002, -0.0002, -0.0005,\n","        -0.0002, -0.0014])\n","gradient values before mask reapp. tensor([ 7.3038e-04, -8.1005e-06,  9.0916e-04,  2.3382e-04,  6.8660e-04,\n","         3.7667e-05,  8.0874e-05,  5.2191e-04,  8.5776e-05,  1.2279e-03])\n","gradient values before mask reapp. tensor([-0.0004, -0.0002, -0.0011, -0.0002, -0.0011, -0.0002, -0.0003, -0.0007,\n","        -0.0002, -0.0019])\n","gradient values before mask reapp. tensor([ 5.7892e-04, -2.8427e-05,  6.4251e-04,  1.7605e-04,  4.3820e-04,\n","         8.6563e-06,  3.6118e-05,  3.6519e-04,  4.2639e-05,  8.1693e-04])\n","gradient values before mask reapp. tensor([-0.0002, -0.0002, -0.0009, -0.0002, -0.0009, -0.0002, -0.0003, -0.0005,\n","        -0.0002, -0.0016])\n","gradient values before mask reapp. tensor([ 6.1545e-04, -2.3803e-05,  7.0901e-04,  1.8983e-04,  4.9789e-04,\n","         1.4944e-05,  4.5978e-05,  4.0425e-04,  5.4004e-05,  9.1426e-04])\n","gradient values before mask reapp. tensor([-0.0003, -0.0002, -0.0010, -0.0002, -0.0011, -0.0002, -0.0003, -0.0006,\n","        -0.0002, -0.0019])\n","gradient values before mask reapp. tensor([ 6.9293e-04, -1.1628e-05,  8.5185e-04,  2.2181e-04,  6.2952e-04,\n","         3.1585e-05,  7.2695e-05,  4.9040e-04,  7.7260e-05,  1.1380e-03])\n","gradient values before mask reapp. tensor([-0.0002, -0.0002, -0.0008, -0.0002, -0.0009, -0.0002, -0.0003, -0.0005,\n","        -0.0002, -0.0016])\n","gradient values before mask reapp. tensor([ 5.6015e-04, -3.1562e-05,  6.1615e-04,  1.6781e-04,  4.1129e-04,\n","         3.0002e-06,  2.8612e-05,  3.4994e-04,  4.0967e-05,  7.6399e-04])\n","gradient values before mask reapp. tensor([-0.0004, -0.0002, -0.0011, -0.0002, -0.0011, -0.0002, -0.0003, -0.0007,\n","        -0.0002, -0.0019])\n","gradient values before mask reapp. tensor([ 4.7438e-04, -3.9861e-05,  4.5910e-04,  1.1556e-05,  1.1629e-04,\n","         9.8481e-06,  5.5130e-06,  2.3146e-04, -6.7566e-05,  4.0918e-04])\n","gradient values before mask reapp. tensor([-0.0003, -0.0002, -0.0009, -0.0002, -0.0009, -0.0002, -0.0003, -0.0006,\n","        -0.0002, -0.0017])\n","gradient values before mask reapp. tensor([ 4.5710e-04, -4.0271e-05,  4.3298e-04,  6.4135e-06,  9.0627e-05,\n","         7.4735e-06,  3.1341e-06,  2.1742e-04, -7.1728e-05,  3.7120e-04])\n","gradient values before mask reapp. tensor([-0.0003, -0.0002, -0.0010, -0.0004, -0.0013, -0.0002, -0.0003, -0.0007,\n","        -0.0003, -0.0020])\n","gradient values before mask reapp. tensor([ 4.8083e-04, -3.8707e-05,  4.7743e-04,  1.2678e-05,  1.3334e-04,\n","         8.9241e-06,  6.0547e-06,  2.4253e-04, -6.1476e-05,  4.2662e-04])\n","gradient values before mask reapp. tensor([-0.0006, -0.0002, -0.0014, -0.0005, -0.0016, -0.0002, -0.0004, -0.0009,\n","        -0.0004, -0.0026])\n","gradient values before mask reapp. tensor([ 5.8706e-04, -2.1732e-05,  6.7533e-04,  5.9241e-05,  3.2102e-04,\n","         3.2467e-05,  4.3877e-05,  3.6325e-04, -2.6926e-05,  7.4068e-04])\n","gradient values before mask reapp. tensor([-0.0005, -0.0002, -0.0013, -0.0004, -0.0015, -0.0002, -0.0004, -0.0008,\n","        -0.0003, -0.0025])\n","gradient values before mask reapp. tensor([ 3.1997e-04, -6.4478e-05,  1.9575e-04, -6.2052e-05, -1.3599e-04,\n","        -2.4431e-05, -4.8536e-05,  7.2444e-05, -1.1005e-04, -3.2299e-05])\n","gradient values before mask reapp. tensor([-0.0004, -0.0002, -0.0011, -0.0004, -0.0014, -0.0002, -0.0003, -0.0007,\n","        -0.0003, -0.0022])\n","gradient values before mask reapp. tensor([8.4637e-04, 2.4497e-05, 1.3018e-03, 2.0703e-04, 1.0279e-03, 6.1116e-05,\n","        9.6031e-05, 7.1619e-04, 1.3624e-04, 1.6538e-03])\n","gradient values before mask reapp. tensor([-0.0006, -0.0002, -0.0014, -0.0005, -0.0016, -0.0002, -0.0004, -0.0009,\n","        -0.0003, -0.0026])\n","gradient values before mask reapp. tensor([ 5.2589e-04, -1.8658e-05,  7.3328e-04,  8.0044e-05,  4.9905e-04,\n","        -5.9126e-07, -8.3607e-07,  3.7912e-04,  4.2684e-05,  7.7653e-04])\n","gradient values before mask reapp. tensor([-0.0001, -0.0001, -0.0005, -0.0002, -0.0006, -0.0002, -0.0003, -0.0004,\n","        -0.0002, -0.0012])\n","gradient values before mask reapp. tensor([ 3.2838e-04, -5.3980e-05,  3.7669e-04, -1.2579e-05,  1.6644e-04,\n","        -4.5018e-05, -7.2208e-05,  1.6437e-04, -1.4092e-05,  1.9373e-04])\n","gradient values before mask reapp. tensor([-0.0001, -0.0001, -0.0004, -0.0002, -0.0006, -0.0001, -0.0002, -0.0003,\n","        -0.0002, -0.0012])\n","gradient values before mask reapp. tensor([ 4.2075e-04, -3.5926e-05,  5.5393e-04,  3.6171e-05,  3.4065e-04,\n","        -2.3112e-05, -3.6418e-05,  2.7403e-04,  2.0281e-05,  4.8458e-04])\n","gradient values before mask reapp. tensor([-0.0002, -0.0002, -0.0006, -0.0003, -0.0008, -0.0002, -0.0003, -0.0004,\n","        -0.0002, -0.0014])\n","gradient values before mask reapp. tensor([ 4.6425e-04, -2.8417e-05,  6.3570e-04,  5.3018e-05,  4.1161e-04,\n","        -1.3857e-05, -2.2154e-05,  3.2207e-04,  3.1966e-05,  6.0854e-04])\n","gradient values before mask reapp. tensor([-9.5085e-05, -1.3379e-04, -4.0120e-04, -2.2186e-04, -5.7267e-04,\n","        -1.4131e-04, -2.3278e-04, -3.0731e-04, -1.4235e-04, -1.0993e-03])\n","gradient values before mask reapp. tensor([ 2.9964e-04, -5.8075e-05,  3.3293e-04, -2.8444e-05,  1.2255e-04,\n","        -5.0691e-05, -8.3936e-05,  1.3694e-04, -1.9885e-05,  1.0993e-04])\n","gradient values before mask reapp. tensor([-4.1198e-05, -1.2677e-04, -3.0516e-04, -2.0658e-04, -4.9244e-04,\n","        -1.3060e-04, -2.1801e-04, -2.5231e-04, -1.3041e-04, -9.6176e-04])\n","gradient values before mask reapp. tensor([ 4.2125e-04, -3.1555e-05,  5.7671e-04,  5.5506e-05,  3.8039e-04,\n","        -2.6541e-05, -4.4282e-05,  3.4845e-04,  5.0600e-05,  4.8673e-04])\n","gradient values before mask reapp. tensor([-0.0001, -0.0001, -0.0005, -0.0003, -0.0006, -0.0002, -0.0003, -0.0003,\n","        -0.0002, -0.0012])\n","gradient values before mask reapp. tensor([ 4.3887e-04, -2.8005e-05,  6.1391e-04,  6.3579e-05,  4.1513e-04,\n","        -2.2902e-05, -3.8635e-05,  3.7436e-04,  5.8393e-05,  5.4023e-04])\n","gradient values before mask reapp. tensor([-0.0002, -0.0001, -0.0005, -0.0002, -0.0006, -0.0002, -0.0003, -0.0003,\n","        -0.0001, -0.0013])\n","gradient values before mask reapp. tensor([ 4.3838e-04, -2.4089e-05,  6.2747e-04,  7.5165e-05,  4.4280e-04,\n","        -1.7213e-05, -2.8066e-05,  3.8352e-04,  6.6718e-05,  5.8525e-04])\n","gradient values before mask reapp. tensor([-3.0153e-06, -1.1957e-04, -2.0371e-04, -1.5636e-04, -3.5180e-04,\n","        -1.2894e-04, -2.1762e-04, -9.0858e-05, -6.2903e-05, -8.5250e-04])\n","gradient values before mask reapp. tensor([6.4767e-04, 8.5054e-06, 1.0147e-03, 1.6800e-04, 8.0881e-04, 1.9154e-05,\n","        3.2135e-05, 6.3299e-04, 1.4084e-04, 1.1681e-03])\n","gradient values before mask reapp. tensor([-0.0005, -0.0002, -0.0012, -0.0004, -0.0013, -0.0002, -0.0004, -0.0008,\n","        -0.0003, -0.0024])\n","gradient values before mask reapp. tensor([9.0435e-04, 4.9677e-05, 1.4847e-03, 2.8127e-04, 1.2458e-03, 7.2906e-05,\n","        1.1659e-04, 9.2947e-04, 2.2151e-04, 1.9020e-03])\n","gradient values before mask reapp. tensor([-0.0008, -0.0002, -0.0017, -0.0005, -0.0019, -0.0003, -0.0004, -0.0010,\n","        -0.0004, -0.0032])\n","gradient values before mask reapp. tensor([9.7327e-04, 6.1252e-05, 1.6124e-03, 3.1151e-04, 1.3601e-03, 8.7975e-05,\n","        1.3935e-04, 1.0114e-03, 2.4239e-04, 2.0984e-03])\n","gradient values before mask reapp. tensor([-0.0007, -0.0002, -0.0014, -0.0004, -0.0015, -0.0003, -0.0004, -0.0008,\n","        -0.0003, -0.0027])\n","gradient values before mask reapp. tensor([1.1167e-03, 8.4123e-05, 1.8829e-03, 3.8005e-04, 1.6248e-03, 1.1675e-04,\n","        1.8610e-04, 1.1885e-03, 2.9752e-04, 2.5188e-03])\n","gradient values before mask reapp. tensor([-0.0007, -0.0002, -0.0015, -0.0005, -0.0017, -0.0002, -0.0004, -0.0009,\n","        -0.0003, -0.0029])\n","gradient values before mask reapp. tensor([ 5.3128e-04, -9.1574e-06,  8.1444e-04,  1.0633e-04,  5.9593e-04,\n","        -3.2450e-06, -7.1023e-06,  5.1690e-04,  9.8292e-05,  8.2715e-04])\n","gradient values before mask reapp. tensor([-0.0002, -0.0001, -0.0005, -0.0002, -0.0006, -0.0002, -0.0003, -0.0003,\n","        -0.0001, -0.0013])\n","gradient values before mask reapp. tensor([ 5.5867e-04, -5.5285e-06,  8.6701e-04,  1.1823e-04,  6.4806e-04,\n","         1.4782e-06, -8.3427e-07,  5.5304e-04,  1.1111e-04,  9.0086e-04])\n","gradient values before mask reapp. tensor([-0.0003, -0.0002, -0.0007, -0.0003, -0.0008, -0.0002, -0.0003, -0.0004,\n","        -0.0001, -0.0016])\n","gradient values before mask reapp. tensor([6.6436e-04, 1.7260e-05, 1.0703e-03, 1.7538e-04, 8.4461e-04, 2.8395e-05,\n","        4.3371e-05, 6.7579e-04, 1.4733e-04, 1.2430e-03])\n","gradient values before mask reapp. tensor([-0.0003, -0.0002, -0.0007, -0.0003, -0.0008, -0.0002, -0.0003, -0.0004,\n","        -0.0001, -0.0016])\n","gradient values before mask reapp. tensor([ 5.1067e-04, -8.2149e-06,  7.9487e-04,  1.0576e-04,  5.8730e-04,\n","        -2.2470e-06, -6.2138e-06,  5.0414e-04,  1.0068e-04,  8.0757e-04])\n","gradient values before mask reapp. tensor([-7.3657e-05, -1.2713e-04, -2.9144e-04, -1.8610e-04, -4.3835e-04,\n","        -1.4344e-04, -2.4193e-04, -1.2119e-04, -6.7085e-05, -1.0344e-03])\n","gradient values before mask reapp. tensor([6.3350e-04, 1.3879e-05, 1.0295e-03, 1.6327e-04, 8.0850e-04, 1.9388e-05,\n","        3.2202e-05, 6.5460e-04, 1.4497e-04, 1.1649e-03])\n","gradient values before mask reapp. tensor([-0.0004, -0.0002, -0.0010, -0.0004, -0.0012, -0.0002, -0.0003, -0.0005,\n","        -0.0002, -0.0020])\n","gradient values before mask reapp. tensor([7.4499e-04, 2.4915e-05, 1.2317e-03, 2.0895e-04, 1.0098e-03, 3.5896e-05,\n","        5.5500e-05, 7.9759e-04, 1.9339e-04, 1.4474e-03])\n","gradient values before mask reapp. tensor([-0.0006, -0.0002, -0.0015, -0.0005, -0.0016, -0.0002, -0.0004, -0.0008,\n","        -0.0003, -0.0028])\n","gradient values before mask reapp. tensor([6.9436e-04, 2.0130e-05, 1.1386e-03, 1.8178e-04, 9.0119e-04, 2.9760e-05,\n","        4.3513e-05, 7.3287e-04, 1.6470e-04, 1.3054e-03])\n","gradient values before mask reapp. tensor([-0.0007, -0.0002, -0.0016, -0.0005, -0.0018, -0.0002, -0.0004, -0.0009,\n","        -0.0004, -0.0031])\n","gradient values before mask reapp. tensor([1.0531e-03, 6.5848e-05, 1.8346e-03, 3.6364e-04, 1.3539e-03, 1.3588e-04,\n","        2.0711e-04, 9.5941e-04, 1.5170e-04, 2.5803e-03])\n","gradient values before mask reapp. tensor([-0.0007, -0.0002, -0.0015, -0.0005, -0.0017, -0.0002, -0.0004, -0.0008,\n","        -0.0003, -0.0029])\n","gradient values before mask reapp. tensor([ 3.8842e-04, -3.0085e-05,  6.5033e-04,  8.7407e-05,  2.0508e-04,\n","         1.5356e-05,  1.8548e-05,  1.6610e-04, -8.5536e-05,  8.0381e-04])\n","gradient values before mask reapp. tensor([-0.0005, -0.0002, -0.0010, -0.0004, -0.0014, -0.0002, -0.0003, -0.0008,\n","        -0.0004, -0.0020])\n","gradient values before mask reapp. tensor([ 4.9708e-04, -1.3371e-05,  8.4794e-04,  1.3127e-04,  3.8829e-04,\n","         3.4951e-05,  4.8998e-05,  2.9391e-04, -4.9394e-05,  1.0958e-03])\n","gradient values before mask reapp. tensor([-0.0006, -0.0002, -0.0013, -0.0004, -0.0016, -0.0002, -0.0004, -0.0010,\n","        -0.0004, -0.0023])\n","gradient values before mask reapp. tensor([ 2.6899e-04, -4.9868e-05,  4.3951e-04,  3.0574e-05, -1.3864e-05,\n","        -5.4030e-06, -1.6998e-05,  2.1695e-05, -1.3368e-04,  4.7575e-04])\n","gradient values before mask reapp. tensor([-0.0002, -0.0001, -0.0004, -0.0002, -0.0007, -0.0001, -0.0002, -0.0004,\n","        -0.0002, -0.0010])\n","gradient values before mask reapp. tensor([ 3.6027e-04, -3.4493e-05,  6.1592e-04,  7.4709e-05,  1.7366e-04,\n","         3.9248e-06,  2.5447e-06,  1.5784e-04, -8.2772e-05,  7.1606e-04])\n","gradient values before mask reapp. tensor([-0.0006, -0.0002, -0.0012, -0.0004, -0.0015, -0.0002, -0.0004, -0.0009,\n","        -0.0004, -0.0023])\n","gradient values before mask reapp. tensor([ 3.5201e-04, -3.5472e-05,  6.0337e-04,  7.1393e-05,  1.5314e-04,\n","         7.4079e-06,  5.3215e-06,  1.4590e-04, -9.1196e-05,  7.0902e-04])\n","gradient values before mask reapp. tensor([-9.1841e-05, -1.2721e-04, -2.2463e-04, -1.4960e-04, -5.8618e-04,\n","        -1.0808e-04, -1.8625e-04, -2.9574e-04, -1.8990e-04, -7.2872e-04])\n","gradient values before mask reapp. tensor([ 1.3317e-04, -7.4784e-05,  2.0738e-04, -2.8544e-05, -2.0312e-04,\n","        -4.6989e-05, -8.1552e-05, -7.8456e-05, -1.4240e-04,  4.2718e-05])\n","gradient values before mask reapp. tensor([-0.0005, -0.0002, -0.0009, -0.0003, -0.0013, -0.0002, -0.0003, -0.0008,\n","        -0.0003, -0.0018])\n","gradient values before mask reapp. tensor([ 4.2300e-04, -2.7546e-05,  7.3115e-04,  9.2184e-05,  2.7783e-04,\n","         1.3074e-05,  1.1788e-05,  2.4948e-04, -5.6667e-05,  8.5347e-04])\n","gradient values before mask reapp. tensor([-0.0008, -0.0002, -0.0015, -0.0005, -0.0018, -0.0002, -0.0004, -0.0011,\n","        -0.0004, -0.0026])\n","gradient values before mask reapp. tensor([7.1523e-04, 1.8329e-05, 1.2574e-03, 2.1324e-04, 7.1662e-04, 8.7799e-05,\n","        1.2959e-04, 5.4367e-04, 2.1259e-05, 1.7066e-03])\n","gradient values before mask reapp. tensor([-0.0009, -0.0003, -0.0017, -0.0005, -0.0021, -0.0002, -0.0004, -0.0013,\n","        -0.0005, -0.0029])\n","gradient values before mask reapp. tensor([ 3.5176e-04, -3.9239e-05,  5.9508e-04,  4.6996e-05,  5.4732e-05,\n","         1.9843e-05,  1.8116e-05,  1.0085e-04, -1.1588e-04,  6.8546e-04])\n","gradient values before mask reapp. tensor([-0.0004, -0.0002, -0.0007, -0.0003, -0.0012, -0.0001, -0.0002, -0.0007,\n","        -0.0003, -0.0014])\n","gradient values before mask reapp. tensor([ 3.0877e-05, -8.8562e-05,  2.5581e-05, -9.0077e-05, -5.0403e-04,\n","        -3.9762e-05, -7.5677e-05, -2.8778e-04, -2.2675e-04, -1.8144e-04])\n","gradient values before mask reapp. tensor([-0.0006, -0.0002, -0.0012, -0.0004, -0.0017, -0.0002, -0.0003, -0.0010,\n","        -0.0004, -0.0023])\n","gradient values before mask reapp. tensor([ 1.6456e-04, -6.1571e-05,  2.8277e-04, -2.4017e-05, -2.8256e-04,\n","        -1.4343e-06, -1.3599e-05, -1.4784e-04, -1.9648e-04,  2.6031e-04])\n","gradient values before mask reapp. tensor([-0.0004, -0.0002, -0.0008, -0.0003, -0.0012, -0.0002, -0.0003, -0.0007,\n","        -0.0003, -0.0017])\n","gradient values before mask reapp. tensor([ 3.4517e-04, -3.1724e-05,  6.1610e-04,  6.1188e-05,  6.8650e-05,\n","         2.4989e-05,  3.2790e-05,  9.4755e-05, -1.1561e-04,  7.5141e-04])\n","gradient values before mask reapp. tensor([-0.0005, -0.0002, -0.0010, -0.0003, -0.0014, -0.0002, -0.0003, -0.0008,\n","        -0.0004, -0.0018])\n","gradient values before mask reapp. tensor([ 3.7489e-05, -8.2626e-05,  6.4014e-05, -7.6533e-05, -4.6843e-04,\n","        -3.4374e-05, -6.3385e-05, -2.6344e-04, -2.1916e-04, -1.0851e-04])\n","gradient values before mask reapp. tensor([-0.0003, -0.0002, -0.0005, -0.0002, -0.0010, -0.0001, -0.0002, -0.0005,\n","        -0.0003, -0.0012])\n","gradient values before mask reapp. tensor([ 2.4031e-04, -5.3431e-05,  4.2333e-04,  1.1830e-05, -7.6683e-05,\n","        -8.9540e-06, -2.3090e-05,  1.5573e-05, -1.2373e-04,  3.9616e-04])\n","gradient values before mask reapp. tensor([-0.0008, -0.0002, -0.0015, -0.0005, -0.0020, -0.0002, -0.0004, -0.0012,\n","        -0.0005, -0.0027])\n","gradient values before mask reapp. tensor([ 5.5349e-04, -2.7980e-06,  9.8776e-04,  1.4442e-04,  4.6272e-04,\n","         5.2587e-05,  7.3487e-05,  3.8412e-04, -2.2960e-05,  1.2651e-03])\n","gradient values before mask reapp. tensor([-0.0009, -0.0002, -0.0016, -0.0005, -0.0021, -0.0002, -0.0004, -0.0013,\n","        -0.0005, -0.0028])\n","gradient values before mask reapp. tensor([9.2947e-04, 5.7251e-05, 1.6778e-03, 3.2129e-04, 1.1793e-03, 1.1885e-04,\n","        1.8303e-04, 8.5517e-04, 1.3256e-04, 2.3256e-03])\n","gradient values before mask reapp. tensor([-0.0013, -0.0003, -0.0024, -0.0007, -0.0028, -0.0003, -0.0006, -0.0017,\n","        -0.0006, -0.0041])\n","gradient values before mask reapp. tensor([1.0549e-03, 8.3949e-05, 1.9194e-03, 3.8798e-04, 1.4004e-03, 1.5221e-04,\n","        2.3811e-04, 1.0009e-03, 1.6930e-04, 2.7342e-03])\n","gradient values before mask reapp. tensor([-0.0012, -0.0003, -0.0023, -0.0007, -0.0027, -0.0003, -0.0005, -0.0017,\n","        -0.0006, -0.0039])\n","gradient values before mask reapp. tensor([0.0012, 0.0001, 0.0021, 0.0004, 0.0016, 0.0002, 0.0003, 0.0011, 0.0002,\n","        0.0030])\n","gradient values before mask reapp. tensor([-0.0013, -0.0003, -0.0023, -0.0007, -0.0027, -0.0003, -0.0005, -0.0017,\n","        -0.0006, -0.0040])\n","gradient values before mask reapp. tensor([6.3584e-04, 2.1675e-05, 1.1805e-03, 2.0874e-04, 6.4755e-04, 8.2609e-05,\n","        1.2694e-04, 4.9150e-04, 1.0577e-05, 1.6260e-03])\n","gradient values before mask reapp. tensor([-0.0006, -0.0002, -0.0012, -0.0004, -0.0016, -0.0002, -0.0003, -0.0009,\n","        -0.0004, -0.0023])\n","gradient values before mask reapp. tensor([ 3.8810e-05, -7.6049e-05,  9.8639e-05, -6.7843e-05, -4.2699e-04,\n","        -3.4883e-05, -6.3002e-05, -2.1144e-04, -2.0350e-04, -7.4610e-05])\n","gradient values before mask reapp. tensor([-0.0001, -0.0001, -0.0002, -0.0002, -0.0006, -0.0001, -0.0002, -0.0003,\n","        -0.0002, -0.0008])\n","gradient values before mask reapp. tensor([ 3.0627e-05, -8.0868e-05,  8.4064e-05, -7.2661e-05, -4.1253e-04,\n","        -4.6499e-05, -8.0668e-05, -1.9277e-04, -1.8613e-04, -1.3818e-04])\n","gradient values before mask reapp. tensor([-0.0003, -0.0001, -0.0005, -0.0002, -0.0010, -0.0001, -0.0002, -0.0005,\n","        -0.0003, -0.0012])\n","gradient values before mask reapp. tensor([ 2.3560e-04, -4.6911e-05,  4.5635e-04,  2.2472e-05, -3.9291e-05,\n","        -8.5558e-06, -2.0327e-05,  5.2742e-05, -1.0904e-04,  4.3748e-04])\n","gradient values before mask reapp. tensor([-0.0007, -0.0002, -0.0013, -0.0004, -0.0017, -0.0002, -0.0004, -0.0010,\n","        -0.0004, -0.0024])\n","gradient values before mask reapp. tensor([ 3.1694e-04, -6.2287e-05,  5.1148e-04, -1.2909e-04, -1.6055e-04,\n","         1.4231e-05,  1.7377e-05, -2.9632e-04, -2.7728e-04,  5.5930e-04])\n","gradient values before mask reapp. tensor([-0.0013, -0.0003, -0.0024, -0.0009, -0.0030, -0.0003, -0.0005, -0.0022,\n","        -0.0008, -0.0041])\n","gradient values before mask reapp. tensor([ 7.9777e-04,  1.1528e-05,  1.3783e-03,  8.5616e-05,  7.3491e-04,\n","         9.7552e-05,  1.5095e-04,  3.1036e-04, -8.4786e-05,  1.8710e-03])\n","gradient values before mask reapp. tensor([-0.0012, -0.0003, -0.0023, -0.0009, -0.0029, -0.0003, -0.0005, -0.0021,\n","        -0.0008, -0.0040])\n","gradient values before mask reapp. tensor([ 6.0700e-04, -7.2644e-06,  1.0052e-03, -2.3026e-05,  5.5132e-04,\n","         3.2950e-05,  5.2220e-05,  2.6112e-04, -2.6248e-05,  1.1086e-03])\n","gradient values before mask reapp. tensor([-0.0005, -0.0002, -0.0011, -0.0006, -0.0015, -0.0002, -0.0003, -0.0011,\n","        -0.0004, -0.0022])\n","gradient values before mask reapp. tensor([ 5.2834e-05, -9.6102e-05,  1.4487e-05, -2.6344e-04, -4.1837e-04,\n","        -6.8289e-05, -1.1065e-04, -4.0280e-04, -2.1648e-04, -4.0495e-04])\n","gradient values before mask reapp. tensor([-0.0004, -0.0002, -0.0008, -0.0005, -0.0012, -0.0002, -0.0003, -0.0009,\n","        -0.0004, -0.0018])\n","gradient values before mask reapp. tensor([ 3.2202e-04, -4.7889e-05,  5.1383e-04, -1.3390e-04,  8.5057e-05,\n","        -1.9150e-05, -2.7119e-05, -5.6403e-05, -1.0858e-04,  3.5993e-04])\n","gradient values before mask reapp. tensor([-0.0009, -0.0003, -0.0017, -0.0008, -0.0021, -0.0003, -0.0005, -0.0015,\n","        -0.0006, -0.0033])\n","gradient values before mask reapp. tensor([7.1531e-04, 1.9569e-05, 1.2283e-03, 4.1934e-05, 7.7900e-04, 5.6578e-05,\n","        9.5692e-05, 4.1972e-04, 2.6441e-05, 1.4638e-03])\n","gradient values before mask reapp. tensor([-0.0014, -0.0004, -0.0026, -0.0010, -0.0031, -0.0004, -0.0006, -0.0022,\n","        -0.0008, -0.0046])\n","gradient values before mask reapp. tensor([0.0015, 0.0001, 0.0027, 0.0004, 0.0023, 0.0002, 0.0003, 0.0015, 0.0004,\n","        0.0037])\n","gradient values before mask reapp. tensor([-0.0012, -0.0003, -0.0022, -0.0009, -0.0026, -0.0003, -0.0005, -0.0018,\n","        -0.0006, -0.0040])\n","gradient values before mask reapp. tensor([9.5796e-04, 5.2922e-05, 1.6703e-03, 1.5189e-04, 1.2802e-03, 8.7472e-05,\n","        1.4755e-04, 7.5880e-04, 1.5176e-04, 2.0966e-03])\n","gradient values before mask reapp. tensor([-0.0013, -0.0003, -0.0024, -0.0009, -0.0028, -0.0004, -0.0006, -0.0020,\n","        -0.0007, -0.0043])\n","gradient values before mask reapp. tensor([9.3826e-04, 4.9968e-05, 1.6343e-03, 1.3706e-04, 1.2390e-03, 8.2795e-05,\n","        1.3772e-04, 7.3575e-04, 1.3572e-04, 2.0318e-03])\n","gradient values before mask reapp. tensor([-0.0011, -0.0003, -0.0021, -0.0008, -0.0025, -0.0003, -0.0005, -0.0018,\n","        -0.0006, -0.0038])\n","gradient values before mask reapp. tensor([9.2772e-04, 4.8441e-05, 1.6181e-03, 1.3081e-04, 1.2273e-03, 7.9391e-05,\n","        1.3244e-04, 7.2857e-04, 1.3498e-04, 1.9992e-03])\n","gradient values before mask reapp. tensor([-0.0013, -0.0003, -0.0024, -0.0009, -0.0028, -0.0003, -0.0006, -0.0020,\n","        -0.0007, -0.0043])\n","gradient values before mask reapp. tensor([7.8533e-04, 3.2604e-05, 1.4691e-03, 7.7852e-05, 8.8455e-04, 9.9556e-05,\n","        1.5684e-04, 5.1820e-04, 4.8949e-05, 1.7982e-03])\n","gradient values before mask reapp. tensor([-0.0009, -0.0003, -0.0018, -0.0007, -0.0021, -0.0003, -0.0005, -0.0016,\n","        -0.0005, -0.0033])\n","gradient values before mask reapp. tensor([ 4.0384e-04, -2.3858e-05,  7.8797e-04, -8.2612e-05,  2.1362e-04,\n","         3.0422e-05,  4.6124e-05,  6.0975e-05, -8.3746e-05,  7.6233e-04])\n","gradient values before mask reapp. tensor([-0.0011, -0.0003, -0.0019, -0.0008, -0.0025, -0.0003, -0.0004, -0.0018,\n","        -0.0006, -0.0035])\n","gradient values before mask reapp. tensor([-8.2329e-05, -1.0119e-04, -8.3882e-05, -3.0093e-04, -6.7094e-04,\n","        -5.3302e-05, -9.0593e-05, -5.4223e-04, -2.7008e-04, -5.5877e-04])\n"]},{"output_type":"display_data","data":{"text/plain":["'80.0% done'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{}},{"output_type":"stream","name":"stdout","text":["sc1 weights:  torch.Size([100, 612])\n","sc2 weights:  torch.Size([1, 100])\n","first ten digits of weight at init tensor([-0.0011, -0.0003, -0.0015,  0.0000, -0.0009,  0.0015, -0.0003,  0.0000,\n","        -0.0002,  0.0000], grad_fn=<SliceBackward0>)\n","gradient values before mask reapp. tensor([4.6506e-06, 8.1001e-07, 8.1984e-06, 3.2688e-06, 1.1688e-05, 2.6200e-07,\n","        6.6501e-07, 8.5445e-06, 3.6695e-06, 1.1854e-05])\n","gradient values before mask reapp. tensor([5.5384e-06, 9.6458e-07, 9.7631e-06, 3.8925e-06, 1.3919e-05, 3.1197e-07,\n","        7.9188e-07, 1.0175e-05, 4.3698e-06, 1.4116e-05])\n","gradient values before mask reapp. tensor([6.4057e-06, 1.1156e-06, 1.1292e-05, 4.5019e-06, 1.6099e-05, 3.6079e-07,\n","        9.1585e-07, 1.1768e-05, 5.0540e-06, 1.6327e-05])\n","gradient values before mask reapp. tensor([7.2556e-06, 1.2636e-06, 1.2790e-05, 5.0990e-06, 1.8234e-05, 4.0863e-07,\n","        1.0373e-06, 1.3329e-05, 5.7244e-06, 1.8492e-05])\n","gradient values before mask reapp. tensor([8.0905e-06, 1.4090e-06, 1.4262e-05, 5.6856e-06, 2.0333e-05, 4.5563e-07,\n","        1.1567e-06, 1.4863e-05, 6.3831e-06, 2.0620e-05])\n","gradient values before mask reapp. tensor([8.9131e-06, 1.5522e-06, 1.5711e-05, 6.2635e-06, 2.2400e-05, 5.0192e-07,\n","        1.2742e-06, 1.6374e-05, 7.0319e-06, 2.2716e-05])\n","gradient values before mask reapp. tensor([9.7254e-06, 1.6936e-06, 1.7143e-05, 6.8343e-06, 2.4441e-05, 5.4765e-07,\n","        1.3903e-06, 1.7866e-05, 7.6727e-06, 2.4787e-05])\n","gradient values before mask reapp. tensor([1.0530e-05, 1.8337e-06, 1.8561e-05, 7.3996e-06, 2.6463e-05, 5.9293e-07,\n","        1.5054e-06, 1.9343e-05, 8.3074e-06, 2.6837e-05])\n","gradient values before mask reapp. tensor([1.1329e-05, 1.9728e-06, 1.9970e-05, 7.9610e-06, 2.8471e-05, 6.3789e-07,\n","        1.6196e-06, 2.0810e-05, 8.9376e-06, 2.8874e-05])\n","gradient values before mask reapp. tensor([1.2124e-05, 2.1112e-06, 2.1371e-05, 8.5199e-06, 3.0469e-05, 6.8263e-07,\n","        1.7333e-06, 2.2271e-05, 9.5648e-06, 3.0900e-05])\n","gradient values before mask reapp. tensor([1.2918e-05, 2.2494e-06, 2.2770e-05, 9.0777e-06, 3.2463e-05, 7.2729e-07,\n","        1.8468e-06, 2.3728e-05, 1.0191e-05, 3.2923e-05])\n","gradient values before mask reapp. tensor([1.3712e-05, 2.3876e-06, 2.4170e-05, 9.6360e-06, 3.4459e-05, 7.7197e-07,\n","        1.9603e-06, 2.5186e-05, 1.0817e-05, 3.4948e-05])\n","gradient values before mask reapp. tensor([1.4509e-05, 2.5264e-06, 2.5575e-05, 1.0196e-05, 3.6463e-05, 8.1682e-07,\n","        2.0744e-06, 2.6650e-05, 1.1446e-05, 3.6981e-05])\n","gradient values before mask reapp. tensor([1.5312e-05, 2.6661e-06, 2.6990e-05, 1.0761e-05, 3.8480e-05, 8.6198e-07,\n","        2.1892e-06, 2.8123e-05, 1.2079e-05, 3.9028e-05])\n","gradient values before mask reapp. tensor([1.6123e-05, 2.8072e-06, 2.8419e-05, 1.1331e-05, 4.0518e-05, 9.0759e-07,\n","        2.3052e-06, 2.9612e-05, 1.2719e-05, 4.1095e-05])\n","gradient values before mask reapp. tensor([1.6944e-05, 2.9500e-06, 2.9866e-05, 1.1908e-05, 4.2581e-05, 9.5377e-07,\n","        2.4228e-06, 3.1118e-05, 1.3366e-05, 4.3189e-05])\n","gradient values before mask reapp. tensor([1.4591e-05, 2.6807e-06, 2.5518e-05, 8.3701e-06, 3.6018e-05, 8.5572e-07,\n","        1.5473e-06, 2.8598e-05, 1.1254e-05, 3.3594e-05])\n","gradient values before mask reapp. tensor([1.5286e-05, 2.8083e-06, 2.6734e-05, 8.7687e-06, 3.7734e-05, 8.9645e-07,\n","        1.6210e-06, 2.9960e-05, 1.1789e-05, 3.5194e-05])\n","gradient values before mask reapp. tensor([1.5994e-05, 2.9383e-06, 2.7972e-05, 9.1748e-06, 3.9481e-05, 9.3794e-07,\n","        1.6960e-06, 3.1347e-05, 1.2335e-05, 3.6825e-05])\n","gradient values before mask reapp. tensor([1.6716e-05, 3.0709e-06, 2.9235e-05, 9.5889e-06, 4.1264e-05, 9.8025e-07,\n","        1.7725e-06, 3.2762e-05, 1.2892e-05, 3.8488e-05])\n","gradient values before mask reapp. tensor([1.3067e-05, 2.4889e-06, 2.2167e-05, 7.6587e-06, 3.1928e-05, 8.1189e-07,\n","        1.4901e-06, 2.6497e-05, 1.0687e-05, 2.8987e-05])\n","gradient values before mask reapp. tensor([1.3630e-05, 2.5961e-06, 2.3122e-05, 7.9886e-06, 3.3304e-05, 8.4683e-07,\n","        1.5542e-06, 2.7638e-05, 1.1147e-05, 3.0237e-05])\n","gradient values before mask reapp. tensor([1.4205e-05, 2.7054e-06, 2.4096e-05, 8.3250e-06, 3.4706e-05, 8.8246e-07,\n","        1.6196e-06, 2.8802e-05, 1.1616e-05, 3.1511e-05])\n","gradient values before mask reapp. tensor([1.4789e-05, 2.8166e-06, 2.5088e-05, 8.6674e-06, 3.6134e-05, 9.1872e-07,\n","        1.6862e-06, 2.9986e-05, 1.2093e-05, 3.2808e-05])\n","gradient values before mask reapp. tensor([1.5384e-05, 2.9296e-06, 2.6095e-05, 9.0151e-06, 3.7585e-05, 9.5555e-07,\n","        1.7538e-06, 3.1189e-05, 1.2578e-05, 3.4126e-05])\n","gradient values before mask reapp. tensor([1.5985e-05, 3.0440e-06, 2.7115e-05, 9.3673e-06, 3.9054e-05, 9.9285e-07,\n","        1.8223e-06, 3.2407e-05, 1.3070e-05, 3.5460e-05])\n","gradient values before mask reapp. tensor([1.6592e-05, 3.1595e-06, 2.8144e-05, 9.7227e-06, 4.0536e-05, 1.0305e-06,\n","        1.8914e-06, 3.3636e-05, 1.3565e-05, 3.6807e-05])\n","gradient values before mask reapp. tensor([1.7202e-05, 3.2755e-06, 2.9178e-05, 1.0080e-05, 4.2025e-05, 1.0683e-06,\n","        1.9608e-06, 3.4871e-05, 1.4063e-05, 3.8159e-05])\n","gradient values before mask reapp. tensor([1.7812e-05, 3.3913e-06, 3.0211e-05, 1.0436e-05, 4.3513e-05, 1.1060e-06,\n","        2.0301e-06, 3.6104e-05, 1.4560e-05, 3.9511e-05])\n","gradient values before mask reapp. tensor([1.8417e-05, 3.5065e-06, 3.1237e-05, 1.0791e-05, 4.4991e-05, 1.1435e-06,\n","        2.0990e-06, 3.7330e-05, 1.5054e-05, 4.0854e-05])\n","gradient values before mask reapp. tensor([1.2802e-05, 2.4090e-06, 2.2005e-05, 8.9927e-06, 3.0269e-05, 9.8733e-07,\n","        1.7081e-06, 2.5511e-05, 9.3375e-06, 3.2064e-05])\n","gradient values before mask reapp. tensor([1.3198e-05, 2.4832e-06, 2.2684e-05, 9.2697e-06, 3.1203e-05, 1.0177e-06,\n","        1.7607e-06, 2.6297e-05, 9.6253e-06, 3.3054e-05])\n","gradient values before mask reapp. tensor([1.3582e-05, 2.5554e-06, 2.3345e-05, 9.5390e-06, 3.2112e-05, 1.0472e-06,\n","        1.8118e-06, 2.7062e-05, 9.9052e-06, 3.4016e-05])\n","gradient values before mask reapp. tensor([1.3954e-05, 2.6251e-06, 2.3982e-05, 9.7988e-06, 3.2989e-05, 1.0757e-06,\n","        1.8611e-06, 2.7800e-05, 1.0175e-05, 3.4945e-05])\n","gradient values before mask reapp. tensor([1.4309e-05, 2.6918e-06, 2.4592e-05, 1.0047e-05, 3.3828e-05, 1.1029e-06,\n","        1.9083e-06, 2.8506e-05, 1.0434e-05, 3.5834e-05])\n","gradient values before mask reapp. tensor([1.4647e-05, 2.7551e-06, 2.5171e-05, 1.0283e-05, 3.4625e-05, 1.1288e-06,\n","        1.9531e-06, 2.9176e-05, 1.0679e-05, 3.6677e-05])\n","gradient values before mask reapp. tensor([5.3279e-06, 1.6088e-06, 1.1961e-05, 6.8744e-06, 1.5555e-05, 9.2225e-07,\n","        1.4406e-06, 1.7000e-05, 6.4038e-06, 1.7778e-05])\n","gradient values before mask reapp. tensor([5.4324e-06, 1.6403e-06, 1.2195e-05, 7.0092e-06, 1.5860e-05, 9.4034e-07,\n","        1.4689e-06, 1.7333e-05, 6.5294e-06, 1.8127e-05])\n","gradient values before mask reapp. tensor([5.5289e-06, 1.6695e-06, 1.2412e-05, 7.1338e-06, 1.6142e-05, 9.5705e-07,\n","        1.4949e-06, 1.7641e-05, 6.6454e-06, 1.8449e-05])\n","gradient values before mask reapp. tensor([5.6173e-06, 1.6962e-06, 1.2610e-05, 7.2478e-06, 1.6399e-05, 9.7234e-07,\n","        1.5188e-06, 1.7923e-05, 6.7516e-06, 1.8744e-05])\n","gradient values before mask reapp. tensor([5.6974e-06, 1.7204e-06, 1.2790e-05, 7.3512e-06, 1.6633e-05, 9.8621e-07,\n","        1.5405e-06, 1.8179e-05, 6.8479e-06, 1.9011e-05])\n","gradient values before mask reapp. tensor([5.7695e-06, 1.7421e-06, 1.2952e-05, 7.4442e-06, 1.6844e-05, 9.9869e-07,\n","        1.5600e-06, 1.8409e-05, 6.9346e-06, 1.9252e-05])\n","gradient values before mask reapp. tensor([5.8336e-06, 1.7615e-06, 1.3096e-05, 7.5270e-06, 1.7031e-05, 1.0098e-06,\n","        1.5773e-06, 1.8614e-05, 7.0117e-06, 1.9466e-05])\n","gradient values before mask reapp. tensor([5.8903e-06, 1.7786e-06, 1.3223e-05, 7.6000e-06, 1.7196e-05, 1.0196e-06,\n","        1.5926e-06, 1.8794e-05, 7.0797e-06, 1.9655e-05])\n","gradient values before mask reapp. tensor([5.9396e-06, 1.7935e-06, 1.3334e-05, 7.6637e-06, 1.7341e-05, 1.0281e-06,\n","        1.6060e-06, 1.8952e-05, 7.1391e-06, 1.9820e-05])\n","gradient values before mask reapp. tensor([5.9823e-06, 1.8064e-06, 1.3430e-05, 7.7187e-06, 1.7465e-05, 1.0355e-06,\n","        1.6175e-06, 1.9088e-05, 7.1903e-06, 1.9962e-05])\n","gradient values before mask reapp. tensor([6.0186e-06, 1.8174e-06, 1.3511e-05, 7.7656e-06, 1.7571e-05, 1.0418e-06,\n","        1.6274e-06, 1.9204e-05, 7.2340e-06, 2.0083e-05])\n","gradient values before mask reapp. tensor([6.0491e-06, 1.8266e-06, 1.3579e-05, 7.8049e-06, 1.7660e-05, 1.0471e-06,\n","        1.6356e-06, 1.9301e-05, 7.2706e-06, 2.0185e-05])\n","gradient values before mask reapp. tensor([6.0742e-06, 1.8341e-06, 1.3636e-05, 7.8373e-06, 1.7733e-05, 1.0514e-06,\n","        1.6424e-06, 1.9381e-05, 7.3008e-06, 2.0268e-05])\n","gradient values before mask reapp. tensor([6.0943e-06, 1.8402e-06, 1.3681e-05, 7.8633e-06, 1.7792e-05, 1.0549e-06,\n","        1.6478e-06, 1.9445e-05, 7.3250e-06, 2.0336e-05])\n","gradient values before mask reapp. tensor([6.1101e-06, 1.8450e-06, 1.3716e-05, 7.8836e-06, 1.7838e-05, 1.0576e-06,\n","        1.6521e-06, 1.9496e-05, 7.3439e-06, 2.0388e-05])\n","gradient values before mask reapp. tensor([6.1218e-06, 1.8485e-06, 1.3743e-05, 7.8987e-06, 1.7872e-05, 1.0597e-06,\n","        1.6553e-06, 1.9533e-05, 7.3580e-06, 2.0427e-05])\n","gradient values before mask reapp. tensor([6.1298e-06, 1.8509e-06, 1.3761e-05, 7.9091e-06, 1.7896e-05, 1.0611e-06,\n","        1.6574e-06, 1.9559e-05, 7.3677e-06, 2.0454e-05])\n","gradient values before mask reapp. tensor([6.1346e-06, 1.8524e-06, 1.3771e-05, 7.9153e-06, 1.7910e-05, 1.0619e-06,\n","        1.6587e-06, 1.9574e-05, 7.3734e-06, 2.0470e-05])\n","gradient values before mask reapp. tensor([6.1364e-06, 1.8529e-06, 1.3776e-05, 7.9176e-06, 1.7915e-05, 1.0622e-06,\n","        1.6592e-06, 1.9580e-05, 7.3756e-06, 2.0476e-05])\n","gradient values before mask reapp. tensor([6.1356e-06, 1.8527e-06, 1.3774e-05, 7.9166e-06, 1.7913e-05, 1.0621e-06,\n","        1.6590e-06, 1.9577e-05, 7.3746e-06, 2.0473e-05])\n","gradient values before mask reapp. tensor([6.1324e-06, 1.8517e-06, 1.3766e-05, 7.9124e-06, 1.7903e-05, 1.0615e-06,\n","        1.6581e-06, 1.9567e-05, 7.3707e-06, 2.0463e-05])\n","gradient values before mask reapp. tensor([6.1270e-06, 1.8501e-06, 1.3754e-05, 7.9055e-06, 1.7888e-05, 1.0606e-06,\n","        1.6567e-06, 1.9550e-05, 7.3643e-06, 2.0445e-05])\n","gradient values before mask reapp. tensor([6.1197e-06, 1.8479e-06, 1.3738e-05, 7.8960e-06, 1.7866e-05, 1.0593e-06,\n","        1.6547e-06, 1.9526e-05, 7.3555e-06, 2.0420e-05])\n","gradient values before mask reapp. tensor([6.1106e-06, 1.8451e-06, 1.3718e-05, 7.8843e-06, 1.7840e-05, 1.0577e-06,\n","        1.6522e-06, 1.9497e-05, 7.3446e-06, 2.0390e-05])\n","gradient values before mask reapp. tensor([6.0999e-06, 1.8419e-06, 1.3694e-05, 7.8705e-06, 1.7809e-05, 1.0559e-06,\n","        1.6493e-06, 1.9463e-05, 7.3317e-06, 2.0354e-05])\n","gradient values before mask reapp. tensor([6.0878e-06, 1.8383e-06, 1.3666e-05, 7.8549e-06, 1.7773e-05, 1.0538e-06,\n","        1.6461e-06, 1.9425e-05, 7.3172e-06, 2.0314e-05])\n","gradient values before mask reapp. tensor([6.0743e-06, 1.8342e-06, 1.3636e-05, 7.8375e-06, 1.7734e-05, 1.0515e-06,\n","        1.6424e-06, 1.9382e-05, 7.3010e-06, 2.0269e-05])\n","gradient values before mask reapp. tensor([6.0596e-06, 1.8297e-06, 1.3603e-05, 7.8186e-06, 1.7691e-05, 1.0489e-06,\n","        1.6384e-06, 1.9335e-05, 7.2833e-06, 2.0220e-05])\n","gradient values before mask reapp. tensor([6.0438e-06, 1.8250e-06, 1.3568e-05, 7.7981e-06, 1.7645e-05, 1.0462e-06,\n","        1.6342e-06, 1.9284e-05, 7.2643e-06, 2.0167e-05])\n","gradient values before mask reapp. tensor([6.0269e-06, 1.8198e-06, 1.3530e-05, 7.7763e-06, 1.7595e-05, 1.0432e-06,\n","        1.6296e-06, 1.9230e-05, 7.2439e-06, 2.0111e-05])\n","gradient values before mask reapp. tensor([6.0089e-06, 1.8144e-06, 1.3489e-05, 7.7531e-06, 1.7543e-05, 1.0401e-06,\n","        1.6247e-06, 1.9173e-05, 7.2224e-06, 2.0051e-05])\n","gradient values before mask reapp. tensor([5.9900e-06, 1.8087e-06, 1.3447e-05, 7.7288e-06, 1.7488e-05, 1.0369e-06,\n","        1.6196e-06, 1.9113e-05, 7.1997e-06, 1.9988e-05])\n","gradient values before mask reapp. tensor([5.9702e-06, 1.8028e-06, 1.3402e-05, 7.7032e-06, 1.7430e-05, 1.0334e-06,\n","        1.6143e-06, 1.9049e-05, 7.1759e-06, 1.9922e-05])\n","gradient values before mask reapp. tensor([5.9495e-06, 1.7965e-06, 1.3356e-05, 7.6765e-06, 1.7370e-05, 1.0299e-06,\n","        1.6087e-06, 1.8983e-05, 7.1510e-06, 1.9853e-05])\n","gradient values before mask reapp. tensor([5.9280e-06, 1.7900e-06, 1.3308e-05, 7.6487e-06, 1.7307e-05, 1.0261e-06,\n","        1.6029e-06, 1.8915e-05, 7.1251e-06, 1.9781e-05])\n","gradient values before mask reapp. tensor([5.9056e-06, 1.7832e-06, 1.3257e-05, 7.6198e-06, 1.7241e-05, 1.0223e-06,\n","        1.5968e-06, 1.8843e-05, 7.0982e-06, 1.9706e-05])\n","gradient values before mask reapp. tensor([5.8824e-06, 1.7762e-06, 1.3205e-05, 7.5898e-06, 1.7173e-05, 1.0182e-06,\n","        1.5905e-06, 1.8769e-05, 7.0703e-06, 1.9628e-05])\n","gradient values before mask reapp. tensor([5.8584e-06, 1.7690e-06, 1.3151e-05, 7.5589e-06, 1.7103e-05, 1.0141e-06,\n","        1.5840e-06, 1.8692e-05, 7.0414e-06, 1.9548e-05])\n","gradient values before mask reapp. tensor([5.8335e-06, 1.7615e-06, 1.3096e-05, 7.5268e-06, 1.7031e-05, 1.0098e-06,\n","        1.5773e-06, 1.8613e-05, 7.0115e-06, 1.9465e-05])\n","gradient values before mask reapp. tensor([5.8078e-06, 1.7537e-06, 1.3038e-05, 7.4937e-06, 1.6956e-05, 1.0053e-06,\n","        1.5704e-06, 1.8531e-05, 6.9807e-06, 1.9380e-05])\n","gradient values before mask reapp. tensor([5.7814e-06, 1.7457e-06, 1.2979e-05, 7.4595e-06, 1.6879e-05, 1.0008e-06,\n","        1.5632e-06, 1.8447e-05, 6.9489e-06, 1.9291e-05])\n","gradient values before mask reapp. tensor([5.7541e-06, 1.7375e-06, 1.2917e-05, 7.4243e-06, 1.6799e-05, 9.9602e-07,\n","        1.5558e-06, 1.8360e-05, 6.9160e-06, 1.9200e-05])\n","gradient values before mask reapp. tensor([5.7260e-06, 1.7290e-06, 1.2854e-05, 7.3881e-06, 1.6717e-05, 9.9116e-07,\n","        1.5482e-06, 1.8270e-05, 6.8823e-06, 1.9107e-05])\n","gradient values before mask reapp. tensor([5.6971e-06, 1.7203e-06, 1.2789e-05, 7.3507e-06, 1.6633e-05, 9.8616e-07,\n","        1.5404e-06, 1.8178e-05, 6.8475e-06, 1.9010e-05])\n","gradient values before mask reapp. tensor([5.6673e-06, 1.7113e-06, 1.2722e-05, 7.3123e-06, 1.6545e-05, 9.8100e-07,\n","        1.5324e-06, 1.8083e-05, 6.8117e-06, 1.8911e-05])\n","gradient values before mask reapp. tensor([5.6367e-06, 1.7020e-06, 1.2654e-05, 7.2728e-06, 1.6456e-05, 9.7570e-07,\n","        1.5241e-06, 1.7985e-05, 6.7749e-06, 1.8809e-05])\n","gradient values before mask reapp. tensor([5.6052e-06, 1.6925e-06, 1.2583e-05, 7.2322e-06, 1.6364e-05, 9.7025e-07,\n","        1.5156e-06, 1.7885e-05, 6.7371e-06, 1.8704e-05])\n","gradient values before mask reapp. tensor([5.5728e-06, 1.6828e-06, 1.2510e-05, 7.1904e-06, 1.6270e-05, 9.6465e-07,\n","        1.5068e-06, 1.7781e-05, 6.6982e-06, 1.8596e-05])\n","gradient values before mask reapp. tensor([5.5396e-06, 1.6727e-06, 1.2436e-05, 7.1476e-06, 1.6173e-05, 9.5890e-07,\n","        1.4978e-06, 1.7675e-05, 6.6583e-06, 1.8485e-05])\n","gradient values before mask reapp. tensor([5.5055e-06, 1.6624e-06, 1.2359e-05, 7.1036e-06, 1.6073e-05, 9.5299e-07,\n","        1.4886e-06, 1.7567e-05, 6.6173e-06, 1.8371e-05])\n","gradient values before mask reapp. tensor([5.4704e-06, 1.6518e-06, 1.2280e-05, 7.0583e-06, 1.5971e-05, 9.4692e-07,\n","        1.4791e-06, 1.7455e-05, 6.5751e-06, 1.8254e-05])\n","gradient values before mask reapp. tensor([5.4345e-06, 1.6410e-06, 1.2200e-05, 7.0119e-06, 1.5866e-05, 9.4070e-07,\n","        1.4694e-06, 1.7340e-05, 6.5319e-06, 1.8134e-05])\n","gradient values before mask reapp. tensor([5.3976e-06, 1.6298e-06, 1.2117e-05, 6.9644e-06, 1.5758e-05, 9.3432e-07,\n","        1.4594e-06, 1.7222e-05, 6.4876e-06, 1.8011e-05])\n","gradient values before mask reapp. tensor([5.3598e-06, 1.6184e-06, 1.2032e-05, 6.9156e-06, 1.5648e-05, 9.2778e-07,\n","        1.4492e-06, 1.7102e-05, 6.4422e-06, 1.7885e-05])\n","gradient values before mask reapp. tensor([5.3210e-06, 1.6067e-06, 1.1945e-05, 6.8655e-06, 1.5535e-05, 9.2106e-07,\n","        1.4387e-06, 1.6978e-05, 6.3955e-06, 1.7755e-05])\n","gradient values before mask reapp. tensor([5.2813e-06, 1.5947e-06, 1.1856e-05, 6.8143e-06, 1.5419e-05, 9.1419e-07,\n","        1.4280e-06, 1.6851e-05, 6.3478e-06, 1.7623e-05])\n","gradient values before mask reapp. tensor([5.2406e-06, 1.5824e-06, 1.1765e-05, 6.7618e-06, 1.5300e-05, 9.0714e-07,\n","        1.4170e-06, 1.6721e-05, 6.2989e-06, 1.7487e-05])\n","gradient values before mask reapp. tensor([5.1988e-06, 1.5698e-06, 1.1671e-05, 6.7079e-06, 1.5178e-05, 8.9991e-07,\n","        1.4057e-06, 1.6588e-05, 6.2487e-06, 1.7348e-05])\n","gradient values before mask reapp. tensor([5.1562e-06, 1.5569e-06, 1.1575e-05, 6.6529e-06, 1.5053e-05, 8.9253e-07,\n","        1.3942e-06, 1.6452e-05, 6.1974e-06, 1.7205e-05])\n","gradient values before mask reapp. tensor([5.1126e-06, 1.5438e-06, 1.1477e-05, 6.5966e-06, 1.4926e-05, 8.8498e-07,\n","        1.3824e-06, 1.6313e-05, 6.1450e-06, 1.7060e-05])\n","gradient values before mask reapp. tensor([5.0679e-06, 1.5303e-06, 1.1377e-05, 6.5390e-06, 1.4796e-05, 8.7725e-07,\n","        1.3703e-06, 1.6170e-05, 6.0914e-06, 1.6911e-05])\n","gradient values before mask reapp. tensor([5.0223e-06, 1.5165e-06, 1.1275e-05, 6.4801e-06, 1.4663e-05, 8.6936e-07,\n","        1.3580e-06, 1.6025e-05, 6.0365e-06, 1.6759e-05])\n","gradient values before mask reapp. tensor([4.9757e-06, 1.5025e-06, 1.1170e-05, 6.4200e-06, 1.4527e-05, 8.6129e-07,\n","        1.3454e-06, 1.5876e-05, 5.9805e-06, 1.6603e-05])\n","gradient values before mask reapp. tensor([4.9281e-06, 1.4881e-06, 1.1063e-05, 6.3585e-06, 1.4387e-05, 8.5304e-07,\n","        1.3325e-06, 1.5724e-05, 5.9232e-06, 1.6444e-05])\n","gradient values before mask reapp. tensor([4.8795e-06, 1.4734e-06, 1.0954e-05, 6.2959e-06, 1.4246e-05, 8.4464e-07,\n","        1.3194e-06, 1.5569e-05, 5.8649e-06, 1.6282e-05])\n","gradient values before mask reapp. tensor([4.8300e-06, 1.4585e-06, 1.0843e-05, 6.2320e-06, 1.4101e-05, 8.3607e-07,\n","        1.3060e-06, 1.5411e-05, 5.8054e-06, 1.6117e-05])\n","gradient values before mask reapp. tensor([4.7795e-06, 1.4432e-06, 1.0729e-05, 6.1668e-06, 1.3954e-05, 8.2732e-07,\n","        1.2923e-06, 1.5250e-05, 5.7447e-06, 1.5948e-05])\n","gradient values before mask reapp. tensor([4.7280e-06, 1.4276e-06, 1.0614e-05, 6.1004e-06, 1.3803e-05, 8.1841e-07,\n","        1.2784e-06, 1.5086e-05, 5.6828e-06, 1.5776e-05])\n","gradient values before mask reapp. tensor([4.6754e-06, 1.4118e-06, 1.0496e-05, 6.0325e-06, 1.3650e-05, 8.0930e-07,\n","        1.2642e-06, 1.4918e-05, 5.6195e-06, 1.5601e-05])\n","gradient values before mask reapp. tensor([4.6220e-06, 1.3956e-06, 1.0376e-05, 5.9636e-06, 1.3494e-05, 8.0006e-07,\n","        1.2497e-06, 1.4747e-05, 5.5553e-06, 1.5423e-05])\n","gradient values before mask reapp. tensor([4.5676e-06, 1.3792e-06, 1.0254e-05, 5.8934e-06, 1.3335e-05, 7.9064e-07,\n","        1.2350e-06, 1.4574e-05, 5.4900e-06, 1.5241e-05])\n","gradient values before mask reapp. tensor([4.5123e-06, 1.3625e-06, 1.0130e-05, 5.8221e-06, 1.3174e-05, 7.8107e-07,\n","        1.2201e-06, 1.4398e-05, 5.4235e-06, 1.5057e-05])\n","gradient values before mask reapp. tensor([4.4560e-06, 1.3455e-06, 1.0003e-05, 5.7494e-06, 1.3009e-05, 7.7132e-07,\n","        1.2048e-06, 1.4218e-05, 5.3558e-06, 1.4869e-05])\n","gradient values before mask reapp. tensor([4.3989e-06, 1.3283e-06, 9.8750e-06, 5.6757e-06, 1.2842e-05, 7.6144e-07,\n","        1.1894e-06, 1.4036e-05, 5.2872e-06, 1.4678e-05])\n","gradient values before mask reapp. tensor([4.3409e-06, 1.3108e-06, 9.7448e-06, 5.6009e-06, 1.2673e-05, 7.5140e-07,\n","        1.1737e-06, 1.3851e-05, 5.2175e-06, 1.4485e-05])\n","gradient values before mask reapp. tensor([4.2823e-06, 1.2931e-06, 9.6132e-06, 5.5253e-06, 1.2502e-05, 7.4125e-07,\n","        1.1579e-06, 1.3664e-05, 5.1470e-06, 1.4289e-05])\n","gradient values before mask reapp. tensor([4.2231e-06, 1.2752e-06, 9.4804e-06, 5.4490e-06, 1.2329e-05, 7.3102e-07,\n","        1.1419e-06, 1.3475e-05, 5.0759e-06, 1.4092e-05])\n","gradient values before mask reapp. tensor([4.1636e-06, 1.2572e-06, 9.3467e-06, 5.3721e-06, 1.2155e-05, 7.2071e-07,\n","        1.1258e-06, 1.3285e-05, 5.0044e-06, 1.3893e-05])\n","gradient values before mask reapp. tensor([4.1035e-06, 1.2391e-06, 9.2120e-06, 5.2947e-06, 1.1980e-05, 7.1032e-07,\n","        1.1095e-06, 1.3093e-05, 4.9322e-06, 1.3693e-05])\n","gradient values before mask reapp. tensor([4.0429e-06, 1.2208e-06, 9.0758e-06, 5.2164e-06, 1.1803e-05, 6.9981e-07,\n","        1.0931e-06, 1.2900e-05, 4.8593e-06, 1.3490e-05])\n","gradient values before mask reapp. tensor([3.9813e-06, 1.2022e-06, 8.9375e-06, 5.1369e-06, 1.1623e-05, 6.8916e-07,\n","        1.0765e-06, 1.2703e-05, 4.7853e-06, 1.3285e-05])\n","gradient values before mask reapp. tensor([3.9191e-06, 1.1834e-06, 8.7979e-06, 5.0567e-06, 1.1442e-05, 6.7839e-07,\n","        1.0597e-06, 1.2505e-05, 4.7105e-06, 1.3077e-05])\n","gradient values before mask reapp. tensor([3.8560e-06, 1.1644e-06, 8.6564e-06, 4.9753e-06, 1.1258e-05, 6.6748e-07,\n","        1.0426e-06, 1.2304e-05, 4.6347e-06, 1.2867e-05])\n","gradient values before mask reapp. tensor([3.7928e-06, 1.1453e-06, 8.5144e-06, 4.8937e-06, 1.1073e-05, 6.5653e-07,\n","        1.0255e-06, 1.2102e-05, 4.5587e-06, 1.2656e-05])\n","gradient values before mask reapp. tensor([3.7294e-06, 1.1261e-06, 8.3721e-06, 4.8120e-06, 1.0888e-05, 6.4556e-07,\n","        1.0084e-06, 1.1900e-05, 4.4825e-06, 1.2444e-05])\n","gradient values before mask reapp. tensor([3.6654e-06, 1.1068e-06, 8.2283e-06, 4.7293e-06, 1.0701e-05, 6.3447e-07,\n","        9.9107e-07, 1.1695e-05, 4.4055e-06, 1.2231e-05])\n","gradient values before mask reapp. tensor([3.6006e-06, 1.0872e-06, 8.0829e-06, 4.6457e-06, 1.0512e-05, 6.2325e-07,\n","        9.7355e-07, 1.1488e-05, 4.3277e-06, 1.2014e-05])\n","gradient values before mask reapp. tensor([3.5370e-06, 1.0680e-06, 7.9403e-06, 4.5637e-06, 1.0326e-05, 6.1226e-07,\n","        9.5637e-07, 1.1286e-05, 4.2513e-06, 1.1803e-05])\n","gradient values before mask reapp. tensor([3.4801e-06, 1.0508e-06, 7.8124e-06, 4.4902e-06, 1.0160e-05, 6.0240e-07,\n","        9.4097e-07, 1.1104e-05, 4.1828e-06, 1.1612e-05])\n","gradient values before mask reapp. tensor([3.4210e-06, 1.0330e-06, 7.6797e-06, 4.4140e-06, 9.9875e-06, 5.9216e-07,\n","        9.2499e-07, 1.0915e-05, 4.1118e-06, 1.1415e-05])\n","gradient values before mask reapp. tensor([3.3607e-06, 1.0148e-06, 7.5443e-06, 4.3362e-06, 9.8114e-06, 5.8173e-07,\n","        9.0868e-07, 1.0723e-05, 4.0393e-06, 1.1214e-05])\n","gradient values before mask reapp. tensor([3.3029e-06, 9.9732e-07, 7.4146e-06, 4.2616e-06, 9.6427e-06, 5.7172e-07,\n","        8.9306e-07, 1.0539e-05, 3.9699e-06, 1.1021e-05])\n","gradient values before mask reapp. tensor([3.2441e-06, 9.7959e-07, 7.2827e-06, 4.1858e-06, 9.4712e-06, 5.6156e-07,\n","        8.7718e-07, 1.0351e-05, 3.8993e-06, 1.0825e-05])\n","gradient values before mask reapp. tensor([3.1885e-06, 9.6279e-07, 7.1578e-06, 4.1140e-06, 9.3088e-06, 5.5193e-07,\n","        8.6213e-07, 1.0174e-05, 3.8324e-06, 1.0639e-05])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","gradient values before mask reapp. tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n"]},{"output_type":"display_data","data":{"text/plain":["'90.0% done'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{}},{"output_type":"stream","name":"stdout","text":["sc1 weights:  torch.Size([100, 612])\n","sc2 weights:  torch.Size([1, 100])\n","first ten digits of weight at init tensor([ 0.0018,  0.0004,  0.0000, -0.0000,  0.0016,  0.0006, -0.0003, -0.0007,\n","        -0.0000, -0.0007], grad_fn=<SliceBackward0>)\n","gradient values before mask reapp. tensor([-4.4435e-04, -8.4932e-05, -7.8732e-04, -1.7727e-04, -6.6340e-04,\n","        -1.1430e-04, -1.6301e-04, -4.6371e-04, -9.0138e-05, -1.2693e-03])\n","gradient values before mask reapp. tensor([-0.0005, -0.0001, -0.0010, -0.0002, -0.0008, -0.0001, -0.0002, -0.0006,\n","        -0.0001, -0.0016])\n","gradient values before mask reapp. tensor([-0.0006, -0.0001, -0.0011, -0.0003, -0.0010, -0.0002, -0.0002, -0.0007,\n","        -0.0001, -0.0018])\n","gradient values before mask reapp. tensor([-0.0008, -0.0001, -0.0013, -0.0003, -0.0011, -0.0002, -0.0003, -0.0008,\n","        -0.0001, -0.0021])\n","gradient values before mask reapp. tensor([-0.0009, -0.0002, -0.0015, -0.0003, -0.0012, -0.0002, -0.0003, -0.0009,\n","        -0.0002, -0.0024])\n","gradient values before mask reapp. tensor([-0.0010, -0.0002, -0.0017, -0.0004, -0.0014, -0.0003, -0.0004, -0.0010,\n","        -0.0002, -0.0028])\n","gradient values before mask reapp. tensor([-0.0011, -0.0002, -0.0019, -0.0004, -0.0015, -0.0003, -0.0004, -0.0011,\n","        -0.0002, -0.0031])\n","gradient values before mask reapp. tensor([-0.0012, -0.0002, -0.0021, -0.0005, -0.0017, -0.0003, -0.0004, -0.0012,\n","        -0.0002, -0.0034])\n","gradient values before mask reapp. tensor([-0.0013, -0.0003, -0.0023, -0.0005, -0.0018, -0.0004, -0.0005, -0.0013,\n","        -0.0002, -0.0037])\n","gradient values before mask reapp. tensor([-0.0014, -0.0003, -0.0025, -0.0005, -0.0020, -0.0004, -0.0005, -0.0014,\n","        -0.0002, -0.0041])\n","gradient values before mask reapp. tensor([-0.0015, -0.0003, -0.0027, -0.0006, -0.0021, -0.0004, -0.0006, -0.0015,\n","        -0.0002, -0.0044])\n","gradient values before mask reapp. tensor([-0.0017, -0.0003, -0.0029, -0.0006, -0.0023, -0.0005, -0.0006, -0.0016,\n","        -0.0002, -0.0048])\n","gradient values before mask reapp. tensor([-0.0018, -0.0003, -0.0031, -0.0007, -0.0024, -0.0005, -0.0007, -0.0017,\n","        -0.0002, -0.0051])\n","gradient values before mask reapp. tensor([-0.0019, -0.0004, -0.0033, -0.0007, -0.0026, -0.0005, -0.0007, -0.0018,\n","        -0.0002, -0.0055])\n","gradient values before mask reapp. tensor([-0.0020, -0.0004, -0.0035, -0.0007, -0.0027, -0.0006, -0.0008, -0.0019,\n","        -0.0002, -0.0058])\n","gradient values before mask reapp. tensor([-0.0021, -0.0004, -0.0037, -0.0008, -0.0028, -0.0006, -0.0008, -0.0020,\n","        -0.0002, -0.0061])\n","gradient values before mask reapp. tensor([-0.0023, -0.0004, -0.0039, -0.0008, -0.0029, -0.0007, -0.0009, -0.0021,\n","        -0.0002, -0.0064])\n","gradient values before mask reapp. tensor([-0.0024, -0.0005, -0.0041, -0.0008, -0.0029, -0.0007, -0.0009, -0.0021,\n","        -0.0002, -0.0067])\n","gradient values before mask reapp. tensor([-0.0024, -0.0005, -0.0042, -0.0008, -0.0030, -0.0007, -0.0010, -0.0021,\n","        -0.0002, -0.0069])\n","gradient values before mask reapp. tensor([-0.0025, -0.0005, -0.0043, -0.0008, -0.0030, -0.0008, -0.0010, -0.0022,\n","        -0.0001, -0.0071])\n","gradient values before mask reapp. tensor([-2.5609e-03, -5.0829e-04, -4.3899e-03, -8.1898e-04, -2.9227e-03,\n","        -8.1453e-04, -1.0626e-03, -2.1399e-03, -7.1866e-05, -7.2853e-03])\n","gradient values before mask reapp. tensor([-2.5935e-03, -5.1726e-04, -4.4274e-03, -8.0386e-04, -2.8460e-03,\n","        -8.4474e-04, -1.0919e-03, -2.1000e-03, -1.6180e-05, -7.3749e-03])\n","gradient values before mask reapp. tensor([-2.6049e-03, -5.2245e-04, -4.4259e-03, -7.7819e-04, -2.7283e-03,\n","        -8.7124e-04, -1.1149e-03, -2.0325e-03,  4.8581e-05, -7.4040e-03])\n","gradient values before mask reapp. tensor([-0.0026, -0.0005, -0.0044, -0.0007, -0.0026, -0.0009, -0.0011, -0.0019,\n","         0.0001, -0.0074])\n","gradient values before mask reapp. tensor([-0.0026, -0.0005, -0.0043, -0.0007, -0.0024, -0.0009, -0.0011, -0.0018,\n","         0.0002, -0.0073])\n","gradient values before mask reapp. tensor([-0.0025, -0.0005, -0.0042, -0.0006, -0.0021, -0.0009, -0.0011, -0.0017,\n","         0.0003, -0.0071])\n","gradient values before mask reapp. tensor([-0.0024, -0.0005, -0.0040, -0.0006, -0.0019, -0.0009, -0.0011, -0.0015,\n","         0.0004, -0.0069])\n","gradient values before mask reapp. tensor([-0.0024, -0.0005, -0.0039, -0.0005, -0.0016, -0.0009, -0.0011, -0.0013,\n","         0.0005, -0.0067])\n","gradient values before mask reapp. tensor([-0.0023, -0.0005, -0.0037, -0.0004, -0.0013, -0.0009, -0.0011, -0.0011,\n","         0.0006, -0.0064])\n","gradient values before mask reapp. tensor([-0.0021, -0.0005, -0.0034, -0.0004, -0.0010, -0.0009, -0.0011, -0.0009,\n","         0.0007, -0.0061])\n","gradient values before mask reapp. tensor([-0.0020, -0.0004, -0.0032, -0.0003, -0.0006, -0.0009, -0.0011, -0.0007,\n","         0.0008, -0.0057])\n","gradient values before mask reapp. tensor([-0.0019, -0.0004, -0.0030, -0.0002, -0.0003, -0.0009, -0.0011, -0.0005,\n","         0.0009, -0.0054])\n","gradient values before mask reapp. tensor([-1.8047e-03, -4.0512e-04, -2.7724e-03, -1.2467e-04, -3.6606e-05,\n","        -9.2966e-04, -1.0332e-03, -3.1966e-04,  9.5663e-04, -5.0909e-03])\n","gradient values before mask reapp. tensor([-1.6958e-03, -3.8746e-04, -2.5610e-03, -5.4476e-05,  2.4667e-04,\n","        -9.2326e-04, -1.0108e-03, -1.3579e-04,  1.0389e-03, -4.7790e-03])\n","gradient values before mask reapp. tensor([-1.5928e-03, -3.7073e-04, -2.3619e-03,  1.1024e-05,  5.1080e-04,\n","        -9.1660e-04, -9.8915e-04,  3.5765e-05,  1.1149e-03, -4.4844e-03])\n","gradient values before mask reapp. tensor([-1.4970e-03, -3.5516e-04, -2.1771e-03,  7.1343e-05,  7.5397e-04,\n","        -9.1001e-04, -9.6872e-04,  1.9374e-04,  1.1843e-03, -4.2105e-03])\n","gradient values before mask reapp. tensor([-0.0014, -0.0003, -0.0020,  0.0001,  0.0010, -0.0009, -0.0009,  0.0003,\n","         0.0012, -0.0040])\n","gradient values before mask reapp. tensor([-0.0013, -0.0003, -0.0019,  0.0002,  0.0012, -0.0009, -0.0009,  0.0005,\n","         0.0013, -0.0037])\n","gradient values before mask reapp. tensor([-0.0013, -0.0003, -0.0017,  0.0002,  0.0014, -0.0009, -0.0009,  0.0006,\n","         0.0014, -0.0035])\n","gradient values before mask reapp. tensor([-0.0012, -0.0003, -0.0016,  0.0003,  0.0015, -0.0009, -0.0009,  0.0007,\n","         0.0014, -0.0033])\n","gradient values before mask reapp. tensor([-0.0011, -0.0003, -0.0015,  0.0003,  0.0017, -0.0009, -0.0009,  0.0008,\n","         0.0014, -0.0032])\n","gradient values before mask reapp. tensor([-0.0011, -0.0003, -0.0014,  0.0003,  0.0018, -0.0009, -0.0009,  0.0009,\n","         0.0015, -0.0030])\n","gradient values before mask reapp. tensor([-0.0010, -0.0003, -0.0013,  0.0004,  0.0019, -0.0009, -0.0009,  0.0009,\n","         0.0015, -0.0029])\n","gradient values before mask reapp. tensor([-0.0010, -0.0003, -0.0012,  0.0004,  0.0020, -0.0009, -0.0009,  0.0010,\n","         0.0015, -0.0028])\n","gradient values before mask reapp. tensor([-0.0010, -0.0003, -0.0012,  0.0004,  0.0021, -0.0009, -0.0009,  0.0010,\n","         0.0016, -0.0027])\n","gradient values before mask reapp. tensor([-0.0009, -0.0003, -0.0011,  0.0004,  0.0021, -0.0009, -0.0009,  0.0011,\n","         0.0016, -0.0026])\n","gradient values before mask reapp. tensor([-0.0009, -0.0003, -0.0011,  0.0004,  0.0022, -0.0009, -0.0009,  0.0011,\n","         0.0016, -0.0026])\n","gradient values before mask reapp. tensor([-0.0009, -0.0003, -0.0010,  0.0004,  0.0023, -0.0009, -0.0008,  0.0012,\n","         0.0016, -0.0025])\n","gradient values before mask reapp. tensor([-0.0009, -0.0003, -0.0010,  0.0005,  0.0023, -0.0009, -0.0008,  0.0012,\n","         0.0016, -0.0025])\n","gradient values before mask reapp. tensor([-0.0009, -0.0003, -0.0010,  0.0005,  0.0024, -0.0009, -0.0008,  0.0012,\n","         0.0017, -0.0024])\n","gradient values before mask reapp. tensor([-0.0008, -0.0003, -0.0009,  0.0005,  0.0024, -0.0009, -0.0008,  0.0013,\n","         0.0017, -0.0024])\n","gradient values before mask reapp. tensor([-0.0008, -0.0003, -0.0009,  0.0005,  0.0025, -0.0009, -0.0008,  0.0013,\n","         0.0017, -0.0023])\n","gradient values before mask reapp. tensor([-0.0008, -0.0003, -0.0009,  0.0005,  0.0025, -0.0009, -0.0008,  0.0013,\n","         0.0017, -0.0023])\n","gradient values before mask reapp. tensor([-0.0008, -0.0003, -0.0009,  0.0005,  0.0025, -0.0009, -0.0008,  0.0013,\n","         0.0017, -0.0023])\n","gradient values before mask reapp. tensor([-0.0008, -0.0003, -0.0008,  0.0005,  0.0026, -0.0009, -0.0008,  0.0014,\n","         0.0017, -0.0022])\n","gradient values before mask reapp. tensor([-0.0008, -0.0003, -0.0008,  0.0005,  0.0026, -0.0009, -0.0008,  0.0014,\n","         0.0017, -0.0022])\n","gradient values before mask reapp. tensor([-0.0008, -0.0003, -0.0008,  0.0005,  0.0026, -0.0009, -0.0008,  0.0014,\n","         0.0017, -0.0022])\n","gradient values before mask reapp. tensor([-0.0008, -0.0003, -0.0008,  0.0005,  0.0027, -0.0009, -0.0008,  0.0014,\n","         0.0017, -0.0022])\n","gradient values before mask reapp. tensor([-0.0008, -0.0003, -0.0008,  0.0005,  0.0027, -0.0009, -0.0008,  0.0014,\n","         0.0018, -0.0022])\n","gradient values before mask reapp. tensor([-0.0008, -0.0003, -0.0008,  0.0005,  0.0027, -0.0009, -0.0008,  0.0014,\n","         0.0018, -0.0022])\n","gradient values before mask reapp. tensor([-0.0007, -0.0003, -0.0007,  0.0006,  0.0028, -0.0009, -0.0008,  0.0015,\n","         0.0018, -0.0021])\n","gradient values before mask reapp. tensor([-0.0007, -0.0003, -0.0007,  0.0006,  0.0028, -0.0009, -0.0008,  0.0015,\n","         0.0018, -0.0021])\n","gradient values before mask reapp. tensor([-0.0007, -0.0003, -0.0007,  0.0006,  0.0028, -0.0009, -0.0008,  0.0015,\n","         0.0018, -0.0021])\n","gradient values before mask reapp. tensor([-0.0007, -0.0003, -0.0007,  0.0006,  0.0028, -0.0009, -0.0009,  0.0015,\n","         0.0018, -0.0021])\n","gradient values before mask reapp. tensor([-0.0007, -0.0003, -0.0007,  0.0006,  0.0029, -0.0009, -0.0009,  0.0015,\n","         0.0018, -0.0021])\n","gradient values before mask reapp. tensor([-0.0007, -0.0003, -0.0007,  0.0006,  0.0029, -0.0009, -0.0009,  0.0015,\n","         0.0018, -0.0021])\n","gradient values before mask reapp. tensor([-0.0007, -0.0003, -0.0007,  0.0006,  0.0029, -0.0009, -0.0009,  0.0015,\n","         0.0018, -0.0021])\n","gradient values before mask reapp. tensor([-0.0007, -0.0003, -0.0007,  0.0006,  0.0029, -0.0009, -0.0009,  0.0015,\n","         0.0018, -0.0021])\n","gradient values before mask reapp. tensor([-0.0007, -0.0003, -0.0007,  0.0006,  0.0029, -0.0009, -0.0009,  0.0016,\n","         0.0019, -0.0021])\n","gradient values before mask reapp. tensor([-0.0007, -0.0003, -0.0007,  0.0006,  0.0030, -0.0009, -0.0009,  0.0016,\n","         0.0019, -0.0021])\n","gradient values before mask reapp. tensor([-0.0007, -0.0003, -0.0007,  0.0006,  0.0030, -0.0009, -0.0009,  0.0016,\n","         0.0019, -0.0021])\n","gradient values before mask reapp. tensor([-0.0007, -0.0003, -0.0007,  0.0006,  0.0030, -0.0009, -0.0009,  0.0016,\n","         0.0019, -0.0020])\n","gradient values before mask reapp. tensor([-0.0007, -0.0003, -0.0006,  0.0006,  0.0030, -0.0009, -0.0009,  0.0016,\n","         0.0019, -0.0020])\n","gradient values before mask reapp. tensor([-0.0007, -0.0003, -0.0006,  0.0006,  0.0031, -0.0009, -0.0009,  0.0016,\n","         0.0019, -0.0020])\n","gradient values before mask reapp. tensor([-0.0007, -0.0003, -0.0006,  0.0006,  0.0031, -0.0009, -0.0009,  0.0016,\n","         0.0019, -0.0020])\n","gradient values before mask reapp. tensor([-0.0007, -0.0003, -0.0006,  0.0006,  0.0031, -0.0009, -0.0009,  0.0016,\n","         0.0019, -0.0020])\n","gradient values before mask reapp. tensor([-0.0007, -0.0003, -0.0006,  0.0006,  0.0031, -0.0009, -0.0009,  0.0016,\n","         0.0019, -0.0020])\n","gradient values before mask reapp. tensor([-0.0007, -0.0003, -0.0006,  0.0006,  0.0031, -0.0009, -0.0009,  0.0016,\n","         0.0019, -0.0020])\n","gradient values before mask reapp. tensor([-0.0007, -0.0003, -0.0006,  0.0006,  0.0031, -0.0009, -0.0009,  0.0016,\n","         0.0019, -0.0020])\n","gradient values before mask reapp. tensor([-0.0007, -0.0003, -0.0006,  0.0006,  0.0032, -0.0009, -0.0009,  0.0016,\n","         0.0019, -0.0020])\n","gradient values before mask reapp. tensor([-0.0007, -0.0003, -0.0006,  0.0006,  0.0032, -0.0010, -0.0009,  0.0017,\n","         0.0020, -0.0020])\n","gradient values before mask reapp. tensor([-0.0007, -0.0003, -0.0006,  0.0006,  0.0032, -0.0010, -0.0009,  0.0017,\n","         0.0020, -0.0020])\n","gradient values before mask reapp. tensor([-0.0007, -0.0003, -0.0006,  0.0006,  0.0032, -0.0010, -0.0009,  0.0017,\n","         0.0020, -0.0020])\n","gradient values before mask reapp. tensor([-0.0007, -0.0003, -0.0006,  0.0006,  0.0032, -0.0010, -0.0009,  0.0017,\n","         0.0020, -0.0020])\n","gradient values before mask reapp. tensor([-0.0007, -0.0003, -0.0006,  0.0006,  0.0032, -0.0010, -0.0009,  0.0017,\n","         0.0020, -0.0020])\n","gradient values before mask reapp. tensor([-0.0007, -0.0003, -0.0006,  0.0006,  0.0032, -0.0010, -0.0009,  0.0017,\n","         0.0020, -0.0021])\n","gradient values before mask reapp. tensor([-0.0006, -0.0003, -0.0006,  0.0006,  0.0033, -0.0010, -0.0009,  0.0017,\n","         0.0020, -0.0021])\n","gradient values before mask reapp. tensor([-0.0006, -0.0003, -0.0006,  0.0006,  0.0033, -0.0010, -0.0009,  0.0017,\n","         0.0020, -0.0021])\n","gradient values before mask reapp. tensor([-0.0006, -0.0003, -0.0006,  0.0006,  0.0033, -0.0010, -0.0009,  0.0017,\n","         0.0020, -0.0021])\n","gradient values before mask reapp. tensor([-0.0006, -0.0003, -0.0006,  0.0006,  0.0033, -0.0010, -0.0009,  0.0017,\n","         0.0020, -0.0021])\n","gradient values before mask reapp. tensor([-0.0006, -0.0003, -0.0006,  0.0006,  0.0033, -0.0010, -0.0009,  0.0017,\n","         0.0020, -0.0021])\n","gradient values before mask reapp. tensor([-0.0006, -0.0003, -0.0006,  0.0006,  0.0033, -0.0010, -0.0009,  0.0017,\n","         0.0020, -0.0021])\n","gradient values before mask reapp. tensor([-0.0006, -0.0003, -0.0006,  0.0006,  0.0033, -0.0010, -0.0009,  0.0017,\n","         0.0020, -0.0021])\n","gradient values before mask reapp. tensor([-0.0006, -0.0003, -0.0006,  0.0006,  0.0033, -0.0010, -0.0010,  0.0017,\n","         0.0020, -0.0021])\n","gradient values before mask reapp. tensor([-0.0006, -0.0003, -0.0006,  0.0006,  0.0033, -0.0010, -0.0010,  0.0017,\n","         0.0020, -0.0021])\n","gradient values before mask reapp. tensor([-0.0006, -0.0003, -0.0006,  0.0006,  0.0033, -0.0010, -0.0010,  0.0017,\n","         0.0020, -0.0021])\n","gradient values before mask reapp. tensor([-0.0006, -0.0003, -0.0006,  0.0006,  0.0033, -0.0010, -0.0010,  0.0017,\n","         0.0020, -0.0021])\n","gradient values before mask reapp. tensor([-0.0006, -0.0003, -0.0006,  0.0006,  0.0033, -0.0010, -0.0010,  0.0016,\n","         0.0020, -0.0021])\n","gradient values before mask reapp. tensor([-0.0006, -0.0003, -0.0006,  0.0006,  0.0033, -0.0010, -0.0010,  0.0016,\n","         0.0020, -0.0022])\n","gradient values before mask reapp. tensor([-0.0006, -0.0003, -0.0007,  0.0006,  0.0033, -0.0010, -0.0010,  0.0016,\n","         0.0020, -0.0022])\n","gradient values before mask reapp. tensor([-0.0006, -0.0003, -0.0007,  0.0006,  0.0033, -0.0010, -0.0010,  0.0016,\n","         0.0020, -0.0022])\n","gradient values before mask reapp. tensor([-0.0006, -0.0003, -0.0007,  0.0006,  0.0033, -0.0010, -0.0010,  0.0016,\n","         0.0020, -0.0022])\n","gradient values before mask reapp. tensor([-0.0006, -0.0003, -0.0007,  0.0006,  0.0033, -0.0010, -0.0010,  0.0016,\n","         0.0020, -0.0022])\n","gradient values before mask reapp. tensor([-0.0006, -0.0003, -0.0007,  0.0006,  0.0033, -0.0010, -0.0010,  0.0016,\n","         0.0020, -0.0022])\n","gradient values before mask reapp. tensor([-0.0006, -0.0003, -0.0007,  0.0006,  0.0033, -0.0010, -0.0010,  0.0016,\n","         0.0020, -0.0022])\n","gradient values before mask reapp. tensor([-0.0006, -0.0003, -0.0007,  0.0006,  0.0033, -0.0010, -0.0010,  0.0016,\n","         0.0020, -0.0022])\n","gradient values before mask reapp. tensor([-0.0006, -0.0003, -0.0007,  0.0006,  0.0033, -0.0010, -0.0010,  0.0015,\n","         0.0020, -0.0022])\n","gradient values before mask reapp. tensor([-0.0006, -0.0003, -0.0007,  0.0006,  0.0032, -0.0010, -0.0010,  0.0015,\n","         0.0020, -0.0022])\n","gradient values before mask reapp. tensor([-0.0006, -0.0003, -0.0007,  0.0006,  0.0032, -0.0010, -0.0010,  0.0015,\n","         0.0020, -0.0023])\n","gradient values before mask reapp. tensor([-0.0006, -0.0004, -0.0007,  0.0006,  0.0032, -0.0010, -0.0010,  0.0015,\n","         0.0020, -0.0023])\n","gradient values before mask reapp. tensor([-0.0006, -0.0004, -0.0007,  0.0006,  0.0032, -0.0010, -0.0010,  0.0015,\n","         0.0020, -0.0023])\n","gradient values before mask reapp. tensor([-0.0006, -0.0004, -0.0007,  0.0006,  0.0032, -0.0010, -0.0010,  0.0015,\n","         0.0020, -0.0023])\n","gradient values before mask reapp. tensor([-0.0006, -0.0004, -0.0007,  0.0006,  0.0032, -0.0010, -0.0010,  0.0014,\n","         0.0019, -0.0023])\n","gradient values before mask reapp. tensor([-0.0006, -0.0004, -0.0007,  0.0006,  0.0032, -0.0010, -0.0010,  0.0014,\n","         0.0019, -0.0023])\n","gradient values before mask reapp. tensor([-0.0006, -0.0004, -0.0007,  0.0005,  0.0031, -0.0010, -0.0010,  0.0014,\n","         0.0019, -0.0023])\n","gradient values before mask reapp. tensor([-0.0006, -0.0004, -0.0007,  0.0005,  0.0031, -0.0010, -0.0010,  0.0014,\n","         0.0019, -0.0023])\n","gradient values before mask reapp. tensor([-0.0005, -0.0004, -0.0007,  0.0005,  0.0031, -0.0010, -0.0010,  0.0014,\n","         0.0019, -0.0023])\n","gradient values before mask reapp. tensor([-0.0005, -0.0004, -0.0007,  0.0005,  0.0031, -0.0010, -0.0010,  0.0013,\n","         0.0019, -0.0023])\n","gradient values before mask reapp. tensor([-0.0005, -0.0004, -0.0007,  0.0005,  0.0031, -0.0010, -0.0010,  0.0013,\n","         0.0019, -0.0023])\n","gradient values before mask reapp. tensor([-0.0005, -0.0004, -0.0007,  0.0005,  0.0031, -0.0010, -0.0010,  0.0013,\n","         0.0019, -0.0023])\n","gradient values before mask reapp. tensor([-0.0005, -0.0004, -0.0007,  0.0005,  0.0031, -0.0010, -0.0010,  0.0013,\n","         0.0018, -0.0022])\n","gradient values before mask reapp. tensor([-0.0005, -0.0004, -0.0007,  0.0005,  0.0030, -0.0010, -0.0010,  0.0013,\n","         0.0018, -0.0022])\n","gradient values before mask reapp. tensor([-0.0005, -0.0004, -0.0007,  0.0005,  0.0030, -0.0010, -0.0010,  0.0013,\n","         0.0018, -0.0022])\n","gradient values before mask reapp. tensor([-0.0005, -0.0004, -0.0007,  0.0005,  0.0030, -0.0010, -0.0010,  0.0012,\n","         0.0018, -0.0022])\n","gradient values before mask reapp. tensor([-0.0004, -0.0004, -0.0007,  0.0005,  0.0030, -0.0010, -0.0010,  0.0012,\n","         0.0018, -0.0022])\n","gradient values before mask reapp. tensor([-0.0004, -0.0004, -0.0007,  0.0005,  0.0030, -0.0010, -0.0010,  0.0012,\n","         0.0018, -0.0022])\n","gradient values before mask reapp. tensor([-0.0004, -0.0004, -0.0006,  0.0005,  0.0030, -0.0010, -0.0010,  0.0012,\n","         0.0018, -0.0021])\n","gradient values before mask reapp. tensor([-0.0004, -0.0004, -0.0006,  0.0005,  0.0030, -0.0010, -0.0010,  0.0012,\n","         0.0017, -0.0021])\n","gradient values before mask reapp. tensor([-0.0003, -0.0004, -0.0006,  0.0005,  0.0030, -0.0010, -0.0010,  0.0012,\n","         0.0017, -0.0021])\n","gradient values before mask reapp. tensor([-0.0003, -0.0004, -0.0006,  0.0005,  0.0030, -0.0009, -0.0010,  0.0012,\n","         0.0017, -0.0020])\n","gradient values before mask reapp. tensor([-0.0003, -0.0004, -0.0005,  0.0005,  0.0030, -0.0009, -0.0010,  0.0012,\n","         0.0017, -0.0019])\n","gradient values before mask reapp. tensor([-0.0003, -0.0004, -0.0005,  0.0005,  0.0030, -0.0009, -0.0009,  0.0012,\n","         0.0017, -0.0019])\n","gradient values before mask reapp. tensor([-0.0002, -0.0004, -0.0005,  0.0005,  0.0030, -0.0009, -0.0009,  0.0012,\n","         0.0017, -0.0018])\n","gradient values before mask reapp. tensor([-0.0002, -0.0004, -0.0004,  0.0005,  0.0030, -0.0009, -0.0009,  0.0012,\n","         0.0017, -0.0018])\n","gradient values before mask reapp. tensor([-0.0002, -0.0004, -0.0004,  0.0005,  0.0030, -0.0009, -0.0009,  0.0012,\n","         0.0017, -0.0017])\n","gradient values before mask reapp. tensor([-0.0001, -0.0004, -0.0003,  0.0005,  0.0030, -0.0009, -0.0009,  0.0012,\n","         0.0017, -0.0016])\n","gradient values before mask reapp. tensor([-0.0002, -0.0004, -0.0006,  0.0003,  0.0026, -0.0009, -0.0009,  0.0008,\n","         0.0015, -0.0020])\n","gradient values before mask reapp. tensor([-0.0002, -0.0004, -0.0005,  0.0003,  0.0027, -0.0009, -0.0009,  0.0008,\n","         0.0015, -0.0019])\n","gradient values before mask reapp. tensor([-5.4279e-04, -4.9162e-04, -1.2220e-03,  7.3128e-05,  1.6186e-03,\n","        -9.0201e-04, -9.5151e-04, -9.8454e-05,  1.1133e-03, -2.7254e-03])\n","gradient values before mask reapp. tensor([-4.7410e-04, -4.8280e-04, -1.1150e-03,  9.3928e-05,  1.7001e-03,\n","        -8.8574e-04, -9.3096e-04, -4.5197e-05,  1.1196e-03, -2.5548e-03])\n","gradient values before mask reapp. tensor([-4.2064e-04, -4.7657e-04, -1.0359e-03,  1.0759e-04,  1.7533e-03,\n","        -8.7226e-04, -9.1522e-04, -9.6333e-06,  1.1202e-03, -2.4282e-03])\n","gradient values before mask reapp. tensor([-3.6907e-04, -4.7064e-04, -9.6024e-04,  1.2030e-04,  1.8029e-03,\n","        -8.5913e-04, -9.0016e-04,  2.3842e-05,  1.1202e-03, -2.3074e-03])\n","gradient values before mask reapp. tensor([-3.0324e-04, -4.6210e-04, -8.5809e-04,  1.3992e-04,  1.8795e-03,\n","        -8.4326e-04, -8.8032e-04,  7.4595e-05,  1.1256e-03, -2.1444e-03])\n","gradient values before mask reapp. tensor([-0.0003, -0.0005, -0.0008,  0.0002,  0.0019, -0.0008, -0.0009,  0.0001,\n","         0.0011, -0.0020])\n","gradient values before mask reapp. tensor([-0.0003, -0.0005, -0.0009,  0.0001,  0.0016, -0.0008, -0.0009, -0.0001,\n","         0.0010, -0.0021])\n","gradient values before mask reapp. tensor([-0.0003, -0.0005, -0.0008,  0.0001,  0.0017, -0.0008, -0.0008, -0.0001,\n","         0.0010, -0.0020])\n","gradient values before mask reapp. tensor([-3.7106e-04, -4.8641e-04, -1.0399e-03,  7.1314e-05,  1.3684e-03,\n","        -7.9953e-04, -8.3754e-04, -3.2321e-04,  8.9904e-04, -2.2216e-03])\n","gradient values before mask reapp. tensor([-3.0590e-04, -4.7764e-04, -9.3838e-04,  9.0957e-05,  1.4472e-03,\n","        -7.8418e-04, -8.1842e-04, -2.6952e-04,  9.0605e-04, -2.0618e-03])\n","gradient values before mask reapp. tensor([-0.0002, -0.0005, -0.0008,  0.0001,  0.0015, -0.0008, -0.0008, -0.0002,\n","         0.0009, -0.0019])\n","gradient values before mask reapp. tensor([-0.0002, -0.0005, -0.0007,  0.0001,  0.0016, -0.0008, -0.0008, -0.0002,\n","         0.0009, -0.0017])\n","gradient values before mask reapp. tensor([-0.0001, -0.0005, -0.0006,  0.0001,  0.0017, -0.0007, -0.0008, -0.0001,\n","         0.0009, -0.0016])\n","gradient values before mask reapp. tensor([-5.0012e-05, -4.4263e-04, -5.3879e-04,  1.6911e-04,  1.7599e-03,\n","        -7.2393e-04, -7.4292e-04, -5.5886e-05,  9.3469e-04, -1.4317e-03])\n","gradient values before mask reapp. tensor([-0.0002, -0.0005, -0.0007,  0.0001,  0.0015, -0.0007, -0.0007, -0.0003,\n","         0.0009, -0.0017])\n","gradient values before mask reapp. tensor([-0.0001, -0.0005, -0.0006,  0.0001,  0.0015, -0.0007, -0.0007, -0.0002,\n","         0.0009, -0.0015])\n","gradient values before mask reapp. tensor([-8.2964e-05, -4.4629e-04, -5.7795e-04,  1.3971e-04,  1.5477e-03,\n","        -6.9256e-04, -7.1217e-04, -1.8228e-04,  8.5852e-04, -1.4587e-03])\n","gradient values before mask reapp. tensor([-2.2531e-05, -4.3789e-04, -4.8385e-04,  1.5826e-04,  1.6223e-03,\n","        -6.7850e-04, -6.9454e-04, -1.3088e-04,  8.6557e-04, -1.3104e-03])\n","gradient values before mask reapp. tensor([-0.0001, -0.0005, -0.0007,  0.0001,  0.0013, -0.0007, -0.0007, -0.0003,\n","         0.0008, -0.0016])\n","gradient values before mask reapp. tensor([-0.0001, -0.0004, -0.0006,  0.0001,  0.0014, -0.0007, -0.0007, -0.0003,\n","         0.0008, -0.0015])\n","gradient values before mask reapp. tensor([-6.5768e-05, -4.4310e-04, -5.4283e-04,  1.2492e-04,  1.3991e-03,\n","        -6.5086e-04, -6.6902e-04, -2.6359e-04,  7.8902e-04, -1.3704e-03])\n","gradient values before mask reapp. tensor([-3.4343e-05, -4.3969e-04, -5.0250e-04,  1.2996e-04,  1.4229e-03,\n","        -6.4295e-04, -6.6165e-04, -2.4383e-04,  7.8689e-04, -1.3088e-03])\n","gradient values before mask reapp. tensor([-1.1520e-05, -4.3780e-04, -4.7818e-04,  1.3089e-04,  1.4311e-03,\n","        -6.3682e-04, -6.5731e-04, -2.3375e-04,  7.8184e-04, -1.2730e-03])\n","gradient values before mask reapp. tensor([ 1.3547e-05, -4.3545e-04, -4.4947e-04,  1.3303e-04,  1.4438e-03,\n","        -6.3019e-04, -6.5207e-04, -2.2095e-04,  7.7765e-04, -1.2299e-03])\n","gradient values before mask reapp. tensor([ 3.2586e-05, -4.3416e-04, -4.3202e-04,  1.3223e-04,  1.4453e-03,\n","        -6.2478e-04, -6.4896e-04, -2.1498e-04,  7.7136e-04, -1.2050e-03])\n","gradient values before mask reapp. tensor([ 5.0591e-05, -4.3299e-04, -4.1622e-04,  1.3112e-04,  1.4454e-03,\n","        -6.1956e-04, -6.4607e-04, -2.0993e-04,  7.6484e-04, -1.1827e-03])\n","gradient values before mask reapp. tensor([ 6.3310e-05, -4.3276e-04, -4.1033e-04,  1.2744e-04,  1.4357e-03,\n","        -6.1543e-04, -6.4507e-04, -2.1089e-04,  7.5649e-04, -1.1763e-03])\n","gradient values before mask reapp. tensor([ 7.8696e-05, -4.3199e-04, -3.9924e-04,  1.2518e-04,  1.4312e-03,\n","        -6.1070e-04, -6.4301e-04, -2.0863e-04,  7.4913e-04, -1.1614e-03])\n","gradient values before mask reapp. tensor([ 9.2106e-05, -4.3156e-04, -3.9183e-04,  1.2196e-04,  1.4231e-03,\n","        -6.0636e-04, -6.4163e-04, -2.0861e-04,  7.4106e-04, -1.1524e-03])\n","gradient values before mask reapp. tensor([ 0.0001, -0.0004, -0.0004,  0.0001,  0.0014, -0.0006, -0.0006, -0.0002,\n","         0.0007, -0.0012])\n","gradient values before mask reapp. tensor([ 0.0001, -0.0004, -0.0004,  0.0001,  0.0014, -0.0006, -0.0006, -0.0002,\n","         0.0007, -0.0011])\n","gradient values before mask reapp. tensor([ 0.0001, -0.0004, -0.0004,  0.0001,  0.0014, -0.0006, -0.0006, -0.0002,\n","         0.0007, -0.0011])\n","gradient values before mask reapp. tensor([ 0.0001, -0.0004, -0.0004,  0.0001,  0.0014, -0.0006, -0.0006, -0.0002,\n","         0.0007, -0.0011])\n","gradient values before mask reapp. tensor([ 0.0001, -0.0004, -0.0004,  0.0001,  0.0014, -0.0006, -0.0006, -0.0002,\n","         0.0007, -0.0011])\n","gradient values before mask reapp. tensor([ 1.6244e-04, -4.3006e-04, -3.6379e-04,  9.9173e-05,  1.3581e-03,\n","        -5.8196e-04, -6.3570e-04, -2.1778e-04,  6.8992e-04, -1.1235e-03])\n","gradient values before mask reapp. tensor([ 1.7394e-04, -4.2974e-04, -3.5907e-04,  9.5540e-05,  1.3474e-03,\n","        -5.7788e-04, -6.3458e-04, -2.1915e-04,  6.8150e-04, -1.1183e-03])\n","gradient values before mask reapp. tensor([ 1.8636e-04, -4.2923e-04, -3.5264e-04,  9.2310e-05,  1.3382e-03,\n","        -5.7357e-04, -6.3311e-04, -2.1951e-04,  6.7331e-04, -1.1104e-03])\n","gradient values before mask reapp. tensor([ 1.9654e-04, -4.2904e-04, -3.5000e-04,  8.8261e-05,  1.3255e-03,\n","        -5.6971e-04, -6.3229e-04, -2.2206e-04,  6.6457e-04, -1.1084e-03])\n","gradient values before mask reapp. tensor([ 2.0562e-04, -4.2906e-04, -3.4947e-04,  8.3642e-05,  1.3108e-03,\n","        -5.6610e-04, -6.3190e-04, -2.2589e-04,  6.5544e-04, -1.1099e-03])\n","gradient values before mask reapp. tensor([ 2.1884e-04, -4.2829e-04, -3.4108e-04,  8.1112e-05,  1.3036e-03,\n","        -5.6157e-04, -6.2992e-04, -2.2492e-04,  6.4774e-04, -1.0985e-03])\n","gradient values before mask reapp. tensor([ 1.0305e-04, -4.5426e-04, -7.0127e-04, -1.4501e-05,  8.4136e-04,\n","        -5.6343e-04, -6.4386e-04, -4.2613e-04,  5.2706e-04, -1.6167e-03])\n","gradient values before mask reapp. tensor([ 1.1970e-04, -4.5275e-04, -6.8441e-04, -1.4801e-05,  8.4376e-04,\n","        -5.5841e-04, -6.4091e-04, -4.2021e-04,  5.2157e-04, -1.5924e-03])\n","gradient values before mask reapp. tensor([ 2.5838e-04, -4.2575e-04, -3.1474e-04,  7.4164e-05,  1.2839e-03,\n","        -5.4795e-04, -6.2362e-04, -2.2096e-04,  6.2523e-04, -1.0620e-03])\n","gradient values before mask reapp. tensor([ 1.4264e-04, -4.5144e-04, -6.6930e-04, -1.9907e-05,  8.3112e-04,\n","        -5.5056e-04, -6.3852e-04, -4.1948e-04,  5.0753e-04, -1.5735e-03])\n","gradient values before mask reapp. tensor([ 1.5461e-04, -4.5071e-04, -6.6079e-04, -2.2252e-05,  8.2561e-04,\n","        -5.4654e-04, -6.3717e-04, -4.1855e-04,  5.0067e-04, -1.5626e-03])\n","gradient values before mask reapp. tensor([ 1.7229e-04, -4.4883e-04, -6.4128e-04, -2.1573e-05,  8.3087e-04,\n","        -5.4123e-04, -6.3350e-04, -4.1078e-04,  4.9587e-04, -1.5335e-03])\n","gradient values before mask reapp. tensor([ 1.8480e-04, -4.4783e-04, -6.3101e-04, -2.3165e-05,  8.2751e-04,\n","        -5.3703e-04, -6.3162e-04, -4.0854e-04,  4.8959e-04, -1.5193e-03])\n","gradient values before mask reapp. tensor([ 3.1272e-04, -4.2287e-04, -2.8921e-04,  5.8886e-05,  1.2343e-03,\n","        -5.2740e-04, -6.1596e-04, -2.2466e-04,  5.8528e-04, -1.0294e-03])\n","gradient values before mask reapp. tensor([ 2.0626e-04, -4.4645e-04, -6.1708e-04, -2.8114e-05,  8.1419e-04,\n","        -5.2937e-04, -6.2916e-04, -4.0812e-04,  4.7575e-04, -1.5017e-03])\n","gradient values before mask reapp. tensor([ 2.1934e-04, -4.4532e-04, -6.0565e-04, -2.9383e-05,  8.1184e-04,\n","        -5.2502e-04, -6.2702e-04, -4.0515e-04,  4.6966e-04, -1.4855e-03])\n","gradient values before mask reapp. tensor([ 2.3238e-04, -4.4410e-04, -5.9387e-04, -3.0422e-05,  8.1004e-04,\n","        -5.2066e-04, -6.2472e-04, -4.0185e-04,  4.6377e-04, -1.4686e-03])\n","gradient values before mask reapp. tensor([ 2.3942e-04, -4.4397e-04, -5.9330e-04, -3.4392e-05,  7.9741e-04,\n","        -5.1758e-04, -6.2465e-04, -4.0539e-04,  4.5585e-04, -1.4700e-03])\n","gradient values before mask reapp. tensor([ 2.5288e-04, -4.4262e-04, -5.8042e-04, -3.5047e-05,  7.9682e-04,\n","        -5.1312e-04, -6.2209e-04, -4.0133e-04,  4.5027e-04, -1.4512e-03])\n","gradient values before mask reapp. tensor([ 3.6963e-04, -4.1971e-04, -2.6841e-04,  3.9857e-05,  1.1675e-03,\n","        -5.0414e-04, -6.0762e-04, -2.3353e-04,  5.3730e-04, -1.0037e-03])\n","gradient values before mask reapp. tensor([ 2.7663e-04, -4.4040e-04, -5.6024e-04, -3.7668e-05,  7.9035e-04,\n","        -5.0482e-04, -6.1796e-04, -3.9650e-04,  4.3819e-04, -1.4224e-03])\n","gradient values before mask reapp. tensor([ 2.8685e-04, -4.3956e-04, -5.5306e-04, -3.9685e-05,  7.8443e-04,\n","        -5.0104e-04, -6.1648e-04, -3.9582e-04,  4.3171e-04, -1.4127e-03])\n","gradient values before mask reapp. tensor([ 2.9868e-04, -4.3835e-04, -5.4245e-04, -4.0685e-05,  7.8198e-04,\n","        -4.9689e-04, -6.1423e-04, -3.9293e-04,  4.2596e-04, -1.3972e-03])\n","gradient values before mask reapp. tensor([ 3.0972e-04, -4.3730e-04, -5.3340e-04, -4.2107e-05,  7.7801e-04,\n","        -4.9292e-04, -6.1233e-04, -3.9102e-04,  4.1993e-04, -1.3844e-03])\n","gradient values before mask reapp. tensor([ 3.2572e-04, -4.3528e-04, -5.1479e-04, -4.0916e-05,  7.8339e-04,\n","        -4.8785e-04, -6.0843e-04, -3.8316e-04,  4.1571e-04, -1.3558e-03])\n","gradient values before mask reapp. tensor([ 3.3376e-04, -4.3469e-04, -5.1076e-04, -4.3478e-05,  7.7492e-04,\n","        -4.8455e-04, -6.0750e-04, -3.8418e-04,  4.0900e-04, -1.3510e-03])\n","gradient values before mask reapp. tensor([ 4.4687e-04, -4.1249e-04, -2.1509e-04,  2.7802e-05,  1.1221e-03,\n","        -4.7452e-04, -5.9128e-04, -2.2410e-04,  4.8960e-04, -9.2372e-04])\n","gradient values before mask reapp. tensor([ 3.7280e-04, -4.2921e-04, -4.5929e-04, -3.7082e-05,  8.0021e-04,\n","        -4.7298e-04, -5.9689e-04, -3.5954e-04,  4.0361e-04, -1.2704e-03])\n","gradient values before mask reapp. tensor([ 0.0003, -0.0004, -0.0007, -0.0001,  0.0005, -0.0005, -0.0006, -0.0005,\n","         0.0003, -0.0016])\n","gradient values before mask reapp. tensor([ 4.0343e-04, -4.2508e-04, -4.2251e-04, -3.4196e-05,  8.1183e-04,\n","        -4.6319e-04, -5.8905e-04, -3.4357e-04,  3.9597e-04, -1.2133e-03])\n","gradient values before mask reapp. tensor([ 4.1563e-04, -4.2354e-04, -4.0975e-04, -3.4123e-05,  8.1235e-04,\n","        -4.5896e-04, -5.8617e-04, -3.3892e-04,  3.9123e-04, -1.1939e-03])\n","gradient values before mask reapp. tensor([ 4.2473e-04, -4.2247e-04, -4.0205e-04, -3.5200e-05,  8.0848e-04,\n","        -4.5540e-04, -5.8429e-04, -3.3724e-04,  3.8587e-04, -1.1824e-03])\n","gradient values before mask reapp. tensor([ 4.2963e-04, -4.2220e-04, -4.0239e-04, -3.8521e-05,  7.9662e-04,\n","        -4.5274e-04, -5.8408e-04, -3.4058e-04,  3.7892e-04, -1.1843e-03])\n","gradient values before mask reapp. tensor([ 3.6179e-04, -4.3734e-04, -6.2561e-04, -9.7667e-05,  5.0194e-04,\n","        -4.5116e-04, -5.8891e-04, -4.6426e-04,  3.0015e-04, -1.5007e-03])\n","gradient values before mask reapp. tensor([ 5.5013e-04, -3.9921e-04, -1.1128e-04,  2.9395e-05,  1.1207e-03,\n","        -4.3778e-04, -5.6335e-04, -1.8382e-04,  4.4878e-04, -7.5910e-04])\n","gradient values before mask reapp. tensor([ 3.9215e-04, -4.3284e-04, -5.8462e-04, -9.2985e-05,  5.2110e-04,\n","        -4.4190e-04, -5.8108e-04, -4.4548e-04,  2.9519e-04, -1.4374e-03])\n","gradient values before mask reapp. tensor([ 4.1399e-04, -4.2927e-04, -5.5141e-04, -8.7174e-05,  5.4295e-04,\n","        -4.3577e-04, -5.7446e-04, -4.2815e-04,  2.9507e-04, -1.3848e-03])\n","gradient values before mask reapp. tensor([ 6.0099e-04, -3.9139e-04, -4.4616e-05,  3.8381e-05,  1.1505e-03,\n","        -4.2169e-04, -5.4764e-04, -1.5099e-04,  4.4057e-04, -6.5180e-04])\n","gradient values before mask reapp. tensor([ 4.4036e-04, -4.2520e-04, -5.1618e-04, -8.3413e-05,  5.5761e-04,\n","        -4.2734e-04, -5.6752e-04, -4.1238e-04,  2.8978e-04, -1.3302e-03])\n","gradient values before mask reapp. tensor([ 4.5602e-04, -4.2272e-04, -4.9397e-04, -8.0340e-05,  5.6931e-04,\n","        -4.2258e-04, -5.6310e-04, -4.0165e-04,  2.8795e-04, -1.2954e-03])\n","gradient values before mask reapp. tensor([ 4.6829e-04, -4.2078e-04, -4.7763e-04, -7.8651e-05,  5.7571e-04,\n","        -4.1857e-04, -5.5983e-04, -3.9440e-04,  2.8529e-04, -1.2701e-03])\n","gradient values before mask reapp. tensor([ 5.7318e-04, -3.9986e-04, -2.0811e-04, -1.2652e-05,  8.8883e-04,\n","        -4.0799e-04, -5.4200e-04, -2.4670e-04,  3.5750e-04, -8.7627e-04])\n","gradient values before mask reapp. tensor([ 5.0891e-04, -4.1393e-04, -4.1495e-04, -6.7287e-05,  6.1737e-04,\n","        -4.0707e-04, -5.4709e-04, -3.6134e-04,  2.8540e-04, -1.1702e-03])\n","gradient values before mask reapp. tensor([ 5.2292e-04, -4.1150e-04, -3.9454e-04, -6.4185e-05,  6.2823e-04,\n","        -4.0266e-04, -5.4281e-04, -3.5129e-04,  2.8383e-04, -1.1377e-03])\n","gradient values before mask reapp. tensor([ 5.3321e-04, -4.0983e-04, -3.8120e-04, -6.3089e-05,  6.3220e-04,\n","        -3.9909e-04, -5.4006e-04, -3.4566e-04,  2.8095e-04, -1.1170e-03])\n","gradient values before mask reapp. tensor([ 5.4381e-04, -4.0794e-04, -3.6659e-04, -6.1314e-05,  6.3790e-04,\n","        -3.9543e-04, -5.3689e-04, -3.3901e-04,  2.7859e-04, -1.0938e-03])\n","gradient values before mask reapp. tensor([ 5.5686e-04, -4.0574e-04, -3.4795e-04, -5.8720e-05,  6.4708e-04,\n","        -3.9130e-04, -5.3305e-04, -3.3005e-04,  2.7676e-04, -1.0645e-03])\n","gradient values before mask reapp. tensor([ 5.7206e-04, -4.0302e-04, -3.2485e-04, -5.4727e-05,  6.6093e-04,\n","        -3.8665e-04, -5.2814e-04, -3.1816e-04,  2.7594e-04, -1.0274e-03])\n","gradient values before mask reapp. tensor([ 5.8326e-04, -4.0100e-04, -3.0885e-04, -5.2554e-05,  6.6805e-04,\n","        -3.8285e-04, -5.2467e-04, -3.1056e-04,  2.7394e-04, -1.0019e-03])\n","gradient values before mask reapp. tensor([ 5.9075e-04, -3.9964e-04, -2.9960e-04, -5.2057e-05,  6.6899e-04,\n","        -3.7992e-04, -5.2257e-04, -3.0706e-04,  2.7088e-04, -9.8740e-04])\n","gradient values before mask reapp. tensor([ 5.9832e-04, -3.9825e-04, -2.9011e-04, -5.1493e-05,  6.7009e-04,\n","        -3.7695e-04, -5.2041e-04, -3.0339e-04,  2.6787e-04, -9.7252e-04])\n","gradient values before mask reapp. tensor([ 6.0872e-04, -3.9631e-04, -2.7518e-04, -4.9441e-05,  6.7655e-04,\n","        -3.7335e-04, -5.1709e-04, -2.9630e-04,  2.6591e-04, -9.4861e-04])\n","gradient values before mask reapp. tensor([ 6.1273e-04, -3.9549e-04, -2.7193e-04, -5.0376e-05,  6.7196e-04,\n","        -3.7115e-04, -5.1614e-04, -2.9635e-04,  2.6195e-04, -9.4374e-04])\n","gradient values before mask reapp. tensor([ 6.2283e-04, -3.9355e-04, -2.5727e-04, -4.8304e-05,  6.7827e-04,\n","        -3.6760e-04, -5.1283e-04, -2.8934e-04,  2.6003e-04, -9.2017e-04])\n","gradient values before mask reapp. tensor([ 6.2877e-04, -3.9237e-04, -2.5020e-04, -4.8123e-05,  6.7762e-04,\n","        -3.6501e-04, -5.1106e-04, -2.8694e-04,  2.5692e-04, -9.0893e-04])\n","gradient values before mask reapp. tensor([ 6.3154e-04, -3.9171e-04, -2.4882e-04, -4.9420e-05,  6.7146e-04,\n","        -3.6308e-04, -5.1043e-04, -2.8800e-04,  2.5280e-04, -9.0699e-04])\n","gradient values before mask reapp. tensor([ 6.3751e-04, -3.9047e-04, -2.4147e-04, -4.9150e-05,  6.7104e-04,\n","        -3.6043e-04, -5.0856e-04, -2.8537e-04,  2.4976e-04, -8.9525e-04])\n","gradient values before mask reapp. tensor([ 6.4235e-04, -3.8940e-04, -2.3608e-04, -4.9277e-05,  6.6896e-04,\n","        -3.5806e-04, -5.0707e-04, -2.8388e-04,  2.4648e-04, -8.8657e-04])\n","gradient values before mask reapp. tensor([ 6.4860e-04, -3.8805e-04, -2.2783e-04, -4.8626e-05,  6.6967e-04,\n","        -3.5536e-04, -5.0496e-04, -2.8057e-04,  2.4378e-04, -8.7317e-04])\n","gradient values before mask reapp. tensor([ 6.4626e-04, -3.8828e-04, -2.3553e-04, -5.2164e-05,  6.5514e-04,\n","        -3.5458e-04, -5.0615e-04, -2.8709e-04,  2.3826e-04, -8.8599e-04])\n","gradient values before mask reapp. tensor([ 6.5341e-04, -3.8676e-04, -2.2569e-04, -5.1081e-05,  6.5735e-04,\n","        -3.5166e-04, -5.0369e-04, -2.8280e-04,  2.3581e-04, -8.6994e-04])\n","gradient values before mask reapp. tensor([ 6.5536e-04, -3.8614e-04, -2.2513e-04, -5.2313e-05,  6.5095e-04,\n","        -3.4992e-04, -5.0311e-04, -2.8412e-04,  2.3190e-04, -8.6899e-04])\n","gradient values before mask reapp. tensor([ 6.6088e-04, -3.8486e-04, -2.1795e-04, -5.1850e-05,  6.5077e-04,\n","        -3.4737e-04, -5.0117e-04, -2.8137e-04,  2.2911e-04, -8.5724e-04])\n","gradient values before mask reapp. tensor([ 6.6250e-04, -3.8428e-04, -2.1792e-04, -5.3165e-05,  6.4397e-04,\n","        -3.4569e-04, -5.0066e-04, -2.8297e-04,  2.2515e-04, -8.5707e-04])\n","gradient values before mask reapp. tensor([ 6.6706e-04, -3.8314e-04, -2.1221e-04, -5.2976e-05,  6.4262e-04,\n","        -3.4337e-04, -4.9899e-04, -2.8103e-04,  2.2226e-04, -8.4761e-04])\n","gradient values before mask reapp. tensor([ 6.6450e-04, -3.8332e-04, -2.1980e-04, -5.6265e-05,  6.2858e-04,\n","        -3.4263e-04, -5.0006e-04, -2.8728e-04,  2.1702e-04, -8.5997e-04])\n","gradient values before mask reapp. tensor([ 6.6988e-04, -3.8203e-04, -2.1270e-04, -5.5762e-05,  6.2841e-04,\n","        -3.4008e-04, -4.9807e-04, -2.8452e-04,  2.1428e-04, -8.4824e-04])\n","gradient values before mask reapp. tensor([ 6.7295e-04, -3.8116e-04, -2.0968e-04, -5.6206e-05,  6.2468e-04,\n","        -3.3813e-04, -4.9694e-04, -2.8418e-04,  2.1101e-04, -8.4315e-04])\n","gradient values before mask reapp. tensor([ 6.7882e-04, -3.7967e-04, -2.0121e-04, -5.5138e-05,  6.2613e-04,\n","        -3.3547e-04, -4.9458e-04, -2.8041e-04,  2.0871e-04, -8.2891e-04])\n","gradient values before mask reapp. tensor([ 6.7483e-04, -3.8007e-04, -2.1111e-04, -5.8940e-05,  6.1010e-04,\n","        -3.3506e-04, -4.9610e-04, -2.8798e-04,  2.0322e-04, -8.4497e-04])\n","gradient values before mask reapp. tensor([ 6.8338e-04, -3.7810e-04, -1.9761e-04, -5.6499e-05,  6.1652e-04,\n","        -3.3184e-04, -4.9269e-04, -2.8107e-04,  2.0189e-04, -8.2243e-04])\n","gradient values before mask reapp. tensor([ 6.8187e-04, -3.7802e-04, -2.0279e-04, -5.9022e-05,  6.0503e-04,\n","        -3.3086e-04, -4.9319e-04, -2.8570e-04,  1.9726e-04, -8.3068e-04])\n","gradient values before mask reapp. tensor([ 6.9156e-04, -3.7580e-04, -1.8688e-04, -5.5843e-05,  6.1399e-04,\n","        -3.2742e-04, -4.8928e-04, -2.7721e-04,  1.9653e-04, -8.0413e-04])\n","gradient values before mask reapp. tensor([ 6.8777e-04, -3.7611e-04, -1.9615e-04, -5.9461e-05,  5.9858e-04,\n","        -3.2691e-04, -4.9060e-04, -2.8432e-04,  1.9119e-04, -8.1908e-04])\n","gradient values before mask reapp. tensor([ 6.8977e-04, -3.7530e-04, -1.9449e-04, -6.0019e-05,  5.9392e-04,\n","        -3.2516e-04, -4.8961e-04, -2.8460e-04,  1.8793e-04, -8.1587e-04])\n","gradient values before mask reapp. tensor([ 6.9236e-04, -3.7442e-04, -1.9177e-04, -6.0324e-05,  5.9030e-04,\n","        -3.2331e-04, -4.8844e-04, -2.8423e-04,  1.8489e-04, -8.1103e-04])\n","gradient values before mask reapp. tensor([ 7.0021e-04, -3.7246e-04, -1.7893e-04, -5.7861e-05,  5.9639e-04,\n","        -3.2024e-04, -4.8508e-04, -2.7755e-04,  1.8369e-04, -7.8938e-04])\n","gradient values before mask reapp. tensor([ 6.9807e-04, -3.7240e-04, -1.8472e-04, -6.0356e-05,  5.8470e-04,\n","        -3.1938e-04, -4.8561e-04, -2.8234e-04,  1.7920e-04, -7.9837e-04])\n","gradient values before mask reapp. tensor([ 7.0095e-04, -3.7140e-04, -1.8116e-04, -6.0308e-05,  5.8217e-04,\n","        -3.1748e-04, -4.8420e-04, -2.8134e-04,  1.7647e-04, -7.9197e-04])\n","gradient values before mask reapp. tensor([ 6.9969e-04, -3.7118e-04, -1.8526e-04, -6.2416e-05,  5.7196e-04,\n","        -3.1643e-04, -4.8441e-04, -2.8512e-04,  1.7226e-04, -7.9835e-04])\n","gradient values before mask reapp. tensor([ 7.0719e-04, -3.6924e-04, -1.7280e-04, -5.9911e-05,  5.7798e-04,\n","        -3.1345e-04, -4.8107e-04, -2.7855e-04,  1.7115e-04, -7.7714e-04])\n","gradient values before mask reapp. tensor([ 7.0418e-04, -3.6931e-04, -1.7996e-04, -6.2648e-05,  5.6524e-04,\n","        -3.1285e-04, -4.8188e-04, -2.8410e-04,  1.6660e-04, -7.8833e-04])\n","gradient values before mask reapp. tensor([ 7.1094e-04, -3.6751e-04, -1.6889e-04, -6.0503e-05,  5.6997e-04,\n","        -3.1002e-04, -4.7881e-04, -2.7836e-04,  1.6527e-04, -7.6937e-04])\n","gradient values before mask reapp. tensor([ 7.0932e-04, -3.6732e-04, -1.7329e-04, -6.2502e-05,  5.5998e-04,\n","        -3.0911e-04, -4.7905e-04, -2.8217e-04,  1.6128e-04, -7.7604e-04])\n","gradient values before mask reapp. tensor([ 7.1161e-04, -3.6632e-04, -1.7029e-04, -6.2446e-05,  5.5710e-04,\n","        -3.0730e-04, -4.7765e-04, -2.8135e-04,  1.5862e-04, -7.7036e-04])\n","gradient values before mask reapp. tensor([ 7.1552e-04, -3.6502e-04, -1.6418e-04, -6.1620e-05,  5.5710e-04,\n","        -3.0509e-04, -4.7563e-04, -2.7862e-04,  1.5649e-04, -7.5964e-04])\n","gradient values before mask reapp. tensor([ 7.1214e-04, -3.6511e-04, -1.7175e-04, -6.4314e-05,  5.4425e-04,\n","        -3.0459e-04, -4.7645e-04, -2.8430e-04,  1.5203e-04, -7.7131e-04])\n","gradient values before mask reapp. tensor([ 7.1916e-04, -3.6319e-04, -1.5971e-04, -6.1780e-05,  5.5020e-04,\n","        -3.0172e-04, -4.7314e-04, -2.7782e-04,  1.5109e-04, -7.5066e-04])\n","gradient values before mask reapp. tensor([ 7.1891e-04, -3.6271e-04, -1.6135e-04, -6.2952e-05,  5.4303e-04,\n","        -3.0051e-04, -4.7276e-04, -2.7984e-04,  1.4771e-04, -7.5268e-04])\n","gradient values before mask reapp. tensor([ 7.1975e-04, -3.6192e-04, -1.6063e-04, -6.3344e-05,  5.3834e-04,\n","        -2.9904e-04, -4.7178e-04, -2.8027e-04,  1.4488e-04, -7.5058e-04])\n","gradient values before mask reapp. tensor([ 7.2449e-04, -3.6042e-04, -1.5266e-04, -6.1914e-05,  5.4031e-04,\n","        -2.9665e-04, -4.6932e-04, -2.7629e-04,  1.4322e-04, -7.3669e-04])\n","gradient values before mask reapp. tensor([ 7.2035e-04, -3.6059e-04, -1.6135e-04, -6.4805e-05,  5.2660e-04,\n","        -2.9630e-04, -4.7032e-04, -2.8256e-04,  1.3870e-04, -7.5007e-04])\n","gradient values before mask reapp. tensor([ 7.2673e-04, -3.5878e-04, -1.5017e-04, -6.2435e-05,  5.3196e-04,\n","        -2.9363e-04, -4.6721e-04, -2.7651e-04,  1.3778e-04, -7.3086e-04])\n","gradient values before mask reapp. tensor([ 7.2722e-04, -3.5803e-04, -1.4992e-04, -6.2870e-05,  5.2697e-04,\n","        -2.9223e-04, -4.6629e-04, -2.7717e-04,  1.3496e-04, -7.2943e-04])\n","gradient values before mask reapp. tensor([ 7.2503e-04, -3.5783e-04, -1.5474e-04, -6.4820e-05,  5.1687e-04,\n","        -2.9142e-04, -4.6649e-04, -2.8102e-04,  1.3114e-04, -7.3661e-04])\n","gradient values before mask reapp. tensor([ 7.2962e-04, -3.5636e-04, -1.4695e-04, -6.3246e-05,  5.1923e-04,\n","        -2.8919e-04, -4.6407e-04, -2.7703e-04,  1.2973e-04, -7.2284e-04])\n","gradient values before mask reapp. tensor([ 7.3129e-04, -3.5536e-04, -1.4425e-04, -6.2973e-05,  5.1668e-04,\n","        -2.8754e-04, -4.6263e-04, -2.7610e-04,  1.2743e-04, -7.1738e-04])\n","gradient values before mask reapp. tensor([ 7.3186e-04, -3.5454e-04, -1.4347e-04, -6.3293e-05,  5.1215e-04,\n","        -2.8607e-04, -4.6158e-04, -2.7637e-04,  1.2476e-04, -7.1512e-04])\n","gradient values before mask reapp. tensor([ 7.3203e-04, -3.5390e-04, -1.4389e-04, -6.3898e-05,  5.0666e-04,\n","        -2.8484e-04, -4.6088e-04, -2.7744e-04,  1.2191e-04, -7.1492e-04])\n","gradient values before mask reapp. tensor([ 7.3809e-04, -3.5200e-04, -1.3265e-04, -6.1223e-05,  5.1251e-04,\n","        -2.8220e-04, -4.5759e-04, -2.7111e-04,  1.2128e-04, -6.9519e-04])\n","gradient values before mask reapp. tensor([ 7.3130e-04, -3.5264e-04, -1.4580e-04, -6.5228e-05,  4.9479e-04,\n","        -2.8247e-04, -4.5951e-04, -2.8000e-04,  1.1619e-04, -7.1595e-04])\n","gradient values before mask reapp. tensor([ 7.3911e-04, -3.5044e-04, -1.3138e-04, -6.1721e-05,  5.0372e-04,\n","        -2.7946e-04, -4.5558e-04, -2.7173e-04,  1.1614e-04, -6.9102e-04])\n","gradient values before mask reapp. tensor([ 7.3718e-04, -3.5011e-04, -1.3515e-04, -6.3144e-05,  4.9520e-04,\n","        -2.7864e-04, -4.5550e-04, -2.7472e-04,  1.1286e-04, -6.9623e-04])\n","gradient values before mask reapp. tensor([ 7.3871e-04, -3.4909e-04, -1.3247e-04, -6.2763e-05,  4.9290e-04,\n","        -2.7704e-04, -4.5402e-04, -2.7370e-04,  1.1072e-04, -6.9065e-04])\n","gradient values before mask reapp. tensor([ 7.3900e-04, -3.4834e-04, -1.3191e-04, -6.2928e-05,  4.8883e-04,\n","        -2.7578e-04, -4.5303e-04, -2.7392e-04,  1.0838e-04, -6.8864e-04])\n","gradient values before mask reapp. tensor([ 7.3775e-04, -3.4787e-04, -1.3441e-04, -6.4061e-05,  4.8137e-04,\n","        -2.7477e-04, -4.5266e-04, -2.7615e-04,  1.0525e-04, -6.9181e-04])\n","gradient values before mask reapp. tensor([ 7.3976e-04, -3.4674e-04, -1.3070e-04, -6.3345e-05,  4.8022e-04,\n","        -2.7310e-04, -4.5097e-04, -2.7444e-04,  1.0341e-04, -6.8450e-04])\n","gradient values before mask reapp. tensor([ 7.5376e-04, -3.4334e-04, -1.0432e-04, -5.6563e-05,  5.0089e-04,\n","        -2.6875e-04, -4.4453e-04, -2.5865e-04,  1.0570e-04, -6.3991e-04])\n","gradient values before mask reapp. tensor([ 7.3990e-04, -3.4524e-04, -1.3015e-04, -6.3810e-05,  4.7142e-04,\n","        -2.7060e-04, -4.4904e-04, -2.7519e-04,  9.8614e-05, -6.8139e-04])\n","gradient values before mask reapp. tensor([ 7.5063e-04, -3.4239e-04, -1.0973e-04, -5.8515e-05,  4.8650e-04,\n","        -2.6695e-04, -4.4378e-04, -2.6303e-04,  9.9906e-05, -6.4638e-04])\n","gradient values before mask reapp. tensor([ 7.4828e-04, -3.4217e-04, -1.1409e-04, -5.9942e-05,  4.7793e-04,\n","        -2.6636e-04, -4.4385e-04, -2.6625e-04,  9.6805e-05, -6.5253e-04])\n","gradient values before mask reapp. tensor([ 7.5063e-04, -3.4090e-04, -1.0922e-04, -5.8914e-05,  4.7787e-04,\n","        -2.6453e-04, -4.4185e-04, -2.6372e-04,  9.5240e-05, -6.4331e-04])\n","gradient values before mask reapp. tensor([ 7.4481e-04, -3.4120e-04, -1.1973e-04, -6.1868e-05,  4.6352e-04,\n","        -2.6462e-04, -4.4308e-04, -2.7065e-04,  9.1122e-05, -6.5929e-04])\n","gradient values before mask reapp. tensor([ 7.5656e-04, -3.3824e-04, -9.7488e-05, -5.6183e-05,  4.8020e-04,\n","        -2.6081e-04, -4.3753e-04, -2.5740e-04,  9.2692e-05, -6.2159e-04])\n","gradient values before mask reapp. tensor([ 7.4557e-04, -3.3948e-04, -1.1737e-04, -6.1548e-05,  4.5707e-04,\n","        -2.6204e-04, -4.4067e-04, -2.7003e-04,  8.7028e-05, -6.5286e-04])\n","gradient values before mask reapp. tensor([ 7.5813e-04, -3.3632e-04, -9.3495e-05, -5.5342e-05,  4.7550e-04,\n","        -2.5803e-04, -4.3473e-04, -2.5571e-04,  8.8987e-05, -6.1232e-04])\n","gradient values before mask reapp. tensor([ 7.5235e-04, -3.3662e-04, -1.0369e-04, -5.8277e-05,  4.6135e-04,\n","        -2.5809e-04, -4.3592e-04, -2.6243e-04,  8.4931e-05, -6.2793e-04])\n","gradient values before mask reapp. tensor([ 7.5153e-04, -3.3589e-04, -1.0437e-04, -5.8473e-05,  4.5672e-04,\n","        -2.5708e-04, -4.3503e-04, -2.6312e-04,  8.2774e-05, -6.2759e-04])\n","gradient values before mask reapp. tensor([ 7.5505e-04, -3.3449e-04, -9.7444e-05, -5.6828e-05,  4.5892e-04,\n","        -2.5511e-04, -4.3267e-04, -2.5930e-04,  8.1718e-05, -6.1506e-04])\n","gradient values before mask reapp. tensor([ 7.5547e-04, -3.3355e-04, -9.5864e-05, -5.6456e-05,  4.5635e-04,\n","        -2.5380e-04, -4.3133e-04, -2.5863e-04,  7.9915e-05, -6.1105e-04])\n","gradient values before mask reapp. tensor([ 7.5803e-04, -3.3231e-04, -9.0488e-05, -5.5175e-05,  4.5730e-04,\n","        -2.5210e-04, -4.2929e-04, -2.5568e-04,  7.8733e-05, -6.0107e-04])\n","gradient values before mask reapp. tensor([ 7.5897e-04, -3.3128e-04, -8.7908e-05, -5.4525e-05,  4.5574e-04,\n","        -2.5069e-04, -4.2775e-04, -2.5437e-04,  7.7145e-05, -5.9543e-04])\n","gradient values before mask reapp. tensor([ 7.5740e-04, -3.3082e-04, -9.0216e-05, -5.5381e-05,  4.4928e-04,\n","        -2.4987e-04, -4.2733e-04, -2.5618e-04,  7.4585e-05, -5.9818e-04])\n","gradient values before mask reapp. tensor([ 7.5574e-04, -3.3020e-04, -9.2167e-05, -5.5771e-05,  4.4363e-04,\n","        -2.4903e-04, -4.2665e-04, -2.5757e-04,  7.2326e-05, -5.9974e-04])\n","gradient values before mask reapp. tensor([ 7.5986e-04, -3.2859e-04, -8.3573e-05, -5.3515e-05,  4.4797e-04,\n","        -2.4697e-04, -4.2387e-04, -2.5251e-04,  7.1903e-05, -5.8429e-04])\n","gradient values before mask reapp. tensor([ 7.5987e-04, -3.2783e-04, -8.2894e-05, -5.3542e-05,  4.4434e-04,\n","        -2.4580e-04, -4.2283e-04, -2.5246e-04,  6.9872e-05, -5.8213e-04])\n","gradient values before mask reapp. tensor([ 7.6205e-04, -3.2651e-04, -7.7700e-05, -5.2033e-05,  4.4567e-04,\n","        -2.4416e-04, -4.2070e-04, -2.4942e-04,  6.8967e-05, -5.7202e-04])\n","gradient values before mask reapp. tensor([ 7.6537e-04, -3.2510e-04, -7.0644e-05, -5.0221e-05,  4.4845e-04,\n","        -2.4229e-04, -4.1828e-04, -2.4534e-04,  6.8229e-05, -5.5917e-04])\n","gradient values before mask reapp. tensor([ 7.5855e-04, -3.2542e-04, -8.1917e-05, -5.3111e-05,  4.3415e-04,\n","        -2.4262e-04, -4.1955e-04, -2.5238e-04,  6.4510e-05, -5.7615e-04])\n","gradient values before mask reapp. tensor([ 7.6806e-04, -3.2290e-04, -6.3568e-05, -4.8404e-05,  4.4739e-04,\n","        -2.3936e-04, -4.1483e-04, -2.4142e-04,  6.5605e-05, -5.4496e-04])\n","gradient values before mask reapp. tensor([ 7.6596e-04, -3.2235e-04, -6.5983e-05, -4.8836e-05,  4.4186e-04,\n","        -2.3872e-04, -4.1427e-04, -2.4294e-04,  6.3608e-05, -5.4729e-04])\n","gradient values before mask reapp. tensor([ 7.7361e-04, -3.1994e-04, -5.0138e-05, -4.4466e-05,  4.5330e-04,\n","        -2.3578e-04, -4.0985e-04, -2.3324e-04,  6.4614e-05, -5.1959e-04])\n","gradient values before mask reapp. tensor([ 7.6062e-04, -3.2151e-04, -7.3088e-05, -5.0443e-05,  4.2795e-04,\n","        -2.3759e-04, -4.1363e-04, -2.4751e-04,  5.8886e-05, -5.5591e-04])\n","gradient values before mask reapp. tensor([ 7.7093e-04, -3.1884e-04, -5.3161e-05, -4.5348e-05,  4.4279e-04,\n","        -2.3417e-04, -4.0860e-04, -2.3554e-04,  6.0328e-05, -5.2220e-04])\n","gradient values before mask reapp. tensor([ 7.6534e-04, -3.1890e-04, -6.1794e-05, -4.7322e-05,  4.3155e-04,\n","        -2.3432e-04, -4.0931e-04, -2.4081e-04,  5.7385e-05, -5.3464e-04])\n","gradient values before mask reapp. tensor([ 7.7100e-04, -3.1697e-04, -5.0007e-05, -4.4069e-05,  4.3921e-04,\n","        -2.3194e-04, -4.0584e-04, -2.3366e-04,  5.7700e-05, -5.1383e-04])\n","gradient values before mask reapp. tensor([ 7.7446e-04, -3.1552e-04, -4.2493e-05, -4.2188e-05,  4.4252e-04,\n","        -2.3005e-04, -4.0335e-04, -2.2925e-04,  5.7147e-05, -5.0040e-04])\n","gradient values before mask reapp. tensor([ 7.6303e-04, -3.1663e-04, -6.1755e-05, -4.6937e-05,  4.2108e-04,\n","        -2.3148e-04, -4.0624e-04, -2.4102e-04,  5.2359e-05, -5.3033e-04])\n","gradient values before mask reapp. tensor([ 7.8064e-04, -3.1257e-04, -2.7968e-05, -3.8037e-05,  4.4969e-04,\n","        -2.2649e-04, -3.9828e-04, -2.2036e-04,  5.6523e-05, -4.7364e-04])\n","gradient values before mask reapp. tensor([ 7.6849e-04, -3.1380e-04, -4.8534e-05, -4.3150e-05,  4.2707e-04,\n","        -2.2809e-04, -4.0144e-04, -2.3292e-04,  5.1529e-05, -5.0573e-04])\n","gradient values before mask reapp. tensor([ 7.8153e-04, -3.1049e-04, -2.2918e-05, -3.6143e-05,  4.4810e-04,\n","        -2.2405e-04, -3.9507e-04, -2.1720e-04,  5.4380e-05, -4.6205e-04])\n","gradient values before mask reapp. tensor([ 7.8185e-04, -3.0957e-04, -2.0836e-05, -3.5426e-05,  4.4688e-04,\n","        -2.2298e-04, -3.9367e-04, -2.1593e-04,  5.3239e-05, -4.5731e-04])\n","gradient values before mask reapp. tensor([ 7.8220e-04, -3.0853e-04, -1.8257e-05, -3.4539e-05,  4.4617e-04,\n","        -2.2174e-04, -3.9205e-04, -2.1427e-04,  5.2242e-05, -4.5151e-04])\n","gradient values before mask reapp. tensor([ 7.9044e-04, -3.0613e-04, -1.5779e-06, -2.9916e-05,  4.5888e-04,\n","        -2.1890e-04, -3.8760e-04, -2.0402e-04,  5.3649e-05, -4.2270e-04])\n","gradient values before mask reapp. tensor([ 7.8598e-04, -3.0592e-04, -7.3778e-06, -3.1106e-05,  4.5064e-04,\n","        -2.1877e-04, -3.8767e-04, -2.0734e-04,  5.1467e-05, -4.3053e-04])\n","gradient values before mask reapp. tensor([ 7.9640e-04, -3.0316e-04,  1.3158e-05, -2.5503e-05,  4.6700e-04,\n","        -2.1549e-04, -3.8246e-04, -1.9475e-04,  5.3519e-05, -3.9549e-04])\n","gradient values before mask reapp. tensor([ 7.8941e-04, -3.0335e-04,  2.9500e-06, -2.7715e-05,  4.5491e-04,\n","        -2.1591e-04, -3.8338e-04, -2.0069e-04,  5.0764e-05, -4.1033e-04])\n","gradient values before mask reapp. tensor([ 7.8824e-04, -3.0270e-04,  2.2800e-06, -2.7706e-05,  4.5120e-04,\n","        -2.1517e-04, -3.8253e-04, -2.0108e-04,  4.9198e-05, -4.1006e-04])\n","gradient values before mask reapp. tensor([ 7.9714e-04, -3.0011e-04,  2.0880e-05, -2.2608e-05,  4.6588e-04,\n","        -2.1212e-04, -3.7766e-04, -1.8952e-04,  5.1122e-05, -3.7815e-04])\n","gradient values before mask reapp. tensor([ 7.9530e-04, -2.9953e-04,  1.9163e-05, -2.2732e-05,  4.6146e-04,\n","        -2.1153e-04, -3.7698e-04, -1.9048e-04,  4.9533e-05, -3.7940e-04])\n","gradient values before mask reapp. tensor([ 7.9708e-04, -2.9840e-04,  2.4099e-05, -2.1413e-05,  4.6300e-04,\n","        -2.1015e-04, -3.7508e-04, -1.8745e-04,  4.8978e-05, -3.7030e-04])\n","gradient values before mask reapp. tensor([ 7.6107e-04, -3.0816e-04, -6.7968e-05, -3.5333e-05,  3.1010e-04,\n","        -2.0847e-04, -3.9000e-04, -2.5543e-04, -6.7172e-06, -5.0206e-04])\n","gradient values before mask reapp. tensor([ 7.6035e-04, -3.0733e-04, -6.6913e-05, -3.4886e-05,  3.0912e-04,\n","        -2.0772e-04, -3.8881e-04, -2.5449e-04, -7.2642e-06, -4.9910e-04])\n","gradient values before mask reapp. tensor([ 7.5654e-04, -3.0696e-04, -7.1252e-05, -3.5719e-05,  3.0328e-04,\n","        -2.0764e-04, -3.8864e-04, -2.5674e-04, -8.6026e-06, -5.0473e-04])\n","gradient values before mask reapp. tensor([ 7.6448e-04, -3.0462e-04, -5.4579e-05, -3.1344e-05,  3.1650e-04,\n","        -2.0495e-04, -3.8429e-04, -2.4636e-04, -6.7907e-06, -4.7645e-04])\n","gradient values before mask reapp. tensor([ 7.5661e-04, -3.0492e-04, -6.6067e-05, -3.3920e-05,  3.0432e-04,\n","        -2.0577e-04, -3.8552e-04, -2.5286e-04, -9.1307e-06, -4.9356e-04])\n","gradient values before mask reapp. tensor([ 7.5828e-04, -3.0373e-04, -6.0810e-05, -3.2597e-05,  3.0698e-04,\n","        -2.0451e-04, -3.8356e-04, -2.4945e-04, -9.1186e-06, -4.8408e-04])\n","gradient values before mask reapp. tensor([ 7.5484e-04, -3.0325e-04, -6.4360e-05, -3.3131e-05,  3.0199e-04,\n","        -2.0433e-04, -3.8318e-04, -2.5117e-04, -1.0267e-05, -4.8828e-04])\n","gradient values before mask reapp. tensor([ 7.5586e-04, -3.0210e-04, -5.9962e-05, -3.1699e-05,  3.0431e-04,\n","        -2.0327e-04, -3.8131e-04, -2.4811e-04, -1.0173e-05, -4.7981e-04])\n","gradient values before mask reapp. tensor([ 7.6122e-04, -3.0012e-04, -4.7618e-05, -2.8359e-05,  3.1367e-04,\n","        -2.0107e-04, -3.7773e-04, -2.4025e-04, -8.9572e-06, -4.5835e-04])\n","gradient values before mask reapp. tensor([ 7.5025e-04, -3.0107e-04, -6.4961e-05, -3.2420e-05,  2.9628e-04,\n","        -2.0272e-04, -3.8029e-04, -2.5035e-04, -1.2109e-05, -4.8518e-04])\n","gradient values before mask reapp. tensor([ 7.6402e-04, -2.9749e-04, -3.6987e-05, -2.4799e-05,  3.2026e-04,\n","        -1.9860e-04, -3.7337e-04, -2.3286e-04, -8.3498e-06, -4.3777e-04])\n","gradient values before mask reapp. tensor([ 7.4988e-04, -2.9911e-04, -6.0438e-05, -3.0786e-05,  2.9693e-04,\n","        -2.0098e-04, -3.7729e-04, -2.4680e-04, -1.2625e-05, -4.7509e-04])\n","gradient values before mask reapp. tensor([ 7.6034e-04, -2.9614e-04, -3.8482e-05, -2.4835e-05,  3.1513e-04,\n","        -1.9759e-04, -3.7169e-04, -2.3304e-04, -9.8784e-06, -4.3776e-04])\n","gradient values before mask reapp. tensor([ 7.4661e-04, -2.9769e-04, -6.1210e-05, -3.0598e-05,  2.9249e-04,\n","        -1.9989e-04, -3.7546e-04, -2.4654e-04, -1.4028e-05, -4.7386e-04])\n","gradient values before mask reapp. tensor([ 7.5326e-04, -2.9545e-04, -4.6405e-05, -2.6418e-05,  3.0446e-04,\n","        -1.9748e-04, -3.7134e-04, -2.3710e-04, -1.2276e-05, -4.4815e-04])\n","gradient values before mask reapp. tensor([ 7.5050e-04, -2.9506e-04, -4.9074e-05, -2.7161e-05,  2.9999e-04,\n","        -1.9726e-04, -3.7105e-04, -2.3846e-04, -1.3385e-05, -4.5175e-04])\n","gradient values before mask reapp. tensor([ 7.5286e-04, -2.9352e-04, -4.1904e-05, -2.4864e-05,  3.0509e-04,\n","        -1.9579e-04, -3.6845e-04, -2.3360e-04, -1.2750e-05, -4.3834e-04])\n","gradient values before mask reapp. tensor([ 7.5367e-04, -2.9247e-04, -3.7837e-05, -2.3786e-05,  3.0697e-04,\n","        -1.9476e-04, -3.6674e-04, -2.3079e-04, -1.2716e-05, -4.3084e-04])\n","gradient values before mask reapp. tensor([ 7.4250e-04, -2.9344e-04, -5.5590e-05, -2.8137e-05,  2.8888e-04,\n","        -1.9641e-04, -3.6937e-04, -2.4118e-04, -1.6082e-05, -4.5858e-04])\n","gradient values before mask reapp. tensor([ 7.5815e-04, -2.8952e-04, -2.3872e-05, -1.9252e-05,  3.1700e-04,\n","        -1.9195e-04, -3.6169e-04, -2.2126e-04, -1.1369e-05, -4.0474e-04])\n","gradient values before mask reapp. tensor([ 7.1209e-04, -3.0018e-04, -1.2715e-04, -3.9492e-05,  1.7085e-04,\n","        -1.9504e-04, -3.8007e-04, -2.9306e-04, -5.8214e-05, -5.6089e-04])\n","gradient values before mask reapp. tensor([ 7.5943e-04, -2.8723e-04, -1.6071e-05, -1.6703e-05,  3.2078e-04,\n","        -1.8985e-04, -3.5803e-04, -2.1566e-04, -1.1260e-05, -3.8931e-04])\n","gradient values before mask reapp. tensor([ 7.4314e-04, -2.8936e-04, -4.3649e-05, -2.4085e-05,  2.9342e-04,\n","        -1.9279e-04, -3.6298e-04, -2.3223e-04, -1.6241e-05, -4.3402e-04])\n","gradient values before mask reapp. tensor([ 7.5568e-04, -2.8606e-04, -1.8146e-05, -1.7071e-05,  3.1515e-04,\n","        -1.8903e-04, -3.5666e-04, -2.1630e-04, -1.2862e-05, -3.9075e-04])\n","gradient values before mask reapp. tensor([ 7.1657e-04, -2.9514e-04, -1.0682e-04, -3.3111e-05,  1.8573e-04,\n","        -1.9083e-04, -3.7189e-04, -2.7841e-04, -5.5524e-05, -5.2251e-04])\n","gradient values before mask reapp. tensor([ 7.4968e-04, -2.8517e-04, -2.3538e-05, -1.8143e-05,  3.0693e-04,\n","        -1.8868e-04, -3.5587e-04, -2.1873e-04, -1.4682e-05, -3.9738e-04])\n","gradient values before mask reapp. tensor([ 7.4749e-04, -2.8447e-04, -2.4491e-05, -1.7992e-05,  3.0475e-04,\n","        -1.8829e-04, -3.5498e-04, -2.1876e-04, -1.5175e-05, -3.9740e-04])\n","gradient values before mask reapp. tensor([ 7.1646e-04, -2.9209e-04, -9.8218e-05, -3.0476e-05,  1.9038e-04,\n","        -1.8852e-04, -3.6729e-04, -2.7161e-04, -5.4703e-05, -5.0533e-04])\n","gradient values before mask reapp. tensor([ 7.4779e-04, -2.8241e-04, -1.8348e-05, -1.5888e-05,  3.0719e-04,\n","        -1.8648e-04, -3.5175e-04, -2.1413e-04, -1.5173e-05, -3.8487e-04])\n","gradient values before mask reapp. tensor([ 7.4661e-04, -2.8173e-04, -1.8170e-05, -1.5661e-05,  3.0577e-04,\n","        -1.8598e-04, -3.5082e-04, -2.1367e-04, -1.5682e-05, -3.8349e-04])\n","gradient values before mask reapp. tensor([ 7.2333e-04, -2.8755e-04, -7.5900e-05, -2.3629e-05,  2.0812e-04,\n","        -1.8444e-04, -3.5954e-04, -2.5615e-04, -5.1489e-05, -4.6460e-04])\n","gradient values before mask reapp. tensor([ 7.3996e-04, -2.8089e-04, -2.4430e-05, -1.6809e-05,  2.9699e-04,\n","        -1.8576e-04, -3.5014e-04, -2.1652e-04, -1.7484e-05, -3.9134e-04])\n","gradient values before mask reapp. tensor([ 7.4562e-04, -2.7881e-04, -1.1164e-05, -1.2836e-05,  3.0802e-04,\n","        -1.8363e-04, -3.4633e-04, -2.0788e-04, -1.5712e-05, -3.6796e-04])\n","gradient values before mask reapp. tensor([ 7.1790e-04, -2.8563e-04, -7.7342e-05, -2.4027e-05,  2.0337e-04,\n","        -1.8345e-04, -3.5725e-04, -2.5562e-04, -5.2272e-05, -4.6465e-04])\n","gradient values before mask reapp. tensor([ 7.4318e-04, -2.7722e-04, -9.7035e-06, -1.1938e-05,  3.0644e-04,\n","        -1.8250e-04, -3.4409e-04, -2.0602e-04, -1.6256e-05, -3.6319e-04])\n","gradient values before mask reapp. tensor([ 7.1637e-04, -2.8383e-04, -7.3999e-05, -2.2603e-05,  2.0481e-04,\n","        -1.8231e-04, -3.5462e-04, -2.5237e-04, -5.1842e-05, -4.5678e-04])\n","gradient values before mask reapp. tensor([ 7.4776e-04, -2.7442e-04,  4.4695e-06, -7.7006e-06,  3.1669e-04,\n","        -1.7980e-04, -3.3923e-04, -1.9640e-04, -1.4762e-05, -3.3756e-04])\n","gradient values before mask reapp. tensor([ 7.1795e-04, -2.8147e-04, -6.4984e-05, -1.9890e-05,  2.1101e-04,\n","        -1.8037e-04, -3.5085e-04, -2.4578e-04, -5.0718e-05, -4.3984e-04])\n","gradient values before mask reapp. tensor([ 7.4306e-04, -2.7339e-04,  1.1339e-06, -8.2100e-06,  3.1057e-04,\n","        -1.7928e-04, -3.3811e-04, -1.9761e-04, -1.6192e-05, -3.4092e-04])\n","gradient values before mask reapp. tensor([ 7.1899e-04, -2.7925e-04, -5.6887e-05, -1.7281e-05,  2.1663e-04,\n","        -1.7862e-04, -3.4731e-04, -2.3969e-04, -4.9592e-05, -4.2435e-04])\n","gradient values before mask reapp. tensor([ 7.4766e-04, -2.7061e-04,  1.5249e-05, -4.0066e-06,  3.2060e-04,\n","        -1.7659e-04, -3.3330e-04, -1.8808e-04, -1.4791e-05, -3.1550e-04])\n","gradient values before mask reapp. tensor([ 7.1030e-04, -2.7878e-04, -6.6469e-05, -1.9486e-05,  2.0619e-04,\n","        -1.7914e-04, -3.4745e-04, -2.4433e-04, -5.1095e-05, -4.3811e-04])\n","gradient values before mask reapp. tensor([ 7.2384e-04, -2.7535e-04, -3.8727e-05, -1.1946e-05,  2.3028e-04,\n","        -1.7522e-04, -3.4076e-04, -2.2695e-04, -4.7125e-05, -3.9143e-04])\n","gradient values before mask reapp. tensor([ 7.3957e-04, -2.6904e-04,  9.2957e-06, -4.6920e-06,  3.1125e-04,\n","        -1.7598e-04, -3.3160e-04, -1.9016e-04, -1.6665e-05, -3.2153e-04])\n","gradient values before mask reapp. tensor([ 7.1570e-04, -2.7481e-04, -4.7585e-05, -1.4040e-05,  2.2038e-04,\n","        -1.7562e-04, -3.4079e-04, -2.3123e-04, -4.8602e-05, -4.0411e-04])\n","gradient values before mask reapp. tensor([ 7.2240e-04, -2.7258e-04, -3.2201e-05, -9.5058e-06,  2.3374e-04,\n","        -1.7335e-04, -3.3662e-04, -2.2122e-04, -4.6261e-05, -3.7742e-04])\n","gradient values before mask reapp. tensor([ 7.1746e-04, -2.7250e-04, -3.8190e-05, -1.1273e-05,  2.2696e-04,\n","        -1.7371e-04, -3.3705e-04, -2.2441e-04, -4.7368e-05, -3.8683e-04])\n","gradient values before mask reapp. tensor([ 7.4720e-04, -2.6371e-04,  3.5142e-05,  3.3869e-06,  3.2996e-04,\n","        -1.7103e-04, -3.2243e-04, -1.7232e-04, -1.3805e-05, -2.7421e-04])\n","gradient values before mask reapp. tensor([ 7.0823e-04, -2.7214e-04, -4.8747e-05, -1.3680e-05,  2.1573e-04,\n","        -1.7437e-04, -3.3741e-04, -2.2963e-04, -4.8963e-05, -4.0214e-04])\n","gradient values before mask reapp. tensor([ 7.2652e-04, -2.6767e-04, -1.1852e-05, -3.2079e-06,  2.4867e-04,\n","        -1.6927e-04, -3.2858e-04, -2.0645e-04, -4.3409e-05, -3.3954e-04])\n","gradient values before mask reapp. tensor([ 7.1046e-04, -2.6966e-04, -3.8214e-05, -1.0179e-05,  2.2395e-04,\n","        -1.7235e-04, -3.3328e-04, -2.2192e-04, -4.7305e-05, -3.8227e-04])\n","gradient values before mask reapp. tensor([ 7.1744e-04, -2.6740e-04, -2.2440e-05, -5.7635e-06,  2.3733e-04,\n","        -1.6999e-04, -3.2906e-04, -2.1176e-04, -4.5056e-05, -3.5525e-04])\n","gradient values before mask reapp. tensor([ 7.1233e-04, -2.6735e-04, -2.8582e-05, -7.3032e-06,  2.3083e-04,\n","        -1.7044e-04, -3.2950e-04, -2.1494e-04, -4.5986e-05, -3.6458e-04])\n","gradient values before mask reapp. tensor([ 7.1642e-04, -2.6552e-04, -1.7835e-05, -4.0969e-06,  2.3980e-04,\n","        -1.6870e-04, -3.2623e-04, -2.0776e-04, -4.4416e-05, -3.4554e-04])\n","gradient values before mask reapp. tensor([ 7.0835e-04, -2.6601e-04, -2.9436e-05, -6.9647e-06,  2.2858e-04,\n","        -1.6990e-04, -3.2778e-04, -2.1418e-04, -4.6082e-05, -3.6370e-04])\n","gradient values before mask reapp. tensor([ 7.4100e-04, -2.5693e-04,  4.7906e-05,  8.8590e-06,  3.3155e-04,\n","        -1.6605e-04, -3.1227e-04, -1.6035e-04, -1.4030e-05, -2.4420e-04])\n","gradient values before mask reapp. tensor([ 7.0391e-04, -2.6477e-04, -3.1152e-05, -7.0865e-06,  2.2525e-04,\n","        -1.6940e-04, -3.2629e-04, -2.1404e-04, -4.6413e-05, -3.6452e-04])\n","gradient values before mask reapp. tensor([ 7.0790e-04, -2.6314e-04, -2.0905e-05, -4.3686e-06,  2.3344e-04,\n","        -1.6776e-04, -3.2335e-04, -2.0732e-04, -4.5031e-05, -3.4704e-04])\n","gradient values before mask reapp. tensor([ 7.0984e-04, -2.6169e-04, -1.3965e-05, -1.9645e-06,  2.3929e-04,\n","        -1.6655e-04, -3.2086e-04, -2.0237e-04, -4.3860e-05, -3.3403e-04])\n","gradient values before mask reapp. tensor([ 6.9798e-04, -2.6293e-04, -3.2777e-05, -7.2628e-06,  2.2084e-04,\n","        -1.6859e-04, -3.2406e-04, -2.1340e-04, -4.6891e-05, -3.6480e-04])\n","gradient values before mask reapp. tensor([ 7.1689e-04, -2.5844e-04,  5.2194e-06,  3.5436e-06,  2.5498e-04,\n","        -1.6345e-04, -3.1507e-04, -1.8952e-04, -4.1080e-05, -3.0045e-04])\n","gradient values before mask reapp. tensor([ 7.0001e-04, -2.6047e-04, -2.2369e-05, -3.5284e-06,  2.2940e-04,\n","        -1.6666e-04, -3.1989e-04, -2.0562e-04, -4.5043e-05, -3.4480e-04])\n","gradient values before mask reapp. tensor([ 7.0131e-04, -2.5934e-04, -1.7217e-05, -2.4355e-06,  2.3257e-04,\n","        -1.6561e-04, -3.1807e-04, -2.0213e-04, -4.4611e-05, -3.3602e-04])\n","gradient values before mask reapp. tensor([ 7.0426e-04, -2.5769e-04, -8.3467e-06,  4.7849e-07,  2.4016e-04,\n","        -1.6416e-04, -3.1518e-04, -1.9599e-04, -4.3143e-05, -3.1986e-04])\n","gradient values before mask reapp. tensor([ 6.9849e-04, -2.5780e-04, -1.5816e-05, -1.7162e-06,  2.3210e-04,\n","        -1.6474e-04, -3.1595e-04, -2.0006e-04, -4.4444e-05, -3.3179e-04])\n","gradient values before mask reapp. tensor([ 6.9719e-04, -2.5713e-04, -1.5236e-05, -1.1333e-06,  2.3224e-04,\n","        -1.6445e-04, -3.1497e-04, -1.9907e-04, -4.4213e-05, -3.2961e-04])\n","gradient values before mask reapp. tensor([ 7.0082e-04, -2.5529e-04, -4.8733e-06,  1.8493e-06,  2.4065e-04,\n","        -1.6267e-04, -3.1174e-04, -1.9209e-04, -4.2720e-05, -3.1134e-04])\n","gradient values before mask reapp. tensor([ 6.9361e-04, -2.5573e-04, -1.5321e-05, -8.2662e-07,  2.3038e-04,\n","        -1.6376e-04, -3.1316e-04, -1.9793e-04, -4.4302e-05, -3.2782e-04])\n","gradient values before mask reapp. tensor([ 6.9728e-04, -2.5407e-04, -5.5059e-06,  1.9455e-06,  2.3831e-04,\n","        -1.6216e-04, -3.1021e-04, -1.9141e-04, -4.2933e-05, -3.1073e-04])\n","gradient values before mask reapp. tensor([ 6.9370e-04, -2.5366e-04, -8.6051e-06,  1.5069e-06,  2.3497e-04,\n","        -1.6223e-04, -3.0989e-04, -1.9259e-04, -4.3249e-05, -3.1455e-04])\n","gradient values before mask reapp. tensor([ 6.8857e-04, -2.5378e-04, -1.5419e-05, -6.0683e-07,  2.2740e-04,\n","        -1.6278e-04, -3.1065e-04, -1.9638e-04, -4.4549e-05, -3.2563e-04])\n","gradient values before mask reapp. tensor([ 6.9780e-04, -2.5089e-04,  5.4487e-06,  5.7456e-06,  2.4613e-04,\n","        -1.5977e-04, -3.0512e-04, -1.8280e-04, -4.1148e-05, -2.8928e-04])\n","gradient values before mask reapp. tensor([ 6.8654e-04, -2.5205e-04, -1.2441e-05,  8.3109e-07,  2.2877e-04,\n","        -1.6173e-04, -3.0810e-04, -1.9324e-04, -4.3982e-05, -3.1832e-04])\n","gradient values before mask reapp. tensor([ 6.9157e-04, -2.5023e-04, -1.0533e-07,  4.4678e-06,  2.3942e-04,\n","        -1.5991e-04, -3.0468e-04, -1.8510e-04, -4.2047e-05, -2.9690e-04])\n","gradient values before mask reapp. tensor([ 6.8406e-04, -2.5055e-04, -1.0559e-05,  1.5243e-06,  2.2861e-04,\n","        -1.6085e-04, -3.0600e-04, -1.9095e-04, -4.3800e-05, -3.1363e-04])\n","gradient values before mask reapp. tensor([ 6.8037e-04, -2.5031e-04, -1.4445e-05,  7.9963e-07,  2.2455e-04,\n","        -1.6108e-04, -3.0597e-04, -1.9273e-04, -4.4303e-05, -3.1894e-04])\n","gradient values before mask reapp. tensor([ 6.8819e-04, -2.4782e-04,  3.3557e-06,  5.6283e-06,  2.3958e-04,\n","        -1.5839e-04, -3.0130e-04, -1.8131e-04, -4.1763e-05, -2.8871e-04])\n","gradient values before mask reapp. tensor([ 6.8527e-04, -2.4739e-04,  9.5325e-07,  5.4436e-06,  2.3697e-04,\n","        -1.5844e-04, -3.0091e-04, -1.8214e-04, -4.1998e-05, -2.9138e-04])\n","gradient values before mask reapp. tensor([ 6.8304e-04, -2.4695e-04, -2.6049e-07,  4.8030e-06,  2.3445e-04,\n","        -1.5828e-04, -3.0048e-04, -1.8248e-04, -4.2447e-05, -2.9328e-04])\n","gradient values before mask reapp. tensor([ 6.7167e-04, -2.4793e-04, -1.7705e-05,  5.7883e-07,  2.1819e-04,\n","        -1.6018e-04, -3.0313e-04, -1.9239e-04, -4.4871e-05, -3.2065e-04])\n","gradient values before mask reapp. tensor([ 6.8475e-04, -2.4465e-04,  9.3647e-06,  7.7334e-06,  2.4153e-04,\n","        -1.5637e-04, -2.9668e-04, -1.7542e-04, -4.1033e-05, -2.7548e-04])\n","gradient values before mask reapp. tensor([ 6.7792e-04, -2.4486e-04, -6.3239e-08,  5.7102e-06,  2.3261e-04,\n","        -1.5727e-04, -2.9767e-04, -1.8048e-04, -4.2289e-05, -2.8956e-04])\n","gradient values before mask reapp. tensor([ 6.7599e-04, -2.4440e-04, -6.8886e-07,  5.2961e-06,  2.3078e-04,\n","        -1.5709e-04, -2.9716e-04, -1.8045e-04, -4.2569e-05, -2.9050e-04])\n","gradient values before mask reapp. tensor([ 6.7890e-04, -2.4273e-04,  8.1120e-06,  8.1504e-06,  2.3820e-04,\n","        -1.5560e-04, -2.9426e-04, -1.7437e-04, -4.1166e-05, -2.7444e-04])\n","gradient values before mask reapp. tensor([ 6.6871e-04, -2.4378e-04, -7.8572e-06,  3.7168e-06,  2.2265e-04,\n","        -1.5737e-04, -2.9692e-04, -1.8366e-04, -4.3672e-05, -3.0046e-04])\n","gradient values before mask reapp. tensor([ 6.8539e-04, -2.3955e-04,  2.6531e-05,  1.3740e-05,  2.5367e-04,\n","        -1.5262e-04, -2.8855e-04, -1.6186e-04, -3.8284e-05, -2.4170e-04])\n","gradient values before mask reapp. tensor([ 6.6403e-04, -2.4259e-04, -9.6675e-06,  3.6560e-06,  2.1943e-04,\n","        -1.5696e-04, -2.9550e-04, -1.8350e-04, -4.3875e-05, -3.0152e-04])\n","gradient values before mask reapp. tensor([ 6.7237e-04, -2.4011e-04,  8.6522e-06,  8.9628e-06,  2.3552e-04,\n","        -1.5433e-04, -2.9076e-04, -1.7173e-04, -4.1089e-05, -2.7000e-04])\n","gradient values before mask reapp. tensor([ 6.5980e-04, -2.4159e-04, -1.1774e-05,  3.0266e-06,  2.1546e-04,\n","        -1.5659e-04, -2.9440e-04, -1.8384e-04, -4.4455e-05, -3.0381e-04])\n","gradient values before mask reapp. tensor([ 6.7763e-04, -2.3711e-04,  2.4791e-05,  1.3701e-05,  2.4847e-04,\n","        -1.5157e-04, -2.8555e-04, -1.6071e-04, -3.8731e-05, -2.4136e-04])\n","gradient values before mask reapp. tensor([ 6.6108e-04, -2.3934e-04, -2.8363e-06,  6.0256e-06,  2.2224e-04,\n","        -1.5484e-04, -2.9070e-04, -1.7712e-04, -4.3008e-05, -2.8681e-04])\n","gradient values before mask reapp. tensor([ 6.6678e-04, -2.3728e-04,  1.0853e-05,  1.0054e-05,  2.3401e-04,\n","        -1.5277e-04, -2.8689e-04, -1.6813e-04, -4.0924e-05, -2.6303e-04])\n","gradient values before mask reapp. tensor([ 6.6023e-04, -2.3765e-04,  1.8751e-06,  7.3722e-06,  2.2463e-04,\n","        -1.5364e-04, -2.8812e-04, -1.7316e-04, -4.2419e-05, -2.7773e-04])\n","gradient values before mask reapp. tensor([ 6.6122e-04, -2.3647e-04,  6.4869e-06,  9.0299e-06,  2.2829e-04,\n","        -1.5271e-04, -2.8621e-04, -1.6977e-04, -4.1692e-05, -2.6875e-04])\n","gradient values before mask reapp. tensor([ 6.5779e-04, -2.3628e-04,  3.0231e-06,  7.6740e-06,  2.2362e-04,\n","        -1.5281e-04, -2.8629e-04, -1.7153e-04, -4.2528e-05, -2.7451e-04])\n","gradient values before mask reapp. tensor([ 6.6281e-04, -2.3431e-04,  1.5733e-05,  1.1776e-05,  2.3503e-04,\n","        -1.5095e-04, -2.8261e-04, -1.6298e-04, -4.0355e-05, -2.5187e-04])\n","gradient values before mask reapp. tensor([ 6.5448e-04, -2.3488e-04,  3.6508e-06,  8.2456e-06,  2.2266e-04,\n","        -1.5213e-04, -2.8439e-04, -1.6989e-04, -4.2380e-05, -2.7160e-04])\n","gradient values before mask reapp. tensor([ 6.5548e-04, -2.3384e-04,  8.1871e-06,  9.7608e-06,  2.2628e-04,\n","        -1.5129e-04, -2.8262e-04, -1.6657e-04, -4.1659e-05, -2.6300e-04])\n","gradient values before mask reapp. tensor([ 6.6021e-04, -2.3188e-04,  2.0476e-05,  1.3077e-05,  2.3621e-04,\n","        -1.4929e-04, -2.7912e-04, -1.5850e-04, -3.9941e-05, -2.4200e-04])\n","gradient values before mask reapp. tensor([ 6.5360e-04, -2.3224e-04,  1.1191e-05,  1.0786e-05,  2.2721e-04,\n","        -1.5028e-04, -2.8031e-04, -1.6361e-04, -4.1279e-05, -2.5646e-04])\n","gradient values before mask reapp. tensor([ 6.5206e-04, -2.3153e-04,  1.1631e-05,  1.0975e-05,  2.2662e-04,\n","        -1.4991e-04, -2.7937e-04, -1.6277e-04, -4.1281e-05, -2.5504e-04])\n","gradient values before mask reapp. tensor([ 6.4491e-04, -2.3195e-04,  1.3847e-06,  8.5490e-06,  2.1691e-04,\n","        -1.5095e-04, -2.8069e-04, -1.6840e-04, -4.2675e-05, -2.7085e-04])\n","gradient values before mask reapp. tensor([ 6.5655e-04, -2.2879e-04,  2.6242e-05,  1.5223e-05,  2.3826e-04,\n","        -1.4740e-04, -2.7458e-04, -1.5270e-04, -3.9118e-05, -2.2908e-04])\n","gradient values before mask reapp. tensor([ 6.5160e-04, -2.2851e-04,  2.1142e-05,  1.4711e-05,  2.3365e-04,\n","        -1.4779e-04, -2.7449e-04, -1.5485e-04, -3.9430e-05, -2.3549e-04])\n","gradient values before mask reapp. tensor([ 6.4923e-04, -2.2807e-04,  1.9882e-05,  1.4086e-05,  2.3108e-04,\n","        -1.4764e-04, -2.7399e-04, -1.5514e-04, -3.9855e-05, -2.3735e-04])\n","gradient values before mask reapp. tensor([ 6.5915e-04, -2.2496e-04,  4.2600e-05,  2.1719e-05,  2.5229e-04,\n","        -1.4447e-04, -2.6769e-04, -1.3994e-04, -3.5673e-05, -1.9669e-04])\n","gradient values before mask reapp. tensor([ 6.5380e-04, -2.2467e-04,  3.7353e-05,  2.1289e-05,  2.4745e-04,\n","        -1.4483e-04, -2.6740e-04, -1.4191e-04, -3.5887e-05, -2.0306e-04])\n","gradient values before mask reapp. tensor([ 6.5762e-04, -2.2273e-04,  4.8721e-05,  2.5401e-05,  2.5775e-04,\n","        -1.4305e-04, -2.6360e-04, -1.3378e-04, -3.3639e-05, -1.8184e-04])\n","gradient values before mask reapp. tensor([ 6.5600e-04, -2.2179e-04,  5.0167e-05,  2.7072e-05,  2.5966e-04,\n","        -1.4270e-04, -2.6195e-04, -1.3163e-04, -3.2699e-05, -1.7689e-04])\n","gradient values before mask reapp. tensor([ 6.4384e-04, -2.2309e-04,  3.1080e-05,  2.1665e-05,  2.4101e-04,\n","        -1.4479e-04, -2.6524e-04, -1.4281e-04, -3.5715e-05, -2.0822e-04])\n","gradient values before mask reapp. tensor([ 6.4399e-04, -2.2223e-04,  3.4295e-05,  2.2643e-05,  2.4321e-04,\n","        -1.4415e-04, -2.6383e-04, -1.4032e-04, -3.5233e-05, -2.0219e-04])\n","gradient values before mask reapp. tensor([ 6.3170e-04, -2.2357e-04,  1.4865e-05,  1.7014e-05,  2.2403e-04,\n","        -1.4622e-04, -2.6720e-04, -1.5173e-04, -3.8388e-05, -2.3428e-04])\n","gradient values before mask reapp. tensor([ 6.4134e-04, -2.2093e-04,  3.5422e-05,  2.3055e-05,  2.4248e-04,\n","        -1.4339e-04, -2.6205e-04, -1.3860e-04, -3.5161e-05, -1.9895e-04])\n","gradient values before mask reapp. tensor([ 6.3556e-04, -2.2089e-04,  2.8566e-05,  2.1501e-05,  2.3559e-04,\n","        -1.4405e-04, -2.6253e-04, -1.4201e-04, -3.6093e-05, -2.0937e-04])\n","gradient values before mask reapp. tensor([ 6.3085e-04, -2.2081e-04,  2.3121e-05,  2.0312e-05,  2.3009e-04,\n","        -1.4447e-04, -2.6284e-04, -1.4470e-04, -3.6801e-05, -2.1732e-04])\n","gradient values before mask reapp. tensor([ 6.2445e-04, -2.2124e-04,  1.4071e-05,  1.7260e-05,  2.2016e-04,\n","        -1.4532e-04, -2.6422e-04, -1.4995e-04, -3.8529e-05, -2.3276e-04])\n","gradient values before mask reapp. tensor([ 6.3082e-04, -2.1914e-04,  2.8635e-05,  2.1543e-05,  2.3282e-04,\n","        -1.4316e-04, -2.6031e-04, -1.4053e-04, -3.6326e-05, -2.0748e-04])\n","gradient values before mask reapp. tensor([ 6.1981e-04, -2.2027e-04,  1.1545e-05,  1.6740e-05,  2.1613e-04,\n","        -1.4504e-04, -2.6321e-04, -1.5048e-04, -3.9006e-05, -2.3547e-04])\n","gradient values before mask reapp. tensor([ 6.2277e-04, -2.1889e-04,  1.9588e-05,  1.8793e-05,  2.2229e-04,\n","        -1.4369e-04, -2.6082e-04, -1.4520e-04, -3.8013e-05, -2.2175e-04])\n","gradient values before mask reapp. tensor([ 6.2232e-04, -2.1813e-04,  2.1788e-05,  1.9495e-05,  2.2355e-04,\n","        -1.4315e-04, -2.5961e-04, -1.4331e-04, -3.7668e-05, -2.1741e-04])\n","gradient values before mask reapp. tensor([ 6.2291e-04, -2.1704e-04,  2.6300e-05,  2.1105e-05,  2.2723e-04,\n","        -1.4240e-04, -2.5777e-04, -1.3980e-04, -3.6812e-05, -2.0900e-04])\n","gradient values before mask reapp. tensor([ 6.2044e-04, -2.1649e-04,  2.5090e-05,  2.1133e-05,  2.2555e-04,\n","        -1.4224e-04, -2.5709e-04, -1.3985e-04, -3.6899e-05, -2.0978e-04])\n","gradient values before mask reapp. tensor([ 6.1704e-04, -2.1640e-04,  2.1292e-05,  1.9557e-05,  2.2049e-04,\n","        -1.4241e-04, -2.5739e-04, -1.4196e-04, -3.7834e-05, -2.1637e-04])\n","gradient values before mask reapp. tensor([ 6.1564e-04, -2.1563e-04,  2.2205e-05,  2.0456e-05,  2.2123e-04,\n","        -1.4201e-04, -2.5618e-04, -1.4058e-04, -3.7394e-05, -2.1320e-04])\n","gradient values before mask reapp. tensor([ 6.1603e-04, -2.1478e-04,  2.5409e-05,  2.0801e-05,  2.2245e-04,\n","        -1.4127e-04, -2.5496e-04, -1.3844e-04, -3.7345e-05, -2.0811e-04])\n","gradient values before mask reapp. tensor([ 6.1159e-04, -2.1466e-04,  2.0478e-05,  1.9797e-05,  2.1746e-04,\n","        -1.4163e-04, -2.5516e-04, -1.4079e-04, -3.7942e-05, -2.1522e-04])\n","gradient values before mask reapp. tensor([ 6.1341e-04, -2.1370e-04,  2.6059e-05,  2.0659e-05,  2.2086e-04,\n","        -1.4065e-04, -2.5355e-04, -1.3722e-04, -3.7531e-05, -2.0656e-04])\n","gradient values before mask reapp. tensor([ 6.1369e-04, -2.1234e-04,  3.0931e-05,  2.3243e-05,  2.2587e-04,\n","        -1.3985e-04, -2.5121e-04, -1.3306e-04, -3.6192e-05, -1.9600e-04])\n","gradient values before mask reapp. tensor([ 6.0858e-04, -2.1266e-04,  2.3843e-05,  2.0488e-05,  2.1751e-04,\n","        -1.4046e-04, -2.5233e-04, -1.3727e-04, -3.7752e-05, -2.0858e-04])\n","gradient values before mask reapp. tensor([ 6.1288e-04, -2.1077e-04,  3.5173e-05,  2.4371e-05,  2.2778e-04,\n","        -1.3869e-04, -2.4886e-04, -1.2955e-04, -3.5743e-05, -1.8785e-04])\n","gradient values before mask reapp. tensor([ 6.0975e-04, -2.1054e-04,  3.2202e-05,  2.3317e-05,  2.2383e-04,\n","        -1.3881e-04, -2.4888e-04, -1.3100e-04, -3.6394e-05, -1.9261e-04])\n","gradient values before mask reapp. tensor([ 6.0449e-04, -2.1061e-04,  2.5694e-05,  2.1513e-05,  2.1687e-04,\n","        -1.3932e-04, -2.4945e-04, -1.3440e-04, -3.7442e-05, -2.0290e-04])\n","gradient values before mask reapp. tensor([ 6.1325e-04, -2.0825e-04,  4.4383e-05,  2.6744e-05,  2.3328e-04,\n","        -1.3675e-04, -2.4487e-04, -1.2255e-04, -3.4625e-05, -1.7125e-04])\n","gradient values before mask reapp. tensor([ 5.9931e-04, -2.0993e-04,  2.1868e-05,  2.0255e-05,  2.1130e-04,\n","        -1.3930e-04, -2.4897e-04, -1.3588e-04, -3.8247e-05, -2.0863e-04])\n","gradient values before mask reapp. tensor([ 6.1797e-04, -2.0559e-04,  5.9287e-05,  3.1278e-05,  2.4566e-04,\n","        -1.3441e-04, -2.4011e-04, -1.1220e-04, -3.2241e-05, -1.4496e-04])\n","gradient values before mask reapp. tensor([ 5.9632e-04, -2.0854e-04,  2.3142e-05,  2.1353e-05,  2.1159e-04,\n","        -1.3872e-04, -2.4695e-04, -1.3367e-04, -3.7722e-05, -2.0447e-04])\n","gradient values before mask reapp. tensor([ 6.1060e-04, -2.0523e-04,  5.1577e-05,  2.9081e-05,  2.3665e-04,\n","        -1.3482e-04, -2.4036e-04, -1.1600e-04, -3.3581e-05, -1.5680e-04])\n","gradient values before mask reapp. tensor([ 5.9594e-04, -2.0696e-04,  2.8047e-05,  2.2430e-05,  2.1386e-04,\n","        -1.3750e-04, -2.4454e-04, -1.2982e-04, -3.7306e-05, -1.9561e-04])\n","gradient values before mask reapp. tensor([ 6.0599e-04, -2.0439e-04,  4.9027e-05,  2.8380e-05,  2.3251e-04,\n","        -1.3464e-04, -2.3949e-04, -1.1657e-04, -3.4064e-05, -1.6007e-04])\n","gradient values before mask reapp. tensor([ 5.9079e-04, -2.0625e-04,  2.4397e-05,  2.1355e-05,  2.0866e-04,\n","        -1.3745e-04, -2.4395e-04, -1.3111e-04, -3.7993e-05, -2.0081e-04])\n","gradient values before mask reapp. tensor([ 6.0346e-04, -2.0320e-04,  4.9969e-05,  2.8457e-05,  2.3129e-04,\n","        -1.3395e-04, -2.3796e-04, -1.1516e-04, -3.4179e-05, -1.5774e-04])\n","gradient values before mask reapp. tensor([ 5.8879e-04, -2.0501e-04,  2.6192e-05,  2.1532e-05,  2.0806e-04,\n","        -1.3668e-04, -2.4231e-04, -1.2925e-04, -3.8060e-05, -1.9730e-04])\n","gradient values before mask reapp. tensor([ 6.0624e-04, -2.0092e-04,  6.1267e-05,  3.1854e-05,  2.4022e-04,\n","        -1.3209e-04, -2.3402e-04, -1.0706e-04, -3.2425e-05, -1.3767e-04])\n","gradient values before mask reapp. tensor([ 5.8592e-04, -2.0363e-04,  2.7606e-05,  2.2637e-05,  2.0850e-04,\n","        -1.3610e-04, -2.4031e-04, -1.2699e-04, -3.7523e-05, -1.9300e-04])\n","gradient values before mask reapp. tensor([ 5.9876e-04, -2.0062e-04,  5.3247e-05,  2.9471e-05,  2.3084e-04,\n","        -1.3253e-04, -2.3438e-04, -1.1111e-04, -3.3871e-05, -1.5018e-04])\n","gradient values before mask reapp. tensor([ 5.8070e-04, -2.0306e-04,  2.3503e-05,  2.1110e-05,  2.0251e-04,\n","        -1.3611e-04, -2.3997e-04, -1.2870e-04, -3.8455e-05, -1.9951e-04])\n","gradient values before mask reapp. tensor([ 5.9424e-04, -1.9980e-04,  5.0558e-05,  2.8577e-05,  2.2638e-04,\n","        -1.3231e-04, -2.3363e-04, -1.1191e-04, -3.4493e-05, -1.5384e-04])\n","gradient values before mask reapp. tensor([ 5.8116e-04, -2.0141e-04,  2.9756e-05,  2.2593e-05,  2.0619e-04,\n","        -1.3478e-04, -2.3739e-04, -1.2409e-04, -3.7770e-05, -1.8850e-04])\n","gradient values before mask reapp. tensor([ 5.8634e-04, -1.9968e-04,  4.1617e-05,  2.5622e-05,  2.1578e-04,\n","        -1.3294e-04, -2.3431e-04, -1.1662e-04, -3.6254e-05, -1.6852e-04])\n","gradient values before mask reapp. tensor([ 5.8205e-04, -1.9963e-04,  3.6604e-05,  2.4073e-05,  2.1003e-04,\n","        -1.3329e-04, -2.3471e-04, -1.1926e-04, -3.7188e-05, -1.7661e-04])\n","gradient values before mask reapp. tensor([ 5.8423e-04, -1.9846e-04,  4.3197e-05,  2.5863e-05,  2.1520e-04,\n","        -1.3218e-04, -2.3270e-04, -1.1485e-04, -3.6253e-05, -1.6518e-04])\n","gradient values before mask reapp. tensor([ 5.8772e-04, -1.9674e-04,  5.3512e-05,  2.9414e-05,  2.2465e-04,\n","        -1.3078e-04, -2.2947e-04, -1.0756e-04, -3.4331e-05, -1.4670e-04])\n","gradient values before mask reapp. tensor([ 5.8470e-04, -1.9658e-04,  5.0531e-05,  2.8566e-05,  2.2112e-04,\n","        -1.3088e-04, -2.2954e-04, -1.0900e-04, -3.4788e-05, -1.5121e-04])\n","gradient values before mask reapp. tensor([ 5.8002e-04, -1.9648e-04,  4.5133e-05,  2.7083e-05,  2.1519e-04,\n","        -1.3129e-04, -2.2990e-04, -1.1178e-04, -3.5713e-05, -1.5961e-04])\n","gradient values before mask reapp. tensor([ 5.8294e-04, -1.9533e-04,  5.2740e-05,  2.8822e-05,  2.2092e-04,\n","        -1.3007e-04, -2.2785e-04, -1.0690e-04, -3.4795e-05, -1.4710e-04])\n","gradient values before mask reapp. tensor([ 5.7399e-04, -1.9597e-04,  3.9679e-05,  2.5473e-05,  2.0832e-04,\n","        -1.3143e-04, -2.2975e-04, -1.1425e-04, -3.6699e-05, -1.6782e-04])\n","gradient values before mask reapp. tensor([ 5.7330e-04, -1.9567e-04,  4.0342e-05,  2.4563e-05,  2.0680e-04,\n","        -1.3113e-04, -2.2940e-04, -1.1382e-04, -3.7229e-05, -1.6813e-04])\n","gradient values before mask reapp. tensor([ 5.7832e-04, -1.9358e-04,  5.3003e-05,  2.9320e-05,  2.1905e-04,\n","        -1.2913e-04, -2.2557e-04, -1.0518e-04, -3.4661e-05, -1.4444e-04])\n","gradient values before mask reapp. tensor([ 5.6841e-04, -1.9494e-04,  3.7066e-05,  2.3691e-05,  2.0214e-04,\n","        -1.3106e-04, -2.2878e-04, -1.1491e-04, -3.7784e-05, -1.7260e-04])\n","gradient values before mask reapp. tensor([ 5.7309e-04, -1.9304e-04,  4.8702e-05,  2.7558e-05,  2.1261e-04,\n","        -1.2913e-04, -2.2533e-04, -1.0712e-04, -3.5768e-05, -1.5152e-04])\n","gradient values before mask reapp. tensor([ 5.6827e-04, -1.9338e-04,  4.2157e-05,  2.4730e-05,  2.0455e-04,\n","        -1.2984e-04, -2.2647e-04, -1.1107e-04, -3.7377e-05, -1.6369e-04])\n","gradient values before mask reapp. tensor([ 5.8006e-04, -1.8997e-04,  6.7708e-05,  3.3189e-05,  2.2873e-04,\n","        -1.2635e-04, -2.1978e-04, -9.4318e-05, -3.2804e-05, -1.1859e-04])\n","gradient values before mask reapp. tensor([ 5.7146e-04, -1.9105e-04,  5.4340e-05,  2.8591e-05,  2.1469e-04,\n","        -1.2793e-04, -2.2234e-04, -1.0232e-04, -3.5294e-05, -1.4195e-04])\n","gradient values before mask reapp. tensor([ 5.7141e-04, -1.8991e-04,  5.7735e-05,  3.0546e-05,  2.1806e-04,\n","        -1.2717e-04, -2.2056e-04, -9.9423e-05, -3.4296e-05, -1.3415e-04])\n","gradient values before mask reapp. tensor([ 5.6342e-04, -1.9088e-04,  4.5338e-05,  2.6080e-05,  2.0469e-04,\n","        -1.2856e-04, -2.2293e-04, -1.0692e-04, -3.6751e-05, -1.5602e-04])\n","gradient values before mask reapp. tensor([ 5.7096e-04, -1.8849e-04,  6.2261e-05,  3.1516e-05,  2.2018e-04,\n","        -1.2611e-04, -2.1842e-04, -9.5880e-05, -3.3850e-05, -1.2619e-04])\n","gradient values before mask reapp. tensor([ 5.6104e-04, -1.8977e-04,  4.6328e-05,  2.5952e-05,  2.0330e-04,\n","        -1.2790e-04, -2.2154e-04, -1.0559e-04, -3.6971e-05, -1.5405e-04])\n","gradient values before mask reapp. tensor([ 5.6729e-04, -1.8757e-04,  6.1028e-05,  3.1010e-05,  2.1711e-04,\n","        -1.2574e-04, -2.1743e-04, -9.5815e-05, -3.4236e-05, -1.2755e-04])\n","gradient values before mask reapp. tensor([ 5.5619e-04, -1.8916e-04,  4.2778e-05,  2.4548e-05,  1.9780e-04,\n","        -1.2784e-04, -2.2114e-04, -1.0703e-04, -3.7844e-05, -1.5972e-04])\n","gradient values before mask reapp. tensor([ 5.6702e-04, -1.8607e-04,  6.5898e-05,  3.2048e-05,  2.1943e-04,\n","        -1.2457e-04, -2.1518e-04, -9.2081e-05, -3.3801e-05, -1.1897e-04])\n","gradient values before mask reapp. tensor([ 5.5288e-04, -1.8819e-04,  4.2294e-05,  2.4368e-05,  1.9561e-04,\n","        -1.2746e-04, -2.2000e-04, -1.0646e-04, -3.8016e-05, -1.5978e-04])\n","gradient values before mask reapp. tensor([ 5.6339e-04, -1.8517e-04,  6.4740e-05,  3.1569e-05,  2.1647e-04,\n","        -1.2420e-04, -2.1419e-04, -9.1963e-05, -3.4152e-05, -1.2023e-04])\n","gradient values before mask reapp. tensor([ 5.6057e-04, -1.8493e-04,  6.2822e-05,  3.0632e-05,  2.1342e-04,\n","        -1.2448e-04, -2.1404e-04, -9.2601e-05, -3.4688e-05, -1.2399e-04])\n","gradient values before mask reapp. tensor([ 5.6887e-04, -1.8244e-04,  8.1147e-05,  3.6631e-05,  2.3057e-04,\n","        -1.2188e-04, -2.0924e-04, -8.0644e-05, -3.1393e-05, -9.1602e-05])\n","gradient values before mask reapp. tensor([ 5.5416e-04, -1.8463e-04,  5.6546e-05,  2.8770e-05,  2.0592e-04,\n","        -1.2482e-04, -2.1420e-04, -9.5580e-05, -3.5710e-05, -1.3387e-04])\n","gradient values before mask reapp. tensor([ 5.6184e-04, -1.8215e-04,  7.3864e-05,  3.4474e-05,  2.2199e-04,\n","        -1.2232e-04, -2.0955e-04, -8.4253e-05, -3.2659e-05, -1.0309e-04])\n","gradient values before mask reapp. tensor([ 5.4934e-04, -1.8401e-04,  5.3097e-05,  2.7419e-05,  2.0056e-04,\n","        -1.2477e-04, -2.1379e-04, -9.6936e-05, -3.6540e-05, -1.3937e-04])\n","gradient values before mask reapp. tensor([ 5.5957e-04, -1.8101e-04,  7.5167e-05,  3.4647e-05,  2.2124e-04,\n","        -1.2164e-04, -2.0805e-04, -8.2640e-05, -3.2661e-05, -1.0031e-04])\n","gradient values before mask reapp. tensor([ 5.4247e-04, -1.8365e-04,  4.6195e-05,  2.5534e-05,  1.9256e-04,\n","        -1.2517e-04, -2.1398e-04, -1.0026e-04, -3.7641e-05, -1.4998e-04])\n","gradient values before mask reapp. tensor([ 5.5776e-04, -1.7987e-04,  7.7280e-05,  3.4972e-05,  2.2129e-04,\n","        -1.2093e-04, -2.0644e-04, -8.0525e-05, -3.2524e-05, -9.6381e-05])\n","gradient values before mask reapp. tensor([ 5.4405e-04, -1.8182e-04,  5.4542e-05,  2.7569e-05,  1.9818e-04,\n","        -1.2365e-04, -2.1101e-04, -9.4377e-05, -3.6648e-05, -1.3563e-04])\n","gradient values before mask reapp. tensor([ 5.5368e-04, -1.7905e-04,  7.5359e-05,  3.4319e-05,  2.1770e-04,\n","        -1.2067e-04, -2.0561e-04, -8.0849e-05, -3.2958e-05, -9.8891e-05])\n","gradient values before mask reapp. tensor([ 5.3876e-04, -1.8130e-04,  5.0232e-05,  2.6070e-05,  1.9218e-04,\n","        -1.2373e-04, -2.1079e-04, -9.6241e-05, -3.7536e-05, -1.4249e-04])\n","gradient values before mask reapp. tensor([ 5.5166e-04, -1.7788e-04,  7.7040e-05,  3.4550e-05,  2.1725e-04,\n","        -1.1995e-04, -2.0406e-04, -7.9035e-05, -3.2929e-05, -9.5585e-05])\n","gradient values before mask reapp. tensor([ 5.3444e-04, -1.8054e-04,  4.7799e-05,  2.5258e-05,  1.8808e-04,\n","        -1.2357e-04, -2.1011e-04, -9.6912e-05, -3.8063e-05, -1.4593e-04])\n","gradient values before mask reapp. tensor([ 5.6060e-04, -1.7449e-04,  9.9682e-05,  4.1310e-05,  2.3695e-04,\n","        -1.1680e-04, -1.9777e-04, -6.3957e-05, -2.9305e-05, -5.6593e-05])\n","gradient values before mask reapp. tensor([ 5.2801e-04, -1.7970e-04,  4.3318e-05,  2.5267e-05,  1.8389e-04,\n","        -1.2390e-04, -2.0925e-04, -9.7968e-05, -3.8031e-05, -1.5093e-04])\n","gradient values before mask reapp. tensor([ 5.5590e-04, -1.7404e-04,  9.6121e-05,  4.0137e-05,  2.3199e-04,\n","        -1.1682e-04, -1.9753e-04, -6.5379e-05, -2.9892e-05, -6.2195e-05])\n","gradient values before mask reapp. tensor([ 5.2255e-04, -1.7915e-04,  3.8806e-05,  2.3843e-05,  1.7787e-04,\n","        -1.2399e-04, -2.0901e-04, -9.9908e-05, -3.8883e-05, -1.5786e-04])\n","gradient values before mask reapp. tensor([ 5.5312e-04, -1.7299e-04,  9.6526e-05,  4.0134e-05,  2.3054e-04,\n","        -1.1630e-04, -1.9623e-04, -6.4296e-05, -2.9979e-05, -6.0878e-05])\n","gradient values before mask reapp. tensor([ 5.2031e-04, -1.7803e-04,  4.0250e-05,  2.4099e-05,  1.7741e-04,\n","        -1.2339e-04, -2.0751e-04, -9.8176e-05, -3.8806e-05, -1.5491e-04])\n","gradient values before mask reapp. tensor([ 5.4983e-04, -1.7216e-04,  9.5839e-05,  3.9690e-05,  2.2806e-04,\n","        -1.1597e-04, -1.9527e-04, -6.3923e-05, -3.0244e-05, -6.1687e-05])\n","gradient values before mask reapp. tensor([ 5.1486e-04, -1.7750e-04,  3.5724e-05,  2.2695e-05,  1.7143e-04,\n","        -1.2349e-04, -2.0729e-04, -1.0013e-04, -3.9641e-05, -1.6186e-04])\n","gradient values before mask reapp. tensor([ 5.4688e-04, -1.7118e-04,  9.5797e-05,  3.9485e-05,  2.2611e-04,\n","        -1.1548e-04, -1.9411e-04, -6.3172e-05, -3.0443e-05, -6.1232e-05])\n","gradient values before mask reapp. tensor([ 5.1169e-04, -1.7657e-04,  3.5279e-05,  2.2354e-05,  1.6910e-04,\n","        -1.2307e-04, -2.0624e-04, -9.9628e-05, -3.9907e-05, -1.6214e-04])\n","gradient values before mask reapp. tensor([ 5.3944e-04, -1.7106e-04,  8.7454e-05,  3.6320e-05,  2.1572e-04,\n","        -1.1609e-04, -1.9486e-04, -6.7729e-05, -3.2341e-05, -7.5463e-05])\n","gradient values before mask reapp. tensor([ 5.0436e-04, -1.7666e-04,  2.6878e-05,  1.9130e-05,  1.5892e-04,\n","        -1.2363e-04, -2.0705e-04, -1.0411e-04, -4.1653e-05, -1.7664e-04])\n","gradient values before mask reapp. tensor([ 5.4103e-04, -1.6932e-04,  9.5456e-05,  3.8052e-05,  2.2075e-04,\n","        -1.1460e-04, -1.9212e-04, -6.2212e-05, -3.1526e-05, -6.2100e-05])\n","gradient values before mask reapp. tensor([ 5.0457e-04, -1.7512e-04,  3.2544e-05,  2.0440e-05,  1.6214e-04,\n","        -1.2242e-04, -2.0470e-04, -9.9907e-05, -4.1037e-05, -1.6677e-04])\n","gradient values before mask reapp. tensor([ 5.3782e-04, -1.6843e-04,  9.4861e-05,  3.7676e-05,  2.1828e-04,\n","        -1.1424e-04, -1.9114e-04, -6.1828e-05, -3.1808e-05, -6.2713e-05])\n","gradient values before mask reapp. tensor([ 5.0432e-04, -1.7368e-04,  3.7364e-05,  2.1514e-05,  1.6461e-04,\n","        -1.2133e-04, -2.0254e-04, -9.6213e-05, -4.0535e-05, -1.5833e-04])\n","gradient values before mask reapp. tensor([ 5.3489e-04, -1.6752e-04,  9.4841e-05,  3.7427e-05,  2.1636e-04,\n","        -1.1382e-04, -1.9005e-04, -6.1044e-05, -3.1977e-05, -6.2496e-05])\n","gradient values before mask reapp. tensor([ 5.1201e-04, -1.7086e-04,  5.6522e-05,  2.6398e-05,  1.8006e-04,\n","        -1.1850e-04, -1.9745e-04, -8.3838e-05, -3.7954e-05, -1.2640e-04])\n","gradient values before mask reapp. tensor([ 5.3852e-04, -1.6508e-04,  1.0823e-04,  4.2109e-05,  2.2841e-04,\n","        -1.1196e-04, -1.8562e-04, -5.1315e-05, -2.9341e-05, -3.8344e-05])\n","gradient values before mask reapp. tensor([ 5.0961e-04, -1.6938e-04,  5.9216e-05,  2.8436e-05,  1.8263e-04,\n","        -1.1794e-04, -1.9514e-04, -8.0524e-05, -3.6774e-05, -1.1946e-04])\n","gradient values before mask reapp. tensor([ 5.2955e-04, -1.6534e-04,  9.7173e-05,  3.9081e-05,  2.1688e-04,\n","        -1.1299e-04, -1.8690e-04, -5.7207e-05, -3.0917e-05, -5.6173e-05])\n","gradient values before mask reapp. tensor([ 5.0096e-04, -1.6943e-04,  4.8949e-05,  2.5632e-05,  1.7169e-04,\n","        -1.1883e-04, -1.9614e-04, -8.5911e-05, -3.8317e-05, -1.3580e-04])\n","gradient values before mask reapp. tensor([ 5.2479e-04, -1.6469e-04,  9.3869e-05,  3.8080e-05,  2.1214e-04,\n","        -1.1297e-04, -1.8646e-04, -5.8415e-05, -3.1517e-05, -6.1071e-05])\n","gradient values before mask reapp. tensor([ 4.9528e-04, -1.6900e-04,  4.3907e-05,  2.3975e-05,  1.6514e-04,\n","        -1.1907e-04, -1.9614e-04, -8.8262e-05, -3.9280e-05, -1.4391e-04])\n","gradient values before mask reapp. tensor([ 5.2357e-04, -1.6342e-04,  9.6930e-05,  3.8757e-05,  2.1312e-04,\n","        -1.1211e-04, -1.8467e-04, -5.5784e-05, -3.1222e-05, -5.5448e-05])\n","gradient values before mask reapp. tensor([ 4.9057e-04, -1.6841e-04,  4.0546e-05,  2.2798e-05,  1.6013e-04,\n","        -1.1908e-04, -1.9579e-04, -8.9584e-05, -3.9983e-05, -1.4923e-04])\n","gradient values before mask reapp. tensor([ 5.2009e-04, -1.6267e-04,  9.5730e-05,  3.8114e-05,  2.1009e-04,\n","        -1.1184e-04, -1.8391e-04, -5.5787e-05, -3.1597e-05, -5.7308e-05])\n","gradient values before mask reapp. tensor([ 4.9132e-04, -1.6679e-04,  4.7203e-05,  2.4487e-05,  1.6449e-04,\n","        -1.1774e-04, -1.9323e-04, -8.4718e-05, -3.9116e-05, -1.3759e-04])\n","gradient values before mask reapp. tensor([ 5.1657e-04, -1.6183e-04,  9.4615e-05,  3.7684e-05,  2.0733e-04,\n","        -1.1155e-04, -1.8303e-04, -5.5678e-05, -3.1879e-05, -5.8669e-05])\n","gradient values before mask reapp. tensor([ 4.9052e-04, -1.6550e-04,  5.1010e-05,  2.5295e-05,  1.6615e-04,\n","        -1.1686e-04, -1.9135e-04, -8.1637e-05, -3.8720e-05, -1.3095e-04])\n","gradient values before mask reapp. tensor([ 5.1470e-04, -1.6082e-04,  9.6378e-05,  3.7924e-05,  2.0720e-04,\n","        -1.1095e-04, -1.8164e-04, -5.3846e-05, -3.1740e-05, -5.5513e-05])\n","gradient values before mask reapp. tensor([ 4.8599e-04, -1.6487e-04,  4.8041e-05,  2.4386e-05,  1.6177e-04,\n","        -1.1682e-04, -1.9089e-04, -8.2658e-05, -3.9240e-05, -1.3538e-04])\n","gradient values before mask reapp. tensor([ 5.0686e-04, -1.6083e-04,  8.7220e-05,  3.4476e-05,  1.9606e-04,\n","        -1.1173e-04, -1.8265e-04, -5.8941e-05, -3.3769e-05, -7.1314e-05])\n","gradient values before mask reapp. tensor([ 4.8233e-04, -1.6451e-04,  4.5830e-05,  2.2384e-05,  1.5670e-04,\n","        -1.1674e-04, -1.9074e-04, -8.3657e-05, -4.0322e-05, -1.4064e-04])\n","gradient values before mask reapp. tensor([ 5.0698e-04, -1.5944e-04,  9.2545e-05,  3.5649e-05,  1.9905e-04,\n","        -1.1063e-04, -1.8050e-04, -5.4952e-05, -3.3145e-05, -6.2319e-05])\n","gradient values before mask reapp. tensor([ 4.8318e-04, -1.6288e-04,  5.2640e-05,  2.4120e-05,  1.6119e-04,\n","        -1.1544e-04, -1.8818e-04, -7.8718e-05, -3.9431e-05, -1.2882e-04])\n","gradient values before mask reapp. tensor([ 5.0998e-04, -1.5765e-04,  1.0283e-04,  3.8169e-05,  2.0666e-04,\n","        -1.0893e-04, -1.7743e-04, -4.8002e-05, -3.1730e-05, -4.5230e-05])\n","gradient values before mask reapp. tensor([ 4.7901e-04, -1.6216e-04,  5.0425e-05,  2.3547e-05,  1.5766e-04,\n","        -1.1534e-04, -1.8754e-04, -7.9226e-05, -3.9751e-05, -1.3188e-04])\n","gradient values before mask reapp. tensor([ 5.0700e-04, -1.5673e-04,  1.0273e-04,  3.8181e-05,  2.0506e-04,\n","        -1.0855e-04, -1.7634e-04, -4.7228e-05, -3.1738e-05, -4.4764e-05])\n","gradient values before mask reapp. tensor([ 4.7821e-04, -1.6089e-04,  5.4302e-05,  2.4543e-05,  1.5965e-04,\n","        -1.1450e-04, -1.8566e-04, -7.6052e-05, -3.9212e-05, -1.2498e-04])\n","gradient values before mask reapp. tensor([ 5.0268e-04, -1.5603e-04,  1.0026e-04,  3.7586e-05,  2.0136e-04,\n","        -1.0848e-04, -1.7576e-04, -4.7884e-05, -3.2066e-05, -4.8207e-05])\n","gradient values before mask reapp. tensor([ 4.7689e-04, -1.5978e-04,  5.7084e-05,  2.5173e-05,  1.6061e-04,\n","        -1.1382e-04, -1.8408e-04, -7.3577e-05, -3.8830e-05, -1.2007e-04])\n","gradient values before mask reapp. tensor([ 4.9899e-04, -1.5526e-04,  9.8885e-05,  3.7283e-05,  1.9869e-04,\n","        -1.0829e-04, -1.7496e-04, -4.7870e-05, -3.2220e-05, -4.9848e-05])\n","gradient values before mask reapp. tensor([ 4.7372e-04, -1.5890e-04,  5.6640e-05,  2.5073e-05,  1.5872e-04,\n","        -1.1351e-04, -1.8310e-04, -7.3026e-05, -3.8887e-05, -1.2024e-04])\n","gradient values before mask reapp. tensor([ 4.9637e-04, -1.5430e-04,  9.9386e-05,  3.7394e-05,  1.9761e-04,\n","        -1.0785e-04, -1.7379e-04, -4.6754e-05, -3.2163e-05, -4.8499e-05])\n","gradient values before mask reapp. tensor([ 4.6897e-04, -1.5836e-04,  5.3214e-05,  2.3996e-05,  1.5390e-04,\n","        -1.1364e-04, -1.8285e-04, -7.4392e-05, -3.9480e-05, -1.2567e-04])\n","gradient values before mask reapp. tensor([ 4.9650e-04, -1.5297e-04,  1.0541e-04,  3.9152e-05,  2.0221e-04,\n","        -1.0702e-04, -1.7145e-04, -4.1985e-05, -3.1035e-05, -3.8043e-05])\n","gradient values before mask reapp. tensor([ 4.5522e-04, -1.5981e-04,  3.2901e-05,  1.7455e-05,  1.3308e-04,\n","        -1.1582e-04, -1.8638e-04, -8.6164e-05, -4.2888e-05, -1.6031e-04])\n","gradient values before mask reapp. tensor([ 4.9998e-04, -1.5098e-04,  1.1663e-04,  4.1894e-05,  2.1051e-04,\n","        -1.0515e-04, -1.6811e-04, -3.4511e-05, -2.9605e-05, -1.9291e-05])\n","gradient values before mask reapp. tensor([ 4.6039e-04, -1.5764e-04,  4.6883e-05,  2.0710e-05,  1.4358e-04,\n","        -1.1370e-04, -1.8268e-04, -7.7192e-05, -4.1169e-05, -1.3760e-04])\n","gradient values before mask reapp. tensor([ 4.9521e-04, -1.5042e-04,  1.1319e-04,  4.1011e-05,  2.0597e-04,\n","        -1.0522e-04, -1.6779e-04, -3.5797e-05, -3.0065e-05, -2.4403e-05])\n","gradient values before mask reapp. tensor([ 4.5408e-04, -1.5726e-04,  4.0813e-05,  1.9196e-05,  1.3668e-04,\n","        -1.1406e-04, -1.8280e-04, -8.0024e-05, -4.2019e-05, -1.4683e-04])\n","gradient values before mask reapp. tensor([ 4.9366e-04, -1.4930e-04,  1.1544e-04,  4.1449e-05,  2.0631e-04,\n","        -1.0451e-04, -1.6629e-04, -3.3706e-05, -2.9855e-05, -2.0331e-05])\n","gradient values before mask reapp. tensor([ 4.5145e-04, -1.5634e-04,  4.1140e-05,  1.9256e-05,  1.3549e-04,\n","        -1.1362e-04, -1.8170e-04, -7.9051e-05, -4.1976e-05, -1.4578e-04])\n","gradient values before mask reapp. tensor([ 4.9622e-04, -1.4771e-04,  1.2462e-04,  4.3497e-05,  2.1282e-04,\n","        -1.0295e-04, -1.6357e-04, -2.7543e-05, -2.8673e-05, -5.3548e-06])\n","gradient values before mask reapp. tensor([ 4.4409e-04, -1.5625e-04,  3.2985e-05,  1.7097e-05,  1.2665e-04,\n","        -1.1429e-04, -1.8238e-04, -8.3200e-05, -4.3127e-05, -1.5876e-04])\n","gradient values before mask reapp. tensor([ 4.9480e-04, -1.4660e-04,  1.2705e-04,  4.3936e-05,  2.1331e-04,\n","        -1.0223e-04, -1.6208e-04, -2.5367e-05, -2.8445e-05, -1.0747e-06])\n","gradient values before mask reapp. tensor([ 4.3925e-04, -1.5581e-04,  2.9154e-05,  1.5754e-05,  1.2135e-04,\n","        -1.1449e-04, -1.8234e-04, -8.4921e-05, -4.3846e-05, -1.6516e-04])\n","gradient values before mask reapp. tensor([ 4.8385e-04, -1.4748e-04,  1.1180e-04,  3.8891e-05,  1.9704e-04,\n","        -1.0397e-04, -1.6470e-04, -3.4244e-05, -3.1130e-05, -2.7408e-05])\n","gradient values before mask reapp. tensor([ 4.3337e-04, -1.5592e-04,  2.2873e-05,  1.2749e-05,  1.1297e-04,\n","        -1.1486e-04, -1.8300e-04, -8.8285e-05, -4.5370e-05, -1.7695e-04])\n","gradient values before mask reapp. tensor([ 4.9114e-04, -1.4485e-04,  1.2978e-04,  4.3291e-05,  2.1131e-04,\n","        -1.0121e-04, -1.5999e-04, -2.2725e-05, -2.8811e-05,  2.3055e-06])\n","gradient values before mask reapp. tensor([ 4.3141e-04, -1.5490e-04,  2.4341e-05,  1.3130e-05,  1.1277e-04,\n","        -1.1428e-04, -1.8169e-04, -8.6637e-05, -4.5167e-05, -1.7410e-04])\n","gradient values before mask reapp. tensor([ 4.8930e-04, -1.4370e-04,  1.3166e-04,  4.3786e-05,  2.1142e-04,\n","        -1.0052e-04, -1.5848e-04, -2.0786e-05, -2.8608e-05,  6.0215e-06])\n","gradient values before mask reapp. tensor([ 4.3696e-04, -1.5269e-04,  3.9176e-05,  1.6809e-05,  1.2456e-04,\n","        -1.1210e-04, -1.7779e-04, -7.7032e-05, -4.3102e-05, -1.4966e-04])\n","gradient values before mask reapp. tensor([ 4.8153e-04, -1.4369e-04,  1.2277e-04,  4.1508e-05,  2.0203e-04,\n","        -1.0125e-04, -1.5928e-04, -2.5340e-05, -2.9823e-05, -8.0019e-06])\n","gradient values before mask reapp. tensor([ 4.3264e-04, -1.5198e-04,  3.6611e-05,  1.6295e-05,  1.2089e-04,\n","        -1.1205e-04, -1.7724e-04, -7.7766e-05, -4.3408e-05, -1.5315e-04])\n","gradient values before mask reapp. tensor([ 4.8385e-04, -1.4195e-04,  1.3191e-04,  4.3738e-05,  2.0867e-04,\n","        -9.9714e-05, -1.5643e-04, -1.9130e-05, -2.8604e-05,  7.3279e-06])\n","gradient values before mask reapp. tensor([ 4.2539e-04, -1.5203e-04,  2.8300e-05,  1.3789e-05,  1.1163e-04,\n","        -1.1285e-04, -1.7821e-04, -8.2241e-05, -4.4730e-05, -1.6696e-04])\n","gradient values before mask reapp. tensor([ 4.7122e-04, -1.4321e-04,  1.1343e-04,  3.7736e-05,  1.8944e-04,\n","        -1.0188e-04, -1.5982e-04, -3.0030e-05, -3.1781e-05, -2.4534e-05])\n","gradient values before mask reapp. tensor([ 4.2375e-04, -1.5148e-04,  2.9337e-05,  1.2519e-05,  1.0951e-04,\n","        -1.1236e-04, -1.7754e-04, -8.1345e-05, -4.5351e-05, -1.6727e-04])\n","gradient values before mask reapp. tensor([ 4.7714e-04, -1.4082e-04,  1.2905e-04,  4.1650e-05,  2.0181e-04,\n","        -9.9467e-05, -1.5559e-04, -1.9874e-05, -2.9687e-05,  1.4203e-06])\n","gradient values before mask reapp. tensor([ 4.2437e-04, -1.4996e-04,  3.5643e-05,  1.4345e-05,  1.1398e-04,\n","        -1.1121e-04, -1.7518e-04, -7.6704e-05, -4.4330e-05, -1.5618e-04])\n","gradient values before mask reapp. tensor([ 4.8122e-04, -1.3905e-04,  1.4091e-04,  4.4517e-05,  2.1100e-04,\n","        -9.7618e-05, -1.5237e-04, -1.2044e-05, -2.7980e-05,  2.0786e-05])\n","gradient values before mask reapp. tensor([ 4.0258e-04, -1.5179e-04,  1.2246e-06, -5.5911e-06,  6.7189e-05,\n","        -1.1271e-04, -1.8040e-04, -9.8941e-05, -5.7369e-05, -2.2130e-04])\n","gradient values before mask reapp. tensor([ 4.7738e-04, -1.3826e-04,  1.3924e-04,  4.4239e-05,  2.0817e-04,\n","        -9.7425e-05, -1.5160e-04, -1.2188e-05, -2.8154e-05,  1.8808e-05])\n","gradient values before mask reapp. tensor([ 4.0798e-04, -1.4957e-04,  1.5830e-05, -2.2702e-06,  7.8407e-05,\n","        -1.1048e-04, -1.7650e-04, -8.9529e-05, -5.5569e-05, -1.9744e-04])\n","gradient values before mask reapp. tensor([ 4.5281e-04, -1.4049e-04,  9.9736e-05,  2.1093e-05,  1.5438e-04,\n","        -9.9112e-05, -1.5770e-04, -3.7861e-05, -4.3306e-05, -5.6187e-05])\n","gradient values before mask reapp. tensor([ 4.0080e-04, -1.4949e-04,  7.9122e-06, -4.2862e-06,  6.9896e-05,\n","        -1.1124e-04, -1.7725e-04, -9.3621e-05, -5.6647e-05, -2.1005e-04])\n","gradient values before mask reapp. tensor([ 4.4559e-04, -1.4080e-04,  9.1050e-05,  1.7580e-05,  1.4393e-04,\n","        -1.0007e-04, -1.5908e-04, -4.2865e-05, -4.5136e-05, -7.2038e-05])\n","gradient values before mask reapp. tensor([ 3.9429e-04, -1.4975e-04,  5.8748e-07, -6.9848e-06,  6.1426e-05,\n","        -1.1190e-04, -1.7818e-04, -9.7456e-05, -5.7860e-05, -2.2312e-04])\n","gradient values before mask reapp. tensor([ 4.5322e-04, -1.3816e-04,  1.0958e-04,  2.2255e-05,  1.5896e-04,\n","        -9.7272e-05, -1.5430e-04, -3.1005e-05, -4.2624e-05, -4.1309e-05])\n","gradient values before mask reapp. tensor([ 3.9539e-04, -1.4821e-04,  7.5440e-06, -5.1977e-06,  6.6223e-05,\n","        -1.1067e-04, -1.7580e-04, -9.2546e-05, -5.6888e-05, -2.1130e-04])\n","gradient values before mask reapp. tensor([ 4.5303e-04, -1.3687e-04,  1.1429e-04,  2.3591e-05,  1.6199e-04,\n","        -9.6326e-05, -1.5234e-04, -2.7351e-05, -4.1842e-05, -3.2994e-05])\n","gradient values before mask reapp. tensor([ 3.9071e-04, -1.4759e-04,  4.4294e-06, -5.6327e-06,  6.2431e-05,\n","        -1.1077e-04, -1.7538e-04, -9.3522e-05, -5.7081e-05, -2.1555e-04])\n","gradient values before mask reapp. tensor([ 4.5289e-04, -1.3557e-04,  1.1913e-04,  2.4943e-05,  1.6514e-04,\n","        -9.5365e-05, -1.5036e-04, -2.3603e-05, -4.1037e-05, -2.4512e-05])\n","gradient values before mask reapp. tensor([ 3.9182e-04, -1.4619e-04,  1.0949e-05, -4.1999e-06,  6.6446e-05,\n","        -1.0962e-04, -1.7329e-04, -8.9063e-05, -5.6338e-05, -2.0497e-04])\n","gradient values before mask reapp. tensor([ 4.2914e-04, -1.3876e-04,  8.0999e-05,  1.3524e-05,  1.2791e-04,\n","        -1.0042e-04, -1.5803e-04, -4.6494e-05, -4.7139e-05, -8.9504e-05])\n","gradient values before mask reapp. tensor([ 3.9034e-04, -1.4533e-04,  1.2698e-05, -4.5954e-06,  6.5656e-05,\n","        -1.0915e-04, -1.7232e-04, -8.7668e-05, -5.6579e-05, -2.0300e-04])\n","gradient values before mask reapp. tensor([ 4.2977e-04, -1.3762e-04,  8.6365e-05,  1.4246e-05,  1.3066e-04,\n","        -9.9400e-05, -1.5629e-04, -4.2817e-05, -4.6697e-05, -8.1396e-05])\n","gradient values before mask reapp. tensor([ 4.0504e-04, -1.4156e-04,  4.3448e-05,  3.0520e-06,  9.1392e-05,\n","        -1.0469e-04, -1.6510e-04, -6.8565e-05, -5.2514e-05, -1.5249e-04])\n","gradient values before mask reapp. tensor([ 4.2296e-04, -1.3746e-04,  7.9248e-05,  1.2526e-05,  1.2320e-04,\n","        -1.0006e-04, -1.5681e-04, -4.6295e-05, -4.7553e-05, -9.2539e-05])\n","gradient values before mask reapp. tensor([ 3.9885e-04, -1.4143e-04,  3.7018e-05,  1.3364e-06,  8.4376e-05,\n","        -1.0520e-04, -1.6559e-04, -7.1768e-05, -5.3350e-05, -1.6274e-04])\n","gradient values before mask reapp. tensor([ 4.2672e-04, -1.3587e-04,  8.9811e-05,  1.4525e-05,  1.3056e-04,\n","        -9.8311e-05, -1.5410e-04, -3.9653e-05, -4.6457e-05, -7.5860e-05])\n","gradient values before mask reapp. tensor([ 3.7827e-04, -1.4382e-04,  5.0357e-06, -6.8349e-06,  5.4809e-05,\n","        -1.0912e-04, -1.7137e-04, -9.0262e-05, -5.7568e-05, -2.1479e-04])\n","gradient values before mask reapp. tensor([ 4.2167e-04, -1.3590e-04,  8.5032e-05,  1.2441e-05,  1.2439e-04,\n","        -9.8643e-05, -1.5451e-04, -4.1973e-05, -4.7344e-05, -8.4746e-05])\n","gradient values before mask reapp. tensor([ 3.9682e-04, -1.3949e-04,  4.2773e-05,  2.6303e-06,  8.7047e-05,\n","        -1.0372e-04, -1.6266e-04, -6.6789e-05, -5.2387e-05, -1.5280e-04])\n","gradient values before mask reapp. tensor([ 4.2609e-04, -1.3409e-04,  9.7473e-05,  1.5160e-05,  1.3377e-04,\n","        -9.6730e-05, -1.5124e-04, -3.3875e-05, -4.5766e-05, -6.4829e-05])\n","gradient values before mask reapp. tensor([ 3.9024e-04, -1.3932e-04,  3.6117e-05,  1.2727e-06,  8.0291e-05,\n","        -1.0428e-04, -1.6304e-04, -6.9882e-05, -5.2990e-05, -1.6288e-04])\n","gradient values before mask reapp. tensor([ 4.2428e-04, -1.3299e-04,  9.9452e-05,  1.5973e-05,  1.3453e-04,\n","        -9.6189e-05, -1.4981e-04, -3.1842e-05, -4.5299e-05, -6.0743e-05])\n","gradient values before mask reapp. tensor([ 3.8628e-04, -1.3868e-04,  3.4159e-05,  1.1065e-06,  7.7721e-05,\n","        -1.0421e-04, -1.6243e-04, -7.0147e-05, -5.2957e-05, -1.6525e-04])\n","gradient values before mask reapp. tensor([ 4.2241e-04, -1.3205e-04,  1.0093e-04,  1.6561e-05,  1.3484e-04,\n","        -9.5691e-05, -1.4862e-04, -3.0213e-05, -4.4909e-05, -5.7617e-05])\n","gradient values before mask reapp. tensor([ 3.5988e-04, -1.4245e-04, -9.2097e-06, -1.1965e-05,  3.5404e-05,\n","        -1.0998e-04, -1.7144e-04, -9.6478e-05, -5.9998e-05, -2.3933e-04])\n","gradient values before mask reapp. tensor([ 4.3282e-04, -1.2906e-04,  1.2409e-04,  2.2202e-05,  1.5384e-04,\n","        -9.2308e-05, -1.4303e-04, -1.5706e-05, -4.1882e-05, -1.9684e-05])\n","gradient values before mask reapp. tensor([ 3.4923e-04, -1.4333e-04, -2.3577e-05, -1.6328e-05,  2.0851e-05,\n","        -1.1163e-04, -1.7373e-04, -1.0444e-04, -6.2121e-05, -2.6376e-04])\n","gradient values before mask reapp. tensor([ 4.5149e-04, -1.2440e-04,  1.6266e-04,  3.3136e-05,  1.8831e-04,\n","        -8.6665e-05, -1.3370e-04,  8.7358e-06, -3.5872e-05,  4.5726e-05])\n","gradient values before mask reapp. tensor([ 3.4602e-04, -1.4249e-04, -2.4192e-05, -1.6239e-05,  1.9217e-05,\n","        -1.1145e-04, -1.7290e-04, -1.0403e-04, -6.2058e-05, -2.6404e-04])\n","gradient values before mask reapp. tensor([ 4.4164e-04, -1.2498e-04,  1.4984e-04,  2.9505e-05,  1.7530e-04,\n","        -8.8194e-05, -1.3567e-04,  1.6319e-06, -3.7714e-05,  2.4349e-05])\n","gradient values before mask reapp. tensor([ 3.4221e-04, -1.4199e-04, -2.6383e-05, -1.6972e-05,  1.5848e-05,\n","        -1.1146e-04, -1.7261e-04, -1.0475e-04, -6.2365e-05, -2.6757e-04])\n","gradient values before mask reapp. tensor([ 4.3706e-04, -1.2473e-04,  1.4604e-04,  2.8006e-05,  1.7011e-04,\n","        -8.8445e-05, -1.3586e-04, -1.9504e-07, -3.8432e-05,  1.7560e-05])\n","gradient values before mask reapp. tensor([ 3.3168e-04, -1.4302e-04, -4.0949e-05, -2.1567e-05,  9.7854e-07,\n","        -1.1315e-04, -1.7514e-04, -1.1297e-04, -6.4565e-05, -2.9274e-04])\n","gradient values before mask reapp. tensor([ 4.4660e-04, -1.2183e-04,  1.6803e-04,  3.3786e-05,  1.8869e-04,\n","        -8.5215e-05, -1.3035e-04,  1.3903e-05, -3.5231e-05,  5.4159e-05])\n","gradient values before mask reapp. tensor([ 3.3529e-04, -1.4094e-04, -2.9269e-05, -1.8254e-05,  1.0364e-05,\n","        -1.1135e-04, -1.7172e-04, -1.0516e-04, -6.2812e-05, -2.7268e-04])\n","gradient values before mask reapp. tensor([ 4.2423e-04, -1.2474e-04,  1.3143e-04,  2.2986e-05,  1.5263e-04,\n","        -8.9589e-05, -1.3774e-04, -8.2757e-06, -4.1066e-05, -8.1101e-06])\n","gradient values before mask reapp. tensor([ 3.5008e-04, -1.3741e-04,  1.1409e-06, -1.1688e-05,  3.4637e-05,\n","        -1.0715e-04, -1.6505e-04, -8.6739e-05, -5.9373e-05, -2.2445e-04])\n","gradient values before mask reapp. tensor([ 4.1272e-04, -1.2574e-04,  1.1514e-04,  1.8015e-05,  1.3598e-04,\n","        -9.1569e-05, -1.4065e-04, -1.7756e-05, -4.3677e-05, -3.5860e-05])\n","gradient values before mask reapp. tensor([ 3.4150e-04, -1.3809e-04, -9.9631e-06, -1.5267e-05,  2.3139e-05,\n","        -1.0833e-04, -1.6680e-04, -9.2839e-05, -6.1006e-05, -2.4355e-04])\n","gradient values before mask reapp. tensor([ 4.4656e-04, -1.1979e-04,  1.8019e-04,  4.8245e-05,  2.1101e-04,\n","        -8.5932e-05, -1.2772e-04,  2.4856e-05, -2.4275e-05,  8.1939e-05])\n","gradient values before mask reapp. tensor([ 3.4138e-04, -1.3666e-04, -5.0468e-06, -1.3643e-05,  2.6588e-05,\n","        -1.0740e-04, -1.6480e-04, -8.9116e-05, -6.0144e-05, -2.3451e-04])\n","gradient values before mask reapp. tensor([ 4.2184e-04, -1.2221e-04,  1.3996e-04,  2.3699e-05,  1.5531e-04,\n","        -8.7584e-05, -1.3416e-04, -1.6376e-06, -4.0303e-05,  4.4392e-06])\n","gradient values before mask reapp. tensor([ 3.3439e-04, -1.3694e-04, -1.3437e-05, -1.6170e-05,  1.7606e-05,\n","        -1.0822e-04, -1.6600e-04, -9.3706e-05, -6.1348e-05, -2.4865e-04])\n","gradient values before mask reapp. tensor([ 4.0024e-04, -1.2523e-04,  1.0510e-04,  1.2518e-05,  1.2037e-04,\n","        -9.2289e-05, -1.4150e-04, -2.2910e-05, -4.6320e-05, -5.6179e-05])\n","gradient values before mask reapp. tensor([ 3.4900e-04, -1.3318e-04,  1.7107e-05, -8.5619e-06,  4.3257e-05,\n","        -1.0386e-04, -1.5890e-04, -7.4833e-05, -5.7331e-05, -1.9842e-04])\n","gradient values before mask reapp. tensor([ 4.0410e-04, -1.2342e-04,  1.1639e-04,  1.5358e-05,  1.2921e-04,\n","        -9.0459e-05, -1.3840e-04, -1.5532e-05, -4.4750e-05, -3.7350e-05])\n","gradient values before mask reapp. tensor([ 3.3158e-04, -1.3545e-04, -9.8466e-06, -1.6355e-05,  1.7502e-05,\n","        -1.0718e-04, -1.6403e-04, -9.0525e-05, -6.1201e-05, -2.4382e-04])\n","gradient values before mask reapp. tensor([ 4.2909e-04, -1.1752e-04,  1.6660e-04,  2.9757e-05,  1.7472e-04,\n","        -8.3205e-05, -1.2644e-04,  1.6119e-05, -3.6847e-05,  4.7993e-05])\n","gradient values before mask reapp. tensor([ 3.1439e-04, -1.3748e-04, -3.6670e-05, -2.4044e-05, -8.7873e-06,\n","        -1.1042e-04, -1.6926e-04, -1.0645e-04, -6.5200e-05, -2.8930e-04])\n","gradient values before mask reapp. tensor([ 4.1943e-04, -1.1826e-04,  1.5362e-04,  2.5559e-05,  1.6109e-04,\n","        -8.4696e-05, -1.2869e-04,  8.6742e-06, -3.8907e-05,  2.5504e-05])\n","gradient values before mask reapp. tensor([ 3.2047e-04, -1.3605e-04, -2.3741e-05, -2.2767e-05, -1.2252e-06,\n","        -1.0837e-04, -1.6692e-04, -9.9186e-05, -6.4479e-05, -2.7166e-04])\n","gradient values before mask reapp. tensor([ 3.8287e-04, -1.2402e-04,  9.1284e-05,  6.3717e-06,  9.9889e-05,\n","        -9.3157e-05, -1.4221e-04, -2.9693e-05, -4.9429e-05, -8.2184e-05])\n","gradient values before mask reapp. tensor([ 3.6689e-04, -1.2550e-04,  6.6620e-05,  2.8433e-06,  8.0767e-05,\n","        -9.5958e-05, -1.4587e-04, -4.3086e-05, -5.1087e-05, -1.1785e-04])\n","gradient values before mask reapp. tensor([ 3.8831e-04, -1.2221e-04,  1.0488e-04,  9.5244e-06,  1.1086e-04,\n","        -9.0939e-05, -1.3882e-04, -2.1078e-05, -4.7525e-05, -5.9820e-05])\n","gradient values before mask reapp. tensor([ 2.9574e-04, -1.3868e-04, -5.8900e-05, -3.3479e-05, -3.5853e-05,\n","        -1.1264e-04, -1.7309e-04, -1.1913e-04, -6.9678e-05, -3.3133e-04])\n","gradient values before mask reapp. tensor([ 4.4210e-04, -1.1245e-04,  2.0665e-04,  5.1905e-05,  2.2186e-04,\n","        -8.0829e-05, -1.1797e-04,  4.4422e-05, -2.1261e-05,  1.2106e-04])\n","gradient values before mask reapp. tensor([ 2.9926e-04, -1.3712e-04, -4.8735e-05, -3.1314e-05, -2.8790e-05,\n","        -1.1097e-04, -1.7052e-04, -1.1262e-04, -6.8429e-05, -3.1559e-04])\n","gradient values before mask reapp. tensor([ 4.3561e-04, -1.1240e-04,  1.9920e-04,  4.8595e-05,  2.1178e-04,\n","        -8.1385e-05, -1.1897e-04,  4.0039e-05, -2.3293e-05,  1.0724e-04])\n","gradient values before mask reapp. tensor([ 3.1690e-04, -1.3213e-04, -1.0972e-05, -2.0570e-05,  4.5222e-06,\n","        -1.0567e-04, -1.6123e-04, -8.8765e-05, -6.2800e-05, -2.5139e-04])\n","gradient values before mask reapp. tensor([ 4.2057e-04, -1.1281e-04,  1.7690e-04,  2.8487e-05,  1.7180e-04,\n","        -8.0231e-05, -1.2118e-04,  2.4531e-05, -3.7081e-05,  5.9887e-05])\n","gradient values before mask reapp. tensor([ 2.8608e-04, -1.3705e-04, -6.3072e-05, -3.5773e-05, -4.5377e-05,\n","        -1.1259e-04, -1.7238e-04, -1.2040e-04, -7.0803e-05, -3.4033e-04])\n","gradient values before mask reapp. tensor([ 4.2076e-04, -1.1169e-04,  1.8142e-04,  2.9162e-05,  1.7373e-04,\n","        -7.9335e-05, -1.1968e-04,  2.7649e-05, -3.6750e-05,  6.6575e-05])\n","gradient values before mask reapp. tensor([ 3.0898e-04, -1.3083e-04, -1.5502e-05, -2.1346e-05, -1.5389e-06,\n","        -1.0561e-04, -1.6050e-04, -9.0346e-05, -6.3149e-05, -2.5705e-04])\n","gradient values before mask reapp. tensor([ 3.7341e-04, -1.1971e-04,  9.9357e-05,  4.6378e-06,  9.5141e-05,\n","        -9.0436e-05, -1.3759e-04, -2.2631e-05, -4.9827e-05, -7.4253e-05])\n","gradient values before mask reapp. tensor([ 3.0015e-04, -1.3214e-04, -2.7586e-05, -2.6237e-05, -1.4505e-05,\n","        -1.0690e-04, -1.6282e-04, -9.7074e-05, -6.5099e-05, -2.7980e-04])\n","gradient values before mask reapp. tensor([ 4.0501e-04, -1.1442e-04,  1.5980e-04,  3.3398e-05,  1.6540e-04,\n","        -8.5607e-05, -1.2607e-04,  1.6986e-05, -3.1166e-05,  3.4496e-05])\n","gradient values before mask reapp. tensor([ 3.2023e-04, -1.2734e-04,  1.2404e-05, -1.7547e-05,  1.7030e-05,\n","        -1.0157e-04, -1.5430e-04, -7.3352e-05, -6.0930e-05, -2.1648e-04])\n","gradient values before mask reapp. tensor([ 4.1963e-04, -1.0979e-04,  1.9282e-04,  4.4701e-05,  1.9693e-04,\n","        -8.0913e-05, -1.1737e-04,  3.8667e-05, -2.4898e-05,  9.3289e-05])\n","gradient values before mask reapp. tensor([ 3.2104e-04, -1.2537e-04,  2.0039e-05, -1.3911e-05,  2.4485e-05,\n","        -1.0016e-04, -1.5119e-04, -6.7382e-05, -5.8881e-05, -2.0093e-04])\n","gradient values before mask reapp. tensor([ 3.8181e-04, -1.1562e-04,  1.2680e-04,  1.0828e-05,  1.1533e-04,\n","        -8.5743e-05, -1.3016e-04, -4.1968e-06, -4.5771e-05, -3.0949e-05])\n","gradient values before mask reapp. tensor([ 3.1308e-04, -1.2552e-04,  1.0122e-05, -1.6935e-05,  1.3359e-05,\n","        -1.0133e-04, -1.5283e-04, -7.3222e-05, -6.0643e-05, -2.1785e-04])\n","gradient values before mask reapp. tensor([ 3.5573e-04, -1.1883e-04,  8.5155e-05, -2.1439e-06,  7.3975e-05,\n","        -9.1458e-05, -1.3867e-04, -2.9656e-05, -5.2988e-05, -1.0227e-04])\n","gradient values before mask reapp. tensor([ 3.0399e-04, -1.2687e-04, -3.5133e-06, -2.2651e-05, -2.3830e-06,\n","        -1.0290e-04, -1.5593e-04, -8.1584e-05, -6.3457e-05, -2.4418e-04])\n","gradient values before mask reapp. tensor([ 3.8982e-04, -1.1149e-04,  1.5045e-04,  1.5198e-05,  1.3159e-04,\n","        -8.2269e-05, -1.2415e-04,  1.0147e-05, -4.3815e-05,  6.7982e-06])\n","gradient values before mask reapp. tensor([ 3.1333e-04, -1.2383e-04,  1.7959e-05, -1.6205e-05,  1.6803e-05,\n","        -9.9585e-05, -1.5043e-04, -6.7889e-05, -5.9931e-05, -2.0674e-04])\n","gradient values before mask reapp. tensor([ 3.0291e-04, -1.2864e-04, -5.4212e-06, -3.0584e-05, -1.3483e-05,\n","        -1.0303e-04, -1.5871e-04, -8.4616e-05, -6.7016e-05, -2.6027e-04])\n","gradient values before mask reapp. tensor([ 3.9495e-04, -1.0886e-04,  1.6991e-04,  3.9482e-05,  1.7265e-04,\n","        -8.2691e-05, -1.1881e-04,  2.7958e-05, -2.6789e-05,  5.7413e-05])\n","gradient values before mask reapp. tensor([ 3.2076e-04, -1.2353e-04,  3.2337e-05, -1.9917e-05,  1.9333e-05,\n","        -9.7726e-05, -1.4957e-04, -6.1071e-05, -6.1609e-05, -1.9633e-04])\n","gradient values before mask reapp. tensor([ 3.7364e-04, -1.1067e-04,  1.3523e-04,  1.3587e-05,  1.1789e-04,\n","        -8.3380e-05, -1.2443e-04,  3.8359e-06, -4.4133e-05, -1.4332e-05])\n","gradient values before mask reapp. tensor([ 3.2724e-04, -1.1996e-04,  5.1164e-05, -1.3401e-05,  3.6220e-05,\n","        -9.4963e-05, -1.4389e-04, -4.8469e-05, -5.8384e-05, -1.6200e-04])\n","gradient values before mask reapp. tensor([ 3.5979e-04, -1.1202e-04,  1.1551e-04,  9.8268e-06,  1.0132e-04,\n","        -8.5424e-05, -1.2736e-04, -6.5700e-06, -4.5557e-05, -4.4632e-05])\n","gradient values before mask reapp. tensor([ 3.2269e-04, -1.2066e-04,  4.5307e-05, -1.6612e-05,  2.8007e-05,\n","        -9.5534e-05, -1.4547e-04, -5.2158e-05, -5.9788e-05, -1.7491e-04])\n","gradient values before mask reapp. tensor([ 3.1383e-04, -1.1943e-04,  3.6575e-05, -1.3854e-05,  2.5381e-05,\n","        -9.6239e-05, -1.4451e-04, -5.5161e-05, -5.8420e-05, -1.7965e-04])\n","gradient values before mask reapp. tensor([ 3.5196e-04, -1.1575e-04,  1.0166e-04,  1.2650e-05,  9.6875e-05,\n","        -9.1399e-05, -1.3476e-04, -1.4739e-05, -4.0599e-05, -7.0794e-05])\n","gradient values before mask reapp. tensor([ 3.1672e-04, -1.1826e-04,  4.5655e-05, -1.2508e-05,  3.1693e-05,\n","        -9.4682e-05, -1.4222e-04, -4.9177e-05, -5.7328e-05, -1.6633e-04])\n","gradient values before mask reapp. tensor([ 3.6384e-04, -1.1102e-04,  1.2783e-04,  5.0126e-06,  9.9513e-05,\n","        -8.3665e-05, -1.2660e-04, -1.1161e-06, -4.8124e-05, -3.8255e-05])\n","gradient values before mask reapp. tensor([ 2.9951e-04, -1.2028e-04,  1.9389e-05, -1.8838e-05,  7.9700e-06,\n","        -9.7710e-05, -1.4688e-04, -6.4046e-05, -6.0327e-05, -2.0883e-04])\n","gradient values before mask reapp. tensor([ 3.5916e-04, -1.1170e-04,  1.2430e-04,  1.8830e-05,  1.1448e-04,\n","        -8.8308e-05, -1.2883e-04, -2.1911e-07, -3.7345e-05, -3.3426e-05])\n","gradient values before mask reapp. tensor([ 3.0522e-04, -1.1827e-04,  3.3206e-05, -1.6271e-05,  1.7516e-05,\n","        -9.5699e-05, -1.4382e-04, -5.5874e-05, -5.9123e-05, -1.8755e-04])\n","gradient values before mask reapp. tensor([ 3.1290e-04, -1.1863e-04,  4.4198e-05, -2.0716e-05,  1.7939e-05,\n","        -9.4674e-05, -1.4417e-04, -5.1766e-05, -6.1602e-05, -1.8229e-04])\n","gradient values before mask reapp. tensor([ 4.0516e-04, -1.0017e-04,  2.1806e-04,  5.1083e-05,  2.0681e-04,\n","        -7.4998e-05, -1.0542e-04,  6.0517e-05, -1.9178e-05,  1.3364e-04])\n","gradient values before mask reapp. tensor([ 3.0137e-04, -1.1861e-04,  2.9726e-05, -2.2451e-05,  5.6010e-06,\n","        -9.6266e-05, -1.4570e-04, -5.9269e-05, -6.2618e-05, -2.0272e-04])\n","gradient values before mask reapp. tensor([ 3.3996e-04, -1.0993e-04,  1.0371e-04,  9.8255e-07,  7.6466e-05,\n","        -8.5662e-05, -1.2797e-04, -1.2696e-05, -4.9999e-05, -7.2799e-05])\n","gradient values before mask reapp. tensor([ 3.0065e-04, -1.1738e-04,  3.2776e-05, -2.1970e-05,  6.5896e-06,\n","        -9.5581e-05, -1.4448e-04, -5.7281e-05, -6.2523e-05, -1.9757e-04])\n","gradient values before mask reapp. tensor([ 2.8794e-04, -1.1922e-04,  1.2688e-05, -2.7087e-05, -1.0927e-05,\n","        -9.8056e-05, -1.4820e-04, -6.8709e-05, -6.4788e-05, -2.3028e-04])\n","gradient values before mask reapp. tensor([ 4.0313e-04, -9.9288e-05,  2.2140e-04,  4.7406e-05,  2.0159e-04,\n","        -7.4232e-05, -1.0537e-04,  6.1576e-05, -2.1020e-05,  1.3171e-04])\n","gradient values before mask reapp. tensor([ 2.2743e-04, -1.2980e-04, -9.2362e-05, -5.4734e-05, -1.0554e-04,\n","        -1.1159e-04, -1.6996e-04, -1.3107e-04, -7.8640e-05, -4.0497e-04])\n","gradient values before mask reapp. tensor([ 4.0926e-04, -9.7877e-05,  2.3512e-04,  4.8923e-05,  2.1023e-04,\n","        -7.2841e-05, -1.0328e-04,  6.9206e-05, -2.0061e-05,  1.4991e-04])\n","gradient values before mask reapp. tensor([ 2.2118e-04, -1.3007e-04, -9.9716e-05, -5.8599e-05, -1.1557e-04,\n","        -1.1254e-04, -1.7150e-04, -1.3573e-04, -8.0713e-05, -4.2000e-04])\n","gradient values before mask reapp. tensor([ 4.6231e-04, -8.6874e-05,  3.3595e-04,  7.9097e-05,  3.0430e-04,\n","        -5.8754e-05, -8.0270e-05,  1.3228e-04, -3.3878e-06,  3.2180e-04])\n","gradient values before mask reapp. tensor([ 2.2069e-04, -1.2887e-04, -9.6083e-05, -5.8471e-05, -1.1496e-04,\n","        -1.1197e-04, -1.7036e-04, -1.3347e-04, -8.0828e-05, -4.1522e-04])\n","gradient values before mask reapp. tensor([ 3.8351e-04, -9.9719e-05,  1.9586e-04,  1.6467e-05,  1.4403e-04,\n","        -7.2561e-05, -1.0912e-04,  4.1906e-05, -4.1424e-05,  6.5723e-05])\n","gradient values before mask reapp. tensor([ 2.3062e-04, -1.2632e-04, -7.4719e-05, -5.3500e-05, -9.7672e-05,\n","        -1.0876e-04, -1.6554e-04, -1.2032e-04, -7.8052e-05, -3.8090e-04])\n","gradient values before mask reapp. tensor([ 3.8617e-04, -1.0078e-04,  2.0450e-04,  3.9445e-05,  1.7994e-04,\n","        -7.6417e-05, -1.0930e-04,  5.2379e-05, -2.3269e-05,  9.5212e-05])\n","gradient values before mask reapp. tensor([ 2.7629e-04, -1.1635e-04,  1.2923e-05, -2.9520e-05, -1.9713e-05,\n","        -9.6747e-05, -1.4587e-04, -6.6444e-05, -6.5439e-05, -2.3449e-04])\n","gradient values before mask reapp. tensor([ 3.5168e-04, -1.0397e-04,  1.4691e-04,  1.9912e-06,  9.6922e-05,\n","        -7.8509e-05, -1.1872e-04,  1.3305e-05, -4.8380e-05, -1.7815e-05])\n","gradient values before mask reapp. tensor([ 2.6268e-04, -1.1847e-04, -8.1471e-06, -3.5415e-05, -3.9292e-05,\n","        -9.9100e-05, -1.5004e-04, -7.8484e-05, -6.7912e-05, -2.7024e-04])\n","gradient values before mask reapp. tensor([ 3.6739e-04, -9.9513e-05,  1.8043e-04,  1.0959e-05,  1.2539e-04,\n","        -7.3893e-05, -1.1085e-04,  3.4028e-05, -4.3816e-05,  3.7965e-05])\n","gradient values before mask reapp. tensor([ 2.3294e-04, -1.2286e-04, -5.7247e-05, -4.9441e-05, -8.5787e-05,\n","        -1.0559e-04, -1.6020e-04, -1.0801e-04, -7.5259e-05, -3.5322e-04])\n","gradient values before mask reapp. tensor([ 3.9646e-04, -9.5005e-05,  2.3757e-04,  4.9289e-05,  2.0695e-04,\n","        -7.1436e-05, -1.0024e-04,  7.4275e-05, -1.7759e-05,  1.5114e-04])\n","gradient values before mask reapp. tensor([ 2.6146e-04, -1.1587e-04,  1.1173e-07, -3.2347e-05, -3.3005e-05,\n","        -9.7387e-05, -1.4647e-04, -7.1950e-05, -6.6036e-05, -2.5446e-04])\n","gradient values before mask reapp. tensor([ 3.2626e-04, -1.0502e-04,  1.1500e-04, -8.5273e-06,  6.1379e-05,\n","        -8.2487e-05, -1.2430e-04, -5.2369e-06, -5.4027e-05, -7.4343e-05])\n","gradient values before mask reapp. tensor([ 2.9003e-04, -1.1013e-04,  5.4871e-05, -2.0125e-05,  1.1981e-05,\n","        -9.0032e-05, -1.3506e-04, -3.9006e-05, -5.9557e-05, -1.6810e-04])\n","gradient values before mask reapp. tensor([ 3.6902e-04, -9.5473e-05,  1.9757e-04,  1.7582e-05,  1.3952e-04,\n","        -7.0397e-05, -1.0464e-04,  4.6968e-05, -3.9794e-05,  6.9429e-05])\n","gradient values before mask reapp. tensor([ 2.1993e-04, -1.2237e-04, -6.8252e-05, -5.6462e-05, -1.0419e-04,\n","        -1.0681e-04, -1.6207e-04, -1.1471e-04, -7.8962e-05, -3.7771e-04])\n","gradient values before mask reapp. tensor([ 3.7527e-04, -9.4928e-05,  2.1320e-04,  4.0168e-05,  1.7713e-04,\n","        -7.3463e-05, -1.0348e-04,  6.0356e-05, -2.3137e-05,  1.0803e-04])\n","gradient values before mask reapp. tensor([ 2.2385e-04, -1.2193e-04, -5.9780e-05, -5.7279e-05, -1.0108e-04,\n","        -1.0544e-04, -1.6107e-04, -1.1019e-04, -7.9136e-05, -3.6918e-04])\n","gradient values before mask reapp. tensor([ 3.7403e-04, -9.3688e-05,  2.1672e-04,  4.5614e-05,  1.8529e-04,\n","        -7.2741e-05, -1.0125e-04,  6.4618e-05, -1.9364e-05,  1.2001e-04])\n","gradient values before mask reapp. tensor([ 2.0314e-04, -1.2555e-04, -9.3831e-05, -6.8307e-05, -1.3390e-04,\n","        -1.0975e-04, -1.6846e-04, -1.3073e-04, -8.4378e-05, -4.2848e-04])\n","gradient values before mask reapp. tensor([ 3.6781e-04, -9.4157e-05,  2.0868e-04,  3.8154e-05,  1.7003e-04,\n","        -7.3345e-05, -1.0326e-04,  5.8626e-05, -2.3913e-05,  9.9732e-05])\n","gradient values before mask reapp. tensor([ 2.3761e-04, -1.1755e-04, -2.6216e-05, -5.0937e-05, -7.6020e-05,\n","        -1.0070e-04, -1.5339e-04, -8.9462e-05, -7.5540e-05, -3.1760e-04])\n","gradient values before mask reapp. tensor([ 4.3390e-04, -8.1084e-05,  3.3291e-04,  7.6528e-05,  2.8790e-04,\n","        -5.6886e-05, -7.5766e-05,  1.3615e-04, -2.3346e-06,  3.1151e-04])\n","gradient values before mask reapp. tensor([ 2.2030e-04, -1.1972e-04, -5.3360e-05, -5.7757e-05, -1.0093e-04,\n","        -1.0399e-04, -1.5867e-04, -1.0544e-04, -7.8945e-05, -3.6181e-04])\n","gradient values before mask reapp. tensor([ 3.1726e-04, -1.0007e-04,  1.2558e-04, -5.1316e-06,  6.4930e-05,\n","        -7.9125e-05, -1.1832e-04,  4.8164e-06, -5.1177e-05, -5.6057e-05])\n","gradient values before mask reapp. tensor([ 2.2485e-04, -1.1818e-04, -4.0914e-05, -5.6456e-05, -9.3135e-05,\n","        -1.0221e-04, -1.5589e-04, -9.7701e-05, -7.8067e-05, -3.4465e-04])\n","gradient values before mask reapp. tensor([ 3.8113e-04, -8.8941e-05,  2.4558e-04,  4.9297e-05,  2.0199e-04,\n","        -6.8159e-05, -9.4250e-05,  8.2798e-05, -1.6957e-05,  1.6110e-04])\n","gradient values before mask reapp. tensor([ 2.1046e-04, -1.2030e-04, -6.4059e-05, -6.3364e-05, -1.1593e-04,\n","        -1.0498e-04, -1.6090e-04, -1.1171e-04, -8.1529e-05, -3.8467e-04])\n","gradient values before mask reapp. tensor([ 3.3968e-04, -9.6245e-05,  1.7428e-04,  2.8678e-05,  1.3557e-04,\n","        -7.7829e-05, -1.0982e-04,  3.9600e-05, -2.7332e-05,  3.9507e-05])\n","gradient values before mask reapp. tensor([ 2.8719e-04, -1.0495e-04,  7.7804e-05, -2.6191e-05,  8.7846e-06,\n","        -8.5832e-05, -1.3046e-04, -2.6121e-05, -6.2367e-05, -1.5027e-04])\n","gradient values before mask reapp. tensor([ 2.2715e-04, -1.1574e-04, -2.6447e-05, -5.2212e-05, -8.0418e-05,\n","        -9.8974e-05, -1.5122e-04, -8.7090e-05, -7.4662e-05, -3.1908e-04])\n","gradient values before mask reapp. tensor([ 3.5221e-04, -9.4265e-05,  1.9894e-04,  2.6160e-05,  1.4449e-04,\n","        -7.4373e-05, -1.0649e-04,  5.2207e-05, -2.9165e-05,  6.5558e-05])\n","gradient values before mask reapp. tensor([ 2.6697e-04, -1.0630e-04,  5.1754e-05, -2.9189e-05, -9.3326e-06,\n","        -8.8137e-05, -1.3300e-04, -3.8397e-05, -6.2592e-05, -1.8585e-04])\n","gradient values before mask reapp. tensor([ 3.1205e-04, -9.8331e-05,  1.3203e-04, -1.1306e-05,  5.6329e-05,\n","        -7.7891e-05, -1.1753e-04,  8.4012e-06, -5.3831e-05, -6.0109e-05])\n","gradient values before mask reapp. tensor([ 2.7831e-04, -1.0348e-04,  7.4582e-05, -2.5136e-05,  6.7049e-06,\n","        -8.5065e-05, -1.2870e-04, -2.5587e-05, -6.0914e-05, -1.5142e-04])\n","gradient values before mask reapp. tensor([ 2.0633e-04, -1.1810e-04, -5.6386e-05, -6.5810e-05, -1.1822e-04,\n","        -1.0323e-04, -1.5884e-04, -1.0658e-04, -8.2124e-05, -3.7979e-04])\n","gradient values before mask reapp. tensor([ 4.1156e-04, -8.0540e-05,  3.1719e-04,  6.3144e-05,  2.5529e-04,\n","        -5.8364e-05, -7.9677e-05,  1.2623e-04, -8.4504e-06,  2.6828e-04])\n","gradient values before mask reapp. tensor([ 1.4158e-04, -1.2868e-04, -1.6687e-04, -9.5448e-05, -2.1807e-04,\n","        -1.1791e-04, -1.8148e-04, -1.7233e-04, -9.7242e-05, -5.6341e-04])\n","gradient values before mask reapp. tensor([ 3.7848e-04, -8.7763e-05,  2.5815e-04,  3.8795e-05,  1.9149e-04,\n","        -6.6260e-05, -9.4228e-05,  8.8569e-05, -2.1189e-05,  1.5652e-04])\n","gradient values before mask reapp. tensor([ 2.2542e-04, -1.1023e-04, -7.7913e-06, -4.6257e-05, -6.8334e-05,\n","        -9.5240e-05, -1.4411e-04, -7.2939e-05, -7.1149e-05, -2.8705e-04])\n","gradient values before mask reapp. tensor([ 3.4622e-04, -9.1906e-05,  2.0535e-04,  2.4976e-05,  1.4212e-04,\n","        -7.3694e-05, -1.0517e-04,  5.6593e-05, -2.8824e-05,  6.8765e-05])\n","gradient values before mask reapp. tensor([ 2.1987e-04, -1.1041e-04, -1.3453e-05, -4.6886e-05, -7.2818e-05,\n","        -9.5324e-05, -1.4441e-04, -7.5159e-05, -7.0908e-05, -2.9509e-04])\n","gradient values before mask reapp. tensor([ 3.5176e-04, -9.0067e-05,  2.1977e-04,  3.1603e-05,  1.5833e-04,\n","        -7.1218e-05, -1.0111e-04,  6.6925e-05, -2.4417e-05,  9.6554e-05])\n","gradient values before mask reapp. tensor([ 1.4848e-04, -1.2284e-04, -1.3830e-04, -8.5066e-05, -1.9308e-04,\n","        -1.1290e-04, -1.7226e-04, -1.5216e-04, -9.1459e-05, -5.1135e-04])\n","gradient values before mask reapp. tensor([ 4.0182e-04, -7.9566e-05,  3.1492e-04,  5.7327e-05,  2.4333e-04,\n","        -5.8167e-05, -8.0020e-05,  1.2522e-04, -1.0715e-05,  2.5529e-04])\n","gradient values before mask reapp. tensor([ 2.1274e-04, -1.1031e-04, -2.0578e-05, -5.4098e-05, -8.9477e-05,\n","        -9.6680e-05, -1.4729e-04, -8.1469e-05, -7.5463e-05, -3.1636e-04])\n","gradient values before mask reapp. tensor([ 2.7884e-04, -1.0290e-04,  9.5333e-05, -1.0072e-05,  3.4891e-05,\n","        -8.8407e-05, -1.2912e-04, -9.8630e-06, -4.6142e-05, -1.2406e-04])\n","gradient values before mask reapp. tensor([ 3.3550e-04, -8.8267e-05,  2.0557e-04,  3.0873e-05,  1.4595e-04,\n","        -7.1028e-05, -9.9912e-05,  6.1626e-05, -2.4890e-05,  8.0566e-05])\n","gradient values before mask reapp. tensor([ 1.9294e-04, -1.1647e-04, -5.6789e-05, -7.6056e-05, -1.3617e-04,\n","        -1.0202e-04, -1.5885e-04, -1.0669e-04, -8.6319e-05, -3.9683e-04])\n","gradient values before mask reapp. tensor([ 2.8116e-04, -9.8002e-05,  1.1173e-04,  6.7038e-07,  5.4451e-05,\n","        -8.3923e-05, -1.2067e-04,  4.2332e-06, -4.0667e-05, -8.4144e-05])\n","gradient values before mask reapp. tensor([ 3.5207e-04, -8.6654e-05,  2.3678e-04,  3.2547e-05,  1.6564e-04,\n","        -6.8157e-05, -9.6534e-05,  7.8281e-05, -2.3135e-05,  1.1861e-04])\n","gradient values before mask reapp. tensor([ 1.8126e-04, -1.1340e-04, -6.4510e-05, -6.7923e-05, -1.3448e-04,\n","        -1.0192e-04, -1.5573e-04, -1.0698e-04, -8.2149e-05, -3.9320e-04])\n","gradient values before mask reapp. tensor([ 2.9967e-04, -9.5996e-05,  1.4487e-04,  2.6108e-06,  7.4507e-05,\n","        -8.1110e-05, -1.1764e-04,  2.0891e-05, -3.9366e-05, -4.3662e-05])\n","gradient values before mask reapp. tensor([ 1.8753e-04, -1.1233e-04, -4.9698e-05, -6.5189e-05, -1.2155e-04,\n","        -9.9182e-05, -1.5216e-04, -9.7015e-05, -7.9609e-05, -3.7012e-04])\n","gradient values before mask reapp. tensor([ 3.7798e-04, -8.0544e-05,  2.8957e-04,  4.3246e-05,  2.0576e-04,\n","        -6.1210e-05, -8.6105e-05,  1.0922e-04, -1.7752e-05,  1.9940e-04])\n","gradient values before mask reapp. tensor([ 0.0001, -0.0001, -0.0002, -0.0001, -0.0003, -0.0001, -0.0002, -0.0002,\n","        -0.0001, -0.0006])\n","gradient values before mask reapp. tensor([ 3.7705e-04, -7.9964e-05,  2.9231e-04,  4.1796e-05,  2.0469e-04,\n","        -6.0945e-05, -8.5556e-05,  1.1096e-04, -1.8328e-05,  1.9996e-04])\n","gradient values before mask reapp. tensor([ 1.8960e-04, -1.1159e-04, -3.7361e-05, -4.4061e-05, -8.8812e-05,\n","        -1.0304e-04, -1.5195e-04, -8.5798e-05, -6.3620e-05, -3.3869e-04])\n","gradient values before mask reapp. tensor([ 3.7434e-04, -8.0223e-05,  2.9151e-04,  4.1954e-05,  2.0479e-04,\n","        -6.0403e-05, -8.5088e-05,  1.1197e-04, -1.7151e-05,  1.9841e-04])\n","gradient values before mask reapp. tensor([ 2.2464e-04, -1.0225e-04,  2.9183e-05, -4.6943e-05, -5.8863e-05,\n","        -8.8199e-05, -1.3490e-04, -4.9521e-05, -7.0510e-05, -2.4396e-04])\n","gradient values before mask reapp. tensor([ 2.5604e-04, -1.0055e-04,  8.2341e-05, -1.8454e-05,  8.8006e-06,\n","        -8.8539e-05, -1.3022e-04, -1.6459e-05, -5.0075e-05, -1.5433e-04])\n","gradient values before mask reapp. tensor([ 2.4610e-04, -9.9864e-05,  7.1485e-05, -1.7864e-05,  3.0225e-06,\n","        -8.8609e-05, -1.2922e-04, -2.0239e-05, -4.9698e-05, -1.6417e-04])\n","gradient values before mask reapp. tensor([ 3.0637e-04, -9.1709e-05,  1.7492e-04,  4.9109e-06,  9.0307e-05,\n","        -7.6191e-05, -1.1121e-04,  3.9695e-05, -3.6943e-05, -4.7126e-06])\n","gradient values before mask reapp. tensor([ 1.3865e-04, -1.1764e-04, -1.1886e-04, -9.2450e-05, -1.9947e-04,\n","        -1.0777e-04, -1.6714e-04, -1.3947e-04, -9.3652e-05, -4.9918e-04])\n","gradient values before mask reapp. tensor([ 3.7226e-04, -7.9429e-05,  2.9737e-04,  3.7789e-05,  2.0076e-04,\n","        -5.9450e-05, -8.4829e-05,  1.1493e-04, -1.8644e-05,  1.9766e-04])\n","gradient values before mask reapp. tensor([ 1.9657e-04, -1.0488e-04, -8.5175e-06, -5.9295e-05, -9.7824e-05,\n","        -9.2249e-05, -1.4179e-04, -7.0943e-05, -7.6203e-05, -3.1027e-04])\n","gradient values before mask reapp. tensor([ 3.1984e-04, -8.7392e-05,  2.0711e-04,  1.1701e-05,  1.1467e-04,\n","        -7.1142e-05, -1.0382e-04,  5.9453e-05, -3.3329e-05,  4.6169e-05])\n","gradient values before mask reapp. tensor([ 1.3185e-04, -1.1671e-04, -1.2271e-04, -9.6364e-05, -2.0987e-04,\n","        -1.0821e-04, -1.6791e-04, -1.4212e-04, -9.6105e-05, -5.1098e-04])\n","gradient values before mask reapp. tensor([ 3.4345e-04, -8.2535e-05,  2.5355e-04,  2.2545e-05,  1.5391e-04,\n","        -6.5117e-05, -9.4153e-05,  8.7662e-05, -2.7236e-05,  1.1976e-04])\n","gradient values before mask reapp. tensor([ 1.5504e-04, -1.1356e-04, -7.6128e-05, -6.1595e-05, -1.3763e-04,\n","        -1.0678e-04, -1.5942e-04, -1.0816e-04, -7.1688e-05, -4.1531e-04])\n","gradient values before mask reapp. tensor([ 3.7377e-04, -7.6455e-05,  3.1260e-04,  3.8600e-05,  2.0732e-04,\n","        -5.6607e-05, -8.0860e-05,  1.2475e-04, -1.7939e-05,  2.1765e-04])\n","gradient values before mask reapp. tensor([ 1.7814e-04, -1.0579e-04, -2.9565e-05, -6.7813e-05, -1.2327e-04,\n","        -9.4213e-05, -1.4563e-04, -8.2951e-05, -8.0205e-05, -3.5027e-04])\n","gradient values before mask reapp. tensor([ 3.0116e-04, -8.8458e-05,  1.8474e-04,  1.9583e-06,  8.6443e-05,\n","        -7.3566e-05, -1.0854e-04,  4.5862e-05, -3.8302e-05,  2.3156e-06])\n","gradient values before mask reapp. tensor([ 1.3585e-04, -1.1516e-04, -1.0263e-04, -7.2659e-05, -1.6945e-04,\n","        -1.1009e-04, -1.6514e-04, -1.2468e-04, -7.7883e-05, -4.6605e-04])\n","gradient values before mask reapp. tensor([ 3.7471e-04, -7.4260e-05,  3.2210e-04,  3.8570e-05,  2.0979e-04,\n","        -5.4968e-05, -7.8673e-05,  1.3016e-04, -1.8278e-05,  2.2944e-04])\n","gradient values before mask reapp. tensor([ 7.6649e-05, -1.2374e-04, -2.0545e-04, -1.2389e-04, -2.9430e-04,\n","        -1.1858e-04, -1.8504e-04, -1.9147e-04, -1.0983e-04, -6.5757e-04])\n","gradient values before mask reapp. tensor([ 3.8596e-04, -7.1739e-05,  3.4389e-04,  4.2205e-05,  2.2499e-04,\n","        -5.1958e-05, -7.4891e-05,  1.4200e-04, -1.6801e-05,  2.6225e-04])\n","gradient values before mask reapp. tensor([ 5.9114e-05, -1.2828e-04, -2.3216e-04, -1.1252e-04, -2.9281e-04,\n","        -1.2735e-04, -1.9292e-04, -2.0288e-04, -9.8081e-05, -6.8950e-04])\n","gradient values before mask reapp. tensor([ 4.4127e-04, -6.0910e-05,  4.4837e-04,  7.0960e-05,  3.1968e-04,\n","        -3.7728e-05, -5.1956e-05,  2.0669e-04, -7.9657e-07,  4.3564e-04])\n","gradient values before mask reapp. tensor([ 1.6239e-04, -1.0818e-04, -4.4754e-05, -6.0280e-05, -1.2476e-04,\n","        -1.0212e-04, -1.5327e-04, -9.0180e-05, -7.1249e-05, -3.7600e-04])\n","gradient values before mask reapp. tensor([ 2.9136e-04, -8.6982e-05,  1.8345e-04, -4.7655e-06,  7.3696e-05,\n","        -7.3110e-05, -1.0846e-04,  4.5223e-05, -4.1508e-05, -1.0054e-05])\n","gradient values before mask reapp. tensor([ 1.5074e-04, -1.0987e-04, -6.1416e-05, -6.8755e-05, -1.4493e-04,\n","        -1.0446e-04, -1.5715e-04, -1.0051e-04, -7.5457e-05, -4.1018e-04])\n","gradient values before mask reapp. tensor([ 3.6378e-04, -7.4787e-05,  3.1345e-04,  2.9212e-05,  1.9029e-04,\n","        -5.5465e-05, -8.2005e-05,  1.2354e-04, -2.2589e-05,  2.0302e-04])\n","gradient values before mask reapp. tensor([ 8.3243e-05, -1.2275e-04, -1.8163e-04, -1.0236e-04, -2.5477e-04,\n","        -1.1985e-04, -1.8320e-04, -1.7310e-04, -9.2410e-05, -6.1272e-04])\n","gradient values before mask reapp. tensor([ 3.3708e-04, -8.0125e-05,  2.6997e-04,  1.3856e-05,  1.4826e-04,\n","        -6.1503e-05, -9.1740e-05,  9.7814e-05, -2.9312e-05,  1.2413e-04])\n","gradient values before mask reapp. tensor([ 2.2054e-04, -9.5379e-05,  7.2472e-05, -3.1480e-05, -2.4528e-05,\n","        -8.5437e-05, -1.2734e-04, -1.7568e-05, -5.5015e-05, -1.8670e-04])\n","gradient values before mask reapp. tensor([ 2.3927e-04, -9.5847e-05,  9.9852e-05, -3.4070e-05, -1.0925e-05,\n","        -8.4263e-05, -1.2752e-04, -5.6946e-06, -5.5676e-05, -1.6159e-04])\n","gradient values before mask reapp. tensor([ 2.1893e-04, -9.5005e-05,  7.1638e-05, -3.3266e-05, -2.8609e-05,\n","        -8.4999e-05, -1.2779e-04, -1.8909e-05, -5.6305e-05, -1.8974e-04])\n","gradient values before mask reapp. tensor([ 2.6994e-04, -8.9349e-05,  1.5739e-04, -1.8862e-05,  3.8760e-05,\n","        -7.6032e-05, -1.1526e-04,  2.8741e-05, -4.7985e-05, -6.6255e-05])\n","gradient values before mask reapp. tensor([ 8.3518e-05, -1.2077e-04, -1.6936e-04, -1.0486e-04, -2.5293e-04,\n","        -1.1788e-04, -1.8089e-04, -1.6591e-04, -9.3197e-05, -6.0176e-04])\n","gradient values before mask reapp. tensor([ 4.1276e-04, -6.3330e-05,  4.1683e-04,  5.2461e-05,  2.7486e-04,\n","        -4.0789e-05, -5.9838e-05,  1.8696e-04, -9.2242e-06,  3.6603e-04])\n","gradient values before mask reapp. tensor([ 4.6891e-05, -1.2626e-04, -2.2911e-04, -1.2084e-04, -3.0750e-04,\n","        -1.2545e-04, -1.9255e-04, -2.0057e-04, -1.0113e-04, -7.0155e-04])\n","gradient values before mask reapp. tensor([ 4.2280e-04, -6.0333e-05,  4.3978e-04,  5.7206e-05,  2.9227e-04,\n","        -3.7743e-05, -5.4801e-05,  2.0090e-04, -6.8359e-06,  4.0159e-04])\n","gradient values before mask reapp. tensor([ 1.0861e-04, -1.1295e-04, -1.1410e-04, -8.8921e-05, -2.0577e-04,\n","        -1.0970e-04, -1.6752e-04, -1.3135e-04, -8.5269e-05, -5.0833e-04])\n","gradient values before mask reapp. tensor([ 2.5018e-04, -9.2807e-05,  1.3135e-04, -3.3472e-05,  5.4447e-06,\n","        -7.9575e-05, -1.2251e-04,  1.2434e-05, -5.4209e-05, -1.2356e-04])\n","gradient values before mask reapp. tensor([ 2.2525e-04, -9.1542e-05,  9.8492e-05, -3.0137e-05, -1.1809e-05,\n","        -8.0378e-05, -1.2172e-04, -1.3515e-06, -5.3202e-05, -1.5305e-04])\n","gradient values before mask reapp. tensor([ 1.9688e-04, -1.0128e-04,  4.1463e-05, -5.7395e-05, -7.6211e-05,\n","        -9.1025e-05, -1.4049e-04, -4.0486e-05, -6.6412e-05, -2.7297e-04])\n","gradient values before mask reapp. tensor([ 2.3303e-04, -8.8952e-05,  1.1731e-04, -2.6399e-05,  1.9580e-06,\n","        -7.7861e-05, -1.1757e-04,  1.0085e-05, -5.1349e-05, -1.2428e-04])\n","gradient values before mask reapp. tensor([ 2.6555e-04, -8.6640e-05,  1.6909e-04, -2.2020e-05,  3.6879e-05,\n","        -7.3530e-05, -1.1270e-04,  3.6440e-05, -4.8743e-05, -5.8751e-05])\n","gradient values before mask reapp. tensor([ 6.7460e-05, -1.2017e-04, -1.7844e-04, -1.1340e-04, -2.7305e-04,\n","        -1.1814e-04, -1.8268e-04, -1.7070e-04, -9.6718e-05, -6.2823e-04])\n","gradient values before mask reapp. tensor([ 4.0095e-04, -6.2121e-05,  4.1516e-04,  4.5304e-05,  2.6071e-04,\n","        -4.0111e-05, -6.0250e-05,  1.8649e-04, -1.2006e-05,  3.5078e-04])\n","gradient values before mask reapp. tensor([ 3.2300e-05, -1.2574e-04, -2.3627e-04, -1.2924e-04, -3.2618e-04,\n","        -1.2541e-04, -1.9422e-04, -2.0439e-04, -1.0447e-04, -7.2558e-04])\n","gradient values before mask reapp. tensor([ 4.1864e-04, -5.7771e-05,  4.5145e-04,  5.4203e-05,  2.9058e-04,\n","        -3.5250e-05, -5.2456e-05,  2.0848e-04, -7.4504e-06,  4.0907e-04])\n","gradient values before mask reapp. tensor([ 4.3362e-05, -1.2132e-04, -2.0946e-04, -1.2209e-04, -3.0469e-04,\n","        -1.2198e-04, -1.8760e-04, -1.8790e-04, -1.0139e-04, -6.8089e-04])\n","gradient values before mask reapp. tensor([ 3.3933e-04, -7.2014e-05,  3.1099e-04,  1.1441e-05,  1.5620e-04,\n","        -5.4561e-05, -8.3920e-05,  1.2152e-04, -3.0494e-05,  1.6719e-04])\n","gradient values before mask reapp. tensor([ 6.7438e-05, -1.1734e-04, -1.6521e-04, -1.1278e-04, -2.6831e-04,\n","        -1.1588e-04, -1.7929e-04, -1.6199e-04, -9.6148e-05, -6.1200e-04])\n","gradient values before mask reapp. tensor([ 2.8590e-04, -8.2528e-05,  2.1921e-04, -1.7762e-05,  7.0001e-05,\n","        -6.7265e-05, -1.0430e-04,  6.6299e-05, -4.4400e-05,  6.5888e-06])\n","gradient values before mask reapp. tensor([ 2.3176e-04, -8.5850e-05,  1.3410e-04, -2.7191e-05,  6.0631e-06,\n","        -7.4609e-05, -1.1399e-04,  2.0946e-05, -5.0716e-05, -1.0684e-04])\n","gradient values before mask reapp. tensor([ 1.3595e-04, -1.0896e-04, -4.5550e-05, -9.0866e-05, -1.7209e-04,\n","        -1.0210e-04, -1.6014e-04, -9.3486e-05, -8.2895e-05, -4.3612e-04])\n","gradient values before mask reapp. tensor([ 2.6997e-04, -7.8443e-05,  2.0612e-04, -9.2592e-06,  6.8333e-05,\n","        -6.4850e-05, -9.8965e-05,  6.4463e-05, -4.1017e-05,  9.8835e-06])\n","gradient values before mask reapp. tensor([ 2.0968e-04, -9.3632e-05,  9.1520e-05, -5.2383e-05, -4.9143e-05,\n","        -8.3296e-05, -1.3017e-04, -1.0228e-05, -6.3131e-05, -2.0576e-04])\n","gradient values before mask reapp. tensor([ 8.5617e-05, -1.1275e-04, -1.2127e-04, -1.0529e-04, -2.3543e-04,\n","        -1.0965e-04, -1.7047e-04, -1.3499e-04, -9.0963e-05, -5.4744e-04])\n","gradient values before mask reapp. tensor([ 3.8680e-04, -5.8324e-05,  4.2893e-04,  3.3321e-05,  2.9357e-04,\n","        -4.5709e-05, -6.0885e-05,  2.0095e-04,  9.3839e-06,  3.4395e-04])\n","gradient values before mask reapp. tensor([-6.6368e-05, -1.4125e-04, -3.9082e-04, -1.8298e-04, -4.8339e-04,\n","        -1.4597e-04, -2.2887e-04, -2.9827e-04, -1.3079e-04, -1.0043e-03])\n","gradient values before mask reapp. tensor([ 5.9617e-04, -1.7965e-05,  8.2011e-04,  1.4265e-04,  6.7284e-04,\n","         4.1643e-06,  2.3966e-05,  4.4541e-04,  8.1332e-05,  9.9752e-04])\n","gradient values before mask reapp. tensor([-5.5974e-05, -1.3583e-04, -3.6432e-04, -1.7054e-04, -4.5742e-04,\n","        -1.4202e-04, -2.2096e-04, -2.8064e-04, -1.2525e-04, -9.5223e-04])\n","gradient values before mask reapp. tensor([ 3.7237e-04, -5.7755e-05,  4.1653e-04,  2.9172e-05,  2.8446e-04,\n","        -4.7593e-05, -6.2091e-05,  1.9608e-04,  1.0813e-05,  3.2151e-04])\n","gradient values before mask reapp. tensor([ 9.4992e-05, -1.1046e-04, -9.5427e-05, -1.0576e-04, -2.2496e-04,\n","        -1.0747e-04, -1.6791e-04, -1.2106e-04, -9.0687e-05, -5.2169e-04])\n","gradient values before mask reapp. tensor([ 2.5442e-04, -7.7693e-05,  2.1020e-04, -2.6791e-05,  9.4231e-05,\n","        -7.3807e-05, -1.0427e-04,  7.1815e-05, -2.0567e-05, -1.9844e-05])\n","gradient values before mask reapp. tensor([ 2.4298e-04, -8.1492e-05,  1.8597e-04, -3.4319e-05,  6.7798e-05,\n","        -7.6298e-05, -1.1078e-04,  5.5691e-05, -2.6243e-05, -6.2775e-05])\n","gradient values before mask reapp. tensor([ 2.7779e-05, -1.2144e-04, -1.9750e-04, -1.4188e-04, -2.8977e-04,\n","        -1.2629e-04, -1.9136e-04, -1.7650e-04, -8.7301e-05, -7.0545e-04])\n","gradient values before mask reapp. tensor([ 4.3615e-04, -4.4512e-05,  5.4460e-04,  6.2614e-05,  4.0609e-04,\n","        -3.0802e-05, -3.4291e-05,  2.7715e-04,  3.4794e-05,  5.3086e-04])\n","gradient values before mask reapp. tensor([ 9.5331e-06, -1.2426e-04, -2.3749e-04, -1.4679e-04, -3.5711e-04,\n","        -1.2565e-04, -1.9741e-04, -2.0594e-04, -1.1128e-04, -7.6145e-04])\n","gradient values before mask reapp. tensor([ 4.1764e-04, -4.6994e-05,  5.1590e-04,  5.4450e-05,  3.8044e-04,\n","        -3.4634e-05, -4.0360e-05,  2.6035e-04,  3.1822e-05,  4.8194e-04])\n","gradient values before mask reapp. tensor([ 8.6012e-06, -1.2269e-04, -2.3344e-04, -1.4505e-04, -3.5494e-04,\n","        -1.2503e-04, -1.9585e-04, -2.0291e-04, -1.1064e-04, -7.5430e-04])\n","gradient values before mask reapp. tensor([ 3.0570e-04, -6.5492e-05,  3.1891e-04, -8.3394e-07,  1.9152e-04,\n","        -6.0122e-05, -8.1598e-05,  1.3962e-04, -1.7131e-06,  1.5197e-04])\n","gradient values before mask reapp. tensor([ 1.7843e-04, -9.1877e-05,  8.5375e-05, -7.1413e-05, -3.7893e-05,\n","        -9.1474e-05, -1.3444e-04, -5.8575e-06, -4.4665e-05, -2.5087e-04])\n","gradient values before mask reapp. tensor([ 1.4733e-04, -9.2384e-05,  4.0105e-05, -7.5312e-05, -6.4338e-05,\n","        -9.5217e-05, -1.3833e-04, -2.8314e-05, -4.3885e-05, -3.0689e-04])\n","gradient values before mask reapp. tensor([ 3.1028e-04, -6.8048e-05,  3.2472e-04, -7.5701e-06,  1.8867e-04,\n","        -6.0406e-05, -8.5089e-05,  1.4013e-04, -3.5450e-06,  1.4506e-04])\n","gradient values before mask reapp. tensor([-5.4257e-05, -1.3140e-04, -3.2132e-04, -1.7762e-04, -4.0444e-04,\n","        -1.4191e-04, -2.1551e-04, -2.4796e-04, -1.0269e-04, -9.1572e-04])\n","gradient values before mask reapp. tensor([ 5.2163e-04, -2.7631e-05,  7.1695e-04,  9.9363e-05,  5.6096e-04,\n","        -1.0869e-05, -1.4961e-06,  3.8267e-04,  6.4477e-05,  7.9528e-04])\n","gradient values before mask reapp. tensor([-6.1946e-05, -1.3042e-04, -3.2871e-04, -1.7874e-04, -4.1077e-04,\n","        -1.4350e-04, -2.1673e-04, -2.5217e-04, -1.0255e-04, -9.2711e-04])\n","gradient values before mask reapp. tensor([ 3.6890e-04, -5.3460e-05,  4.4540e-04,  2.3670e-05,  3.0006e-04,\n","        -4.5701e-05, -5.8496e-05,  2.1563e-04,  1.7497e-05,  3.4194e-04])\n","gradient values before mask reapp. tensor([-2.8797e-05, -1.2676e-04, -2.7000e-04, -1.7121e-04, -3.6982e-04,\n","        -1.3659e-04, -2.0762e-04, -2.1913e-04, -9.9091e-05, -8.4624e-04])\n","gradient values before mask reapp. tensor([ 5.2948e-04, -2.4411e-05,  7.4156e-04,  1.0443e-04,  5.8484e-04,\n","        -8.1085e-06,  3.8189e-06,  3.9935e-04,  7.1078e-05,  8.3217e-04])\n","gradient values before mask reapp. tensor([-0.0002, -0.0001, -0.0005, -0.0002, -0.0006, -0.0002, -0.0003, -0.0004,\n","        -0.0001, -0.0012])\n","gradient values before mask reapp. tensor([ 5.4253e-04, -2.1625e-05,  7.7046e-04,  1.1055e-04,  6.1177e-04,\n","        -4.7387e-06,  9.6351e-06,  4.1790e-04,  7.6919e-05,  8.7615e-04])\n","gradient values before mask reapp. tensor([-0.0001, -0.0001, -0.0004, -0.0002, -0.0005, -0.0002, -0.0002, -0.0003,\n","        -0.0001, -0.0011])\n","gradient values before mask reapp. tensor([ 5.0957e-04, -2.7356e-05,  7.1426e-04,  9.3241e-05,  5.5679e-04,\n","        -1.2344e-05, -3.0847e-06,  3.8327e-04,  6.7646e-05,  7.7827e-04])\n","gradient values before mask reapp. tensor([-0.0002, -0.0001, -0.0005, -0.0003, -0.0006, -0.0002, -0.0003, -0.0004,\n","        -0.0002, -0.0013])\n","gradient values before mask reapp. tensor([ 5.1045e-04, -2.3962e-05,  7.2620e-04,  9.8264e-05,  5.7299e-04,\n","        -1.0858e-05,  1.5420e-06,  3.9320e-04,  7.3269e-05,  8.0170e-04])\n","gradient values before mask reapp. tensor([-0.0002, -0.0001, -0.0005, -0.0003, -0.0006, -0.0002, -0.0002, -0.0004,\n","        -0.0001, -0.0012])\n","gradient values before mask reapp. tensor([ 4.9934e-04, -2.5810e-05,  7.0971e-04,  9.1501e-05,  5.5497e-04,\n","        -1.3328e-05, -2.7346e-06,  3.8295e-04,  7.0326e-05,  7.6949e-04])\n","gradient values before mask reapp. tensor([-0.0001, -0.0001, -0.0004, -0.0002, -0.0005, -0.0002, -0.0002, -0.0003,\n","        -0.0001, -0.0011])\n","gradient values before mask reapp. tensor([ 4.8777e-04, -3.1011e-05,  6.8515e-04,  7.7552e-05,  5.2037e-04,\n","        -1.7686e-05, -1.2381e-05,  3.6441e-04,  6.1604e-05,  7.1269e-04])\n","gradient values before mask reapp. tensor([-2.8567e-05, -1.1707e-04, -2.2933e-04, -1.6090e-04, -3.2177e-04,\n","        -1.3305e-04, -1.9601e-04, -1.8707e-04, -8.0665e-05, -7.8253e-04])\n","gradient values before mask reapp. tensor([ 3.4454e-04, -5.4136e-05,  4.3277e-04,  9.8439e-06,  2.8452e-04,\n","        -4.9499e-05, -6.3949e-05,  2.1088e-04,  2.1335e-05,  2.9694e-04])\n","gradient values before mask reapp. tensor([-2.5615e-05, -1.1558e-04, -2.1835e-04, -1.5724e-04, -3.0382e-04,\n","        -1.3078e-04, -1.9254e-04, -1.7781e-04, -7.4019e-05, -7.6177e-04])\n","gradient values before mask reapp. tensor([ 2.5219e-04, -7.2508e-05,  2.6837e-04, -4.0816e-05,  1.2363e-04,\n","        -7.1385e-05, -1.0047e-04,  1.0971e-04, -8.1069e-06,  1.2083e-05])\n","gradient values before mask reapp. tensor([ 1.1428e-04, -8.9331e-05,  3.9243e-05, -8.8842e-05, -6.2265e-05,\n","        -9.8444e-05, -1.3911e-04, -2.0255e-05, -3.0617e-05, -3.3799e-04])\n","gradient values before mask reapp. tensor([ 1.2632e-04, -9.5927e-05,  4.5844e-05, -1.0468e-04, -8.8597e-05,\n","        -1.0049e-04, -1.4786e-04, -2.5609e-05, -4.5359e-05, -3.6472e-04])\n","gradient values before mask reapp. tensor([ 2.5861e-04, -6.1201e-05,  3.1069e-04, -1.4008e-05,  1.9899e-04,\n","        -6.4282e-05, -8.0649e-05,  1.4906e-04,  1.8748e-05,  1.1314e-04])\n","gradient values before mask reapp. tensor([ 1.3232e-04, -9.1321e-05,  6.4905e-05, -9.5410e-05, -6.3873e-05,\n","        -9.7729e-05, -1.4188e-04, -1.1911e-05, -3.7615e-05, -3.2550e-04])\n","gradient values before mask reapp. tensor([ 1.3205e-04, -8.3460e-05,  8.2549e-05, -7.7983e-05, -2.2759e-05,\n","        -9.3023e-05, -1.2946e-04,  7.5542e-06, -2.1936e-05, -2.6889e-04])\n","gradient values before mask reapp. tensor([ 8.7505e-05, -1.0065e-04, -1.2080e-05, -1.2226e-04, -1.4317e-04,\n","        -1.0839e-04, -1.5957e-04, -5.9288e-05, -5.2889e-05, -4.6499e-04])\n","gradient values before mask reapp. tensor([ 2.8831e-04, -5.3545e-05,  3.7491e-04,  1.6213e-06,  2.5773e-04,\n","        -5.6317e-05, -6.7066e-05,  1.8941e-04,  3.0736e-05,  2.1515e-04])\n","gradient values before mask reapp. tensor([ 1.1196e-04, -9.4255e-05,  3.7439e-05, -1.0690e-04, -9.2580e-05,\n","        -1.0197e-04, -1.4864e-04, -2.7929e-05, -4.1381e-05, -3.8016e-04])\n","gradient values before mask reapp. tensor([ 1.6466e-04, -7.6300e-05,  1.5069e-04, -6.3541e-05,  3.8414e-05,\n","        -8.5305e-05, -1.1643e-04,  4.9439e-05, -9.8025e-06, -1.6482e-04])\n","gradient values before mask reapp. tensor([-2.3396e-05, -1.1757e-04, -1.9849e-04, -1.7422e-04, -3.1735e-04,\n","        -1.3255e-04, -1.9738e-04, -1.7094e-04, -8.1161e-05, -7.7649e-04])\n","gradient values before mask reapp. tensor([ 2.9186e-04, -5.2875e-05,  3.8578e-04, -3.4982e-06,  2.5442e-04,\n","        -5.6385e-05, -6.8288e-05,  1.9276e-04,  2.7753e-05,  2.1691e-04])\n","gradient values before mask reapp. tensor([-5.8316e-06, -1.1286e-04, -1.6015e-04, -1.6432e-04, -2.8192e-04,\n","        -1.2805e-04, -1.8898e-04, -1.4672e-04, -7.4068e-05, -7.1454e-04])\n","gradient values before mask reapp. tensor([ 1.7153e-04, -7.2286e-05,  1.7788e-04, -5.7660e-05,  6.5263e-05,\n","        -8.2308e-05, -1.0935e-04,  6.8818e-05, -2.6926e-06, -1.2236e-04])\n","gradient values before mask reapp. tensor([ 1.8478e-04, -7.7777e-05,  1.8681e-04, -7.2023e-05,  4.2194e-05,\n","        -8.4232e-05, -1.1759e-04,  6.4513e-05, -1.6485e-05, -1.4361e-04])\n","gradient values before mask reapp. tensor([ 1.1608e-04, -8.1815e-05,  8.1933e-05, -8.5352e-05, -2.4977e-05,\n","        -9.5155e-05, -1.3020e-04,  1.0487e-05, -1.7301e-05, -2.8586e-04])\n","gradient values before mask reapp. tensor([ 1.6681e-04, -8.0935e-05,  1.5814e-04, -8.1741e-05,  1.4518e-05,\n","        -8.8295e-05, -1.2441e-04,  4.7216e-05, -2.0462e-05, -1.9575e-04])\n","gradient values before mask reapp. tensor([ 5.3282e-05, -9.3451e-05, -2.8213e-05, -1.2071e-04, -1.3630e-04,\n","        -1.1004e-04, -1.5493e-04, -5.8174e-05, -3.8623e-05, -4.7886e-04])\n","gradient values before mask reapp. tensor([ 3.3238e-04, -5.1177e-05,  4.5672e-04, -2.7442e-06,  2.9464e-04,\n","        -5.0185e-05, -6.3837e-05,  2.2826e-04,  2.9768e-05,  2.9532e-04])\n","gradient values before mask reapp. tensor([-3.0335e-05, -1.0852e-04, -1.7584e-04, -1.6342e-04, -2.7575e-04,\n","        -1.2940e-04, -1.8689e-04, -1.4821e-04, -6.2139e-05, -7.2990e-04])\n","gradient values before mask reapp. tensor([ 3.3506e-04, -5.1319e-05,  4.6356e-04, -4.8402e-06,  2.9832e-04,\n","        -4.9644e-05, -6.3991e-05,  2.3197e-04,  3.0646e-05,  2.9859e-04])\n","gradient values before mask reapp. tensor([ 2.0449e-05, -9.8917e-05, -8.1852e-05, -1.3996e-04, -1.8781e-04,\n","        -1.1742e-04, -1.6821e-04, -9.1315e-05, -4.5849e-05, -5.7756e-04])\n","gradient values before mask reapp. tensor([ 1.7294e-04, -7.8215e-05,  1.8010e-04, -8.2232e-05,  3.4251e-05,\n","        -8.5912e-05, -1.2173e-04,  6.1030e-05, -1.3979e-05, -1.7199e-04])\n","gradient values before mask reapp. tensor([ 1.6678e-04, -7.1624e-05,  1.8667e-04, -6.8388e-05,  6.5444e-05,\n","        -8.3350e-05, -1.1246e-04,  7.3124e-05,  1.3971e-07, -1.3512e-04])\n","gradient values before mask reapp. tensor([-3.9051e-05, -1.1381e-04, -1.9143e-04, -1.8290e-04, -3.1212e-04,\n","        -1.3349e-04, -1.9721e-04, -1.6311e-04, -7.3179e-05, -7.8706e-04])\n","gradient values before mask reapp. tensor([ 2.3478e-04, -5.7588e-05,  3.1782e-04, -3.1804e-05,  1.9437e-04,\n","        -6.6561e-05, -8.3636e-05,  1.5605e-04,  2.6003e-05,  8.3727e-05])\n","gradient values before mask reapp. tensor([ 2.0973e-05, -1.0275e-04, -7.8921e-05, -1.5489e-04, -2.0940e-04,\n","        -1.1976e-04, -1.7465e-04, -9.4585e-05, -5.4988e-05, -6.0632e-04])\n","gradient values before mask reapp. tensor([ 1.9737e-04, -6.4254e-05,  2.5435e-04, -5.2664e-05,  1.2992e-04,\n","        -7.5517e-05, -9.8157e-05,  1.1659e-04,  1.4023e-05, -2.9008e-05])\n","gradient values before mask reapp. tensor([ 1.2786e-04, -8.3650e-05,  1.1452e-04, -1.0366e-04, -2.7053e-05,\n","        -9.5299e-05, -1.3591e-04,  2.2640e-05, -2.1617e-05, -2.8862e-04])\n","gradient values before mask reapp. tensor([ 1.3384e-04, -7.4905e-05,  1.4285e-04, -8.3982e-05,  2.5829e-05,\n","        -8.9668e-05, -1.2191e-04,  4.8535e-05, -3.0076e-06, -2.1586e-04])\n","gradient values before mask reapp. tensor([ 1.5226e-04, -8.1607e-05,  1.5847e-04, -9.7933e-05,  7.9111e-06,\n","        -9.0638e-05, -1.2980e-04,  4.8255e-05, -1.6172e-05, -2.2968e-04])\n","gradient values before mask reapp. tensor([ 4.4539e-05, -9.1341e-05, -1.4628e-05, -1.3171e-04, -1.2903e-04,\n","        -1.1084e-04, -1.5656e-04, -4.8694e-05, -3.1501e-05, -4.8735e-04])\n","gradient values before mask reapp. tensor([ 2.7550e-04, -5.5939e-05,  3.8700e-04, -3.3156e-05,  2.2911e-04,\n","        -6.0955e-05, -8.0748e-05,  1.8879e-04,  2.5866e-05,  1.5568e-04])\n","gradient values before mask reapp. tensor([-1.6840e-04, -1.2991e-04, -3.9268e-04, -2.3536e-04, -4.7960e-04,\n","        -1.5899e-04, -2.3506e-04, -2.7686e-04, -9.0378e-05, -1.1167e-03])\n","gradient values before mask reapp. tensor([ 4.3684e-04, -2.8157e-05,  6.8053e-04,  4.0855e-05,  4.9901e-04,\n","        -2.4570e-05, -2.1822e-05,  3.6713e-04,  7.2699e-05,  6.3020e-04])\n","gradient values before mask reapp. tensor([-0.0003, -0.0002, -0.0006, -0.0003, -0.0007, -0.0002, -0.0003, -0.0004,\n","        -0.0001, -0.0015])\n","gradient values before mask reapp. tensor([6.6355e-04, 1.5811e-05, 1.1047e-03, 1.6032e-04, 9.1317e-04, 2.9292e-05,\n","        7.0248e-05, 6.3282e-04, 1.5257e-04, 1.3398e-03])\n","gradient values before mask reapp. tensor([-0.0003, -0.0002, -0.0007, -0.0003, -0.0008, -0.0002, -0.0003, -0.0005,\n","        -0.0002, -0.0017])\n","gradient values before mask reapp. tensor([ 5.6375e-04, -3.7360e-06,  9.2363e-04,  1.0675e-04,  7.3599e-04,\n","         5.5809e-06,  2.9553e-05,  5.2012e-04,  1.2032e-04,  1.0297e-03])\n","gradient values before mask reapp. tensor([-0.0004, -0.0002, -0.0008, -0.0004, -0.0009, -0.0002, -0.0003, -0.0005,\n","        -0.0002, -0.0018])\n","gradient values before mask reapp. tensor([ 4.4929e-04, -2.2270e-05,  7.2350e-04,  5.1043e-05,  5.4367e-04,\n","        -2.0466e-05, -1.2140e-05,  3.9729e-04,  8.5823e-05,  6.9596e-04])\n","gradient values before mask reapp. tensor([-1.8815e-04, -1.2803e-04, -4.0153e-04, -2.4054e-04, -4.8703e-04,\n","        -1.6184e-04, -2.3604e-04, -2.7838e-04, -8.6639e-05, -1.1395e-03])\n","gradient values before mask reapp. tensor([ 3.4296e-04, -4.3462e-05,  5.3263e-04, -7.0452e-06,  3.5674e-04,\n","        -4.5967e-05, -5.4906e-05,  2.7936e-04,  5.1664e-05,  3.6564e-04])\n","gradient values before mask reapp. tensor([ 2.9262e-05, -8.8814e-05, -1.0426e-05, -1.3659e-04, -1.2099e-04,\n","        -1.1241e-04, -1.5697e-04, -4.1925e-05, -2.1561e-05, -4.9583e-04])\n","gradient values before mask reapp. tensor([ 9.8183e-05, -8.3794e-05,  1.0411e-04, -1.1822e-04, -3.1882e-05,\n","        -9.9757e-05, -1.4025e-04,  2.3127e-05, -1.1173e-05, -3.3398e-04])\n","gradient values before mask reapp. tensor([ 9.3600e-05, -7.9936e-05,  1.0667e-04, -1.1401e-04, -2.3840e-05,\n","        -9.9602e-05, -1.3659e-04,  2.7373e-05, -7.1582e-06, -3.2256e-04])\n","gradient values before mask reapp. tensor([ 1.5080e-05, -9.5254e-05, -3.5652e-05, -1.5661e-04, -1.6555e-04,\n","        -1.1822e-04, -1.6808e-04, -6.1413e-05, -3.4497e-05, -5.6630e-04])\n","gradient values before mask reapp. tensor([ 1.5731e-04, -6.6988e-05,  2.2727e-04, -7.9543e-05,  9.7100e-05,\n","        -8.3578e-05, -1.1039e-04,  1.0305e-04,  1.7592e-05, -1.1852e-04])\n","gradient values before mask reapp. tensor([ 8.1382e-05, -8.5445e-05,  8.2926e-05, -1.2955e-04, -5.7716e-05,\n","        -1.0401e-04, -1.4664e-04,  9.3345e-06, -1.5428e-05, -3.8088e-04])\n","gradient values before mask reapp. tensor([ 1.7314e-04, -6.4440e-05,  2.5899e-04, -7.4225e-05,  1.2459e-04,\n","        -8.0497e-05, -1.0551e-04,  1.2202e-04,  2.3041e-05, -7.3914e-05])\n","gradient values before mask reapp. tensor([ 4.8298e-05, -9.2255e-05,  2.6084e-05, -1.4795e-04, -1.1249e-04,\n","        -1.1205e-04, -1.6018e-04, -2.5259e-05, -2.4074e-05, -4.8290e-04])\n","gradient values before mask reapp. tensor([ 1.1029e-04, -7.0889e-05,  1.5922e-04, -9.7264e-05,  4.0132e-05,\n","        -9.3028e-05, -1.2276e-04,  6.5060e-05,  1.2382e-05, -2.3092e-04])\n","gradient values before mask reapp. tensor([ 9.0842e-05, -8.3265e-05,  1.0842e-04, -1.2692e-04, -3.5669e-05,\n","        -1.0208e-04, -1.4327e-04,  2.5402e-05, -9.4338e-06, -3.4985e-04])\n","gradient values before mask reapp. tensor([-6.6278e-05, -1.0473e-04, -1.5628e-04, -1.9129e-04, -2.6870e-04,\n","        -1.3490e-04, -1.9144e-04, -1.2928e-04, -4.5132e-05, -7.7111e-04])\n","gradient values before mask reapp. tensor([ 3.9253e-04, -2.9035e-05,  6.5392e-04,  1.9327e-05,  4.7719e-04,\n","        -3.3070e-05, -3.1280e-05,  3.5772e-04,  8.2308e-05,  5.4971e-04])\n","gradient values before mask reapp. tensor([-2.3233e-04, -1.3146e-04, -4.4535e-04, -2.6477e-04, -5.2841e-04,\n","        -1.7104e-04, -2.4865e-04, -3.0137e-04, -8.5705e-05, -1.2411e-03])\n","gradient values before mask reapp. tensor([ 4.9818e-04, -9.7771e-06,  8.4833e-04,  7.0077e-05,  6.6069e-04,\n","        -8.6279e-06,  8.4131e-06,  4.7695e-04,  1.1632e-04,  8.6707e-04])\n","gradient values before mask reapp. tensor([-0.0004, -0.0002, -0.0007, -0.0003, -0.0008, -0.0002, -0.0003, -0.0005,\n","        -0.0001, -0.0017])\n","gradient values before mask reapp. tensor([ 5.5360e-04, -1.9118e-06,  9.4971e-04,  9.0887e-05,  7.4708e-04,\n","         3.1022e-06,  2.6623e-05,  5.3726e-04,  1.2972e-04,  1.0210e-03])\n","gradient values before mask reapp. tensor([-2.1047e-04, -1.2677e-04, -3.9788e-04, -2.5686e-04, -4.8938e-04,\n","        -1.6618e-04, -2.4079e-04, -2.7299e-04, -7.8230e-05, -1.1737e-03])\n","gradient values before mask reapp. tensor([ 2.2754e-04, -5.3235e-05,  3.8005e-04, -5.7117e-05,  2.2377e-04,\n","        -6.8674e-05, -8.6064e-05,  1.9488e-04,  4.2193e-05,  9.2114e-05])\n","gradient values before mask reapp. tensor([ 1.1359e-04, -6.9396e-05,  1.8210e-04, -1.0353e-04,  5.1263e-05,\n","        -9.2555e-05, -1.2358e-04,  7.7312e-05,  1.6520e-05, -2.2014e-04])\n","gradient values before mask reapp. tensor([-7.1341e-06, -9.1696e-05, -3.1643e-05, -1.6364e-04, -1.4871e-04,\n","        -1.2023e-04, -1.6821e-04, -5.1359e-05, -1.7462e-05, -5.7999e-04])\n","gradient values before mask reapp. tensor([ 3.5596e-05, -8.4271e-05,  4.9321e-05, -1.4630e-04, -7.9338e-05,\n","        -1.1121e-04, -1.5249e-04, -2.5611e-06, -6.8834e-06, -4.5525e-04])\n","gradient values before mask reapp. tensor([ 3.9431e-05, -8.4760e-05,  5.4154e-05, -1.4917e-04, -8.4255e-05,\n","        -1.1118e-04, -1.5383e-04, -2.3485e-06, -1.0518e-05, -4.5586e-04])\n","gradient values before mask reapp. tensor([ 1.5778e-04, -6.1082e-05,  2.7278e-04, -8.3144e-05,  1.3912e-04,\n","        -8.1951e-05, -1.0551e-04,  1.3531e-04,  3.5623e-05, -8.0152e-05])\n","gradient values before mask reapp. tensor([ 1.8248e-04, -6.0922e-05,  3.0794e-04, -8.3003e-05,  1.5483e-04,\n","        -7.9084e-05, -1.0449e-04,  1.5055e-04,  3.3253e-05, -4.2164e-05])\n","gradient values before mask reapp. tensor([-5.0480e-05, -9.4301e-05, -9.2197e-05, -1.7842e-04, -1.9397e-04,\n","        -1.2777e-04, -1.7866e-04, -8.4300e-05, -1.8852e-05, -6.7668e-04])\n","gradient values before mask reapp. tensor([ 3.9383e-04, -2.7259e-05,  6.8374e-04,  1.2537e-05,  5.0541e-04,\n","        -3.1979e-05, -3.1037e-05,  3.7812e-04,  9.5731e-05,  5.6525e-04])\n","gradient values before mask reapp. tensor([-1.8882e-04, -1.1944e-04, -3.3714e-04, -2.4785e-04, -4.2607e-04,\n","        -1.5997e-04, -2.3094e-04, -2.3341e-04, -5.9092e-05, -1.0907e-03])\n","gradient values before mask reapp. tensor([ 1.2686e-04, -7.4903e-05,  2.1034e-04, -1.2234e-04,  5.0722e-05,\n","        -9.3869e-05, -1.3058e-04,  8.9115e-05,  1.3554e-05, -2.3283e-04])\n","gradient values before mask reapp. tensor([ 2.0500e-05, -8.1058e-05,  4.3820e-05, -1.4675e-04, -6.8545e-05,\n","        -1.1158e-04, -1.5234e-04, -1.2869e-06,  4.6074e-06, -4.6268e-04])\n","gradient values before mask reapp. tensor([ 3.4589e-05, -8.9890e-05,  5.2078e-05, -1.6413e-04, -9.0129e-05,\n","        -1.1390e-04, -1.6227e-04, -4.8009e-06, -7.6797e-06, -4.9215e-04])\n","gradient values before mask reapp. tensor([ 1.1299e-04, -6.8421e-05,  2.1043e-04, -1.1273e-04,  7.1924e-05,\n","        -9.3073e-05, -1.2290e-04,  9.7340e-05,  2.5619e-05, -2.1162e-04])\n","gradient values before mask reapp. tensor([ 4.8127e-05, -8.1794e-05,  9.1650e-05, -1.4853e-04, -4.6645e-05,\n","        -1.0915e-04, -1.5022e-04,  2.3012e-05,  3.3786e-06, -4.1778e-04])\n","gradient values before mask reapp. tensor([-2.2384e-05, -9.0667e-05, -2.2726e-05, -1.7396e-04, -1.4153e-04,\n","        -1.2281e-04, -1.6926e-04, -4.1103e-05, -8.6953e-06, -5.9559e-04])\n","gradient values before mask reapp. tensor([ 2.4962e-04, -4.7342e-05,  4.5290e-04, -5.5366e-05,  2.8630e-04,\n","        -6.3942e-05, -7.8490e-05,  2.4072e-04,  6.0981e-05,  1.7044e-04])\n","gradient values before mask reapp. tensor([-6.1220e-05, -9.2479e-05, -8.3649e-05, -1.8450e-04, -1.8697e-04,\n","        -1.2958e-04, -1.7900e-04, -7.6054e-05, -1.2025e-05, -6.8298e-04])\n","gradient values before mask reapp. tensor([ 3.5043e-04, -3.4391e-05,  6.2695e-04, -1.6114e-05,  4.4347e-04,\n","        -4.2792e-05, -4.8273e-05,  3.4381e-04,  8.8312e-05,  4.3993e-04])\n","gradient values before mask reapp. tensor([-1.1565e-04, -1.0321e-04, -1.8231e-04, -2.1401e-04, -2.8227e-04,\n","        -1.4276e-04, -2.0213e-04, -1.3787e-04, -2.8407e-05, -8.5344e-04])\n","gradient values before mask reapp. tensor([ 2.7824e-04, -3.8216e-05,  5.1627e-04, -3.3543e-05,  3.6356e-04,\n","        -5.4918e-05, -6.3271e-05,  2.8369e-04,  8.2855e-05,  2.8409e-04])\n","gradient values before mask reapp. tensor([-0.0005, -0.0002, -0.0008, -0.0004, -0.0009, -0.0002, -0.0003, -0.0005,\n","        -0.0002, -0.0020])\n","gradient values before mask reapp. tensor([ 4.8282e-04, -4.6321e-06,  8.8520e-04,  5.5348e-05,  6.9434e-04,\n","        -1.0110e-05,  8.7962e-06,  5.0564e-04,  1.3723e-04,  8.7187e-04])\n","gradient values before mask reapp. tensor([-1.6621e-04, -1.1669e-04, -2.7068e-04, -2.5206e-04, -3.8104e-04,\n","        -1.5675e-04, -2.2678e-04, -1.9434e-04, -4.8211e-05, -1.0310e-03])\n","gradient values before mask reapp. tensor([ 4.4287e-06, -8.2865e-05,  4.4899e-05, -1.6710e-04, -8.6848e-05,\n","        -1.1693e-04, -1.5952e-04, -1.2915e-06,  2.9915e-06, -5.0759e-04])\n","gradient values before mask reapp. tensor([ 1.9625e-04, -4.6923e-05,  3.9334e-04, -6.8366e-05,  2.5232e-04,\n","        -7.1873e-05, -8.5903e-05,  2.1351e-04,  6.7540e-05,  7.7642e-05])\n","gradient values before mask reapp. tensor([ 1.1353e-05, -8.7122e-05,  5.1597e-05, -1.7257e-04, -8.7422e-05,\n","        -1.1733e-04, -1.6366e-04,  8.4223e-07,  2.6840e-06, -5.1589e-04])\n","gradient values before mask reapp. tensor([ 9.1141e-05, -6.7469e-05,  2.0378e-04, -1.2593e-04,  6.3411e-05,\n","        -9.7227e-05, -1.2871e-04,  9.5248e-05,  3.1953e-05, -2.5054e-04])\n","gradient values before mask reapp. tensor([ 1.6116e-04, -5.0044e-05,  3.3848e-04, -8.0848e-05,  2.0690e-04,\n","        -7.8408e-05, -9.6242e-05,  1.8157e-04,  6.3066e-05, -8.7854e-06])\n","gradient values before mask reapp. tensor([-1.6272e-04, -1.1249e-04, -2.4813e-04, -2.5183e-04, -3.6341e-04,\n","        -1.5530e-04, -2.2325e-04, -1.7987e-04, -4.2769e-05, -1.0067e-03])\n","gradient values before mask reapp. tensor([ 1.3264e-04, -5.4611e-05,  2.9282e-04, -9.8649e-05,  1.6099e-04,\n","        -8.5052e-05, -1.0680e-04,  1.5373e-04,  5.5183e-05, -9.4427e-05])\n","gradient values before mask reapp. tensor([ 4.4757e-05, -8.3310e-05,  1.1360e-04, -1.6750e-04, -3.9981e-05,\n","        -1.1118e-04, -1.5692e-04,  3.4801e-05,  1.0292e-05, -4.3712e-04])\n","gradient values before mask reapp. tensor([ 1.6573e-04, -4.4992e-05,  3.6472e-04, -7.1050e-05,  2.4740e-04,\n","        -7.4865e-05, -8.7636e-05,  2.0403e-04,  7.8216e-05,  3.8919e-05])\n","gradient values before mask reapp. tensor([-2.0499e-04, -1.2633e-04, -3.2354e-04, -2.8676e-04, -4.5074e-04,\n","        -1.6779e-04, -2.4612e-04, -2.2852e-04, -6.0759e-05, -1.1647e-03])\n","gradient values before mask reapp. tensor([ 2.0881e-04, -3.8553e-05,  4.4334e-04, -5.9497e-05,  3.0196e-04,\n","        -6.7102e-05, -7.5533e-05,  2.4726e-04,  8.2377e-05,  1.4956e-04])\n","gradient values before mask reapp. tensor([ 1.1511e-04, -6.6676e-05,  2.5498e-04, -1.2658e-04,  9.9045e-05,\n","        -9.3516e-05, -1.2584e-04,  1.2428e-04,  3.9420e-05, -2.0016e-04])\n","gradient values before mask reapp. tensor([-2.9139e-04, -1.2744e-04, -4.4621e-04, -3.0132e-04, -5.3167e-04,\n","        -1.8074e-04, -2.5869e-04, -2.9133e-04, -6.2516e-05, -1.3271e-03])\n","gradient values before mask reapp. tensor([5.5348e-04, 1.3358e-05, 1.0504e-03, 8.8598e-05, 8.4952e-04, 7.1868e-06,\n","        3.9208e-05, 6.1025e-04, 1.7406e-04, 1.1159e-03])\n","gradient values before mask reapp. tensor([-0.0005, -0.0002, -0.0008, -0.0005, -0.0010, -0.0002, -0.0003, -0.0005,\n","        -0.0002, -0.0020])\n","gradient values before mask reapp. tensor([ 5.0411e-04,  2.6463e-06,  9.6217e-04,  5.8241e-05,  7.5809e-04,\n","        -5.3591e-06,  1.7690e-05,  5.5469e-04,  1.5657e-04,  9.5519e-04])\n","gradient values before mask reapp. tensor([-2.5742e-04, -1.1883e-04, -3.7702e-04, -2.7964e-04, -4.5804e-04,\n","        -1.7201e-04, -2.4458e-04, -2.4762e-04, -4.4083e-05, -1.2096e-03])\n","gradient values before mask reapp. tensor([ 4.1417e-04, -1.1585e-05,  8.0654e-04,  1.9615e-05,  6.2261e-04,\n","        -2.4419e-05, -1.3170e-05,  4.6263e-04,  1.3742e-04,  7.0388e-04])\n","gradient values before mask reapp. tensor([-0.0005, -0.0002, -0.0008, -0.0004, -0.0008, -0.0002, -0.0003, -0.0005,\n","        -0.0001, -0.0019])\n","gradient values before mask reapp. tensor([ 3.7716e-04, -8.7388e-06,  7.6519e-04,  1.6471e-05,  5.9931e-04,\n","        -2.8892e-05, -1.3428e-05,  4.4504e-04,  1.3909e-04,  6.5470e-04])\n","gradient values before mask reapp. tensor([-3.5527e-05, -9.0582e-05,  8.9092e-06, -1.9979e-04, -1.3151e-04,\n","        -1.2726e-04, -1.7874e-04, -2.2333e-05,  4.7287e-06, -6.2548e-04])\n","gradient values before mask reapp. tensor([-6.7741e-05, -8.4616e-05, -2.5889e-05, -1.9574e-04, -1.4087e-04,\n","        -1.2940e-04, -1.7559e-04, -3.5809e-05,  1.0397e-05, -6.5017e-04])\n","gradient values before mask reapp. tensor([ 3.1761e-04, -2.1756e-05,  6.5319e-04, -2.0044e-05,  4.8556e-04,\n","        -4.3875e-05, -4.1949e-05,  3.7235e-04,  1.1801e-04,  4.5524e-04])\n","gradient values before mask reapp. tensor([-4.1613e-04, -1.4786e-04, -6.4656e-04, -3.6827e-04, -7.2452e-04,\n","        -2.0949e-04, -3.0538e-04, -4.1229e-04, -9.0969e-05, -1.6894e-03])\n","gradient values before mask reapp. tensor([5.5524e-04, 1.6634e-05, 1.0796e-03, 8.5881e-05, 8.7686e-04, 8.5381e-06,\n","        4.1699e-05, 6.3050e-04, 1.8563e-04, 1.1396e-03])\n","gradient values before mask reapp. tensor([-0.0004, -0.0002, -0.0007, -0.0004, -0.0008, -0.0002, -0.0003, -0.0005,\n","        -0.0001, -0.0018])\n","gradient values before mask reapp. tensor([ 2.4178e-04, -2.5789e-05,  5.4873e-04, -4.1973e-05,  4.0757e-04,\n","        -5.7061e-05, -5.5604e-05,  3.1874e-04,  1.1324e-04,  2.9606e-04])\n","gradient values before mask reapp. tensor([ 4.1865e-05, -7.9758e-05,  1.5641e-04, -1.7362e-04, -1.8233e-06,\n","        -1.1107e-04, -1.5503e-04,  6.6101e-05,  2.9399e-05, -4.1263e-04])\n","gradient values before mask reapp. tensor([ 1.2227e-04, -4.6960e-05,  3.3323e-04, -9.8908e-05,  2.0703e-04,\n","        -8.4543e-05, -1.0193e-04,  1.8651e-04,  8.0147e-05, -6.0744e-05])\n","gradient values before mask reapp. tensor([-2.5891e-04, -1.2563e-04, -3.6252e-04, -3.0885e-04, -4.8160e-04,\n","        -1.7719e-04, -2.5627e-04, -2.4438e-04, -5.1600e-05, -1.2605e-03])\n","gradient values before mask reapp. tensor([ 2.0404e-04, -3.2555e-05,  4.8661e-04, -6.5646e-05,  3.3873e-04,\n","        -6.6982e-05, -7.2237e-05,  2.7850e-04,  1.0036e-04,  1.7682e-04])\n","gradient values before mask reapp. tensor([-1.0836e-05, -7.6723e-05,  9.0634e-05, -1.8034e-04, -4.5113e-05,\n","        -1.1821e-04, -1.5980e-04,  3.3472e-05,  2.9674e-05, -4.9677e-04])\n","gradient values before mask reapp. tensor([ 4.4856e-06, -7.0852e-05,  1.3044e-04, -1.6463e-04,  7.1198e-06,\n","        -1.1254e-04, -1.4734e-04,  6.3577e-05,  4.4360e-05, -4.2034e-04])\n","gradient values before mask reapp. tensor([ 1.4154e-04, -5.3815e-05,  3.6172e-04, -1.1586e-04,  1.9702e-04,\n","        -8.5505e-05, -1.0880e-04,  1.9571e-04,  6.9724e-05, -6.8727e-05])\n","gradient values before mask reapp. tensor([-8.3728e-05, -8.1809e-05, -1.9340e-05, -2.0116e-04, -1.2911e-04,\n","        -1.3138e-04, -1.7630e-04, -2.6587e-05,  2.2900e-05, -6.6043e-04])\n","gradient values before mask reapp. tensor([ 1.1031e-04, -5.4844e-05,  3.1625e-04, -1.2502e-04,  1.6055e-04,\n","        -9.0923e-05, -1.1551e-04,  1.7034e-04,  6.6319e-05, -1.3679e-04])\n","gradient values before mask reapp. tensor([-1.6393e-04, -9.6095e-05, -1.5895e-04, -2.4466e-04, -2.6728e-04,\n","        -1.5001e-04, -2.0667e-04, -1.1264e-04, -2.9042e-06, -9.0211e-04])\n","gradient values before mask reapp. tensor([ 3.2645e-04, -1.4211e-05,  7.0825e-04, -1.7627e-05,  5.3529e-04,\n","        -4.0471e-05, -3.4151e-05,  4.0958e-04,  1.3548e-04,  5.1585e-04])\n","gradient values before mask reapp. tensor([-0.0005, -0.0002, -0.0008, -0.0005, -0.0010, -0.0002, -0.0003, -0.0005,\n","        -0.0002, -0.0020])\n","gradient values before mask reapp. tensor([6.5154e-04, 3.9694e-05, 1.2933e-03, 1.3154e-04, 1.0731e-03, 3.1652e-05,\n","        8.2477e-05, 7.6474e-04, 2.2835e-04, 1.4616e-03])\n","gradient values before mask reapp. tensor([-0.0006, -0.0002, -0.0010, -0.0005, -0.0011, -0.0002, -0.0004, -0.0006,\n","        -0.0002, -0.0024])\n","gradient values before mask reapp. tensor([5.6906e-04, 2.9029e-05, 1.1555e-03, 9.6342e-05, 9.4713e-04, 1.4070e-05,\n","        5.6075e-05, 6.8264e-04, 2.0840e-04, 1.2379e-03])\n","gradient values before mask reapp. tensor([-0.0006, -0.0002, -0.0010, -0.0005, -0.0011, -0.0002, -0.0004, -0.0006,\n","        -0.0002, -0.0024])\n","gradient values before mask reapp. tensor([5.7132e-04, 2.9871e-05, 1.1664e-03, 9.6575e-05, 9.5401e-04, 1.4446e-05,\n","        5.7907e-05, 6.9003e-04, 2.0971e-04, 1.2493e-03])\n","gradient values before mask reapp. tensor([-4.9520e-04, -1.4823e-04, -7.2152e-04, -3.8864e-04, -7.7267e-04,\n","        -2.2206e-04, -3.1817e-04, -4.4478e-04, -7.9115e-05, -1.8234e-03])\n","gradient values before mask reapp. tensor([5.7010e-04, 2.3181e-05, 1.1580e-03, 8.4920e-05, 9.3526e-04, 1.2070e-05,\n","        5.0205e-05, 6.8215e-04, 2.0426e-04, 1.2134e-03])\n","gradient values before mask reapp. tensor([-0.0004, -0.0001, -0.0006, -0.0004, -0.0007, -0.0002, -0.0003, -0.0004,\n","        -0.0001, -0.0016])\n","gradient values before mask reapp. tensor([ 2.1051e-04, -2.8167e-05,  5.3737e-04, -6.6603e-05,  3.8095e-04,\n","        -6.4701e-05, -6.7551e-05,  3.1284e-04,  1.1644e-04,  2.2288e-04])\n","gradient values before mask reapp. tensor([-2.4401e-05, -7.2711e-05,  1.1094e-04, -1.8647e-04, -2.9883e-05,\n","        -1.2005e-04, -1.5933e-04,  5.0292e-05,  4.1554e-05, -4.9535e-04])\n","gradient values before mask reapp. tensor([-7.7835e-05, -7.1624e-05,  3.8734e-05, -1.8949e-04, -6.2927e-05,\n","        -1.2616e-04, -1.6279e-04,  1.7610e-05,  4.7326e-05, -5.7738e-04])\n","gradient values before mask reapp. tensor([ 1.9629e-04, -4.0243e-05,  5.0072e-04, -9.4526e-05,  3.1859e-04,\n","        -7.2326e-05, -8.5730e-05,  2.8340e-04,  9.8462e-05,  1.2088e-04])\n","gradient values before mask reapp. tensor([-1.7987e-04, -8.6892e-05, -1.4602e-04, -2.9979e-04, -3.1503e-04,\n","        -1.3735e-04, -1.9887e-04, -1.0843e-04, -2.6129e-05, -9.3856e-04])\n","gradient values before mask reapp. tensor([ 2.0941e-04, -2.9739e-05,  5.3690e-04, -7.4200e-05,  3.7104e-04,\n","        -6.5721e-05, -7.2643e-05,  3.0936e-04,  1.1450e-04,  2.0450e-04])\n","gradient values before mask reapp. tensor([-8.9768e-05, -7.0126e-05,  1.5873e-05, -2.5441e-04, -1.5611e-04,\n","        -1.1648e-04, -1.6651e-04, -9.9175e-06,  5.4743e-06, -6.6907e-04])\n","gradient values before mask reapp. tensor([-8.1433e-06, -7.4876e-05,  1.4336e-04, -1.9125e-04, -6.9486e-06,\n","        -1.1746e-04, -1.5938e-04,  6.8841e-05,  4.6822e-05, -4.7179e-04])\n","gradient values before mask reapp. tensor([ 2.2586e-04, -2.5707e-05,  5.7122e-04, -6.5494e-05,  4.0769e-04,\n","        -6.1554e-05, -6.6625e-05,  3.3117e-04,  1.2476e-04,  2.5746e-04])\n","gradient values before mask reapp. tensor([-0.0005, -0.0001, -0.0007, -0.0004, -0.0008, -0.0002, -0.0003, -0.0004,\n","        -0.0001, -0.0018])\n","gradient values before mask reapp. tensor([ 4.2891e-04,  1.0809e-05,  9.4169e-04,  2.9492e-05,  7.5006e-04,\n","        -1.5349e-05,  8.9054e-06,  5.5637e-04,  1.8412e-04,  8.6088e-04])\n","gradient values before mask reapp. tensor([-0.0005, -0.0001, -0.0007, -0.0005, -0.0008, -0.0002, -0.0003, -0.0004,\n","        -0.0001, -0.0018])\n","gradient values before mask reapp. tensor([5.8582e-04, 3.3971e-05, 1.2220e-03, 9.7938e-05, 1.0067e-03, 1.8919e-05,\n","        6.2575e-05, 7.2657e-04, 2.2905e-04, 1.3055e-03])\n","gradient values before mask reapp. tensor([-4.3880e-04, -1.3258e-04, -5.9904e-04, -4.2855e-04, -7.3722e-04,\n","        -1.9650e-04, -2.9781e-04, -3.8377e-04, -9.3310e-05, -1.7083e-03])\n","gradient values before mask reapp. tensor([-6.0994e-05, -7.4098e-05,  8.1045e-05, -2.0803e-04, -5.9654e-05,\n","        -1.2641e-04, -1.6784e-04,  3.6437e-05,  4.3397e-05, -5.7483e-04])\n","gradient values before mask reapp. tensor([ 2.8731e-04, -1.3438e-05,  7.0116e-04, -4.1533e-05,  5.2046e-04,\n","        -4.7559e-05, -4.2274e-05,  4.1182e-04,  1.4582e-04,  4.4701e-04])\n","gradient values before mask reapp. tensor([-0.0005, -0.0001, -0.0007, -0.0005, -0.0009, -0.0002, -0.0003, -0.0005,\n","        -0.0001, -0.0019])\n","gradient values before mask reapp. tensor([6.3288e-04, 3.7458e-05, 1.3090e-03, 1.0557e-04, 1.0678e-03, 2.7021e-05,\n","        7.3112e-05, 7.7570e-04, 2.3606e-04, 1.4141e-03])\n","gradient values before mask reapp. tensor([-0.0005, -0.0002, -0.0008, -0.0005, -0.0009, -0.0002, -0.0003, -0.0005,\n","        -0.0001, -0.0020])\n","gradient values before mask reapp. tensor([ 1.6589e-04, -2.3202e-05,  5.1358e-04, -7.9871e-05,  3.7073e-04,\n","        -6.9552e-05, -7.1062e-05,  3.0713e-04,  1.2937e-04,  1.6601e-04])\n","gradient values before mask reapp. tensor([ 5.2022e-05, -6.3374e-05,  2.7779e-04, -1.7357e-04,  1.0012e-04,\n","        -1.0488e-04, -1.3896e-04,  1.5029e-04,  6.7753e-05, -2.9560e-04])\n","gradient values before mask reapp. tensor([ 5.9449e-06, -5.2825e-05,  2.2516e-04, -1.5894e-04,  9.7484e-05,\n","        -1.0671e-04, -1.3306e-04,  1.3054e-04,  8.2171e-05, -3.1760e-04])\n","gradient values before mask reapp. tensor([-2.0035e-04, -8.9982e-05, -1.4997e-04, -3.3988e-04, -3.5641e-04,\n","        -1.4043e-04, -2.0949e-04, -1.1420e-04, -3.5752e-05, -1.0179e-03])\n","gradient values before mask reapp. tensor([ 1.7810e-04, -2.9185e-05,  5.2682e-04, -9.4203e-05,  3.5283e-04,\n","        -7.1344e-05, -7.9115e-05,  3.0779e-04,  1.1945e-04,  1.4452e-04])\n","gradient values before mask reapp. tensor([-4.7015e-04, -1.3083e-04, -6.1459e-04, -4.4590e-04, -7.6133e-04,\n","        -1.9987e-04, -2.9855e-04, -3.8775e-04, -9.5401e-05, -1.7560e-03])\n","gradient values before mask reapp. tensor([6.6715e-04, 4.7491e-05, 1.3922e-03, 1.2405e-04, 1.1444e-03, 3.6144e-05,\n","        8.9788e-05, 8.2881e-04, 2.5353e-04, 1.5405e-03])\n","gradient values before mask reapp. tensor([-0.0006, -0.0001, -0.0008, -0.0005, -0.0009, -0.0002, -0.0003, -0.0005,\n","        -0.0001, -0.0020])\n","gradient values before mask reapp. tensor([ 2.1708e-04, -1.2433e-05,  6.2261e-04, -5.8059e-05,  4.6417e-04,\n","        -5.8090e-05, -5.1757e-05,  3.7367e-04,  1.4771e-04,  3.2603e-04])\n","gradient values before mask reapp. tensor([-1.5440e-04, -8.4144e-05, -5.1189e-05, -2.4668e-04, -1.7929e-04,\n","        -1.4506e-04, -1.9579e-04, -3.8749e-05,  3.2037e-05, -8.0711e-04])\n","gradient values before mask reapp. tensor([ 1.0694e-04, -3.3207e-05,  4.2745e-04, -1.1225e-04,  2.8101e-04,\n","        -8.3122e-05, -9.3100e-05,  2.5594e-04,  1.1699e-04, -2.5291e-06])\n","gradient values before mask reapp. tensor([-1.1947e-04, -7.8616e-05,  3.6631e-06, -3.2533e-04, -2.4843e-04,\n","        -1.2099e-04, -1.8397e-04, -2.5781e-05, -2.4780e-05, -8.0943e-04])\n","gradient values before mask reapp. tensor([ 9.9011e-05, -3.0470e-05,  4.2250e-04, -1.0992e-04,  2.7919e-04,\n","        -8.3704e-05, -9.1944e-05,  2.5430e-04,  1.1841e-04, -3.8112e-06])\n","gradient values before mask reapp. tensor([-3.3967e-04, -1.0282e-04, -3.6138e-04, -3.8355e-04, -5.2783e-04,\n","        -1.6756e-04, -2.4650e-04, -2.3303e-04, -5.1823e-05, -1.3463e-03])\n","gradient values before mask reapp. tensor([6.4254e-04, 4.6193e-05, 1.3636e-03, 1.1520e-04, 1.1202e-03, 3.1765e-05,\n","        8.2265e-05, 8.1271e-04, 2.5474e-04, 1.4866e-03])\n","gradient values before mask reapp. tensor([-4.4036e-04, -1.2250e-04, -5.4919e-04, -4.3427e-04, -7.0432e-04,\n","        -1.9181e-04, -2.8932e-04, -3.4973e-04, -8.0679e-05, -1.6633e-03])\n","gradient values before mask reapp. tensor([-1.2989e-05, -4.7827e-05,  2.2835e-04, -1.6101e-04,  1.0495e-04,\n","        -1.0793e-04, -1.3233e-04,  1.3674e-04,  9.2141e-05, -3.2208e-04])\n","gradient values before mask reapp. tensor([ 1.3041e-04, -3.0944e-05,  4.5863e-04, -2.0383e-04,  1.8181e-04,\n","        -6.2379e-05, -9.1802e-05,  2.5021e-04,  5.5452e-05, -6.0018e-05])\n"]},{"output_type":"display_data","data":{"text/plain":["'100.0% done'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{}}],"source":["## NOTE: Some of the indentations (loop appends) dont work for multiple batches per epoch. \n","## We need to stick to train and test batches of 32, and probe batches of 128\n","\n","train_performance = np.array([])\n","train_losses = np.array([])\n","test_performance = np.array([])\n","test_losses = np.array([])\n","probe_performance = np.array([])\n","probe_losses = np.array([])\n","\n","train_loss_rewarded = np.array([])\n","train_loss_unrewarded = np.array([])\n","\n","test_loss_rewarded = np.array([])\n","test_loss_unrewarded = np.array([])\n","\n","probe_loss_rewarded = np.array([])\n","probe_loss_unrewarded = np.array([])\n","\n","probe_loss_NE = np.array([])\n","probe_loss_SOE = np.array([])\n","probe_loss_distractor = np.array([])\n","\"\"\n","probe_loss_SP_over_SOE_performance = np.array([])\n","\n","hidden_acts = np.array([])\n","\n","\n","## Collecting this many vars is ugly and unworkable. \n","## New solution to collect only output unit val in the loop.\n","\n","train_output_acts = np.array([])\n","test_output_acts = np.array([])\n","probe_output_acts = np.array([])\n","\n","\n","for i in range(num_runs): # num_runs\n","\n","  model = TSP(612, 100, 1, sparsity = 0.1)\n","  print(\"first ten digits of weight at init\", model.sc1.weight[0][:10])\n","\n","  # flat_list = [item for sublist in model.fc1.weight.detach().numpy() for item in sublist]\n","  # plt.hist(flat_list)\n","  # # print(net.ca1.weight)#.detach().numpy().squeeze().squeeze())\n","  # plt.show()\n","\n","  # model.apply(init_weights)\n","\n","  # flat_list = [item for sublist in model.fc1.weight.detach().numpy() for item in sublist]\n","  # plt.hist(flat_list)\n","  # # print(net.ca1.weight)#.detach().numpy().squeeze().squeeze())\n","  # plt.show()\n","\n","  criterion = nn.MSELoss()\n","  optimizer = optim.SGD(model.parameters(), lr=learning_rate) #0.0005\n","\n","  with torch.no_grad():\n","\n","    for batch, label in dataloader:\n","      # display(batch.shape, label)\n","      #print(\"batch size is:\", batch.size())\n","      data = batch.float()\n","      #print(\"data size is: \", data.size())\n","      output = model.predict_hidden(data)\n","      #print(output)\n","      hidden_acts = np.append(hidden_acts, output.cpu().detach().numpy())\n","\n","\n","    for batch, label in dataloader:\n","      #print(\"Dataloader label:\", label)\n","      data = batch.float() # cast input data to float\n","      #print(\"data\", data)\n","      target = label.float() # cast target labels to float\n","      output = model(data) #forward pass\n","      \n","      # print(\"output:\", output)\n","      # print(\"target:\", target)\n","\n","      loss = criterion(output, target)\n","      predicted = (output > 0.5).float()\n","      train_output_acts = np.append(train_output_acts, output.detach())\n","\n","      #target = np.random.choice([0, 1], size=4196)\n","\n","    train_performance = np.append(train_performance, (predicted == target).sum().item() * 100 / exp1_n)\n","    train_losses = np.append(train_losses, loss.item())\n","\n","    # display(label == True) #\n","\n","    train_loss_rewarded = np.append(train_loss_rewarded, criterion(output[target == True], target[target == True]) )\n","    train_loss_unrewarded = np.append(train_loss_unrewarded, criterion(output[target == False], target[target == False]))\n","\n","    for data, labels in test_dataloader:\n","      data = data.float()\n","      labels = labels.float()\n","      outputs = model(data)\n","      predicted = (outputs > 0.5).float()\n","    test_performance = np.append(test_performance, (predicted == labels).sum().item() * 100 / exp1_n)\n","    test_losses = np.append(test_losses, criterion(outputs,labels).item())\n","    \n","    test_loss_rewarded = np.append(test_loss_rewarded, criterion(outputs[labels == True], labels[labels == True]) )\n","    test_loss_unrewarded = np.append(test_loss_unrewarded, criterion(outputs[labels == False], labels[labels == False]))\n","    \n","   \n","    for data, labels in probe_dataloader:\n","      data = data.float()\n","      labels = labels.float()\n","      outputs = model(data)\n","      predicted = (outputs > 0.5).float()\n","\n","    probe_performance = np.append(probe_performance, (predicted == labels).sum().item() * 100 / 128)\n","    probe_losses = np.append(probe_losses, criterion(outputs,labels).item())\n","    \n","    # display(((predicted == labels)[96:][2::4]))\n","    probe_loss_rewarded = np.append(probe_loss_rewarded, criterion(outputs[labels == True], labels[labels == True]))\n","    probe_loss_unrewarded = np.append(probe_loss_unrewarded, criterion(outputs[labels == False], labels[labels == False]))\n","\n","    probe_loss_NE = np.append(probe_loss_NE, criterion(outputs[probe_loss_labels == 0], labels[probe_loss_labels == 0]))\n","    probe_loss_SOE = np.append(probe_loss_SOE, criterion(outputs[probe_loss_labels == 1], labels[probe_loss_labels == 1]))\n","    probe_loss_distractor = np.append(probe_loss_distractor, criterion(outputs[probe_loss_labels == 2], labels[probe_loss_labels == 2]))\n","\n","    # probe_loss_SP_over_SOE_performance =  np.append(probe_loss_SP_over_SOE_performance, (outputs[labels == True].shape > ) )\n","    \n","    #print(outputs[labels == True])\n","    #print(outputs[probe_loss_labels == 1])\n","\n","    probe_loss_SP_over_SOE_performance = np.append(probe_loss_SP_over_SOE_performance, (outputs[labels == True] > outputs[probe_loss_labels == 1]).sum() /16 * 100  )\n","\n","  for epoch in range(num_epochs):\n","      for batch, label in dataloader:\n","        optimizer.zero_grad()\n","        data = batch.float() # cast input data to float\n","        target = label.float() # cast target labels to float\n","        output = model(data)\n","        loss = criterion(output, target)\n","        loss.backward()\n","        \n","        print(\"gradient values before mask reapp.\", model.sc1.weight.grad[0][:10])\n","        \n","        # Reapply the masks to the gradients\n","        model.sc1.weight.grad *= model.mask1.T\n","        model.sc2.weight.grad *= model.mask2.T\n","        #print(f\"weight before {epoch} reapplication \", model.sc1.weight[0][:10])\n","        gradient_values = model.sc1.weight.grad[0][:10].tolist()\n","        formatted_values = [f\"{value:.5f}\" for value in gradient_values]\n","        #print(f\"epoch {epoch} gradient values after mask reapp.: {formatted_values}\")\n","        optimizer.step()\n","        #print(f\"weight after {epoch} mask reapplication \", model.sc1.weight[0][:10])\n","\n","        predicted = (output > 0.5).float()\n","\n","        train_performance = np.append(train_performance, (predicted == target).sum().item() * 100 / exp1_n)\n","        train_losses = np.append(train_losses, loss.item())\n","        \n","        train_loss_rewarded = np.append(train_loss_rewarded, criterion(output[label == True].detach(), label[label == True]) )\n","        train_loss_unrewarded = np.append(train_loss_unrewarded, criterion(output[label == False].detach(), label[label == False]))\n","\n","        train_output_acts = np.append(train_output_acts, output.detach())\n","\n","      \n","      with torch.no_grad():\n","        for batch, label in dataloader:\n","          # display(batch.shape, label)\n","          data = batch.float()\n","          output = model.predict_hidden(data)\n","          hidden_acts = np.append(hidden_acts, output.cpu().detach().numpy())\n","\n","        for data, labels in test_dataloader:\n","          data = data.float()\n","          labels = labels.float()\n","          outputs = model(data)\n","          predicted = (outputs > 0.5).float()\n","        test_performance = np.append(test_performance, (predicted == labels).sum().item() * 100 / exp1_n)\n","        test_losses = np.append(test_losses, criterion(outputs,labels).item())\n","\n","        test_loss_rewarded = np.append(test_loss_rewarded, criterion(outputs[labels == True], labels[labels == True]) )\n","        test_loss_unrewarded = np.append(test_loss_unrewarded, criterion(outputs[labels == False], labels[labels == False]))\n","\n","\n","        for data, labels in probe_dataloader:\n","          data = data.float()\n","          labels = labels.float()\n","          outputs = model(data)\n","          predicted = (outputs > 0.5).float()\n","        probe_performance = np.append(probe_performance, (predicted == labels).sum().item() * 100 / 128)\n","        probe_losses = np.append(probe_losses, criterion(outputs,labels).item())\n","   \n","        probe_loss_rewarded = np.append(probe_loss_rewarded, criterion(outputs[labels == True], labels[labels == True]))\n","        probe_loss_unrewarded = np.append(probe_loss_unrewarded, criterion(outputs[labels == False], labels[labels == False]))\n","\n","        probe_loss_NE = np.append(probe_loss_NE, criterion(outputs[probe_loss_labels == 0], labels[probe_loss_labels == 0]))\n","        probe_loss_SOE = np.append(probe_loss_SOE, criterion(outputs[probe_loss_labels == 1], labels[probe_loss_labels == 1]))\n","        probe_loss_distractor = np.append(probe_loss_distractor, criterion(outputs[probe_loss_labels == 2], labels[probe_loss_labels == 2]))\n","\n","        probe_loss_SP_over_SOE_performance = np.append(probe_loss_SP_over_SOE_performance, (outputs[labels == True] > outputs[probe_loss_labels == 1]).sum() /16 * 100  )\n","\n","  if (i+1)%(num_runs/10) == 0:\n","    display(str((i+1)/num_runs*100) + \"% done\")"]},{"cell_type":"code","execution_count":47,"metadata":{"id":"zqK9PFECYUVF","executionInfo":{"status":"ok","timestamp":1686332238696,"user_tz":240,"elapsed":4,"user":{"displayName":"Jaehyuk Lim","userId":"09050886684299321629"}}},"outputs":[],"source":["train_performance_mean = (train_performance.reshape(-1, num_epochs+1)).mean(axis = 0)\n","train_performance_sem = train_performance.reshape(-1, num_epochs+1).std(axis = 0) / np.sqrt(num_runs)\n","train_losses_mean = np.exp(-(train_losses.reshape(-1, num_epochs+1)).mean(axis = 0))\n","train_losses_sem = train_losses.reshape(-1, num_epochs+1).std(axis = 0) / np.sqrt(num_runs)\n","\n","train_loss_rewarded_mean = np.exp(-(train_loss_rewarded.reshape(-1, num_epochs+1)).mean(axis = 0))\n","train_loss_rewarded_sem = (train_loss_rewarded.reshape(-1, num_epochs+1)).std(axis = 0) / np.sqrt(num_runs)\n","\n","train_loss_unrewarded_mean = np.exp(-(train_loss_unrewarded.reshape(-1, num_epochs+1)).mean(axis = 0))\n","train_loss_unrewarded_sem = (train_loss_unrewarded.reshape(-1, num_epochs+1)).std(axis = 0) / np.sqrt(num_runs)\n","\n","test_performance_mean = (test_performance.reshape(-1, num_epochs+1)).mean(axis = 0)\n","test_performance_sem = test_performance.reshape(-1, num_epochs+1).std(axis = 0) / np.sqrt(num_runs)\n","test_losses_mean = np.exp(-(test_losses.reshape(-1, num_epochs+1)).mean(axis = 0))\n","test_losses_sem = test_losses.reshape(-1, num_epochs+1).std(axis = 0) / np.sqrt(num_runs)\n","\n","test_loss_rewarded_mean = np.exp(-(test_loss_rewarded.reshape(-1, num_epochs+1)).mean(axis = 0))\n","test_loss_rewarded_sem = (test_loss_rewarded.reshape(-1, num_epochs+1)).std(axis = 0) / np.sqrt(num_runs)\n","\n","test_loss_unrewarded_mean = np.exp(-(test_loss_unrewarded.reshape(-1, num_epochs+1)).mean(axis = 0))\n","test_loss_unrewarded_sem = (test_loss_unrewarded.reshape(-1, num_epochs+1)).std(axis = 0) / np.sqrt(num_runs)\n","\n","probe_performance_mean = (probe_performance.reshape(-1, num_epochs+1)).mean(axis = 0)\n","probe_performance_sem = probe_performance.reshape(-1, num_epochs+1).std(axis = 0) / np.sqrt(num_runs)\n","probe_losses_mean = np.exp(-(probe_losses.reshape(-1, num_epochs+1)).mean(axis = 0))\n","probe_losses_sem = probe_losses.reshape(-1, num_epochs+1).std(axis = 0) / np.sqrt(num_runs)\n","\n","probe_loss_rewarded_mean = np.exp(-(probe_loss_rewarded.reshape(-1, num_epochs+1)).mean(axis = 0))\n","probe_loss_rewarded_sem = (probe_loss_rewarded.reshape(-1, num_epochs+1)).std(axis = 0) / np.sqrt(num_runs)\n","\n","probe_loss_unrewarded_mean = np.exp(-(probe_loss_unrewarded.reshape(-1, num_epochs+1)).mean(axis = 0))\n","probe_loss_unrewarded_sem = (probe_loss_unrewarded.reshape(-1, num_epochs+1)).std(axis = 0) / np.sqrt(num_runs)\n","\n","probe_loss_NE_mean = np.exp(-(probe_loss_NE.reshape(-1, num_epochs+1)).mean(axis = 0))\n","probe_loss_NE_sem = (probe_loss_NE.reshape(-1, num_epochs+1)).std(axis = 0) / np.sqrt(num_runs)\n","\n","probe_loss_SOE_mean = np.exp(-(probe_loss_SOE.reshape(-1, num_epochs+1)).mean(axis = 0))\n","probe_loss_SOE_sem = (probe_loss_SOE.reshape(-1, num_epochs+1)).std(axis = 0) / np.sqrt(num_runs)\n","\n","probe_loss_distractor_mean = np.exp(-(probe_loss_distractor.reshape(-1, num_epochs+1)).mean(axis = 0))\n","probe_loss_distractor_sem = (probe_loss_distractor.reshape(-1, num_epochs+1)).std(axis = 0) / np.sqrt(num_runs)\n","\n","probe_loss_SP_over_SOE_performance_mean = (probe_loss_SP_over_SOE_performance.reshape(-1, num_epochs+1)).mean(axis = 0)\n","probe_loss_SP_over_SOE_performance_sem = (probe_loss_SP_over_SOE_performance.reshape(-1, num_epochs+1)).std(axis = 0) / np.sqrt(num_runs)"]},{"cell_type":"code","execution_count":48,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3,"status":"ok","timestamp":1686332238696,"user":{"displayName":"Jaehyuk Lim","userId":"09050886684299321629"},"user_tz":240},"id":"tr9B5lenYUXa","outputId":"a17b59a1-4f31-44c5-dbc5-0cb556932b1f"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([48.125, 40.   , 30.625, ..., 57.5  , 58.75 , 57.5  ])"]},"metadata":{},"execution_count":48}],"source":["probe_loss_SP_over_SOE_performance.reshape(-1, num_epochs+1).mean(axis = 0)"]},{"cell_type":"code","source":["#Pickle data'\n","import pickle\n","\n","# with open('/content/drive/MyDrive/rhesus_category_learning_model/Learning NN/pickles.Phy2_exp1_performance_0.1_normal.pkl.', 'wb') as f:\n","#   pickle.dump(, f)\n","\n","# with open('/content/drive/MyDrive/rhesus_category_learning_model/Learning NN/pickles.Phy2_exp1_0.1_normal.pkl', 'wb') as f:\n","#   pickle.dump(, f)  \n","\n","# with open('/content/drive/MyDrive/rhesus_category_learning_model/Learning NN/pickles.Phy2_exp2_0.1_normal.pkl', 'wb') as f:\n","#   pickle.dump(probe_loss_SP_over_SOE_performance_mean, f)\n","\n","# with open('/content/drive/MyDrive/rhesus_category_learning_model/Learning NN/pickles.Phy2_exp3_0.1_normal.pkl', 'wb') as f:\n","#   pickle.dump(probe_loss_SP_over_SOE_performance_mean, f)  \n","\n","with open('/content/drive/MyDrive/rhesus_category_learning_model/Learning NN/pickles/Phy2_SP_over_SOE_0.997_normal.pkl', 'wb') as f:\n","  pickle.dump(probe_loss_SP_over_SOE_performance_mean, f)\n","\n","with open('/content/drive/MyDrive/rhesus_category_learning_model/Learning NN/pickles/Phy2_SP_over_SOE_SEM_0.997_normal.pkl', 'wb') as f:\n","  pickle.dump(probe_loss_SP_over_SOE_performance_sem, f)\n"],"metadata":{"id":"JYA-cFsugP1I","executionInfo":{"status":"ok","timestamp":1686251059674,"user_tz":240,"elapsed":3,"user":{"displayName":"Jaehyuk Lim","userId":"09050886684299321629"}}},"execution_count":47,"outputs":[]},{"cell_type":"code","execution_count":49,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":375},"executionInfo":{"elapsed":2742,"status":"ok","timestamp":1686332241436,"user":{"displayName":"Jaehyuk Lim","userId":"09050886684299321629"},"user_tz":240},"id":"kj7PBhpFfbYP","outputId":"e70b03b6-9409-4e87-8d87-fc87c71e7586"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 4500x1500 with 2 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["fig, ax = plt.subplots(1, 2, figsize=(15,5), facecolor='w', edgecolor='k', dpi = 300)\n","ax[0].plot(train_losses_mean)\n","ax[0].plot(test_losses_mean)\n","ax[0].plot(probe_losses_mean)\n","ax[0].axhline(1, color = 'darkgray', ls = '--',)\n","\n","\n","\n","ax[0].fill_between(range(num_epochs+1), train_losses_mean-train_losses_sem, train_losses_mean+train_losses_sem, alpha = 0.5)\n","ax[0].fill_between(range(num_epochs+1), test_losses_mean-test_losses_sem, test_losses_mean+test_losses_sem, alpha = 0.5)\n","ax[0].fill_between(range(num_epochs+1), probe_losses_mean-probe_losses_sem, probe_losses_mean+probe_losses_sem, alpha = 0.5)\n","# ax[0].axhline(0, color = 'k')\n","ax[0].set_title('Performance with Experiment 1 Training', fontsize = 15)\n","ax[0].legend(['45-degree set (Exp 1)', \n","              '-15-degree set (Exp 2)',\n","              'Probe set (Exp 3)', 'Perfect performance'], loc='lower right')\n","ax[0].set_xlabel('Epochs', fontsize = 15)\n","ax[0].set_yticks(np.arange(0.6, 1.01, 0.1))\n","ax[0].set_xlabel('Epochs', fontsize = 15)\n","ax[0].set_ylabel('Mean exp(loss)', fontsize = 15)\n","\n","\n","# ax[0].set_xticks(np.arange(0, 100.1, 10))\n","# ax[0].grid()\n","\n","\n","ax[1].plot(train_performance_mean)\n","ax[1].plot(test_performance_mean)\n","ax[1].plot(probe_performance_mean)\n","ax[1].axhline(50, color = 'darkgray', ls = '--', label = 'chance')\n","\n","ax[1].fill_between(range(num_epochs+1), train_performance_mean-train_performance_sem, train_performance_mean+train_performance_sem, alpha = 0.5)\n","ax[1].fill_between(range(num_epochs+1), test_performance_mean-test_performance_sem, test_performance_mean+test_performance_sem, alpha = 0.5)\n","ax[1].fill_between(range(num_epochs+1), probe_performance_mean-probe_performance_sem, probe_performance_mean+probe_performance_sem, alpha = 0.5)\n","# ax[1].axhline(75, color = 'darkgray', ls = '--', label = 'chance')\n","# ax[1].fill_betweenx(np.linspace(-10, 110, 100), 15, 60, alpha=0.2, color='gray')\n","ax[1].axhline(100, color = 'k')\n","ax[1].set_title('Performance', fontsize = 15)\n","ax[1].legend(['45-degree set (exp 1) mean', \n","              '-15-degree set (generalization) mean', \n","              'Probe set mean', 'Chance performance',], loc='lower right')\n","# ax[1].set_xticks(np.arange(0, 100.1, 10))\n","ax[1].set_yticks(np.arange(40, 100.1, 10))\n","ax[1].set_xlabel('Epochs', fontsize = 15)\n","\n","# ax[1].grid()\n","\n","fig.tight_layout()\n","\n","plt.savefig('/content/drive/MyDrive/rhesus_category_learning_model/Learning NN/output_plots/Phy2_CORnet_performance_0.1_normal' + '.png', bbox_inches='tight')\n"]},{"cell_type":"code","execution_count":50,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":531},"executionInfo":{"elapsed":910,"status":"ok","timestamp":1686332242342,"user":{"displayName":"Jaehyuk Lim","userId":"09050886684299321629"},"user_tz":240},"id":"6ggz5pKdfbak","outputId":"ecef2972-ac57-4499-fad8-e8051eddfe03"},"outputs":[{"output_type":"display_data","data":{"text/plain":["array([0.77509456, 0.77509456, 0.77732122, ..., 0.92392611, 0.92411573,\n","       0.92424948])"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x500 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["\n","fig, ax = plt.subplots(1, 1, figsize=(10,5), facecolor='w', edgecolor='k', dpi = 100)\n","\n","ax.plot(train_losses_mean)\n","ax.plot(train_loss_rewarded_mean)\n","ax.plot(train_loss_unrewarded_mean)\n","ax.axhline(1, color = 'darkgray', ls = '--')\n","\n","display(train_losses_mean)\n","\n","ax.fill_between(range(num_epochs+1), train_losses_mean-train_losses_sem, train_losses_mean+train_losses_sem, alpha = 0.5)\n","ax.fill_between(range(num_epochs+1), train_loss_rewarded_mean-train_loss_rewarded_sem, train_loss_rewarded_mean+train_loss_rewarded_sem, alpha = 0.5)\n","ax.fill_between(range(num_epochs+1), train_loss_unrewarded_mean-train_loss_unrewarded_sem, train_loss_unrewarded_mean+train_loss_unrewarded_sem, alpha = 0.5)\n","\n","# ax.plot(test_performance_mean)\n","# ax.fill_between(range(num_epochs+1), test_performance_mean-test_performance_sem, test_performance_mean+test_performance_sem, alpha = 0.5)\n","\n","# ax.plot(test_loss_rewarded_mean)\n","# ax.fill_between(range(num_epochs+1), test_loss_rewarded_mean-test_loss_rewarded_sem, test_loss_rewarded_mean+test_loss_rewarded_sem, alpha = 0.5)\n","\n","# ax.plot(test_loss_unrewarded_mean)\n","# ax.fill_between(range(num_epochs+1), test_loss_unrewarded_mean-test_loss_unrewarded_sem, test_loss_unrewarded_mean+test_loss_unrewarded_sem, alpha = 0.5)\n","\n","# ax.axhline(50, color = 'darkgray', ls = '--', label = 'chance')\n","# ax.fill_betweenx(np.linspace(-10, 110, 100), 15, 60, alpha=0.2, color='gray')\n","\n","ax.legend(['45-degree set (exp 1)', '45-degree rewarded subset', '45-degree unrewarded subset', 'Perfect performance'], loc='lower right') #'45-degree set (exp 1) mean', '45-degree set (exp 1) SEM', \n","           #'45-degree rewarded subset mean', '45-degree rewarded subset SEM',\n","\n","# ax.set_yticks(np.arange(0, 100.1, 10))\n","# ax.set_xlim(-1,600)\n","ax.set_title(\"Experiment 1 Set\", fontsize = 15)\n","ax.set_xlabel(\"Epochs\", fontsize = 15)\n","ax.set_ylabel(\"Loss\", fontsize = 15)\n","ax.set_ylabel('Mean exp(loss)', fontsize = 15)\n","\n","# ax.grid()\n","\n","# display(test_loss_unrewarded.shape)\n","plt.savefig('/content/drive/MyDrive/rhesus_category_learning_model/Learning NN/output_plots/Phy2_CORnet_exp1_0.1_normal' + '.png', bbox_inches='tight')\n"]},{"cell_type":"code","execution_count":51,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":495},"executionInfo":{"elapsed":1551,"status":"ok","timestamp":1686332243892,"user":{"displayName":"Jaehyuk Lim","userId":"09050886684299321629"},"user_tz":240},"id":"siDc2_orfjBk","outputId":"d2d4c31f-143f-4395-c22e-da88537ad2f9"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x500 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["fig, ax = plt.subplots(1, 1, figsize=(10,5), facecolor='w', edgecolor='k', dpi = 100)\n","\n","ax.plot(train_losses_mean)\n","ax.plot(test_losses_mean)\n","ax.plot(test_loss_rewarded_mean)\n","ax.plot(test_loss_unrewarded_mean)\n","\n","ax.fill_between(range(num_epochs+1), train_losses_mean-train_losses_sem, train_losses_mean+train_losses_sem, alpha = 0.5)\n","ax.fill_between(range(num_epochs+1), test_losses_mean-test_losses_sem, test_losses_mean+test_losses_sem, alpha = 0.5)\n","ax.fill_between(range(num_epochs+1), test_loss_rewarded_mean-test_loss_rewarded_sem, test_loss_rewarded_mean+test_loss_rewarded_sem, alpha = 0.5)\n","ax.fill_between(range(num_epochs+1), test_loss_unrewarded_mean-test_loss_unrewarded_sem, test_loss_unrewarded_mean+test_loss_unrewarded_sem, alpha = 0.5)\n","\n","# ax.axhline(50, color = 'darkgray', ls = '--', label = 'chance')\n","# ax.fill_betweenx(np.linspace(-10, 110, 100), 15, 60, alpha=0.2, color='gray')\n","\n","ax.legend(['45-degree set (exp 1)', \n","           '-15-degree set (exp 2)', \n","           '-15-degree rewarded subset', \n","           '-15-degree unrewarded subset',\n","            ], loc='lower right') #'45-degree set (exp 1) mean', '45-degree set (exp 1) SEM', \n","           #'45-degree rewarded subset mean', '45-degree rewarded subset SEM',\n","\n","# ax.set_yticks(np.arange(0, 100.1, 10))\n","# ax.set_ylim(0,105)\n","ax.axhline(1, color = 'darkgray', ls = '--')\n","ax.set_title(\"Experiment 2 Set\", fontsize = 15)\n","\n","\n","ax.set_xlabel(\"Epochs\", fontsize = 15)\n","ax.set_ylabel('Mean exp(loss)', fontsize = 15)\n","plt.savefig('/content/drive/MyDrive/rhesus_category_learning_model/Learning NN/output_plots/Phy2_CORnet_exp2_0.1_normal' + '.png', bbox_inches='tight')"]},{"cell_type":"code","execution_count":52,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":495},"executionInfo":{"elapsed":1445,"status":"ok","timestamp":1686332245335,"user":{"displayName":"Jaehyuk Lim","userId":"09050886684299321629"},"user_tz":240},"id":"OgQYDFPMfjD4","outputId":"02ac5d4d-5db8-47a9-f35b-81ba9d11e15a"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x500 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["fig, ax = plt.subplots(1, 1, figsize=(10,5), facecolor='w', edgecolor='k', dpi = 100)\n","\n","ax.plot(train_losses_mean)\n","\n","ax.plot(probe_losses_mean)\n","ax.plot(probe_loss_rewarded_mean)\n","ax.plot(probe_loss_SOE_mean)\n","ax.plot(probe_loss_NE_mean)\n","ax.plot(probe_loss_unrewarded_mean)\n","\n","ax.fill_between(range(num_epochs+1), train_losses_mean-train_losses_sem, train_losses_mean+train_losses_sem, alpha = 0.5)\n","ax.fill_between(range(num_epochs+1), probe_losses_mean-probe_losses_sem, probe_losses_mean+probe_losses_sem, alpha = 0.5)\n","ax.fill_between(range(num_epochs+1), probe_loss_rewarded_mean-probe_loss_rewarded_sem, probe_loss_rewarded_mean+probe_loss_rewarded_sem, alpha = 0.5)\n","\n","ax.fill_between(range(num_epochs+1), probe_loss_SOE_mean-probe_loss_SOE_sem, probe_loss_SOE_mean+probe_loss_SOE_sem, alpha = 0.5)\n","ax.fill_between(range(num_epochs+1), probe_loss_NE_mean-probe_loss_NE_sem, probe_loss_NE_mean+probe_loss_NE_sem, alpha = 0.5)\n","# ax.fill_between(range(num_epochs+1), probe_loss_distractor_mean-probe_loss_distractor_sem, probe_loss_distractor_mean+probe_loss_distractor_sem, alpha = 0.5)\n","\n","# ax.axhline(50, color = 'darkgray', ls = '--', label = 'chance')\n","# ax.fill_betweenx(np.linspace(-10, 110, 100), 15, 60, alpha=0.2, color='gray')\n","\n","ax.legend(['45-degree set (exp 1)', \n","           'Probe set (exp 3)',\n","           'Probe prototype-shifted (SP)',\n","           'Probe exemplar-shifted (SOE)',\n","           'Probe new exemplar (NE)',\n","            ], loc='lower right')\n","\n","# ax.set_yticks(np.arange(0, 100.1, 10))\n","# ax.set_ylim(0,105)\n","# ax.grid()\n","\n","ax.set_title(\"Experiment 3 Set\", fontsize = 15)\n","ax.axhline(1, color = 'darkgray', ls = '--')\n","ax.set_xlabel(\"Epochs\", fontsize = 15)\n","ax.set_ylabel('Mean exp(loss)', fontsize = 15)\n","plt.savefig('/content/drive/MyDrive/rhesus_category_learning_model/Learning NN/output_plots/Phy2_CORnet_exp3_0.1_normal' + '.png', bbox_inches='tight')\n"]},{"cell_type":"code","source":["with open('/content/drive/MyDrive/rhesus_category_learning_model/Learning NN/pickles/Phy2_SP_over_SOE_0.1_normal.pkl', 'rb') as f:\n","  pickled = pickle.load(f)"],"metadata":{"id":"FHTE8irHi4Fm","executionInfo":{"status":"ok","timestamp":1686153124734,"user_tz":240,"elapsed":1,"user":{"displayName":"Jaehyuk Lim","userId":"09050886684299321629"}}},"execution_count":37,"outputs":[]},{"cell_type":"code","execution_count":53,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":495},"executionInfo":{"elapsed":1046,"status":"ok","timestamp":1686332246379,"user":{"displayName":"Jaehyuk Lim","userId":"09050886684299321629"},"user_tz":240},"id":"bspCVeNlfjMG","outputId":"3fe7512a-3999-49f0-8f8e-43d3c6da5e28"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x500 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["fig, ax = plt.subplots(1, 1, figsize=(10,5), facecolor='w', edgecolor='k', dpi = 100)\n","\n","ax.plot(probe_loss_SP_over_SOE_performance_mean)\n","ax.axhline(50, color = 'gray', ls = '--')\n","\n","ax.fill_between(range(num_epochs+1), probe_loss_SP_over_SOE_performance_mean-probe_loss_SP_over_SOE_performance_sem, probe_loss_SP_over_SOE_performance_mean+probe_loss_SP_over_SOE_performance_sem, alpha = 0.5)\n","\n","\n","# ax.axhline(50, color = 'darkgray', ls = '--', label = 'chance')\n","# ax.fill_betweenx(np.linspace(-10, 110, 100), 15, 60, alpha=0.2, color='gray')\n","\n","ax.legend(['SP > SOE', \n","           'Chance',\n","            ], loc = 'lower right')\n","\n","ax.set_yticks(np.arange(40, 100.1, 10))\n","# ax.set_ylim(0,105)\n","# ax.grid()\n","\n","ax.set_title(\"Experiment 3 SP > SOE Activation\", fontsize = 15)\n","ax.set_xlabel(\"Epochs\", fontsize = 15)\n","ax.set_ylabel('SP > SOE %', fontsize = 15)\n","\n","plt.savefig('/content/drive/MyDrive/rhesus_category_learning_model/Learning NN/output_plots/Phy2_CORnet_SP>SOE_0.1_normal' + '.png', bbox_inches='tight')\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"K8UqWwJUSnOQ"},"outputs":[],"source":[]}],"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPr9uG734waRLdKblen6AkX"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}